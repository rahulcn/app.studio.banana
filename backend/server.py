from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import asyncio
import os
import base64
from datetime import datetime
from dotenv import load_dotenv
import pymongo
from bson import ObjectId

# Import emergent integrations for NanoBanana
from emergentintegrations.llm.chat import LlmChat, UserMessage, ImageContent

# Load environment variables
load_dotenv()

app = FastAPI(
    title="AI Image Generator",
    description="NanoBanana AI Image Generation API",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# MongoDB connection
MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017")
client = pymongo.MongoClient(MONGO_URL)
db = client.image_generator
images_collection = db.images

# Models
class ImageGenerationRequest(BaseModel):
    prompt: str
    image_data: Optional[str] = None  # base64 encoded reference image
    prompt_category: Optional[str] = None
    style: Optional[str] = "photorealistic"

@app.get("/api/health")
async def health_check():
    return {"status": "healthy", "service": "ai-image-generator", "version": "1.0.0"}

@app.post("/api/generate-image")
async def generate_image(request: ImageGenerationRequest):
    """Generate or edit image using NanoBanana/Gemini 2.5 Flash Image"""
    try:
        print(f"üìù Received generation request: {request.prompt[:50]}...")
        
        # Get Emergent LLM key
        api_key = os.getenv("EMERGENT_LLM_KEY")
        if not api_key:
            raise HTTPException(status_code=500, detail="EMERGENT_LLM_KEY not found in environment")
        
        print(f"üîë Using Emergent LLM key: {api_key[:20]}...")
        
        # Create unique session ID
        session_id = f"img_gen_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}"
        
        # Initialize LLM chat with Gemini image model
        chat = LlmChat(
            api_key=api_key, 
            session_id=session_id, 
            system_message="You are an expert AI image generator. Create high-quality, detailed, visually stunning images based on user prompts. Focus on artistic composition, vivid colors, and creative interpretation."
        )
        
        print("ü§ñ Initializing Gemini 2.5 Flash Image model...")
        
        # Configure for image generation/editing with NanoBanana
        chat.with_model("gemini", "gemini-2.5-flash-image-preview").with_params(
            modalities=["image", "text"],
            temperature=0.8,
            max_tokens=1024
        )
        
        # Prepare message based on whether we have a reference image
        if request.image_data:
            print("üñºÔ∏è  Processing with reference image...")
            # Image editing/transformation mode
            enhanced_prompt = f"Transform this image: {request.prompt}. Style: {request.style or 'photorealistic'}. Make it visually stunning and high-quality."
            msg = UserMessage(
                text=enhanced_prompt,
                file_contents=[ImageContent(request.image_data)]
            )
        else:
            print("‚ú® Generating new image from text...")
            # Pure text-to-image generation
            enhanced_prompt = f"Create a beautiful, high-quality, detailed image: {request.prompt}. Style: {request.style or 'photorealistic'}. Focus on artistic composition and vivid details."
            msg = UserMessage(text=enhanced_prompt)
        
        print(f"üé® Sending request to NanoBanana API...")
        
        # Generate/edit image using NanoBanana
        text_response, images = await chat.send_message_multimodal_response(msg)
        
        print(f"üì® Received response from API. Images count: {len(images) if images else 0}")
        
        if not images or len(images) == 0:
            raise HTTPException(status_code=500, detail="No image generated by NanoBanana API. The model may be unavailable.")
        
        # Get the first generated image
        generated_image = images[0]
        image_base64 = generated_image.get('data', '')
        
        if not image_base64:
            raise HTTPException(status_code=500, detail="Generated image data is empty")
        
        print(f"‚úÖ Image generated successfully! Size: {len(image_base64)} chars")
        
        # Save to MongoDB
        image_doc = {
            "prompt": request.prompt,
            "generated_image": image_base64,
            "original_image": request.image_data if request.image_data else None,
            "created_at": datetime.now().isoformat(),
            "prompt_category": request.style,
            "ai_response": text_response[:500] if text_response else "",  # Truncate for storage
            "model": "gemini-2.5-flash-image-preview",
            "session_id": session_id
        }
        
        result = images_collection.insert_one(image_doc)
        image_id = str(result.inserted_id)
        
        print(f"üíæ Saved to database with ID: {image_id}")
        
        return {
            "id": image_id,
            "prompt": request.prompt,
            "generated_image": image_base64,
            "original_image": request.image_data,
            "created_at": image_doc["created_at"],
            "prompt_category": request.style,
            "success": True
        }
        
    except Exception as e:
        error_msg = f"Image generation failed: {str(e)}"
        print(f"‚ùå {error_msg}")
        raise HTTPException(status_code=500, detail=error_msg)

@app.get("/api/images")
async def get_images(limit: int = 20, skip: int = 0):
    """Get generated images history"""
    try:
        images = list(images_collection.find({})
                     .sort("created_at", -1)
                     .limit(limit)
                     .skip(skip))
        
        # Convert ObjectId to string
        for image in images:
            image["id"] = str(image["_id"])
            del image["_id"]
        
        return {"images": images}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching images: {str(e)}")

@app.get("/api/images/{image_id}")
async def get_image(image_id: str):
    """Get specific image by ID"""
    try:
        if not ObjectId.is_valid(image_id):
            raise HTTPException(status_code=400, detail="Invalid image ID")
        
        image = images_collection.find_one({"_id": ObjectId(image_id)})
        if not image:
            raise HTTPException(status_code=404, detail="Image not found")
        
        image["id"] = str(image["_id"])
        del image["_id"]
        
        return image
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error fetching image: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)