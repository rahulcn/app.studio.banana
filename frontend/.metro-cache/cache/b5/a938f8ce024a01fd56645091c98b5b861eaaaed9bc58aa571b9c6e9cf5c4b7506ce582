{"dependencies":[{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":49,"index":265},"end":{"line":6,"column":84,"index":300}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[0], \"./PostgrestFilterBuilder\"));\n  class PostgrestQueryBuilder {\n    constructor(url, {\n      headers = {},\n      schema,\n      fetch\n    }) {\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schema = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    select(columns, {\n      head = false,\n      count\n    } = {}) {\n      const method = head ? 'HEAD' : 'GET';\n      // Remove whitespaces except when quoted\n      let quoted = false;\n      const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. Only applies for bulk\n     * inserts.\n     */\n    insert(values, {\n      count,\n      defaultToNull = true\n    } = {}) {\n      var _a;\n      const method = 'POST';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      if (!defaultToNull) {\n        this.headers.append('Prefer', `missing=default`);\n      }\n      if (Array.isArray(values)) {\n        const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n        if (columns.length > 0) {\n          const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. This only applies when\n     * inserting new rows, not when merging with existing rows under\n     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n     */\n    upsert(values, {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true\n    } = {}) {\n      var _a;\n      const method = 'POST';\n      this.headers.append('Prefer', `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`);\n      if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      if (!defaultToNull) {\n        this.headers.append('Prefer', 'missing=default');\n      }\n      if (Array.isArray(values)) {\n        const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n        if (columns.length > 0) {\n          const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    update(values, {\n      count\n    } = {}) {\n      var _a;\n      const method = 'PATCH';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    delete({\n      count\n    } = {}) {\n      var _a;\n      const method = 'DELETE';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n  }\n  exports.default = PostgrestQueryBuilder;\n});","lineCount":272,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0],[12,8,6,6,"PostgrestFilterBuilder_1"],[12,32,6,30],[12,35,6,33,"__importDefault"],[12,50,6,48],[12,51,6,49,"require"],[12,58,6,56],[12,59,6,56,"_dependencyMap"],[12,73,6,56],[12,104,6,83],[12,105,6,84],[12,106,6,85],[13,2,7,0],[13,8,7,6,"PostgrestQueryBuilder"],[13,29,7,27],[13,30,7,28],[14,4,8,4,"constructor"],[14,15,8,15,"constructor"],[14,16,8,16,"url"],[14,19,8,19],[14,21,8,21],[15,6,8,23,"headers"],[15,13,8,30],[15,16,8,33],[15,17,8,34],[15,18,8,35],[16,6,8,37,"schema"],[16,12,8,43],[17,6,8,45,"fetch"],[18,4,8,52],[18,5,8,53],[18,7,8,55],[19,6,9,8],[19,10,9,12],[19,11,9,13,"url"],[19,14,9,16],[19,17,9,19,"url"],[19,20,9,22],[20,6,10,8],[20,10,10,12],[20,11,10,13,"headers"],[20,18,10,20],[20,21,10,23],[20,25,10,27,"Headers"],[20,32,10,34],[20,33,10,35,"headers"],[20,40,10,42],[20,41,10,43],[21,6,11,8],[21,10,11,12],[21,11,11,13,"schema"],[21,17,11,19],[21,20,11,22,"schema"],[21,26,11,28],[22,6,12,8],[22,10,12,12],[22,11,12,13,"fetch"],[22,16,12,18],[22,19,12,21,"fetch"],[22,24,12,26],[23,4,13,4],[24,4,14,4],[25,0,15,0],[26,0,16,0],[27,0,17,0],[28,0,18,0],[29,0,19,0],[30,0,20,0],[31,0,21,0],[32,0,22,0],[33,0,23,0],[34,0,24,0],[35,0,25,0],[36,0,26,0],[37,0,27,0],[38,0,28,0],[39,0,29,0],[40,0,30,0],[41,0,31,0],[42,0,32,0],[43,0,33,0],[44,0,34,0],[45,4,35,4,"select"],[45,10,35,10,"select"],[45,11,35,11,"columns"],[45,18,35,18],[45,20,35,20],[46,6,35,22,"head"],[46,10,35,26],[46,13,35,29],[46,18,35,34],[47,6,35,36,"count"],[48,4,35,43],[48,5,35,44],[48,8,35,47],[48,9,35,48],[48,10,35,49],[48,12,35,51],[49,6,36,8],[49,12,36,14,"method"],[49,18,36,20],[49,21,36,23,"head"],[49,25,36,27],[49,28,36,30],[49,34,36,36],[49,37,36,39],[49,42,36,44],[50,6,37,8],[51,6,38,8],[51,10,38,12,"quoted"],[51,16,38,18],[51,19,38,21],[51,24,38,26],[52,6,39,8],[52,12,39,14,"cleanedColumns"],[52,26,39,28],[52,29,39,31],[52,30,39,32,"columns"],[52,37,39,39],[52,42,39,44],[52,46,39,48],[52,50,39,52,"columns"],[52,57,39,59],[52,62,39,64],[52,67,39,69],[52,68,39,70],[52,71,39,73,"columns"],[52,78,39,80],[52,81,39,83],[52,84,39,86],[52,86,40,13,"split"],[52,91,40,18],[52,92,40,19],[52,94,40,21],[52,95,40,22],[52,96,41,13,"map"],[52,99,41,16],[52,100,41,18,"c"],[52,101,41,19],[52,105,41,24],[53,8,42,12],[53,12,42,16],[53,16,42,20],[53,17,42,21,"test"],[53,21,42,25],[53,22,42,26,"c"],[53,23,42,27],[53,24,42,28],[53,28,42,32],[53,29,42,33,"quoted"],[53,35,42,39],[53,37,42,41],[54,10,43,16],[54,17,43,23],[54,19,43,25],[55,8,44,12],[56,8,45,12],[56,12,45,16,"c"],[56,13,45,17],[56,18,45,22],[56,21,45,25],[56,23,45,27],[57,10,46,16,"quoted"],[57,16,46,22],[57,19,46,25],[57,20,46,26,"quoted"],[57,26,46,32],[58,8,47,12],[59,8,48,12],[59,15,48,19,"c"],[59,16,48,20],[60,6,49,8],[60,7,49,9],[60,8,49,10],[60,9,50,13,"join"],[60,13,50,17],[60,14,50,18],[60,16,50,20],[60,17,50,21],[61,6,51,8],[61,10,51,12],[61,11,51,13,"url"],[61,14,51,16],[61,15,51,17,"searchParams"],[61,27,51,29],[61,28,51,30,"set"],[61,31,51,33],[61,32,51,34],[61,40,51,42],[61,42,51,44,"cleanedColumns"],[61,56,51,58],[61,57,51,59],[62,6,52,8],[62,10,52,12,"count"],[62,15,52,17],[62,17,52,19],[63,8,53,12],[63,12,53,16],[63,13,53,17,"headers"],[63,20,53,24],[63,21,53,25,"append"],[63,27,53,31],[63,28,53,32],[63,36,53,40],[63,38,53,42],[63,47,53,51,"count"],[63,52,53,56],[63,54,53,58],[63,55,53,59],[64,6,54,8],[65,6,55,8],[65,13,55,15],[65,17,55,19,"PostgrestFilterBuilder_1"],[65,41,55,43],[65,42,55,44,"default"],[65,49,55,51],[65,50,55,52],[66,8,56,12,"method"],[66,14,56,18],[67,8,57,12,"url"],[67,11,57,15],[67,13,57,17],[67,17,57,21],[67,18,57,22,"url"],[67,21,57,25],[68,8,58,12,"headers"],[68,15,58,19],[68,17,58,21],[68,21,58,25],[68,22,58,26,"headers"],[68,29,58,33],[69,8,59,12,"schema"],[69,14,59,18],[69,16,59,20],[69,20,59,24],[69,21,59,25,"schema"],[69,27,59,31],[70,8,60,12,"fetch"],[70,13,60,17],[70,15,60,19],[70,19,60,23],[70,20,60,24,"fetch"],[71,6,61,8],[71,7,61,9],[71,8,61,10],[72,4,62,4],[73,4,63,4],[74,0,64,0],[75,0,65,0],[76,0,66,0],[77,0,67,0],[78,0,68,0],[79,0,69,0],[80,0,70,0],[81,0,71,0],[82,0,72,0],[83,0,73,0],[84,0,74,0],[85,0,75,0],[86,0,76,0],[87,0,77,0],[88,0,78,0],[89,0,79,0],[90,0,80,0],[91,0,81,0],[92,0,82,0],[93,0,83,0],[94,0,84,0],[95,0,85,0],[96,0,86,0],[97,0,87,0],[98,0,88,0],[99,4,89,4,"insert"],[99,10,89,10,"insert"],[99,11,89,11,"values"],[99,17,89,17],[99,19,89,19],[100,6,89,21,"count"],[100,11,89,26],[101,6,89,28,"defaultToNull"],[101,19,89,41],[101,22,89,44],[102,4,89,50],[102,5,89,51],[102,8,89,54],[102,9,89,55],[102,10,89,56],[102,12,89,58],[103,6,90,8],[103,10,90,12,"_a"],[103,12,90,14],[104,6,91,8],[104,12,91,14,"method"],[104,18,91,20],[104,21,91,23],[104,27,91,29],[105,6,92,8],[105,10,92,12,"count"],[105,15,92,17],[105,17,92,19],[106,8,93,12],[106,12,93,16],[106,13,93,17,"headers"],[106,20,93,24],[106,21,93,25,"append"],[106,27,93,31],[106,28,93,32],[106,36,93,40],[106,38,93,42],[106,47,93,51,"count"],[106,52,93,56],[106,54,93,58],[106,55,93,59],[107,6,94,8],[108,6,95,8],[108,10,95,12],[108,11,95,13,"defaultToNull"],[108,24,95,26],[108,26,95,28],[109,8,96,12],[109,12,96,16],[109,13,96,17,"headers"],[109,20,96,24],[109,21,96,25,"append"],[109,27,96,31],[109,28,96,32],[109,36,96,40],[109,38,96,42],[109,55,96,59],[109,56,96,60],[110,6,97,8],[111,6,98,8],[111,10,98,12,"Array"],[111,15,98,17],[111,16,98,18,"isArray"],[111,23,98,25],[111,24,98,26,"values"],[111,30,98,32],[111,31,98,33],[111,33,98,35],[112,8,99,12],[112,14,99,18,"columns"],[112,21,99,25],[112,24,99,28,"values"],[112,30,99,34],[112,31,99,35,"reduce"],[112,37,99,41],[112,38,99,42],[112,39,99,43,"acc"],[112,42,99,46],[112,44,99,48,"x"],[112,45,99,49],[112,50,99,54,"acc"],[112,53,99,57],[112,54,99,58,"concat"],[112,60,99,64],[112,61,99,65,"Object"],[112,67,99,71],[112,68,99,72,"keys"],[112,72,99,76],[112,73,99,77,"x"],[112,74,99,78],[112,75,99,79],[112,76,99,80],[112,78,99,82],[112,80,99,84],[112,81,99,85],[113,8,100,12],[113,12,100,16,"columns"],[113,19,100,23],[113,20,100,24,"length"],[113,26,100,30],[113,29,100,33],[113,30,100,34],[113,32,100,36],[114,10,101,16],[114,16,101,22,"uniqueColumns"],[114,29,101,35],[114,32,101,38],[114,33,101,39],[114,36,101,42],[114,40,101,46,"Set"],[114,43,101,49],[114,44,101,50,"columns"],[114,51,101,57],[114,52,101,58],[114,53,101,59],[114,54,101,60,"map"],[114,57,101,63],[114,58,101,65,"column"],[114,64,101,71],[114,68,101,76],[114,72,101,80,"column"],[114,78,101,86],[114,81,101,89],[114,82,101,90],[115,10,102,16],[115,14,102,20],[115,15,102,21,"url"],[115,18,102,24],[115,19,102,25,"searchParams"],[115,31,102,37],[115,32,102,38,"set"],[115,35,102,41],[115,36,102,42],[115,45,102,51],[115,47,102,53,"uniqueColumns"],[115,60,102,66],[115,61,102,67,"join"],[115,65,102,71],[115,66,102,72],[115,69,102,75],[115,70,102,76],[115,71,102,77],[116,8,103,12],[117,6,104,8],[118,6,105,8],[118,13,105,15],[118,17,105,19,"PostgrestFilterBuilder_1"],[118,41,105,43],[118,42,105,44,"default"],[118,49,105,51],[118,50,105,52],[119,8,106,12,"method"],[119,14,106,18],[120,8,107,12,"url"],[120,11,107,15],[120,13,107,17],[120,17,107,21],[120,18,107,22,"url"],[120,21,107,25],[121,8,108,12,"headers"],[121,15,108,19],[121,17,108,21],[121,21,108,25],[121,22,108,26,"headers"],[121,29,108,33],[122,8,109,12,"schema"],[122,14,109,18],[122,16,109,20],[122,20,109,24],[122,21,109,25,"schema"],[122,27,109,31],[123,8,110,12,"body"],[123,12,110,16],[123,14,110,18,"values"],[123,20,110,24],[124,8,111,12,"fetch"],[124,13,111,17],[124,15,111,19],[124,16,111,20,"_a"],[124,18,111,22],[124,21,111,25],[124,25,111,29],[124,26,111,30,"fetch"],[124,31,111,35],[124,37,111,41],[124,41,111,45],[124,45,111,49,"_a"],[124,47,111,51],[124,52,111,56],[124,57,111,61],[124,58,111,62],[124,61,111,65,"_a"],[124,63,111,67],[124,66,111,70,"fetch"],[125,6,112,8],[125,7,112,9],[125,8,112,10],[126,4,113,4],[127,4,114,4],[128,0,115,0],[129,0,116,0],[130,0,117,0],[131,0,118,0],[132,0,119,0],[133,0,120,0],[134,0,121,0],[135,0,122,0],[136,0,123,0],[137,0,124,0],[138,0,125,0],[139,0,126,0],[140,0,127,0],[141,0,128,0],[142,0,129,0],[143,0,130,0],[144,0,131,0],[145,0,132,0],[146,0,133,0],[147,0,134,0],[148,0,135,0],[149,0,136,0],[150,0,137,0],[151,0,138,0],[152,0,139,0],[153,0,140,0],[154,0,141,0],[155,0,142,0],[156,0,143,0],[157,0,144,0],[158,0,145,0],[159,0,146,0],[160,0,147,0],[161,0,148,0],[162,0,149,0],[163,0,150,0],[164,0,151,0],[165,4,152,4,"upsert"],[165,10,152,10,"upsert"],[165,11,152,11,"values"],[165,17,152,17],[165,19,152,19],[166,6,152,21,"onConflict"],[166,16,152,31],[167,6,152,33,"ignoreDuplicates"],[167,22,152,49],[167,25,152,52],[167,30,152,57],[168,6,152,59,"count"],[168,11,152,64],[169,6,152,66,"defaultToNull"],[169,19,152,79],[169,22,152,82],[170,4,152,88],[170,5,152,89],[170,8,152,92],[170,9,152,93],[170,10,152,94],[170,12,152,96],[171,6,153,8],[171,10,153,12,"_a"],[171,12,153,14],[172,6,154,8],[172,12,154,14,"method"],[172,18,154,20],[172,21,154,23],[172,27,154,29],[173,6,155,8],[173,10,155,12],[173,11,155,13,"headers"],[173,18,155,20],[173,19,155,21,"append"],[173,25,155,27],[173,26,155,28],[173,34,155,36],[173,36,155,38],[173,50,155,52,"ignoreDuplicates"],[173,66,155,68],[173,69,155,71],[173,77,155,79],[173,80,155,82],[173,87,155,89],[173,100,155,102],[173,101,155,103],[174,6,156,8],[174,10,156,12,"onConflict"],[174,20,156,22],[174,25,156,27,"undefined"],[174,34,156,36],[174,36,157,12],[174,40,157,16],[174,41,157,17,"url"],[174,44,157,20],[174,45,157,21,"searchParams"],[174,57,157,33],[174,58,157,34,"set"],[174,61,157,37],[174,62,157,38],[174,75,157,51],[174,77,157,53,"onConflict"],[174,87,157,63],[174,88,157,64],[175,6,158,8],[175,10,158,12,"count"],[175,15,158,17],[175,17,158,19],[176,8,159,12],[176,12,159,16],[176,13,159,17,"headers"],[176,20,159,24],[176,21,159,25,"append"],[176,27,159,31],[176,28,159,32],[176,36,159,40],[176,38,159,42],[176,47,159,51,"count"],[176,52,159,56],[176,54,159,58],[176,55,159,59],[177,6,160,8],[178,6,161,8],[178,10,161,12],[178,11,161,13,"defaultToNull"],[178,24,161,26],[178,26,161,28],[179,8,162,12],[179,12,162,16],[179,13,162,17,"headers"],[179,20,162,24],[179,21,162,25,"append"],[179,27,162,31],[179,28,162,32],[179,36,162,40],[179,38,162,42],[179,55,162,59],[179,56,162,60],[180,6,163,8],[181,6,164,8],[181,10,164,12,"Array"],[181,15,164,17],[181,16,164,18,"isArray"],[181,23,164,25],[181,24,164,26,"values"],[181,30,164,32],[181,31,164,33],[181,33,164,35],[182,8,165,12],[182,14,165,18,"columns"],[182,21,165,25],[182,24,165,28,"values"],[182,30,165,34],[182,31,165,35,"reduce"],[182,37,165,41],[182,38,165,42],[182,39,165,43,"acc"],[182,42,165,46],[182,44,165,48,"x"],[182,45,165,49],[182,50,165,54,"acc"],[182,53,165,57],[182,54,165,58,"concat"],[182,60,165,64],[182,61,165,65,"Object"],[182,67,165,71],[182,68,165,72,"keys"],[182,72,165,76],[182,73,165,77,"x"],[182,74,165,78],[182,75,165,79],[182,76,165,80],[182,78,165,82],[182,80,165,84],[182,81,165,85],[183,8,166,12],[183,12,166,16,"columns"],[183,19,166,23],[183,20,166,24,"length"],[183,26,166,30],[183,29,166,33],[183,30,166,34],[183,32,166,36],[184,10,167,16],[184,16,167,22,"uniqueColumns"],[184,29,167,35],[184,32,167,38],[184,33,167,39],[184,36,167,42],[184,40,167,46,"Set"],[184,43,167,49],[184,44,167,50,"columns"],[184,51,167,57],[184,52,167,58],[184,53,167,59],[184,54,167,60,"map"],[184,57,167,63],[184,58,167,65,"column"],[184,64,167,71],[184,68,167,76],[184,72,167,80,"column"],[184,78,167,86],[184,81,167,89],[184,82,167,90],[185,10,168,16],[185,14,168,20],[185,15,168,21,"url"],[185,18,168,24],[185,19,168,25,"searchParams"],[185,31,168,37],[185,32,168,38,"set"],[185,35,168,41],[185,36,168,42],[185,45,168,51],[185,47,168,53,"uniqueColumns"],[185,60,168,66],[185,61,168,67,"join"],[185,65,168,71],[185,66,168,72],[185,69,168,75],[185,70,168,76],[185,71,168,77],[186,8,169,12],[187,6,170,8],[188,6,171,8],[188,13,171,15],[188,17,171,19,"PostgrestFilterBuilder_1"],[188,41,171,43],[188,42,171,44,"default"],[188,49,171,51],[188,50,171,52],[189,8,172,12,"method"],[189,14,172,18],[190,8,173,12,"url"],[190,11,173,15],[190,13,173,17],[190,17,173,21],[190,18,173,22,"url"],[190,21,173,25],[191,8,174,12,"headers"],[191,15,174,19],[191,17,174,21],[191,21,174,25],[191,22,174,26,"headers"],[191,29,174,33],[192,8,175,12,"schema"],[192,14,175,18],[192,16,175,20],[192,20,175,24],[192,21,175,25,"schema"],[192,27,175,31],[193,8,176,12,"body"],[193,12,176,16],[193,14,176,18,"values"],[193,20,176,24],[194,8,177,12,"fetch"],[194,13,177,17],[194,15,177,19],[194,16,177,20,"_a"],[194,18,177,22],[194,21,177,25],[194,25,177,29],[194,26,177,30,"fetch"],[194,31,177,35],[194,37,177,41],[194,41,177,45],[194,45,177,49,"_a"],[194,47,177,51],[194,52,177,56],[194,57,177,61],[194,58,177,62],[194,61,177,65,"_a"],[194,63,177,67],[194,66,177,70,"fetch"],[195,6,178,8],[195,7,178,9],[195,8,178,10],[196,4,179,4],[197,4,180,4],[198,0,181,0],[199,0,182,0],[200,0,183,0],[201,0,184,0],[202,0,185,0],[203,0,186,0],[204,0,187,0],[205,0,188,0],[206,0,189,0],[207,0,190,0],[208,0,191,0],[209,0,192,0],[210,0,193,0],[211,0,194,0],[212,0,195,0],[213,0,196,0],[214,0,197,0],[215,0,198,0],[216,0,199,0],[217,0,200,0],[218,4,201,4,"update"],[218,10,201,10,"update"],[218,11,201,11,"values"],[218,17,201,17],[218,19,201,19],[219,6,201,21,"count"],[220,4,201,28],[220,5,201,29],[220,8,201,32],[220,9,201,33],[220,10,201,34],[220,12,201,36],[221,6,202,8],[221,10,202,12,"_a"],[221,12,202,14],[222,6,203,8],[222,12,203,14,"method"],[222,18,203,20],[222,21,203,23],[222,28,203,30],[223,6,204,8],[223,10,204,12,"count"],[223,15,204,17],[223,17,204,19],[224,8,205,12],[224,12,205,16],[224,13,205,17,"headers"],[224,20,205,24],[224,21,205,25,"append"],[224,27,205,31],[224,28,205,32],[224,36,205,40],[224,38,205,42],[224,47,205,51,"count"],[224,52,205,56],[224,54,205,58],[224,55,205,59],[225,6,206,8],[226,6,207,8],[226,13,207,15],[226,17,207,19,"PostgrestFilterBuilder_1"],[226,41,207,43],[226,42,207,44,"default"],[226,49,207,51],[226,50,207,52],[227,8,208,12,"method"],[227,14,208,18],[228,8,209,12,"url"],[228,11,209,15],[228,13,209,17],[228,17,209,21],[228,18,209,22,"url"],[228,21,209,25],[229,8,210,12,"headers"],[229,15,210,19],[229,17,210,21],[229,21,210,25],[229,22,210,26,"headers"],[229,29,210,33],[230,8,211,12,"schema"],[230,14,211,18],[230,16,211,20],[230,20,211,24],[230,21,211,25,"schema"],[230,27,211,31],[231,8,212,12,"body"],[231,12,212,16],[231,14,212,18,"values"],[231,20,212,24],[232,8,213,12,"fetch"],[232,13,213,17],[232,15,213,19],[232,16,213,20,"_a"],[232,18,213,22],[232,21,213,25],[232,25,213,29],[232,26,213,30,"fetch"],[232,31,213,35],[232,37,213,41],[232,41,213,45],[232,45,213,49,"_a"],[232,47,213,51],[232,52,213,56],[232,57,213,61],[232,58,213,62],[232,61,213,65,"_a"],[232,63,213,67],[232,66,213,70,"fetch"],[233,6,214,8],[233,7,214,9],[233,8,214,10],[234,4,215,4],[235,4,216,4],[236,0,217,0],[237,0,218,0],[238,0,219,0],[239,0,220,0],[240,0,221,0],[241,0,222,0],[242,0,223,0],[243,0,224,0],[244,0,225,0],[245,0,226,0],[246,0,227,0],[247,0,228,0],[248,0,229,0],[249,0,230,0],[250,0,231,0],[251,0,232,0],[252,0,233,0],[253,0,234,0],[254,4,235,4,"delete"],[254,10,235,10,"delete"],[254,11,235,11],[255,6,235,13,"count"],[256,4,235,20],[256,5,235,21],[256,8,235,24],[256,9,235,25],[256,10,235,26],[256,12,235,28],[257,6,236,8],[257,10,236,12,"_a"],[257,12,236,14],[258,6,237,8],[258,12,237,14,"method"],[258,18,237,20],[258,21,237,23],[258,29,237,31],[259,6,238,8],[259,10,238,12,"count"],[259,15,238,17],[259,17,238,19],[260,8,239,12],[260,12,239,16],[260,13,239,17,"headers"],[260,20,239,24],[260,21,239,25,"append"],[260,27,239,31],[260,28,239,32],[260,36,239,40],[260,38,239,42],[260,47,239,51,"count"],[260,52,239,56],[260,54,239,58],[260,55,239,59],[261,6,240,8],[262,6,241,8],[262,13,241,15],[262,17,241,19,"PostgrestFilterBuilder_1"],[262,41,241,43],[262,42,241,44,"default"],[262,49,241,51],[262,50,241,52],[263,8,242,12,"method"],[263,14,242,18],[264,8,243,12,"url"],[264,11,243,15],[264,13,243,17],[264,17,243,21],[264,18,243,22,"url"],[264,21,243,25],[265,8,244,12,"headers"],[265,15,244,19],[265,17,244,21],[265,21,244,25],[265,22,244,26,"headers"],[265,29,244,33],[266,8,245,12,"schema"],[266,14,245,18],[266,16,245,20],[266,20,245,24],[266,21,245,25,"schema"],[266,27,245,31],[267,8,246,12,"fetch"],[267,13,246,17],[267,15,246,19],[267,16,246,20,"_a"],[267,18,246,22],[267,21,246,25],[267,25,246,29],[267,26,246,30,"fetch"],[267,31,246,35],[267,37,246,41],[267,41,246,45],[267,45,246,49,"_a"],[267,47,246,51],[267,52,246,56],[267,57,246,61],[267,58,246,62],[267,61,246,65,"_a"],[267,63,246,67],[267,66,246,70,"fetch"],[268,6,247,8],[268,7,247,9],[268,8,247,10],[269,4,248,4],[270,2,249,0],[271,2,250,0,"exports"],[271,9,250,7],[271,10,250,8,"default"],[271,17,250,15],[271,20,250,18,"PostgrestQueryBuilder"],[271,41,250,39],[272,0,250,40],[272,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestQueryBuilder","constructor","select","split.map$argument_0","insert","values.reduce$argument_0","map$argument_0","upsert","update","_delete"],"mappings":"AAA;wDCC;CDE;AEG;ICC;KDK;IEsB;iBCM;SDQ;KFa;II2B;0CCU,sCD;gEEE,yBF;KJY;IOuC;0CFa,sCE;gEDE,yBC;KPY;IQsB;KRc;ISoB;KTa;CFC"},"hasCjsExports":true},"type":"js/module"}]}