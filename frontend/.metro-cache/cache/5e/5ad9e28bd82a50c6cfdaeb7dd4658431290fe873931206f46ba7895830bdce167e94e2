{"dependencies":[{"name":"@supabase/node-fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":37,"index":267},"end":{"line":7,"column":68,"index":298}}],"key":"N2iHN7T/eRWsO1F+2LWpBs4eG0U=","exportNames":["*"],"imports":1}},{"name":"./PostgrestError","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":41,"index":342},"end":{"line":8,"column":68,"index":369}}],"key":"Ek2QNNEtzKsk35jS8iyuZ6VFiDk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  // @ts-ignore\n  const node_fetch_1 = __importDefault(require(_dependencyMap[0], \"@supabase/node-fetch\"));\n  const PostgrestError_1 = __importDefault(require(_dependencyMap[1], \"./PostgrestError\"));\n  class PostgrestBuilder {\n    constructor(builder) {\n      var _a, _b;\n      this.shouldThrowOnError = false;\n      this.method = builder.method;\n      this.url = builder.url;\n      this.headers = new Headers(builder.headers);\n      this.schema = builder.schema;\n      this.body = builder.body;\n      this.shouldThrowOnError = (_a = builder.shouldThrowOnError) !== null && _a !== void 0 ? _a : false;\n      this.signal = builder.signal;\n      this.isMaybeSingle = (_b = builder.isMaybeSingle) !== null && _b !== void 0 ? _b : false;\n      if (builder.fetch) {\n        this.fetch = builder.fetch;\n      } else if (typeof fetch === 'undefined') {\n        this.fetch = node_fetch_1.default;\n      } else {\n        this.fetch = fetch;\n      }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Set an HTTP header for the request.\n     */\n    setHeader(name, value) {\n      this.headers = new Headers(this.headers);\n      this.headers.set(name, value);\n      return this;\n    }\n    then(onfulfilled, onrejected) {\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (this.schema === undefined) {\n        // skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers.set('Accept-Profile', this.schema);\n      } else {\n        this.headers.set('Content-Profile', this.schema);\n      }\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers.set('Content-Type', 'application/json');\n      }\n      // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n      // https://github.com/supabase/postgrest-js/pull/247\n      const _fetch = this.fetch;\n      let res = _fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then(async res => {\n        var _a, _b, _c, _d;\n        let error = null;\n        let data = null;\n        let count = null;\n        let status = res.status;\n        let statusText = res.statusText;\n        if (res.ok) {\n          if (this.method !== 'HEAD') {\n            const body = await res.text();\n            if (body === '') {\n              // Prefer: return=minimal\n            } else if (this.headers.get('Accept') === 'text/csv') {\n              data = body;\n            } else if (this.headers.get('Accept') && ((_a = this.headers.get('Accept')) === null || _a === void 0 ? void 0 : _a.includes('application/vnd.pgrst.plan+text'))) {\n              data = body;\n            } else {\n              data = JSON.parse(body);\n            }\n          }\n          const countHeader = (_b = this.headers.get('Prefer')) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n          const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n          if (countHeader && contentRange && contentRange.length > 1) {\n            count = parseInt(contentRange[1]);\n          }\n          // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n          // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n          if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n            if (data.length > 1) {\n              error = {\n                // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                code: 'PGRST116',\n                details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                hint: null,\n                message: 'JSON object requested, multiple (or no) rows returned'\n              };\n              data = null;\n              count = null;\n              status = 406;\n              statusText = 'Not Acceptable';\n            } else if (data.length === 1) {\n              data = data[0];\n            } else {\n              data = null;\n            }\n          }\n        } else {\n          const body = await res.text();\n          try {\n            error = JSON.parse(body);\n            // Workaround for https://github.com/supabase/postgrest-js/issues/295\n            if (Array.isArray(error) && res.status === 404) {\n              data = [];\n              error = null;\n              status = 200;\n              statusText = 'OK';\n            }\n          } catch (_e) {\n            // Workaround for https://github.com/supabase/postgrest-js/issues/295\n            if (res.status === 404 && body === '') {\n              status = 204;\n              statusText = 'No Content';\n            } else {\n              error = {\n                message: body\n              };\n            }\n          }\n          if (error && this.isMaybeSingle && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('0 rows'))) {\n            error = null;\n            status = 200;\n            statusText = 'OK';\n          }\n          if (error && this.shouldThrowOnError) {\n            throw new PostgrestError_1.default(error);\n          }\n        }\n        const postgrestResponse = {\n          error,\n          data,\n          count,\n          status,\n          statusText\n        };\n        return postgrestResponse;\n      });\n      if (!this.shouldThrowOnError) {\n        res = res.catch(fetchError => {\n          var _a, _b, _c;\n          return {\n            error: {\n              message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n              details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n              hint: '',\n              code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`\n            },\n            data: null,\n            count: null,\n            status: 0,\n            statusText: ''\n          };\n        });\n      }\n      return res.then(onfulfilled, onrejected);\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n     */\n    returns() {\n      /* istanbul ignore next */\n      return this;\n    }\n    /**\n     * Override the type of the returned `data` field in the response.\n     *\n     * @typeParam NewResult - The new type to cast the response data to\n     * @typeParam Options - Optional type configuration (defaults to { merge: true })\n     * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\n     * @example\n     * ```typescript\n     * // Merge with existing types (default behavior)\n     * const query = supabase\n     *   .from('users')\n     *   .select()\n     *   .overrideTypes<{ custom_field: string }>()\n     *\n     * // Replace existing types completely\n     * const replaceQuery = supabase\n     *   .from('users')\n     *   .select()\n     *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\n     * ```\n     * @returns A PostgrestBuilder instance with the new type\n     */\n    overrideTypes() {\n      return this;\n    }\n  }\n  exports.default = PostgrestBuilder;\n});","lineCount":215,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0],[13,2,7,0],[13,8,7,6,"node_fetch_1"],[13,20,7,18],[13,23,7,21,"__importDefault"],[13,38,7,36],[13,39,7,37,"require"],[13,46,7,44],[13,47,7,44,"_dependencyMap"],[13,61,7,44],[13,88,7,67],[13,89,7,68],[13,90,7,69],[14,2,8,0],[14,8,8,6,"PostgrestError_1"],[14,24,8,22],[14,27,8,25,"__importDefault"],[14,42,8,40],[14,43,8,41,"require"],[14,50,8,48],[14,51,8,48,"_dependencyMap"],[14,65,8,48],[14,88,8,67],[14,89,8,68],[14,90,8,69],[15,2,9,0],[15,8,9,6,"PostgrestBuilder"],[15,24,9,22],[15,25,9,23],[16,4,10,4,"constructor"],[16,15,10,15,"constructor"],[16,16,10,16,"builder"],[16,23,10,23],[16,25,10,25],[17,6,11,8],[17,10,11,12,"_a"],[17,12,11,14],[17,14,11,16,"_b"],[17,16,11,18],[18,6,12,8],[18,10,12,12],[18,11,12,13,"shouldThrowOnError"],[18,29,12,31],[18,32,12,34],[18,37,12,39],[19,6,13,8],[19,10,13,12],[19,11,13,13,"method"],[19,17,13,19],[19,20,13,22,"builder"],[19,27,13,29],[19,28,13,30,"method"],[19,34,13,36],[20,6,14,8],[20,10,14,12],[20,11,14,13,"url"],[20,14,14,16],[20,17,14,19,"builder"],[20,24,14,26],[20,25,14,27,"url"],[20,28,14,30],[21,6,15,8],[21,10,15,12],[21,11,15,13,"headers"],[21,18,15,20],[21,21,15,23],[21,25,15,27,"Headers"],[21,32,15,34],[21,33,15,35,"builder"],[21,40,15,42],[21,41,15,43,"headers"],[21,48,15,50],[21,49,15,51],[22,6,16,8],[22,10,16,12],[22,11,16,13,"schema"],[22,17,16,19],[22,20,16,22,"builder"],[22,27,16,29],[22,28,16,30,"schema"],[22,34,16,36],[23,6,17,8],[23,10,17,12],[23,11,17,13,"body"],[23,15,17,17],[23,18,17,20,"builder"],[23,25,17,27],[23,26,17,28,"body"],[23,30,17,32],[24,6,18,8],[24,10,18,12],[24,11,18,13,"shouldThrowOnError"],[24,29,18,31],[24,32,18,34],[24,33,18,35,"_a"],[24,35,18,37],[24,38,18,40,"builder"],[24,45,18,47],[24,46,18,48,"shouldThrowOnError"],[24,64,18,66],[24,70,18,72],[24,74,18,76],[24,78,18,80,"_a"],[24,80,18,82],[24,85,18,87],[24,90,18,92],[24,91,18,93],[24,94,18,96,"_a"],[24,96,18,98],[24,99,18,101],[24,104,18,106],[25,6,19,8],[25,10,19,12],[25,11,19,13,"signal"],[25,17,19,19],[25,20,19,22,"builder"],[25,27,19,29],[25,28,19,30,"signal"],[25,34,19,36],[26,6,20,8],[26,10,20,12],[26,11,20,13,"isMaybeSingle"],[26,24,20,26],[26,27,20,29],[26,28,20,30,"_b"],[26,30,20,32],[26,33,20,35,"builder"],[26,40,20,42],[26,41,20,43,"isMaybeSingle"],[26,54,20,56],[26,60,20,62],[26,64,20,66],[26,68,20,70,"_b"],[26,70,20,72],[26,75,20,77],[26,80,20,82],[26,81,20,83],[26,84,20,86,"_b"],[26,86,20,88],[26,89,20,91],[26,94,20,96],[27,6,21,8],[27,10,21,12,"builder"],[27,17,21,19],[27,18,21,20,"fetch"],[27,23,21,25],[27,25,21,27],[28,8,22,12],[28,12,22,16],[28,13,22,17,"fetch"],[28,18,22,22],[28,21,22,25,"builder"],[28,28,22,32],[28,29,22,33,"fetch"],[28,34,22,38],[29,6,23,8],[29,7,23,9],[29,13,24,13],[29,17,24,17],[29,24,24,24,"fetch"],[29,29,24,29],[29,34,24,34],[29,45,24,45],[29,47,24,47],[30,8,25,12],[30,12,25,16],[30,13,25,17,"fetch"],[30,18,25,22],[30,21,25,25,"node_fetch_1"],[30,33,25,37],[30,34,25,38,"default"],[30,41,25,45],[31,6,26,8],[31,7,26,9],[31,13,27,13],[32,8,28,12],[32,12,28,16],[32,13,28,17,"fetch"],[32,18,28,22],[32,21,28,25,"fetch"],[32,26,28,30],[33,6,29,8],[34,4,30,4],[35,4,31,4],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,4,37,4,"throwOnError"],[41,16,37,16,"throwOnError"],[41,17,37,16],[41,19,37,19],[42,6,38,8],[42,10,38,12],[42,11,38,13,"shouldThrowOnError"],[42,29,38,31],[42,32,38,34],[42,36,38,38],[43,6,39,8],[43,13,39,15],[43,17,39,19],[44,4,40,4],[45,4,41,4],[46,0,42,0],[47,0,43,0],[48,4,44,4,"setHeader"],[48,13,44,13,"setHeader"],[48,14,44,14,"name"],[48,18,44,18],[48,20,44,20,"value"],[48,25,44,25],[48,27,44,27],[49,6,45,8],[49,10,45,12],[49,11,45,13,"headers"],[49,18,45,20],[49,21,45,23],[49,25,45,27,"Headers"],[49,32,45,34],[49,33,45,35],[49,37,45,39],[49,38,45,40,"headers"],[49,45,45,47],[49,46,45,48],[50,6,46,8],[50,10,46,12],[50,11,46,13,"headers"],[50,18,46,20],[50,19,46,21,"set"],[50,22,46,24],[50,23,46,25,"name"],[50,27,46,29],[50,29,46,31,"value"],[50,34,46,36],[50,35,46,37],[51,6,47,8],[51,13,47,15],[51,17,47,19],[52,4,48,4],[53,4,49,4,"then"],[53,8,49,8,"then"],[53,9,49,9,"onfulfilled"],[53,20,49,20],[53,22,49,22,"onrejected"],[53,32,49,32],[53,34,49,34],[54,6,50,8],[55,6,51,8],[55,10,51,12],[55,14,51,16],[55,15,51,17,"schema"],[55,21,51,23],[55,26,51,28,"undefined"],[55,35,51,37],[55,37,51,39],[56,8,52,12],[57,6,52,12],[57,7,53,9],[57,13,54,13],[57,17,54,17],[57,18,54,18],[57,23,54,23],[57,25,54,25],[57,31,54,31],[57,32,54,32],[57,33,54,33,"includes"],[57,41,54,41],[57,42,54,42],[57,46,54,46],[57,47,54,47,"method"],[57,53,54,53],[57,54,54,54],[57,56,54,56],[58,8,55,12],[58,12,55,16],[58,13,55,17,"headers"],[58,20,55,24],[58,21,55,25,"set"],[58,24,55,28],[58,25,55,29],[58,41,55,45],[58,43,55,47],[58,47,55,51],[58,48,55,52,"schema"],[58,54,55,58],[58,55,55,59],[59,6,56,8],[59,7,56,9],[59,13,57,13],[60,8,58,12],[60,12,58,16],[60,13,58,17,"headers"],[60,20,58,24],[60,21,58,25,"set"],[60,24,58,28],[60,25,58,29],[60,42,58,46],[60,44,58,48],[60,48,58,52],[60,49,58,53,"schema"],[60,55,58,59],[60,56,58,60],[61,6,59,8],[62,6,60,8],[62,10,60,12],[62,14,60,16],[62,15,60,17,"method"],[62,21,60,23],[62,26,60,28],[62,31,60,33],[62,35,60,37],[62,39,60,41],[62,40,60,42,"method"],[62,46,60,48],[62,51,60,53],[62,57,60,59],[62,59,60,61],[63,8,61,12],[63,12,61,16],[63,13,61,17,"headers"],[63,20,61,24],[63,21,61,25,"set"],[63,24,61,28],[63,25,61,29],[63,39,61,43],[63,41,61,45],[63,59,61,63],[63,60,61,64],[64,6,62,8],[65,6,63,8],[66,6,64,8],[67,6,65,8],[67,12,65,14,"_fetch"],[67,18,65,20],[67,21,65,23],[67,25,65,27],[67,26,65,28,"fetch"],[67,31,65,33],[68,6,66,8],[68,10,66,12,"res"],[68,13,66,15],[68,16,66,18,"_fetch"],[68,22,66,24],[68,23,66,25],[68,27,66,29],[68,28,66,30,"url"],[68,31,66,33],[68,32,66,34,"toString"],[68,40,66,42],[68,41,66,43],[68,42,66,44],[68,44,66,46],[69,8,67,12,"method"],[69,14,67,18],[69,16,67,20],[69,20,67,24],[69,21,67,25,"method"],[69,27,67,31],[70,8,68,12,"headers"],[70,15,68,19],[70,17,68,21],[70,21,68,25],[70,22,68,26,"headers"],[70,29,68,33],[71,8,69,12,"body"],[71,12,69,16],[71,14,69,18,"JSON"],[71,18,69,22],[71,19,69,23,"stringify"],[71,28,69,32],[71,29,69,33],[71,33,69,37],[71,34,69,38,"body"],[71,38,69,42],[71,39,69,43],[72,8,70,12,"signal"],[72,14,70,18],[72,16,70,20],[72,20,70,24],[72,21,70,25,"signal"],[73,6,71,8],[73,7,71,9],[73,8,71,10],[73,9,71,11,"then"],[73,13,71,15],[73,14,71,16],[73,20,71,23,"res"],[73,23,71,26],[73,27,71,31],[74,8,72,12],[74,12,72,16,"_a"],[74,14,72,18],[74,16,72,20,"_b"],[74,18,72,22],[74,20,72,24,"_c"],[74,22,72,26],[74,24,72,28,"_d"],[74,26,72,30],[75,8,73,12],[75,12,73,16,"error"],[75,17,73,21],[75,20,73,24],[75,24,73,28],[76,8,74,12],[76,12,74,16,"data"],[76,16,74,20],[76,19,74,23],[76,23,74,27],[77,8,75,12],[77,12,75,16,"count"],[77,17,75,21],[77,20,75,24],[77,24,75,28],[78,8,76,12],[78,12,76,16,"status"],[78,18,76,22],[78,21,76,25,"res"],[78,24,76,28],[78,25,76,29,"status"],[78,31,76,35],[79,8,77,12],[79,12,77,16,"statusText"],[79,22,77,26],[79,25,77,29,"res"],[79,28,77,32],[79,29,77,33,"statusText"],[79,39,77,43],[80,8,78,12],[80,12,78,16,"res"],[80,15,78,19],[80,16,78,20,"ok"],[80,18,78,22],[80,20,78,24],[81,10,79,16],[81,14,79,20],[81,18,79,24],[81,19,79,25,"method"],[81,25,79,31],[81,30,79,36],[81,36,79,42],[81,38,79,44],[82,12,80,20],[82,18,80,26,"body"],[82,22,80,30],[82,25,80,33],[82,31,80,39,"res"],[82,34,80,42],[82,35,80,43,"text"],[82,39,80,47],[82,40,80,48],[82,41,80,49],[83,12,81,20],[83,16,81,24,"body"],[83,20,81,28],[83,25,81,33],[83,27,81,35],[83,29,81,37],[84,14,82,24],[85,12,82,24],[85,13,83,21],[85,19,84,25],[85,23,84,29],[85,27,84,33],[85,28,84,34,"headers"],[85,35,84,41],[85,36,84,42,"get"],[85,39,84,45],[85,40,84,46],[85,48,84,54],[85,49,84,55],[85,54,84,60],[85,64,84,70],[85,66,84,72],[86,14,85,24,"data"],[86,18,85,28],[86,21,85,31,"body"],[86,25,85,35],[87,12,86,20],[87,13,86,21],[87,19,87,25],[87,23,87,29],[87,27,87,33],[87,28,87,34,"headers"],[87,35,87,41],[87,36,87,42,"get"],[87,39,87,45],[87,40,87,46],[87,48,87,54],[87,49,87,55],[87,54,88,25],[87,55,88,26,"_a"],[87,57,88,28],[87,60,88,31],[87,64,88,35],[87,65,88,36,"headers"],[87,72,88,43],[87,73,88,44,"get"],[87,76,88,47],[87,77,88,48],[87,85,88,56],[87,86,88,57],[87,92,88,63],[87,96,88,67],[87,100,88,71,"_a"],[87,102,88,73],[87,107,88,78],[87,112,88,83],[87,113,88,84],[87,116,88,87],[87,121,88,92],[87,122,88,93],[87,125,88,96,"_a"],[87,127,88,98],[87,128,88,99,"includes"],[87,136,88,107],[87,137,88,108],[87,170,88,141],[87,171,88,142],[87,172,88,143],[87,174,88,145],[88,14,89,24,"data"],[88,18,89,28],[88,21,89,31,"body"],[88,25,89,35],[89,12,90,20],[89,13,90,21],[89,19,91,25],[90,14,92,24,"data"],[90,18,92,28],[90,21,92,31,"JSON"],[90,25,92,35],[90,26,92,36,"parse"],[90,31,92,41],[90,32,92,42,"body"],[90,36,92,46],[90,37,92,47],[91,12,93,20],[92,10,94,16],[93,10,95,16],[93,16,95,22,"countHeader"],[93,27,95,33],[93,30,95,36],[93,31,95,37,"_b"],[93,33,95,39],[93,36,95,42],[93,40,95,46],[93,41,95,47,"headers"],[93,48,95,54],[93,49,95,55,"get"],[93,52,95,58],[93,53,95,59],[93,61,95,67],[93,62,95,68],[93,68,95,74],[93,72,95,78],[93,76,95,82,"_b"],[93,78,95,84],[93,83,95,89],[93,88,95,94],[93,89,95,95],[93,92,95,98],[93,97,95,103],[93,98,95,104],[93,101,95,107,"_b"],[93,103,95,109],[93,104,95,110,"match"],[93,109,95,115],[93,110,95,116],[93,143,95,149],[93,144,95,150],[94,10,96,16],[94,16,96,22,"contentRange"],[94,28,96,34],[94,31,96,37],[94,32,96,38,"_c"],[94,34,96,40],[94,37,96,43,"res"],[94,40,96,46],[94,41,96,47,"headers"],[94,48,96,54],[94,49,96,55,"get"],[94,52,96,58],[94,53,96,59],[94,68,96,74],[94,69,96,75],[94,75,96,81],[94,79,96,85],[94,83,96,89,"_c"],[94,85,96,91],[94,90,96,96],[94,95,96,101],[94,96,96,102],[94,99,96,105],[94,104,96,110],[94,105,96,111],[94,108,96,114,"_c"],[94,110,96,116],[94,111,96,117,"split"],[94,116,96,122],[94,117,96,123],[94,120,96,126],[94,121,96,127],[95,10,97,16],[95,14,97,20,"countHeader"],[95,25,97,31],[95,29,97,35,"contentRange"],[95,41,97,47],[95,45,97,51,"contentRange"],[95,57,97,63],[95,58,97,64,"length"],[95,64,97,70],[95,67,97,73],[95,68,97,74],[95,70,97,76],[96,12,98,20,"count"],[96,17,98,25],[96,20,98,28,"parseInt"],[96,28,98,36],[96,29,98,37,"contentRange"],[96,41,98,49],[96,42,98,50],[96,43,98,51],[96,44,98,52],[96,45,98,53],[97,10,99,16],[98,10,100,16],[99,10,101,16],[100,10,102,16],[100,14,102,20],[100,18,102,24],[100,19,102,25,"isMaybeSingle"],[100,32,102,38],[100,36,102,42],[100,40,102,46],[100,41,102,47,"method"],[100,47,102,53],[100,52,102,58],[100,57,102,63],[100,61,102,67,"Array"],[100,66,102,72],[100,67,102,73,"isArray"],[100,74,102,80],[100,75,102,81,"data"],[100,79,102,85],[100,80,102,86],[100,82,102,88],[101,12,103,20],[101,16,103,24,"data"],[101,20,103,28],[101,21,103,29,"length"],[101,27,103,35],[101,30,103,38],[101,31,103,39],[101,33,103,41],[102,14,104,24,"error"],[102,19,104,29],[102,22,104,32],[103,16,105,28],[104,16,106,28,"code"],[104,20,106,32],[104,22,106,34],[104,32,106,44],[105,16,107,28,"details"],[105,23,107,35],[105,25,107,37],[105,44,107,56,"data"],[105,48,107,60],[105,49,107,61,"length"],[105,55,107,67],[105,112,107,124],[106,16,108,28,"hint"],[106,20,108,32],[106,22,108,34],[106,26,108,38],[107,16,109,28,"message"],[107,23,109,35],[107,25,109,37],[108,14,110,24],[108,15,110,25],[109,14,111,24,"data"],[109,18,111,28],[109,21,111,31],[109,25,111,35],[110,14,112,24,"count"],[110,19,112,29],[110,22,112,32],[110,26,112,36],[111,14,113,24,"status"],[111,20,113,30],[111,23,113,33],[111,26,113,36],[112,14,114,24,"statusText"],[112,24,114,34],[112,27,114,37],[112,43,114,53],[113,12,115,20],[113,13,115,21],[113,19,116,25],[113,23,116,29,"data"],[113,27,116,33],[113,28,116,34,"length"],[113,34,116,40],[113,39,116,45],[113,40,116,46],[113,42,116,48],[114,14,117,24,"data"],[114,18,117,28],[114,21,117,31,"data"],[114,25,117,35],[114,26,117,36],[114,27,117,37],[114,28,117,38],[115,12,118,20],[115,13,118,21],[115,19,119,25],[116,14,120,24,"data"],[116,18,120,28],[116,21,120,31],[116,25,120,35],[117,12,121,20],[118,10,122,16],[119,8,123,12],[119,9,123,13],[119,15,124,17],[120,10,125,16],[120,16,125,22,"body"],[120,20,125,26],[120,23,125,29],[120,29,125,35,"res"],[120,32,125,38],[120,33,125,39,"text"],[120,37,125,43],[120,38,125,44],[120,39,125,45],[121,10,126,16],[121,14,126,20],[122,12,127,20,"error"],[122,17,127,25],[122,20,127,28,"JSON"],[122,24,127,32],[122,25,127,33,"parse"],[122,30,127,38],[122,31,127,39,"body"],[122,35,127,43],[122,36,127,44],[123,12,128,20],[124,12,129,20],[124,16,129,24,"Array"],[124,21,129,29],[124,22,129,30,"isArray"],[124,29,129,37],[124,30,129,38,"error"],[124,35,129,43],[124,36,129,44],[124,40,129,48,"res"],[124,43,129,51],[124,44,129,52,"status"],[124,50,129,58],[124,55,129,63],[124,58,129,66],[124,60,129,68],[125,14,130,24,"data"],[125,18,130,28],[125,21,130,31],[125,23,130,33],[126,14,131,24,"error"],[126,19,131,29],[126,22,131,32],[126,26,131,36],[127,14,132,24,"status"],[127,20,132,30],[127,23,132,33],[127,26,132,36],[128,14,133,24,"statusText"],[128,24,133,34],[128,27,133,37],[128,31,133,41],[129,12,134,20],[130,10,135,16],[130,11,135,17],[130,12,136,16],[130,19,136,23,"_e"],[130,21,136,25],[130,23,136,27],[131,12,137,20],[132,12,138,20],[132,16,138,24,"res"],[132,19,138,27],[132,20,138,28,"status"],[132,26,138,34],[132,31,138,39],[132,34,138,42],[132,38,138,46,"body"],[132,42,138,50],[132,47,138,55],[132,49,138,57],[132,51,138,59],[133,14,139,24,"status"],[133,20,139,30],[133,23,139,33],[133,26,139,36],[134,14,140,24,"statusText"],[134,24,140,34],[134,27,140,37],[134,39,140,49],[135,12,141,20],[135,13,141,21],[135,19,142,25],[136,14,143,24,"error"],[136,19,143,29],[136,22,143,32],[137,16,144,28,"message"],[137,23,144,35],[137,25,144,37,"body"],[138,14,145,24],[138,15,145,25],[139,12,146,20],[140,10,147,16],[141,10,148,16],[141,14,148,20,"error"],[141,19,148,25],[141,23,148,29],[141,27,148,33],[141,28,148,34,"isMaybeSingle"],[141,41,148,47],[141,46,148,52],[141,47,148,53,"_d"],[141,49,148,55],[141,52,148,58,"error"],[141,57,148,63],[141,62,148,68],[141,66,148,72],[141,70,148,76,"error"],[141,75,148,81],[141,80,148,86],[141,85,148,91],[141,86,148,92],[141,89,148,95],[141,94,148,100],[141,95,148,101],[141,98,148,104,"error"],[141,103,148,109],[141,104,148,110,"details"],[141,111,148,117],[141,117,148,123],[141,121,148,127],[141,125,148,131,"_d"],[141,127,148,133],[141,132,148,138],[141,137,148,143],[141,138,148,144],[141,141,148,147],[141,146,148,152],[141,147,148,153],[141,150,148,156,"_d"],[141,152,148,158],[141,153,148,159,"includes"],[141,161,148,167],[141,162,148,168],[141,170,148,176],[141,171,148,177],[141,172,148,178],[141,174,148,180],[142,12,149,20,"error"],[142,17,149,25],[142,20,149,28],[142,24,149,32],[143,12,150,20,"status"],[143,18,150,26],[143,21,150,29],[143,24,150,32],[144,12,151,20,"statusText"],[144,22,151,30],[144,25,151,33],[144,29,151,37],[145,10,152,16],[146,10,153,16],[146,14,153,20,"error"],[146,19,153,25],[146,23,153,29],[146,27,153,33],[146,28,153,34,"shouldThrowOnError"],[146,46,153,52],[146,48,153,54],[147,12,154,20],[147,18,154,26],[147,22,154,30,"PostgrestError_1"],[147,38,154,46],[147,39,154,47,"default"],[147,46,154,54],[147,47,154,55,"error"],[147,52,154,60],[147,53,154,61],[148,10,155,16],[149,8,156,12],[150,8,157,12],[150,14,157,18,"postgrestResponse"],[150,31,157,35],[150,34,157,38],[151,10,158,16,"error"],[151,15,158,21],[152,10,159,16,"data"],[152,14,159,20],[153,10,160,16,"count"],[153,15,160,21],[154,10,161,16,"status"],[154,16,161,22],[155,10,162,16,"statusText"],[156,8,163,12],[156,9,163,13],[157,8,164,12],[157,15,164,19,"postgrestResponse"],[157,32,164,36],[158,6,165,8],[158,7,165,9],[158,8,165,10],[159,6,166,8],[159,10,166,12],[159,11,166,13],[159,15,166,17],[159,16,166,18,"shouldThrowOnError"],[159,34,166,36],[159,36,166,38],[160,8,167,12,"res"],[160,11,167,15],[160,14,167,18,"res"],[160,17,167,21],[160,18,167,22,"catch"],[160,23,167,27],[160,24,167,29,"fetchError"],[160,34,167,39],[160,38,167,44],[161,10,168,16],[161,14,168,20,"_a"],[161,16,168,22],[161,18,168,24,"_b"],[161,20,168,26],[161,22,168,28,"_c"],[161,24,168,30],[162,10,169,16],[162,17,169,24],[163,12,170,20,"error"],[163,17,170,25],[163,19,170,27],[164,14,171,24,"message"],[164,21,171,31],[164,23,171,33],[164,26,171,36],[164,27,171,37,"_a"],[164,29,171,39],[164,32,171,42,"fetchError"],[164,42,171,52],[164,47,171,57],[164,51,171,61],[164,55,171,65,"fetchError"],[164,65,171,75],[164,70,171,80],[164,75,171,85],[164,76,171,86],[164,79,171,89],[164,84,171,94],[164,85,171,95],[164,88,171,98,"fetchError"],[164,98,171,108],[164,99,171,109,"name"],[164,103,171,113],[164,109,171,119],[164,113,171,123],[164,117,171,127,"_a"],[164,119,171,129],[164,124,171,134],[164,129,171,139],[164,130,171,140],[164,133,171,143,"_a"],[164,135,171,145],[164,138,171,148],[164,150,171,160],[164,155,171,165,"fetchError"],[164,165,171,175],[164,170,171,180],[164,174,171,184],[164,178,171,188,"fetchError"],[164,188,171,198],[164,193,171,203],[164,198,171,208],[164,199,171,209],[164,202,171,212],[164,207,171,217],[164,208,171,218],[164,211,171,221,"fetchError"],[164,221,171,231],[164,222,171,232,"message"],[164,229,171,239],[164,231,171,241],[165,14,172,24,"details"],[165,21,172,31],[165,23,172,33],[165,26,172,36],[165,27,172,37,"_b"],[165,29,172,39],[165,32,172,42,"fetchError"],[165,42,172,52],[165,47,172,57],[165,51,172,61],[165,55,172,65,"fetchError"],[165,65,172,75],[165,70,172,80],[165,75,172,85],[165,76,172,86],[165,79,172,89],[165,84,172,94],[165,85,172,95],[165,88,172,98,"fetchError"],[165,98,172,108],[165,99,172,109,"stack"],[165,104,172,114],[165,110,172,120],[165,114,172,124],[165,118,172,128,"_b"],[165,120,172,130],[165,125,172,135],[165,130,172,140],[165,131,172,141],[165,134,172,144,"_b"],[165,136,172,146],[165,139,172,149],[165,141,172,151],[165,143,172,153],[166,14,173,24,"hint"],[166,18,173,28],[166,20,173,30],[166,22,173,32],[167,14,174,24,"code"],[167,18,174,28],[167,20,174,30],[167,23,174,33],[167,24,174,34,"_c"],[167,26,174,36],[167,29,174,39,"fetchError"],[167,39,174,49],[167,44,174,54],[167,48,174,58],[167,52,174,62,"fetchError"],[167,62,174,72],[167,67,174,77],[167,72,174,82],[167,73,174,83],[167,76,174,86],[167,81,174,91],[167,82,174,92],[167,85,174,95,"fetchError"],[167,95,174,105],[167,96,174,106,"code"],[167,100,174,110],[167,106,174,116],[167,110,174,120],[167,114,174,124,"_c"],[167,116,174,126],[167,121,174,131],[167,126,174,136],[167,127,174,137],[167,130,174,140,"_c"],[167,132,174,142],[167,135,174,145],[167,137,174,147],[168,12,175,20],[168,13,175,21],[169,12,176,20,"data"],[169,16,176,24],[169,18,176,26],[169,22,176,30],[170,12,177,20,"count"],[170,17,177,25],[170,19,177,27],[170,23,177,31],[171,12,178,20,"status"],[171,18,178,26],[171,20,178,28],[171,21,178,29],[172,12,179,20,"statusText"],[172,22,179,30],[172,24,179,32],[173,10,180,16],[173,11,180,17],[174,8,181,12],[174,9,181,13],[174,10,181,14],[175,6,182,8],[176,6,183,8],[176,13,183,15,"res"],[176,16,183,18],[176,17,183,19,"then"],[176,21,183,23],[176,22,183,24,"onfulfilled"],[176,33,183,35],[176,35,183,37,"onrejected"],[176,45,183,47],[176,46,183,48],[177,4,184,4],[178,4,185,4],[179,0,186,0],[180,0,187,0],[181,0,188,0],[182,0,189,0],[183,0,190,0],[184,4,191,4,"returns"],[184,11,191,11,"returns"],[184,12,191,11],[184,14,191,14],[185,6,192,8],[186,6,193,8],[186,13,193,15],[186,17,193,19],[187,4,194,4],[188,4,195,4],[189,0,196,0],[190,0,197,0],[191,0,198,0],[192,0,199,0],[193,0,200,0],[194,0,201,0],[195,0,202,0],[196,0,203,0],[197,0,204,0],[198,0,205,0],[199,0,206,0],[200,0,207,0],[201,0,208,0],[202,0,209,0],[203,0,210,0],[204,0,211,0],[205,0,212,0],[206,0,213,0],[207,0,214,0],[208,0,215,0],[209,0,216,0],[210,4,217,4,"overrideTypes"],[210,17,217,17,"overrideTypes"],[210,18,217,17],[210,20,217,20],[211,6,218,8],[211,13,218,15],[211,17,218,19],[212,4,219,4],[213,2,220,0],[214,2,221,0,"exports"],[214,9,221,7],[214,10,221,8,"default"],[214,17,221,15],[214,20,221,18,"PostgrestBuilder"],[214,36,221,34],[215,0,221,35],[215,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestBuilder","constructor","throwOnError","setHeader","then","_fetch.then$argument_0","res._catch$argument_0","returns","overrideTypes"],"mappings":"AAA;wDCC;CDE;AEK;ICC;KDoB;IEO;KFG;IGI;KHI;IIC;gBCsB;SD8F;4BEE;aFc;KJG;IOO;KPG;IQuB;KRE;CFC"},"hasCjsExports":true},"type":"js/module"}]}