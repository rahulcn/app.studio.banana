{"dependencies":[{"name":"./PostgrestQueryBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":48,"index":264},"end":{"line":6,"column":82,"index":298}}],"key":"6yLSRkTCaGyTSQvLUJvo14aYbi8=","exportNames":["*"],"imports":1}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":49,"index":350},"end":{"line":7,"column":84,"index":385}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const PostgrestQueryBuilder_1 = __importDefault(require(_dependencyMap[0], \"./PostgrestQueryBuilder\"));\n  const PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[1], \"./PostgrestFilterBuilder\"));\n  /**\n   * PostgREST client.\n   *\n   * @typeParam Database - Types for the schema from the [type\n   * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n   *\n   * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n   * literal, the same one passed to the constructor. If the schema is not\n   * `\"public\"`, this must be supplied manually.\n   */\n  class PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, {\n      headers = {},\n      schema,\n      fetch\n    } = {}) {\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schemaName = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n      const url = new URL(`${this.url}/${relation}`);\n      return new PostgrestQueryBuilder_1.default(url, {\n        headers: new Headers(this.headers),\n        schema: this.schemaName,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n      return new PostgrestClient(this.url, {\n        headers: this.headers,\n        schema,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, {\n      head = false,\n      get = false,\n      count\n    } = {}) {\n      var _a;\n      let method;\n      const url = new URL(`${this.url}/rpc/${fn}`);\n      let body;\n      if (head || get) {\n        method = head ? 'HEAD' : 'GET';\n        Object.entries(args)\n        // params with undefined value needs to be filtered out, otherwise it'll\n        // show up as `?param=undefined`\n        .filter(([_, value]) => value !== undefined)\n        // array values need special syntax\n        .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`]).forEach(([name, value]) => {\n          url.searchParams.append(name, value);\n        });\n      } else {\n        method = 'POST';\n        body = args;\n      }\n      const headers = new Headers(this.headers);\n      if (count) {\n        headers.set('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url,\n        headers,\n        schema: this.schemaName,\n        body,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n  }\n  exports.default = PostgrestClient;\n});","lineCount":133,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0],[12,8,6,6,"PostgrestQueryBuilder_1"],[12,31,6,29],[12,34,6,32,"__importDefault"],[12,49,6,47],[12,50,6,48,"require"],[12,57,6,55],[12,58,6,55,"_dependencyMap"],[12,72,6,55],[12,102,6,81],[12,103,6,82],[12,104,6,83],[13,2,7,0],[13,8,7,6,"PostgrestFilterBuilder_1"],[13,32,7,30],[13,35,7,33,"__importDefault"],[13,50,7,48],[13,51,7,49,"require"],[13,58,7,56],[13,59,7,56,"_dependencyMap"],[13,73,7,56],[13,104,7,83],[13,105,7,84],[13,106,7,85],[14,2,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,2,18,0],[24,8,18,6,"PostgrestClient"],[24,23,18,21],[24,24,18,22],[25,4,19,4],[26,4,20,4],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,4,29,4,"constructor"],[35,15,29,15,"constructor"],[35,16,29,16,"url"],[35,19,29,19],[35,21,29,21],[36,6,29,23,"headers"],[36,13,29,30],[36,16,29,33],[36,17,29,34],[36,18,29,35],[37,6,29,37,"schema"],[37,12,29,43],[38,6,29,45,"fetch"],[39,4,29,52],[39,5,29,53],[39,8,29,56],[39,9,29,57],[39,10,29,58],[39,12,29,60],[40,6,30,8],[40,10,30,12],[40,11,30,13,"url"],[40,14,30,16],[40,17,30,19,"url"],[40,20,30,22],[41,6,31,8],[41,10,31,12],[41,11,31,13,"headers"],[41,18,31,20],[41,21,31,23],[41,25,31,27,"Headers"],[41,32,31,34],[41,33,31,35,"headers"],[41,40,31,42],[41,41,31,43],[42,6,32,8],[42,10,32,12],[42,11,32,13,"schemaName"],[42,21,32,23],[42,24,32,26,"schema"],[42,30,32,32],[43,6,33,8],[43,10,33,12],[43,11,33,13,"fetch"],[43,16,33,18],[43,19,33,21,"fetch"],[43,24,33,26],[44,4,34,4],[45,4,35,4],[46,0,36,0],[47,0,37,0],[48,0,38,0],[49,0,39,0],[50,4,40,4,"from"],[50,8,40,8,"from"],[50,9,40,9,"relation"],[50,17,40,17],[50,19,40,19],[51,6,41,8],[51,12,41,14,"url"],[51,15,41,17],[51,18,41,20],[51,22,41,24,"URL"],[51,25,41,27],[51,26,41,28],[51,29,41,31],[51,33,41,35],[51,34,41,36,"url"],[51,37,41,39],[51,41,41,43,"relation"],[51,49,41,51],[51,51,41,53],[51,52,41,54],[52,6,42,8],[52,13,42,15],[52,17,42,19,"PostgrestQueryBuilder_1"],[52,40,42,42],[52,41,42,43,"default"],[52,48,42,50],[52,49,42,51,"url"],[52,52,42,54],[52,54,42,56],[53,8,43,12,"headers"],[53,15,43,19],[53,17,43,21],[53,21,43,25,"Headers"],[53,28,43,32],[53,29,43,33],[53,33,43,37],[53,34,43,38,"headers"],[53,41,43,45],[53,42,43,46],[54,8,44,12,"schema"],[54,14,44,18],[54,16,44,20],[54,20,44,24],[54,21,44,25,"schemaName"],[54,31,44,35],[55,8,45,12,"fetch"],[55,13,45,17],[55,15,45,19],[55,19,45,23],[55,20,45,24,"fetch"],[56,6,46,8],[56,7,46,9],[56,8,46,10],[57,4,47,4],[58,4,48,4],[59,0,49,0],[60,0,50,0],[61,0,51,0],[62,0,52,0],[63,0,53,0],[64,0,54,0],[65,4,55,4,"schema"],[65,10,55,10,"schema"],[65,11,55,11,"schema"],[65,17,55,17],[65,19,55,19],[66,6,56,8],[66,13,56,15],[66,17,56,19,"PostgrestClient"],[66,32,56,34],[66,33,56,35],[66,37,56,39],[66,38,56,40,"url"],[66,41,56,43],[66,43,56,45],[67,8,57,12,"headers"],[67,15,57,19],[67,17,57,21],[67,21,57,25],[67,22,57,26,"headers"],[67,29,57,33],[68,8,58,12,"schema"],[68,14,58,18],[69,8,59,12,"fetch"],[69,13,59,17],[69,15,59,19],[69,19,59,23],[69,20,59,24,"fetch"],[70,6,60,8],[70,7,60,9],[70,8,60,10],[71,4,61,4],[72,4,62,4],[73,0,63,0],[74,0,64,0],[75,0,65,0],[76,0,66,0],[77,0,67,0],[78,0,68,0],[79,0,69,0],[80,0,70,0],[81,0,71,0],[82,0,72,0],[83,0,73,0],[84,0,74,0],[85,0,75,0],[86,0,76,0],[87,0,77,0],[88,0,78,0],[89,0,79,0],[90,0,80,0],[91,0,81,0],[92,0,82,0],[93,0,83,0],[94,0,84,0],[95,4,85,4,"rpc"],[95,7,85,7,"rpc"],[95,8,85,8,"fn"],[95,10,85,10],[95,12,85,12,"args"],[95,16,85,16],[95,19,85,19],[95,20,85,20],[95,21,85,21],[95,23,85,23],[96,6,85,25,"head"],[96,10,85,29],[96,13,85,32],[96,18,85,37],[97,6,85,39,"get"],[97,9,85,42],[97,12,85,45],[97,17,85,50],[98,6,85,52,"count"],[99,4,85,59],[99,5,85,60],[99,8,85,63],[99,9,85,64],[99,10,85,65],[99,12,85,67],[100,6,86,8],[100,10,86,12,"_a"],[100,12,86,14],[101,6,87,8],[101,10,87,12,"method"],[101,16,87,18],[102,6,88,8],[102,12,88,14,"url"],[102,15,88,17],[102,18,88,20],[102,22,88,24,"URL"],[102,25,88,27],[102,26,88,28],[102,29,88,31],[102,33,88,35],[102,34,88,36,"url"],[102,37,88,39],[102,45,88,47,"fn"],[102,47,88,49],[102,49,88,51],[102,50,88,52],[103,6,89,8],[103,10,89,12,"body"],[103,14,89,16],[104,6,90,8],[104,10,90,12,"head"],[104,14,90,16],[104,18,90,20,"get"],[104,21,90,23],[104,23,90,25],[105,8,91,12,"method"],[105,14,91,18],[105,17,91,21,"head"],[105,21,91,25],[105,24,91,28],[105,30,91,34],[105,33,91,37],[105,38,91,42],[106,8,92,12,"Object"],[106,14,92,18],[106,15,92,19,"entries"],[106,22,92,26],[106,23,92,27,"args"],[106,27,92,31],[107,8,93,16],[108,8,94,16],[109,8,94,16],[109,9,95,17,"filter"],[109,15,95,23],[109,16,95,24],[109,17,95,25],[109,18,95,26,"_"],[109,19,95,27],[109,21,95,29,"value"],[109,26,95,34],[109,27,95,35],[109,32,95,40,"value"],[109,37,95,45],[109,42,95,50,"undefined"],[109,51,95,59],[110,8,96,16],[111,8,96,16],[111,9,97,17,"map"],[111,12,97,20],[111,13,97,21],[111,14,97,22],[111,15,97,23,"name"],[111,19,97,27],[111,21,97,29,"value"],[111,26,97,34],[111,27,97,35],[111,32,97,40],[111,33,97,41,"name"],[111,37,97,45],[111,39,97,47,"Array"],[111,44,97,52],[111,45,97,53,"isArray"],[111,52,97,60],[111,53,97,61,"value"],[111,58,97,66],[111,59,97,67],[111,62,97,70],[111,66,97,74,"value"],[111,71,97,79],[111,72,97,80,"join"],[111,76,97,84],[111,77,97,85],[111,80,97,88],[111,81,97,89],[111,84,97,92],[111,87,97,95],[111,90,97,98,"value"],[111,95,97,103],[111,97,97,105],[111,98,97,106],[111,99,97,107],[111,100,98,17,"forEach"],[111,107,98,24],[111,108,98,25],[111,109,98,26],[111,110,98,27,"name"],[111,114,98,31],[111,116,98,33,"value"],[111,121,98,38],[111,122,98,39],[111,127,98,44],[112,10,99,16,"url"],[112,13,99,19],[112,14,99,20,"searchParams"],[112,26,99,32],[112,27,99,33,"append"],[112,33,99,39],[112,34,99,40,"name"],[112,38,99,44],[112,40,99,46,"value"],[112,45,99,51],[112,46,99,52],[113,8,100,12],[113,9,100,13],[113,10,100,14],[114,6,101,8],[114,7,101,9],[114,13,102,13],[115,8,103,12,"method"],[115,14,103,18],[115,17,103,21],[115,23,103,27],[116,8,104,12,"body"],[116,12,104,16],[116,15,104,19,"args"],[116,19,104,23],[117,6,105,8],[118,6,106,8],[118,12,106,14,"headers"],[118,19,106,21],[118,22,106,24],[118,26,106,28,"Headers"],[118,33,106,35],[118,34,106,36],[118,38,106,40],[118,39,106,41,"headers"],[118,46,106,48],[118,47,106,49],[119,6,107,8],[119,10,107,12,"count"],[119,15,107,17],[119,17,107,19],[120,8,108,12,"headers"],[120,15,108,19],[120,16,108,20,"set"],[120,19,108,23],[120,20,108,24],[120,28,108,32],[120,30,108,34],[120,39,108,43,"count"],[120,44,108,48],[120,46,108,50],[120,47,108,51],[121,6,109,8],[122,6,110,8],[122,13,110,15],[122,17,110,19,"PostgrestFilterBuilder_1"],[122,41,110,43],[122,42,110,44,"default"],[122,49,110,51],[122,50,110,52],[123,8,111,12,"method"],[123,14,111,18],[124,8,112,12,"url"],[124,11,112,15],[125,8,113,12,"headers"],[125,15,113,19],[126,8,114,12,"schema"],[126,14,114,18],[126,16,114,20],[126,20,114,24],[126,21,114,25,"schemaName"],[126,31,114,35],[127,8,115,12,"body"],[127,12,115,16],[128,8,116,12,"fetch"],[128,13,116,17],[128,15,116,19],[128,16,116,20,"_a"],[128,18,116,22],[128,21,116,25],[128,25,116,29],[128,26,116,30,"fetch"],[128,31,116,35],[128,37,116,41],[128,41,116,45],[128,45,116,49,"_a"],[128,47,116,51],[128,52,116,56],[128,57,116,61],[128,58,116,62],[128,61,116,65,"_a"],[128,63,116,67],[128,66,116,70,"fetch"],[129,6,117,8],[129,7,117,9],[129,8,117,10],[130,4,118,4],[131,2,119,0],[132,2,120,0,"exports"],[132,9,120,7],[132,10,120,8,"default"],[132,17,120,15],[132,20,120,18,"PostgrestClient"],[132,35,120,33],[133,0,120,34],[133,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestClient","constructor","from","schema","rpc","Object.entries.filter$argument_0","Object.entries.filter.map$argument_0","Object.entries.filter.map.forEach$argument_0"],"mappings":"AAA;wDCC;CDE;AEc;ICW;KDK;IEM;KFO;IGQ;KHM;IIwB;wBCU,mCD;qBEE,qFF;yBGC;aHE;KJkB;CFC"},"hasCjsExports":true},"type":"js/module"}]}