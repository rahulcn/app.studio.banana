{"dependencies":[{"name":"./GoTrueAdminApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"C5wTnt0gil7oSFkESSK1fbFt+2Q=","exportNames":["*"],"imports":1}},{"name":"./lib/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":164,"index":211}}],"key":"heoF0ph3MRKcRke4Rxium863E4Y=","exportNames":["*"],"imports":1}},{"name":"./lib/errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":212},"end":{"line":3,"column":336,"index":548}}],"key":"NUE3c/K+JVzkrn4COE7BqSQ6w3g=","exportNames":["*"],"imports":1}},{"name":"./lib/fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":549},"end":{"line":4,"column":113,"index":662}}],"key":"mfxfw+TXFuuoirEoeTmeetM0zAE=","exportNames":["*"],"imports":1}},{"name":"./lib/helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":663},"end":{"line":5,"column":281,"index":944}}],"key":"xyb/Bi1HyEtpUX+YnhWJXXRPw1E=","exportNames":["*"],"imports":1}},{"name":"./lib/local-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":945},"end":{"line":6,"column":64,"index":1009}}],"key":"VpxVJy8OOX3gpmfaL4+qvZxcfEs=","exportNames":["*"],"imports":1}},{"name":"./lib/polyfills","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":1010},"end":{"line":7,"column":53,"index":1063}}],"key":"lV0rT+lff8tbqQElPGdAzUbCNgE=","exportNames":["*"],"imports":1}},{"name":"./lib/version","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":1064},"end":{"line":8,"column":40,"index":1104}}],"key":"JwaDbHnT/nA4LCdbzFXkLM5KVrg=","exportNames":["*"],"imports":1}},{"name":"./lib/locks","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":1105},"end":{"line":9,"column":69,"index":1174}}],"key":"3nAl8WGToTbG9Ylo2D6LWgFHzy4=","exportNames":["*"],"imports":1}},{"name":"./lib/base64url","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":1175},"end":{"line":10,"column":71,"index":1246}}],"key":"e/SLVEwEOrfSGzIvDteO64GlclY=","exportNames":["*"],"imports":1}},{"name":"./lib/web3/ethereum","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":1247},"end":{"line":11,"column":85,"index":1332}}],"key":"Uu8BLUnMyMgoPSi9pntE8LE9JBk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return GoTrueClient;\n    }\n  });\n  var _GoTrueAdminApi = require(_dependencyMap[0], \"./GoTrueAdminApi\");\n  var GoTrueAdminApi = _interopDefault(_GoTrueAdminApi);\n  var _libConstants = require(_dependencyMap[1], \"./lib/constants\");\n  var _libErrors = require(_dependencyMap[2], \"./lib/errors\");\n  var _libFetch = require(_dependencyMap[3], \"./lib/fetch\");\n  var _libHelpers = require(_dependencyMap[4], \"./lib/helpers\");\n  var _libLocalStorage = require(_dependencyMap[5], \"./lib/local-storage\");\n  var _libPolyfills = require(_dependencyMap[6], \"./lib/polyfills\");\n  var _libVersion = require(_dependencyMap[7], \"./lib/version\");\n  var _libLocks = require(_dependencyMap[8], \"./lib/locks\");\n  var _libBase64url = require(_dependencyMap[9], \"./lib/base64url\");\n  var _libWeb3Ethereum = require(_dependencyMap[10], \"./lib/web3/ethereum\");\n  (0, _libPolyfills.polyfillGlobalThis)(); // Make \"globalThis\" available\n  const DEFAULT_OPTIONS = {\n    url: _libConstants.GOTRUE_URL,\n    storageKey: _libConstants.STORAGE_KEY,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    headers: _libConstants.DEFAULT_HEADERS,\n    flowType: 'implicit',\n    debug: false,\n    hasCustomAuthorizationHeader: false\n  };\n  async function lockNoOp(name, acquireTimeout, fn) {\n    return await fn();\n  }\n  /**\n   * Caches JWKS values for all clients created in the same environment. This is\n   * especially useful for shared-memory execution environments such as Vercel's\n   * Fluid Compute, AWS Lambda or Supabase's Edge Functions. Regardless of how\n   * many clients are created, if they share the same storage key they will use\n   * the same JWKS cache, significantly speeding up getClaims() with asymmetric\n   * JWTs.\n   */\n  const GLOBAL_JWKS = {};\n  class GoTrueClient {\n    /**\n     * Create a new client for use in the browser.\n     */\n    constructor(options) {\n      var _a, _b;\n      /**\n       * @experimental\n       */\n      this.userStorage = null;\n      this.memoryStorage = null;\n      this.stateChangeEmitters = new Map();\n      this.autoRefreshTicker = null;\n      this.visibilityChangedCallback = null;\n      this.refreshingDeferred = null;\n      /**\n       * Keeps track of the async client initialization.\n       * When null or not yet resolved the auth state is `unknown`\n       * Once resolved the auth state is known and it's safe to call any further client methods.\n       * Keep extra care to never reject or throw uncaught errors\n       */\n      this.initializePromise = null;\n      this.detectSessionInUrl = true;\n      this.hasCustomAuthorizationHeader = false;\n      this.suppressGetSessionWarning = false;\n      this.lockAcquired = false;\n      this.pendingInLock = [];\n      /**\n       * Used to broadcast state change events to other tabs listening.\n       */\n      this.broadcastChannel = null;\n      this.logger = console.log;\n      this.instanceID = GoTrueClient.nextInstanceID;\n      GoTrueClient.nextInstanceID += 1;\n      if (this.instanceID > 0 && (0, _libHelpers.isBrowser)()) {\n        console.warn('Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.');\n      }\n      const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n      this.logDebugMessages = !!settings.debug;\n      if (typeof settings.debug === 'function') {\n        this.logger = settings.debug;\n      }\n      this.persistSession = settings.persistSession;\n      this.storageKey = settings.storageKey;\n      this.autoRefreshToken = settings.autoRefreshToken;\n      this.admin = new GoTrueAdminApi.default({\n        url: settings.url,\n        headers: settings.headers,\n        fetch: settings.fetch\n      });\n      this.url = settings.url;\n      this.headers = settings.headers;\n      this.fetch = (0, _libHelpers.resolveFetch)(settings.fetch);\n      this.lock = settings.lock || lockNoOp;\n      this.detectSessionInUrl = settings.detectSessionInUrl;\n      this.flowType = settings.flowType;\n      this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;\n      if (settings.lock) {\n        this.lock = settings.lock;\n      } else if ((0, _libHelpers.isBrowser)() && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.locks)) {\n        this.lock = _libLocks.navigatorLock;\n      } else {\n        this.lock = lockNoOp;\n      }\n      if (!this.jwks) {\n        this.jwks = {\n          keys: []\n        };\n        this.jwks_cached_at = Number.MIN_SAFE_INTEGER;\n      }\n      this.mfa = {\n        verify: this._verify.bind(this),\n        enroll: this._enroll.bind(this),\n        unenroll: this._unenroll.bind(this),\n        challenge: this._challenge.bind(this),\n        listFactors: this._listFactors.bind(this),\n        challengeAndVerify: this._challengeAndVerify.bind(this),\n        getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)\n      };\n      if (this.persistSession) {\n        if (settings.storage) {\n          this.storage = settings.storage;\n        } else {\n          if ((0, _libHelpers.supportsLocalStorage)()) {\n            this.storage = globalThis.localStorage;\n          } else {\n            this.memoryStorage = {};\n            this.storage = (0, _libLocalStorage.memoryLocalStorageAdapter)(this.memoryStorage);\n          }\n        }\n        if (settings.userStorage) {\n          this.userStorage = settings.userStorage;\n        }\n      } else {\n        this.memoryStorage = {};\n        this.storage = (0, _libLocalStorage.memoryLocalStorageAdapter)(this.memoryStorage);\n      }\n      if ((0, _libHelpers.isBrowser)() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n        try {\n          this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);\n        } catch (e) {\n          console.error('Failed to create a new BroadcastChannel, multi-tab state changes will not be available', e);\n        }\n        (_b = this.broadcastChannel) === null || _b === void 0 ? void 0 : _b.addEventListener('message', async event => {\n          this._debug('received broadcast notification from other tab or client', event);\n          await this._notifyAllSubscribers(event.data.event, event.data.session, false); // broadcast = false so we don't get an endless loop of messages\n        });\n      }\n      this.initialize();\n    }\n    /**\n     * The JWKS used for verifying asymmetric JWTs\n     */\n    get jwks() {\n      var _a, _b;\n      return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.jwks) !== null && _b !== void 0 ? _b : {\n        keys: []\n      };\n    }\n    set jwks(value) {\n      GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), {\n        jwks: value\n      });\n    }\n    get jwks_cached_at() {\n      var _a, _b;\n      return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.cachedAt) !== null && _b !== void 0 ? _b : Number.MIN_SAFE_INTEGER;\n    }\n    set jwks_cached_at(value) {\n      GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), {\n        cachedAt: value\n      });\n    }\n    _debug(...args) {\n      if (this.logDebugMessages) {\n        this.logger(`GoTrueClient@${this.instanceID} (${_libVersion.version}) ${new Date().toISOString()}`, ...args);\n      }\n      return this;\n    }\n    /**\n     * Initializes the client session either from the url or from storage.\n     * This method is automatically called when instantiating the client, but should also be called\n     * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n     */\n    async initialize() {\n      if (this.initializePromise) {\n        return await this.initializePromise;\n      }\n      this.initializePromise = (async () => {\n        return await this._acquireLock(-1, async () => {\n          return await this._initialize();\n        });\n      })();\n      return await this.initializePromise;\n    }\n    /**\n     * IMPORTANT:\n     * 1. Never throw in this method, as it is called from the constructor\n     * 2. Never return a session from this method as it would be cached over\n     *    the whole lifetime of the client\n     */\n    async _initialize() {\n      var _a;\n      try {\n        const params = (0, _libHelpers.parseParametersFromURL)(window.location.href);\n        let callbackUrlType = 'none';\n        if (this._isImplicitGrantCallback(params)) {\n          callbackUrlType = 'implicit';\n        } else if (await this._isPKCECallback(params)) {\n          callbackUrlType = 'pkce';\n        }\n        /**\n         * Attempt to get the session from the URL only if these conditions are fulfilled\n         *\n         * Note: If the URL isn't one of the callback url types (implicit or pkce),\n         * then there could be an existing session so we don't want to prematurely remove it\n         */\n        if ((0, _libHelpers.isBrowser)() && this.detectSessionInUrl && callbackUrlType !== 'none') {\n          const {\n            data,\n            error\n          } = await this._getSessionFromURL(params, callbackUrlType);\n          if (error) {\n            this._debug('#_initialize()', 'error detecting session from URL', error);\n            if ((0, _libErrors.isAuthImplicitGrantRedirectError)(error)) {\n              const errorCode = (_a = error.details) === null || _a === void 0 ? void 0 : _a.code;\n              if (errorCode === 'identity_already_exists' || errorCode === 'identity_not_found' || errorCode === 'single_identity_not_deletable') {\n                return {\n                  error\n                };\n              }\n            }\n            // failed login attempt via url,\n            // remove old session as in verifyOtp, signUp and signInWith*\n            await this._removeSession();\n            return {\n              error\n            };\n          }\n          const {\n            session,\n            redirectType\n          } = data;\n          this._debug('#_initialize()', 'detected session in URL', session, 'redirect type', redirectType);\n          await this._saveSession(session);\n          setTimeout(async () => {\n            if (redirectType === 'recovery') {\n              await this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\n            } else {\n              await this._notifyAllSubscribers('SIGNED_IN', session);\n            }\n          }, 0);\n          return {\n            error: null\n          };\n        }\n        // no login attempt via callback url try to recover session from storage\n        await this._recoverAndRefresh();\n        return {\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            error\n          };\n        }\n        return {\n          error: new _libErrors.AuthUnknownError('Unexpected error during initialization', error)\n        };\n      } finally {\n        await this._handleVisibilityChange();\n        this._debug('#_initialize()', 'end');\n      }\n    }\n    /**\n     * Creates a new anonymous user.\n     *\n     * @returns A session where the is_anonymous claim in the access token JWT set to true\n     */\n    async signInAnonymously(credentials) {\n      var _a, _b, _c;\n      try {\n        const res = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            data: (_b = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {},\n            gotrue_meta_security: {\n              captcha_token: (_c = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c === void 0 ? void 0 : _c.captchaToken\n            }\n          },\n          xform: _libFetch._sessionResponse\n        });\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n        const session = data.session;\n        const user = data.user;\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Creates a new user.\n     *\n     * Be aware that if a user account exists in the system you may get back an\n     * error message that attempts to hide this information from the user.\n     * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n    async signUp(credentials) {\n      var _a, _b, _c;\n      try {\n        let res;\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          let codeChallenge = null;\n          let codeChallengeMethod = null;\n          if (this.flowType === 'pkce') {\n            ;\n            [codeChallenge, codeChallengeMethod] = await (0, _libHelpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n          }\n          res = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n            body: {\n              email,\n              password,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              },\n              code_challenge: codeChallenge,\n              code_challenge_method: codeChallengeMethod\n            },\n            xform: _libFetch._sessionResponse\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/signup`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n              channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : 'sms',\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _libFetch._sessionResponse\n          });\n        } else {\n          throw new _libErrors.AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n        const {\n          data,\n          error\n        } = res;\n        if (error || !data) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: error\n          };\n        }\n        const session = data.session;\n        const user = data.user;\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Log in an existing user with an email and password or phone and password.\n     *\n     * Be aware that you may get back an error message that will not distinguish\n     * between the cases where the account does not exist or that the\n     * email/phone and password combination is wrong or that the account can only\n     * be accessed via social login.\n     */\n    async signInWithPassword(credentials) {\n      try {\n        let res;\n        if ('email' in credentials) {\n          const {\n            email,\n            password,\n            options\n          } = credentials;\n          res = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              email,\n              password,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _libFetch._sessionResponsePassword\n          });\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            password,\n            options\n          } = credentials;\n          res = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n            headers: this.headers,\n            body: {\n              phone,\n              password,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            xform: _libFetch._sessionResponsePassword\n          });\n        } else {\n          throw new _libErrors.AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n        }\n        const {\n          data,\n          error\n        } = res;\n        if (error) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        } else if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: new _libErrors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data: Object.assign({\n            user: data.user,\n            session: data.session\n          }, data.weak_password ? {\n            weakPassword: data.weak_password\n          } : null),\n          error\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Log in an existing user via a third-party provider.\n     * This method supports the PKCE flow.\n     */\n    async signInWithOAuth(credentials) {\n      var _a, _b, _c, _d;\n      return await this._handleProviderSignIn(credentials.provider, {\n        redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n        scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n        queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n        skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect\n      });\n    }\n    /**\n     * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.\n     */\n    async exchangeCodeForSession(authCode) {\n      await this.initializePromise;\n      return this._acquireLock(-1, async () => {\n        return this._exchangeCodeForSession(authCode);\n      });\n    }\n    /**\n     * Signs in a user by verifying a message signed by the user's private key.\n     * Supports Ethereum (via Sign-In-With-Ethereum) & Solana (Sign-In-With-Solana) standards,\n     * both of which derive from the EIP-4361 standard\n     * With slight variation on Solana's side.\n     * @reference https://eips.ethereum.org/EIPS/eip-4361\n     */\n    async signInWithWeb3(credentials) {\n      const {\n        chain\n      } = credentials;\n      switch (chain) {\n        case 'ethereum':\n          return await this.signInWithEthereum(credentials);\n        case 'solana':\n          return await this.signInWithSolana(credentials);\n        default:\n          throw new Error(`@supabase/auth-js: Unsupported chain \"${chain}\"`);\n      }\n    }\n    async signInWithEthereum(credentials) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n      // TODO: flatten type\n      let message;\n      let signature;\n      if ('message' in credentials) {\n        message = credentials.message;\n        signature = credentials.signature;\n      } else {\n        const {\n          chain,\n          wallet,\n          statement,\n          options\n        } = credentials;\n        let resolvedWallet;\n        if (!(0, _libHelpers.isBrowser)()) {\n          if (typeof wallet !== 'object' || !(options === null || options === void 0 ? void 0 : options.url)) {\n            throw new Error('@supabase/auth-js: Both wallet and url must be specified in non-browser environments.');\n          }\n          resolvedWallet = wallet;\n        } else if (typeof wallet === 'object') {\n          resolvedWallet = wallet;\n        } else {\n          const windowAny = window;\n          if ('ethereum' in windowAny && typeof windowAny.ethereum === 'object' && 'request' in windowAny.ethereum && typeof windowAny.ethereum.request === 'function') {\n            resolvedWallet = windowAny.ethereum;\n          } else {\n            throw new Error(`@supabase/auth-js: No compatible Ethereum wallet interface on the window object (window.ethereum) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'ethereum', wallet: resolvedUserWallet }) instead.`);\n          }\n        }\n        const url = new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : window.location.href);\n        const accounts = await resolvedWallet.request({\n          method: 'eth_requestAccounts'\n        }).then(accs => accs).catch(() => {\n          throw new Error(`@supabase/auth-js: Wallet method eth_requestAccounts is missing or invalid`);\n        });\n        if (!accounts || accounts.length === 0) {\n          throw new Error(`@supabase/auth-js: No accounts available. Please ensure the wallet is connected.`);\n        }\n        const address = (0, _libWeb3Ethereum.getAddress)(accounts[0]);\n        let chainId = (_b = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _b === void 0 ? void 0 : _b.chainId;\n        if (!chainId) {\n          const chainIdHex = await resolvedWallet.request({\n            method: 'eth_chainId'\n          });\n          chainId = (0, _libWeb3Ethereum.fromHex)(chainIdHex);\n        }\n        const siweMessage = {\n          domain: url.host,\n          address: address,\n          statement: statement,\n          uri: url.href,\n          version: '1',\n          chainId: chainId,\n          nonce: (_c = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _c === void 0 ? void 0 : _c.nonce,\n          issuedAt: (_e = (_d = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _d === void 0 ? void 0 : _d.issuedAt) !== null && _e !== void 0 ? _e : new Date(),\n          expirationTime: (_f = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _f === void 0 ? void 0 : _f.expirationTime,\n          notBefore: (_g = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _g === void 0 ? void 0 : _g.notBefore,\n          requestId: (_h = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _h === void 0 ? void 0 : _h.requestId,\n          resources: (_j = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _j === void 0 ? void 0 : _j.resources\n        };\n        message = (0, _libWeb3Ethereum.createSiweMessage)(siweMessage);\n        // Sign message\n        signature = await resolvedWallet.request({\n          method: 'personal_sign',\n          params: [(0, _libWeb3Ethereum.toHex)(message), address]\n        });\n      }\n      try {\n        const {\n          data,\n          error\n        } = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=web3`, {\n          headers: this.headers,\n          body: Object.assign({\n            chain: 'ethereum',\n            message,\n            signature\n          }, ((_k = credentials.options) === null || _k === void 0 ? void 0 : _k.captchaToken) ? {\n            gotrue_meta_security: {\n              captcha_token: (_l = credentials.options) === null || _l === void 0 ? void 0 : _l.captchaToken\n            }\n          } : null),\n          xform: _libFetch._sessionResponse\n        });\n        if (error) {\n          throw error;\n        }\n        if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: new _libErrors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data: Object.assign({}, data),\n          error\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    async signInWithSolana(credentials) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n      let message;\n      let signature;\n      if ('message' in credentials) {\n        message = credentials.message;\n        signature = credentials.signature;\n      } else {\n        const {\n          chain,\n          wallet,\n          statement,\n          options\n        } = credentials;\n        let resolvedWallet;\n        if (!(0, _libHelpers.isBrowser)()) {\n          if (typeof wallet !== 'object' || !(options === null || options === void 0 ? void 0 : options.url)) {\n            throw new Error('@supabase/auth-js: Both wallet and url must be specified in non-browser environments.');\n          }\n          resolvedWallet = wallet;\n        } else if (typeof wallet === 'object') {\n          resolvedWallet = wallet;\n        } else {\n          const windowAny = window;\n          if ('solana' in windowAny && typeof windowAny.solana === 'object' && ('signIn' in windowAny.solana && typeof windowAny.solana.signIn === 'function' || 'signMessage' in windowAny.solana && typeof windowAny.solana.signMessage === 'function')) {\n            resolvedWallet = windowAny.solana;\n          } else {\n            throw new Error(`@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.`);\n          }\n        }\n        const url = new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : window.location.href);\n        if ('signIn' in resolvedWallet && resolvedWallet.signIn) {\n          const output = await resolvedWallet.signIn(Object.assign(Object.assign(Object.assign({\n            issuedAt: new Date().toISOString()\n          }, options === null || options === void 0 ? void 0 : options.signInWithSolana), {\n            // non-overridable properties\n            version: '1',\n            domain: url.host,\n            uri: url.href\n          }), statement ? {\n            statement\n          } : null));\n          let outputToProcess;\n          if (Array.isArray(output) && output[0] && typeof output[0] === 'object') {\n            outputToProcess = output[0];\n          } else if (output && typeof output === 'object' && 'signedMessage' in output && 'signature' in output) {\n            outputToProcess = output;\n          } else {\n            throw new Error('@supabase/auth-js: Wallet method signIn() returned unrecognized value');\n          }\n          if ('signedMessage' in outputToProcess && 'signature' in outputToProcess && (typeof outputToProcess.signedMessage === 'string' || outputToProcess.signedMessage instanceof Uint8Array) && outputToProcess.signature instanceof Uint8Array) {\n            message = typeof outputToProcess.signedMessage === 'string' ? outputToProcess.signedMessage : new TextDecoder().decode(outputToProcess.signedMessage);\n            signature = outputToProcess.signature;\n          } else {\n            throw new Error('@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields');\n          }\n        } else {\n          if (!('signMessage' in resolvedWallet) || typeof resolvedWallet.signMessage !== 'function' || !('publicKey' in resolvedWallet) || typeof resolvedWallet !== 'object' || !resolvedWallet.publicKey || !('toBase58' in resolvedWallet.publicKey) || typeof resolvedWallet.publicKey.toBase58 !== 'function') {\n            throw new Error('@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API');\n          }\n          message = [`${url.host} wants you to sign in with your Solana account:`, resolvedWallet.publicKey.toBase58(), ...(statement ? ['', statement, ''] : ['']), 'Version: 1', `URI: ${url.href}`, `Issued At: ${(_c = (_b = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _b === void 0 ? void 0 : _b.issuedAt) !== null && _c !== void 0 ? _c : new Date().toISOString()}`, ...(((_d = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _d === void 0 ? void 0 : _d.notBefore) ? [`Not Before: ${options.signInWithSolana.notBefore}`] : []), ...(((_e = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _e === void 0 ? void 0 : _e.expirationTime) ? [`Expiration Time: ${options.signInWithSolana.expirationTime}`] : []), ...(((_f = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _f === void 0 ? void 0 : _f.chainId) ? [`Chain ID: ${options.signInWithSolana.chainId}`] : []), ...(((_g = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _g === void 0 ? void 0 : _g.nonce) ? [`Nonce: ${options.signInWithSolana.nonce}`] : []), ...(((_h = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _h === void 0 ? void 0 : _h.requestId) ? [`Request ID: ${options.signInWithSolana.requestId}`] : []), ...(((_k = (_j = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _j === void 0 ? void 0 : _j.resources) === null || _k === void 0 ? void 0 : _k.length) ? ['Resources', ...options.signInWithSolana.resources.map(resource => `- ${resource}`)] : [])].join('\\n');\n          const maybeSignature = await resolvedWallet.signMessage(new TextEncoder().encode(message), 'utf8');\n          if (!maybeSignature || !(maybeSignature instanceof Uint8Array)) {\n            throw new Error('@supabase/auth-js: Wallet signMessage() API returned an recognized value');\n          }\n          signature = maybeSignature;\n        }\n      }\n      try {\n        const {\n          data,\n          error\n        } = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=web3`, {\n          headers: this.headers,\n          body: Object.assign({\n            chain: 'solana',\n            message,\n            signature: (0, _libBase64url.bytesToBase64URL)(signature)\n          }, ((_l = credentials.options) === null || _l === void 0 ? void 0 : _l.captchaToken) ? {\n            gotrue_meta_security: {\n              captcha_token: (_m = credentials.options) === null || _m === void 0 ? void 0 : _m.captchaToken\n            }\n          } : null),\n          xform: _libFetch._sessionResponse\n        });\n        if (error) {\n          throw error;\n        }\n        if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: new _libErrors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data: Object.assign({}, data),\n          error\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    async _exchangeCodeForSession(authCode) {\n      const storageItem = await (0, _libHelpers.getItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n      const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : '').split('/');\n      try {\n        const {\n          data,\n          error\n        } = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=pkce`, {\n          headers: this.headers,\n          body: {\n            auth_code: authCode,\n            code_verifier: codeVerifier\n          },\n          xform: _libFetch._sessionResponse\n        });\n        await (0, _libHelpers.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n        if (error) {\n          throw error;\n        }\n        if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null,\n              redirectType: null\n            },\n            error: new _libErrors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data: Object.assign(Object.assign({}, data), {\n            redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null\n          }),\n          error\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null,\n              redirectType: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Allows signing in with an OIDC ID token. The authentication provider used\n     * should be enabled and configured.\n     */\n    async signInWithIdToken(credentials) {\n      try {\n        const {\n          options,\n          provider,\n          token,\n          access_token,\n          nonce\n        } = credentials;\n        const res = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n          headers: this.headers,\n          body: {\n            provider,\n            id_token: token,\n            access_token,\n            nonce,\n            gotrue_meta_security: {\n              captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n            }\n          },\n          xform: _libFetch._sessionResponse\n        });\n        const {\n          data,\n          error\n        } = res;\n        if (error) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        } else if (!data || !data.session || !data.user) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error: new _libErrors.AuthInvalidTokenResponseError()\n          };\n        }\n        if (data.session) {\n          await this._saveSession(data.session);\n          await this._notifyAllSubscribers('SIGNED_IN', data.session);\n        }\n        return {\n          data,\n          error\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Log in a user using magiclink or a one-time password (OTP).\n     *\n     * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n     * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n     * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n     *\n     * Be aware that you may get back an error message that will not distinguish\n     * between the cases where the account does not exist or, that the account\n     * can only be accessed via social login.\n     *\n     * Do note that you will need to configure a Whatsapp sender on Twilio\n     * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\n     * channel is not supported on other providers\n     * at this time.\n     * This method supports PKCE when an email is passed.\n     */\n    async signInWithOtp(credentials) {\n      var _a, _b, _c, _d, _e;\n      try {\n        if ('email' in credentials) {\n          const {\n            email,\n            options\n          } = credentials;\n          let codeChallenge = null;\n          let codeChallengeMethod = null;\n          if (this.flowType === 'pkce') {\n            ;\n            [codeChallenge, codeChallengeMethod] = await (0, _libHelpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n          }\n          const {\n            error\n          } = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              email,\n              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n              create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              },\n              code_challenge: codeChallenge,\n              code_challenge_method: codeChallengeMethod\n            },\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        if ('phone' in credentials) {\n          const {\n            phone,\n            options\n          } = credentials;\n          const {\n            data,\n            error\n          } = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/otp`, {\n            headers: this.headers,\n            body: {\n              phone,\n              data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},\n              create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              },\n              channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : 'sms'\n            }\n          });\n          return {\n            data: {\n              user: null,\n              session: null,\n              messageId: data === null || data === void 0 ? void 0 : data.message_id\n            },\n            error\n          };\n        }\n        throw new _libErrors.AuthInvalidCredentialsError('You must provide either an email or phone number.');\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Log in a user given a User supplied OTP or TokenHash received through mobile or email.\n     */\n    async verifyOtp(params) {\n      var _a, _b;\n      try {\n        let redirectTo = undefined;\n        let captchaToken = undefined;\n        if ('options' in params) {\n          redirectTo = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo;\n          captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;\n        }\n        const {\n          data,\n          error\n        } = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/verify`, {\n          headers: this.headers,\n          body: Object.assign(Object.assign({}, params), {\n            gotrue_meta_security: {\n              captcha_token: captchaToken\n            }\n          }),\n          redirectTo,\n          xform: _libFetch._sessionResponse\n        });\n        if (error) {\n          throw error;\n        }\n        if (!data) {\n          throw new Error('An error occurred on token verification.');\n        }\n        const session = data.session;\n        const user = data.user;\n        if (session === null || session === void 0 ? void 0 : session.access_token) {\n          await this._saveSession(session);\n          await this._notifyAllSubscribers(params.type == 'recovery' ? 'PASSWORD_RECOVERY' : 'SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Attempts a single-sign on using an enterprise Identity Provider. A\n     * successful SSO attempt will redirect the current page to the identity\n     * provider authorization page. The redirect URL is implementation and SSO\n     * protocol specific.\n     *\n     * You can use it by providing a SSO domain. Typically you can extract this\n     * domain by asking users for their email address. If this domain is\n     * registered on the Auth instance the redirect will use that organization's\n     * currently active SSO Identity Provider for the login.\n     *\n     * If you have built an organization-specific login page, you can use the\n     * organization's SSO Identity Provider UUID directly instead.\n     */\n    async signInWithSSO(params) {\n      var _a, _b, _c;\n      try {\n        let codeChallenge = null;\n        let codeChallengeMethod = null;\n        if (this.flowType === 'pkce') {\n          ;\n          [codeChallenge, codeChallengeMethod] = await (0, _libHelpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n        }\n        return await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/sso`, {\n          body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, 'providerId' in params ? {\n            provider_id: params.providerId\n          } : null), 'domain' in params ? {\n            domain: params.domain\n          } : null), {\n            redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined\n          }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? {\n            gotrue_meta_security: {\n              captcha_token: params.options.captchaToken\n            }\n          } : null), {\n            skip_http_redirect: true,\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod\n          }),\n          headers: this.headers,\n          xform: _libFetch._ssoResponse\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Sends a reauthentication OTP to the user's email or phone number.\n     * Requires the user to be signed-in.\n     */\n    async reauthenticate() {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._reauthenticate();\n      });\n    }\n    async _reauthenticate() {\n      try {\n        return await this._useSession(async result => {\n          const {\n            data: {\n              session\n            },\n            error: sessionError\n          } = result;\n          if (sessionError) throw sessionError;\n          if (!session) throw new _libErrors.AuthSessionMissingError();\n          const {\n            error\n          } = await (0, _libFetch._request)(this.fetch, 'GET', `${this.url}/reauthenticate`, {\n            headers: this.headers,\n            jwt: session.access_token\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\n     */\n    async resend(credentials) {\n      try {\n        const endpoint = `${this.url}/resend`;\n        if ('email' in credentials) {\n          const {\n            email,\n            type,\n            options\n          } = credentials;\n          const {\n            error\n          } = await (0, _libFetch._request)(this.fetch, 'POST', endpoint, {\n            headers: this.headers,\n            body: {\n              email,\n              type,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            },\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo\n          });\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        } else if ('phone' in credentials) {\n          const {\n            phone,\n            type,\n            options\n          } = credentials;\n          const {\n            data,\n            error\n          } = await (0, _libFetch._request)(this.fetch, 'POST', endpoint, {\n            headers: this.headers,\n            body: {\n              phone,\n              type,\n              gotrue_meta_security: {\n                captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n              }\n            }\n          });\n          return {\n            data: {\n              user: null,\n              session: null,\n              messageId: data === null || data === void 0 ? void 0 : data.message_id\n            },\n            error\n          };\n        }\n        throw new _libErrors.AuthInvalidCredentialsError('You must provide either an email or phone number and a type');\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Returns the session, refreshing it if necessary.\n     *\n     * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n     *\n     * **IMPORTANT:** This method loads values directly from the storage attached\n     * to the client. If that storage is based on request cookies for example,\n     * the values in it may not be authentic and therefore it's strongly advised\n     * against using this method and its results in such circumstances. A warning\n     * will be emitted if this is detected. Use {@link #getUser()} instead.\n     */\n    async getSession() {\n      await this.initializePromise;\n      const result = await this._acquireLock(-1, async () => {\n        return this._useSession(async result => {\n          return result;\n        });\n      });\n      return result;\n    }\n    /**\n     * Acquires a global lock based on the storage key.\n     */\n    async _acquireLock(acquireTimeout, fn) {\n      this._debug('#_acquireLock', 'begin', acquireTimeout);\n      try {\n        if (this.lockAcquired) {\n          const last = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve();\n          const result = (async () => {\n            await last;\n            return await fn();\n          })();\n          this.pendingInLock.push((async () => {\n            try {\n              await result;\n            } catch (e) {\n              // we just care if it finished\n            }\n          })());\n          return result;\n        }\n        return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {\n          this._debug('#_acquireLock', 'lock acquired for storage key', this.storageKey);\n          try {\n            this.lockAcquired = true;\n            const result = fn();\n            this.pendingInLock.push((async () => {\n              try {\n                await result;\n              } catch (e) {\n                // we just care if it finished\n              }\n            })());\n            await result;\n            // keep draining the queue until there's nothing to wait on\n            while (this.pendingInLock.length) {\n              const waitOn = [...this.pendingInLock];\n              await Promise.all(waitOn);\n              this.pendingInLock.splice(0, waitOn.length);\n            }\n            return await result;\n          } finally {\n            this._debug('#_acquireLock', 'lock released for storage key', this.storageKey);\n            this.lockAcquired = false;\n          }\n        });\n      } finally {\n        this._debug('#_acquireLock', 'end');\n      }\n    }\n    /**\n     * Use instead of {@link #getSession} inside the library. It is\n     * semantically usually what you want, as getting a session involves some\n     * processing afterwards that requires only one client operating on the\n     * session at once across multiple tabs or processes.\n     */\n    async _useSession(fn) {\n      this._debug('#_useSession', 'begin');\n      try {\n        // the use of __loadSession here is the only correct use of the function!\n        const result = await this.__loadSession();\n        return await fn(result);\n      } finally {\n        this._debug('#_useSession', 'end');\n      }\n    }\n    /**\n     * NEVER USE DIRECTLY!\n     *\n     * Always use {@link #_useSession}.\n     */\n    async __loadSession() {\n      this._debug('#__loadSession()', 'begin');\n      if (!this.lockAcquired) {\n        this._debug('#__loadSession()', 'used outside of an acquired lock!', new Error().stack);\n      }\n      try {\n        let currentSession = null;\n        const maybeSession = await (0, _libHelpers.getItemAsync)(this.storage, this.storageKey);\n        this._debug('#getSession()', 'session from storage', maybeSession);\n        if (maybeSession !== null) {\n          if (this._isValidSession(maybeSession)) {\n            currentSession = maybeSession;\n          } else {\n            this._debug('#getSession()', 'session from storage is not valid');\n            await this._removeSession();\n          }\n        }\n        if (!currentSession) {\n          return {\n            data: {\n              session: null\n            },\n            error: null\n          };\n        }\n        // A session is considered expired before the access token _actually_\n        // expires. When the autoRefreshToken option is off (or when the tab is\n        // in the background), very eager users of getSession() -- like\n        // realtime-js -- might send a valid JWT which will expire by the time it\n        // reaches the server.\n        const hasExpired = currentSession.expires_at ? currentSession.expires_at * 1000 - Date.now() < _libConstants.EXPIRY_MARGIN_MS : false;\n        this._debug('#__loadSession()', `session has${hasExpired ? '' : ' not'} expired`, 'expires_at', currentSession.expires_at);\n        if (!hasExpired) {\n          if (this.userStorage) {\n            const maybeUser = await (0, _libHelpers.getItemAsync)(this.userStorage, this.storageKey + '-user');\n            if (maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) {\n              currentSession.user = maybeUser.user;\n            } else {\n              currentSession.user = (0, _libHelpers.userNotAvailableProxy)();\n            }\n          }\n          if (this.storage.isServer && currentSession.user) {\n            let suppressWarning = this.suppressGetSessionWarning;\n            const proxySession = new Proxy(currentSession, {\n              get: (target, prop, receiver) => {\n                if (!suppressWarning && prop === 'user') {\n                  // only show warning when the user object is being accessed from the server\n                  console.warn('Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.');\n                  suppressWarning = true; // keeps this proxy instance from logging additional warnings\n                  this.suppressGetSessionWarning = true; // keeps this client's future proxy instances from warning\n                }\n                return Reflect.get(target, prop, receiver);\n              }\n            });\n            currentSession = proxySession;\n          }\n          return {\n            data: {\n              session: currentSession\n            },\n            error: null\n          };\n        }\n        const {\n          session,\n          error\n        } = await this._callRefreshToken(currentSession.refresh_token);\n        if (error) {\n          return {\n            data: {\n              session: null\n            },\n            error\n          };\n        }\n        return {\n          data: {\n            session\n          },\n          error: null\n        };\n      } finally {\n        this._debug('#__loadSession()', 'end');\n      }\n    }\n    /**\n     * Gets the current user details if there is an existing session. This method\n     * performs a network request to the Supabase Auth server, so the returned\n     * value is authentic and can be used to base authorization rules on.\n     *\n     * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n     */\n    async getUser(jwt) {\n      if (jwt) {\n        return await this._getUser(jwt);\n      }\n      await this.initializePromise;\n      const result = await this._acquireLock(-1, async () => {\n        return await this._getUser();\n      });\n      return result;\n    }\n    async _getUser(jwt) {\n      try {\n        if (jwt) {\n          return await (0, _libFetch._request)(this.fetch, 'GET', `${this.url}/user`, {\n            headers: this.headers,\n            jwt: jwt,\n            xform: _libFetch._userResponse\n          });\n        }\n        return await this._useSession(async result => {\n          var _a, _b, _c;\n          const {\n            data,\n            error\n          } = result;\n          if (error) {\n            throw error;\n          }\n          // returns an error if there is no access_token or custom authorization header\n          if (!((_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) && !this.hasCustomAuthorizationHeader) {\n            return {\n              data: {\n                user: null\n              },\n              error: new _libErrors.AuthSessionMissingError()\n            };\n          }\n          return await (0, _libFetch._request)(this.fetch, 'GET', `${this.url}/user`, {\n            headers: this.headers,\n            jwt: (_c = (_b = data.session) === null || _b === void 0 ? void 0 : _b.access_token) !== null && _c !== void 0 ? _c : undefined,\n            xform: _libFetch._userResponse\n          });\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          if ((0, _libErrors.isAuthSessionMissingError)(error)) {\n            // JWT contains a `session_id` which does not correspond to an active\n            // session in the database, indicating the user is signed out.\n            await this._removeSession();\n            await (0, _libHelpers.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n          }\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Updates user data for a logged in user.\n     */\n    async updateUser(attributes, options = {}) {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._updateUser(attributes, options);\n      });\n    }\n    async _updateUser(attributes, options = {}) {\n      try {\n        return await this._useSession(async result => {\n          const {\n            data: sessionData,\n            error: sessionError\n          } = result;\n          if (sessionError) {\n            throw sessionError;\n          }\n          if (!sessionData.session) {\n            throw new _libErrors.AuthSessionMissingError();\n          }\n          const session = sessionData.session;\n          let codeChallenge = null;\n          let codeChallengeMethod = null;\n          if (this.flowType === 'pkce' && attributes.email != null) {\n            ;\n            [codeChallenge, codeChallengeMethod] = await (0, _libHelpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n          }\n          const {\n            data,\n            error: userError\n          } = await (0, _libFetch._request)(this.fetch, 'PUT', `${this.url}/user`, {\n            headers: this.headers,\n            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n            body: Object.assign(Object.assign({}, attributes), {\n              code_challenge: codeChallenge,\n              code_challenge_method: codeChallengeMethod\n            }),\n            jwt: session.access_token,\n            xform: _libFetch._userResponse\n          });\n          if (userError) throw userError;\n          session.user = data.user;\n          await this._saveSession(session);\n          await this._notifyAllSubscribers('USER_UPDATED', session);\n          return {\n            data: {\n              user: session.user\n            },\n            error: null\n          };\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n     * If the refresh token or access token in the current session is invalid, an error will be thrown.\n     * @param currentSession The current session that minimally contains an access token and refresh token.\n     */\n    async setSession(currentSession) {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._setSession(currentSession);\n      });\n    }\n    async _setSession(currentSession) {\n      try {\n        if (!currentSession.access_token || !currentSession.refresh_token) {\n          throw new _libErrors.AuthSessionMissingError();\n        }\n        const timeNow = Date.now() / 1000;\n        let expiresAt = timeNow;\n        let hasExpired = true;\n        let session = null;\n        const {\n          payload\n        } = (0, _libHelpers.decodeJWT)(currentSession.access_token);\n        if (payload.exp) {\n          expiresAt = payload.exp;\n          hasExpired = expiresAt <= timeNow;\n        }\n        if (hasExpired) {\n          const {\n            session: refreshedSession,\n            error\n          } = await this._callRefreshToken(currentSession.refresh_token);\n          if (error) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: error\n            };\n          }\n          if (!refreshedSession) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: null\n            };\n          }\n          session = refreshedSession;\n        } else {\n          const {\n            data,\n            error\n          } = await this._getUser(currentSession.access_token);\n          if (error) {\n            throw error;\n          }\n          session = {\n            access_token: currentSession.access_token,\n            refresh_token: currentSession.refresh_token,\n            user: data.user,\n            token_type: 'bearer',\n            expires_in: expiresAt - timeNow,\n            expires_at: expiresAt\n          };\n          await this._saveSession(session);\n          await this._notifyAllSubscribers('SIGNED_IN', session);\n        }\n        return {\n          data: {\n            user: session.user,\n            session\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Returns a new session, regardless of expiry status.\n     * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n     * If the current session's refresh token is invalid, an error will be thrown.\n     * @param currentSession The current session. If passed in, it must contain a refresh token.\n     */\n    async refreshSession(currentSession) {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._refreshSession(currentSession);\n      });\n    }\n    async _refreshSession(currentSession) {\n      try {\n        return await this._useSession(async result => {\n          var _a;\n          if (!currentSession) {\n            const {\n              data,\n              error\n            } = result;\n            if (error) {\n              throw error;\n            }\n            currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\n          }\n          if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {\n            throw new _libErrors.AuthSessionMissingError();\n          }\n          const {\n            session,\n            error\n          } = await this._callRefreshToken(currentSession.refresh_token);\n          if (error) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: error\n            };\n          }\n          if (!session) {\n            return {\n              data: {\n                user: null,\n                session: null\n              },\n              error: null\n            };\n          }\n          return {\n            data: {\n              user: session.user,\n              session\n            },\n            error: null\n          };\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              user: null,\n              session: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Gets the session data from a URL string\n     */\n    async _getSessionFromURL(params, callbackUrlType) {\n      try {\n        if (!(0, _libHelpers.isBrowser)()) throw new _libErrors.AuthImplicitGrantRedirectError('No browser detected.');\n        // If there's an error in the URL, it doesn't matter what flow it is, we just return the error.\n        if (params.error || params.error_description || params.error_code) {\n          // The error class returned implies that the redirect is from an implicit grant flow\n          // but it could also be from a redirect error from a PKCE flow.\n          throw new _libErrors.AuthImplicitGrantRedirectError(params.error_description || 'Error in URL with unspecified error_description', {\n            error: params.error || 'unspecified_error',\n            code: params.error_code || 'unspecified_code'\n          });\n        }\n        // Checks for mismatches between the flowType initialised in the client and the URL parameters\n        switch (callbackUrlType) {\n          case 'implicit':\n            if (this.flowType === 'pkce') {\n              throw new _libErrors.AuthPKCEGrantCodeExchangeError('Not a valid PKCE flow url.');\n            }\n            break;\n          case 'pkce':\n            if (this.flowType === 'implicit') {\n              throw new _libErrors.AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\n            }\n            break;\n          default:\n          // there's no mismatch so we continue\n        }\n        // Since this is a redirect for PKCE, we attempt to retrieve the code from the URL for the code exchange\n        if (callbackUrlType === 'pkce') {\n          this._debug('#_initialize()', 'begin', 'is PKCE flow', true);\n          if (!params.code) throw new _libErrors.AuthPKCEGrantCodeExchangeError('No code detected.');\n          const {\n            data,\n            error\n          } = await this._exchangeCodeForSession(params.code);\n          if (error) throw error;\n          const url = new URL(window.location.href);\n          url.searchParams.delete('code');\n          window.history.replaceState(window.history.state, '', url.toString());\n          return {\n            data: {\n              session: data.session,\n              redirectType: null\n            },\n            error: null\n          };\n        }\n        const {\n          provider_token,\n          provider_refresh_token,\n          access_token,\n          refresh_token,\n          expires_in,\n          expires_at,\n          token_type\n        } = params;\n        if (!access_token || !expires_in || !refresh_token || !token_type) {\n          throw new _libErrors.AuthImplicitGrantRedirectError('No session defined in URL');\n        }\n        const timeNow = Math.round(Date.now() / 1000);\n        const expiresIn = parseInt(expires_in);\n        let expiresAt = timeNow + expiresIn;\n        if (expires_at) {\n          expiresAt = parseInt(expires_at);\n        }\n        const actuallyExpiresIn = expiresAt - timeNow;\n        if (actuallyExpiresIn * 1000 <= _libConstants.AUTO_REFRESH_TICK_DURATION_MS) {\n          console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);\n        }\n        const issuedAt = expiresAt - expiresIn;\n        if (timeNow - issuedAt >= 120) {\n          console.warn('@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale', issuedAt, expiresAt, timeNow);\n        } else if (timeNow - issuedAt < 0) {\n          console.warn('@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew', issuedAt, expiresAt, timeNow);\n        }\n        const {\n          data,\n          error\n        } = await this._getUser(access_token);\n        if (error) throw error;\n        const session = {\n          provider_token,\n          provider_refresh_token,\n          access_token,\n          expires_in: expiresIn,\n          expires_at: expiresAt,\n          refresh_token,\n          token_type,\n          user: data.user\n        };\n        // Remove tokens from URL\n        window.location.hash = '';\n        this._debug('#_getSessionFromURL()', 'clearing window.location.hash');\n        return {\n          data: {\n            session,\n            redirectType: params.type\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              session: null,\n              redirectType: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n     */\n    _isImplicitGrantCallback(params) {\n      return Boolean(params.access_token || params.error_description);\n    }\n    /**\n     * Checks if the current URL and backing storage contain parameters given by a PKCE flow\n     */\n    async _isPKCECallback(params) {\n      const currentStorageContent = await (0, _libHelpers.getItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n      return !!(params.code && currentStorageContent);\n    }\n    /**\n     * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n     *\n     * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n     * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n     *\n     * If using `others` scope, no `SIGNED_OUT` event is fired!\n     */\n    async signOut(options = {\n      scope: 'global'\n    }) {\n      await this.initializePromise;\n      return await this._acquireLock(-1, async () => {\n        return await this._signOut(options);\n      });\n    }\n    async _signOut({\n      scope\n    } = {\n      scope: 'global'\n    }) {\n      return await this._useSession(async result => {\n        var _a;\n        const {\n          data,\n          error: sessionError\n        } = result;\n        if (sessionError) {\n          return {\n            error: sessionError\n          };\n        }\n        const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\n        if (accessToken) {\n          const {\n            error\n          } = await this.admin.signOut(accessToken, scope);\n          if (error) {\n            // ignore 404s since user might not exist anymore\n            // ignore 401s since an invalid or expired JWT should sign out the current session\n            if (!((0, _libErrors.isAuthApiError)(error) && (error.status === 404 || error.status === 401 || error.status === 403))) {\n              return {\n                error\n              };\n            }\n          }\n        }\n        if (scope !== 'others') {\n          await this._removeSession();\n          await (0, _libHelpers.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\n        }\n        return {\n          error: null\n        };\n      });\n    }\n    /**\n     * Receive a notification every time an auth event happens.\n     * @param callback A callback function to be invoked when an auth event happens.\n     */\n    onAuthStateChange(callback) {\n      const id = (0, _libHelpers.uuid)();\n      const subscription = {\n        id,\n        callback,\n        unsubscribe: () => {\n          this._debug('#unsubscribe()', 'state change callback with id removed', id);\n          this.stateChangeEmitters.delete(id);\n        }\n      };\n      this._debug('#onAuthStateChange()', 'registered callback with id', id);\n      this.stateChangeEmitters.set(id, subscription);\n      (async () => {\n        await this.initializePromise;\n        await this._acquireLock(-1, async () => {\n          this._emitInitialSession(id);\n        });\n      })();\n      return {\n        data: {\n          subscription\n        }\n      };\n    }\n    async _emitInitialSession(id) {\n      return await this._useSession(async result => {\n        var _a, _b;\n        try {\n          const {\n            data: {\n              session\n            },\n            error\n          } = result;\n          if (error) throw error;\n          await ((_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback('INITIAL_SESSION', session));\n          this._debug('INITIAL_SESSION', 'callback id', id, 'session', session);\n        } catch (err) {\n          await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback('INITIAL_SESSION', null));\n          this._debug('INITIAL_SESSION', 'callback id', id, 'error', err);\n          console.error(err);\n        }\n      });\n    }\n    /**\n     * Sends a password reset request to an email address. This method supports the PKCE flow.\n     *\n     * @param email The email address of the user.\n     * @param options.redirectTo The URL to send the user to after they click the password reset link.\n     * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n     */\n    async resetPasswordForEmail(email, options = {}) {\n      let codeChallenge = null;\n      let codeChallengeMethod = null;\n      if (this.flowType === 'pkce') {\n        ;\n        [codeChallenge, codeChallengeMethod] = await (0, _libHelpers.getCodeChallengeAndMethod)(this.storage, this.storageKey, true // isPasswordRecovery\n        );\n      }\n      try {\n        return await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/recover`, {\n          body: {\n            email,\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n            gotrue_meta_security: {\n              captcha_token: options.captchaToken\n            }\n          },\n          headers: this.headers,\n          redirectTo: options.redirectTo\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Gets all the identities linked to a user.\n     */\n    async getUserIdentities() {\n      var _a;\n      try {\n        const {\n          data,\n          error\n        } = await this.getUser();\n        if (error) throw error;\n        return {\n          data: {\n            identities: (_a = data.user.identities) !== null && _a !== void 0 ? _a : []\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Links an oauth identity to an existing user.\n     * This method supports the PKCE flow.\n     */\n    async linkIdentity(credentials) {\n      var _a;\n      try {\n        const {\n          data,\n          error\n        } = await this._useSession(async result => {\n          var _a, _b, _c, _d, _e;\n          const {\n            data,\n            error\n          } = result;\n          if (error) throw error;\n          const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {\n            redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n            scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n            queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n            skipBrowserRedirect: true\n          });\n          return await (0, _libFetch._request)(this.fetch, 'GET', url, {\n            headers: this.headers,\n            jwt: (_e = (_d = data.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e !== void 0 ? _e : undefined\n          });\n        });\n        if (error) throw error;\n        if ((0, _libHelpers.isBrowser)() && !((_a = credentials.options) === null || _a === void 0 ? void 0 : _a.skipBrowserRedirect)) {\n          window.location.assign(data === null || data === void 0 ? void 0 : data.url);\n        }\n        return {\n          data: {\n            provider: credentials.provider,\n            url: data === null || data === void 0 ? void 0 : data.url\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              provider: credentials.provider,\n              url: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\n     */\n    async unlinkIdentity(identity) {\n      try {\n        return await this._useSession(async result => {\n          var _a, _b;\n          const {\n            data,\n            error\n          } = result;\n          if (error) {\n            throw error;\n          }\n          return await (0, _libFetch._request)(this.fetch, 'DELETE', `${this.url}/user/identities/${identity.identity_id}`, {\n            headers: this.headers,\n            jwt: (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined\n          });\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n    async _refreshAccessToken(refreshToken) {\n      const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;\n      this._debug(debugName, 'begin');\n      try {\n        const startedAt = Date.now();\n        // will attempt to refresh the token with exponential backoff\n        return await (0, _libHelpers.retryable)(async attempt => {\n          if (attempt > 0) {\n            await (0, _libHelpers.sleep)(200 * Math.pow(2, attempt - 1)); // 200, 400, 800, ...\n          }\n          this._debug(debugName, 'refreshing attempt', attempt);\n          return await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: {\n              refresh_token: refreshToken\n            },\n            headers: this.headers,\n            xform: _libFetch._sessionResponse\n          });\n        }, (attempt, error) => {\n          const nextBackOffInterval = 200 * Math.pow(2, attempt);\n          return error && (0, _libErrors.isAuthRetryableFetchError)(error) &&\n          // retryable only if the request can be sent before the backoff overflows the tick duration\n          Date.now() + nextBackOffInterval - startedAt < _libConstants.AUTO_REFRESH_TICK_DURATION_MS;\n        });\n      } catch (error) {\n        this._debug(debugName, 'error', error);\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: {\n              session: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      } finally {\n        this._debug(debugName, 'end');\n      }\n    }\n    _isValidSession(maybeSession) {\n      const isValidSession = typeof maybeSession === 'object' && maybeSession !== null && 'access_token' in maybeSession && 'refresh_token' in maybeSession && 'expires_at' in maybeSession;\n      return isValidSession;\n    }\n    async _handleProviderSignIn(provider, options) {\n      const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {\n        redirectTo: options.redirectTo,\n        scopes: options.scopes,\n        queryParams: options.queryParams\n      });\n      this._debug('#_handleProviderSignIn()', 'provider', provider, 'options', options, 'url', url);\n      // try to open on the browser\n      if ((0, _libHelpers.isBrowser)() && !options.skipBrowserRedirect) {\n        window.location.assign(url);\n      }\n      return {\n        data: {\n          provider,\n          url\n        },\n        error: null\n      };\n    }\n    /**\n     * Recovers the session from LocalStorage and refreshes the token\n     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n     */\n    async _recoverAndRefresh() {\n      var _a, _b;\n      const debugName = '#_recoverAndRefresh()';\n      this._debug(debugName, 'begin');\n      try {\n        const currentSession = await (0, _libHelpers.getItemAsync)(this.storage, this.storageKey);\n        if (currentSession && this.userStorage) {\n          let maybeUser = await (0, _libHelpers.getItemAsync)(this.userStorage, this.storageKey + '-user');\n          if (!this.storage.isServer && Object.is(this.storage, this.userStorage) && !maybeUser) {\n            // storage and userStorage are the same storage medium, for example\n            // window.localStorage if userStorage does not have the user from\n            // storage stored, store it first thereby migrating the user object\n            // from storage -> userStorage\n            maybeUser = {\n              user: currentSession.user\n            };\n            await (0, _libHelpers.setItemAsync)(this.userStorage, this.storageKey + '-user', maybeUser);\n          }\n          currentSession.user = (_a = maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) !== null && _a !== void 0 ? _a : (0, _libHelpers.userNotAvailableProxy)();\n        } else if (currentSession && !currentSession.user) {\n          // user storage is not set, let's check if it was previously enabled so\n          // we bring back the storage as it should be\n          if (!currentSession.user) {\n            // test if userStorage was previously enabled and the storage medium was the same, to move the user back under the same key\n            const separateUser = await (0, _libHelpers.getItemAsync)(this.storage, this.storageKey + '-user');\n            if (separateUser && (separateUser === null || separateUser === void 0 ? void 0 : separateUser.user)) {\n              currentSession.user = separateUser.user;\n              await (0, _libHelpers.removeItemAsync)(this.storage, this.storageKey + '-user');\n              await (0, _libHelpers.setItemAsync)(this.storage, this.storageKey, currentSession);\n            } else {\n              currentSession.user = (0, _libHelpers.userNotAvailableProxy)();\n            }\n          }\n        }\n        this._debug(debugName, 'session from storage', currentSession);\n        if (!this._isValidSession(currentSession)) {\n          this._debug(debugName, 'session is not valid');\n          if (currentSession !== null) {\n            await this._removeSession();\n          }\n          return;\n        }\n        const expiresWithMargin = ((_b = currentSession.expires_at) !== null && _b !== void 0 ? _b : Infinity) * 1000 - Date.now() < _libConstants.EXPIRY_MARGIN_MS;\n        this._debug(debugName, `session has${expiresWithMargin ? '' : ' not'} expired with margin of ${_libConstants.EXPIRY_MARGIN_MS}s`);\n        if (expiresWithMargin) {\n          if (this.autoRefreshToken && currentSession.refresh_token) {\n            const {\n              error\n            } = await this._callRefreshToken(currentSession.refresh_token);\n            if (error) {\n              console.error(error);\n              if (!(0, _libErrors.isAuthRetryableFetchError)(error)) {\n                this._debug(debugName, 'refresh failed with a non-retryable error, removing the session', error);\n                await this._removeSession();\n              }\n            }\n          }\n        } else if (currentSession.user && currentSession.user.__isUserNotAvailableProxy === true) {\n          // If we have a proxy user, try to get the real user data\n          try {\n            const {\n              data,\n              error: userError\n            } = await this._getUser(currentSession.access_token);\n            if (!userError && (data === null || data === void 0 ? void 0 : data.user)) {\n              currentSession.user = data.user;\n              await this._saveSession(currentSession);\n              await this._notifyAllSubscribers('SIGNED_IN', currentSession);\n            } else {\n              this._debug(debugName, 'could not get user data, skipping SIGNED_IN notification');\n            }\n          } catch (getUserError) {\n            console.error('Error getting user data:', getUserError);\n            this._debug(debugName, 'error getting user data, skipping SIGNED_IN notification', getUserError);\n          }\n        } else {\n          // no need to persist currentSession again, as we just loaded it from\n          // local storage; persisting it again may overwrite a value saved by\n          // another client with access to the same local storage\n          await this._notifyAllSubscribers('SIGNED_IN', currentSession);\n        }\n      } catch (err) {\n        this._debug(debugName, 'error', err);\n        console.error(err);\n        return;\n      } finally {\n        this._debug(debugName, 'end');\n      }\n    }\n    async _callRefreshToken(refreshToken) {\n      var _a, _b;\n      if (!refreshToken) {\n        throw new _libErrors.AuthSessionMissingError();\n      }\n      // refreshing is already in progress\n      if (this.refreshingDeferred) {\n        return this.refreshingDeferred.promise;\n      }\n      const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;\n      this._debug(debugName, 'begin');\n      try {\n        this.refreshingDeferred = new _libHelpers.Deferred();\n        const {\n          data,\n          error\n        } = await this._refreshAccessToken(refreshToken);\n        if (error) throw error;\n        if (!data.session) throw new _libErrors.AuthSessionMissingError();\n        await this._saveSession(data.session);\n        await this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\n        const result = {\n          session: data.session,\n          error: null\n        };\n        this.refreshingDeferred.resolve(result);\n        return result;\n      } catch (error) {\n        this._debug(debugName, 'error', error);\n        if ((0, _libErrors.isAuthError)(error)) {\n          const result = {\n            session: null,\n            error\n          };\n          if (!(0, _libErrors.isAuthRetryableFetchError)(error)) {\n            await this._removeSession();\n          }\n          (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);\n          return result;\n        }\n        (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);\n        throw error;\n      } finally {\n        this.refreshingDeferred = null;\n        this._debug(debugName, 'end');\n      }\n    }\n    async _notifyAllSubscribers(event, session, broadcast = true) {\n      const debugName = `#_notifyAllSubscribers(${event})`;\n      this._debug(debugName, 'begin', session, `broadcast = ${broadcast}`);\n      try {\n        if (this.broadcastChannel && broadcast) {\n          this.broadcastChannel.postMessage({\n            event,\n            session\n          });\n        }\n        const errors = [];\n        const promises = Array.from(this.stateChangeEmitters.values()).map(async x => {\n          try {\n            await x.callback(event, session);\n          } catch (e) {\n            errors.push(e);\n          }\n        });\n        await Promise.all(promises);\n        if (errors.length > 0) {\n          for (let i = 0; i < errors.length; i += 1) {\n            console.error(errors[i]);\n          }\n          throw errors[0];\n        }\n      } finally {\n        this._debug(debugName, 'end');\n      }\n    }\n    /**\n     * set currentSession and currentUser\n     * process to _startAutoRefreshToken if possible\n     */\n    async _saveSession(session) {\n      this._debug('#_saveSession()', session);\n      // _saveSession is always called whenever a new session has been acquired\n      // so we can safely suppress the warning returned by future getSession calls\n      this.suppressGetSessionWarning = true;\n      // Create a shallow copy to work with, to avoid mutating the original session object if it's used elsewhere\n      const sessionToProcess = Object.assign({}, session);\n      const userIsProxy = sessionToProcess.user && sessionToProcess.user.__isUserNotAvailableProxy === true;\n      if (this.userStorage) {\n        if (!userIsProxy && sessionToProcess.user) {\n          // If it's a real user object, save it to userStorage.\n          await (0, _libHelpers.setItemAsync)(this.userStorage, this.storageKey + '-user', {\n            user: sessionToProcess.user\n          });\n        } else if (userIsProxy) {\n          // If it's the proxy, it means user was not found in userStorage.\n          // We should ensure no stale user data for this key exists in userStorage if we were to save null,\n          // or simply not save the proxy. For now, we don't save the proxy here.\n          // If there's a need to clear userStorage if user becomes proxy, that logic would go here.\n        }\n        // Prepare the main session data for primary storage: remove the user property before cloning\n        // This is important because the original session.user might be the proxy\n        const mainSessionData = Object.assign({}, sessionToProcess);\n        delete mainSessionData.user; // Remove user (real or proxy) before cloning for main storage\n        const clonedMainSessionData = (0, _libHelpers.deepClone)(mainSessionData);\n        await (0, _libHelpers.setItemAsync)(this.storage, this.storageKey, clonedMainSessionData);\n      } else {\n        // No userStorage is configured.\n        // In this case, session.user should ideally not be a proxy.\n        // If it were, structuredClone would fail. This implies an issue elsewhere if user is a proxy here\n        const clonedSession = (0, _libHelpers.deepClone)(sessionToProcess); // sessionToProcess still has its original user property\n        await (0, _libHelpers.setItemAsync)(this.storage, this.storageKey, clonedSession);\n      }\n    }\n    async _removeSession() {\n      this._debug('#_removeSession()');\n      await (0, _libHelpers.removeItemAsync)(this.storage, this.storageKey);\n      await (0, _libHelpers.removeItemAsync)(this.storage, this.storageKey + '-code-verifier');\n      await (0, _libHelpers.removeItemAsync)(this.storage, this.storageKey + '-user');\n      if (this.userStorage) {\n        await (0, _libHelpers.removeItemAsync)(this.userStorage, this.storageKey + '-user');\n      }\n      await this._notifyAllSubscribers('SIGNED_OUT', null);\n    }\n    /**\n     * Removes any registered visibilitychange callback.\n     *\n     * {@see #startAutoRefresh}\n     * {@see #stopAutoRefresh}\n     */\n    _removeVisibilityChangedCallback() {\n      this._debug('#_removeVisibilityChangedCallback()');\n      const callback = this.visibilityChangedCallback;\n      this.visibilityChangedCallback = null;\n      try {\n        if (callback && (0, _libHelpers.isBrowser)() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {\n          window.removeEventListener('visibilitychange', callback);\n        }\n      } catch (e) {\n        console.error('removing visibilitychange callback failed', e);\n      }\n    }\n    /**\n     * This is the private implementation of {@link #startAutoRefresh}. Use this\n     * within the library.\n     */\n    async _startAutoRefresh() {\n      await this._stopAutoRefresh();\n      this._debug('#_startAutoRefresh()');\n      const ticker = setInterval(() => this._autoRefreshTokenTick(), _libConstants.AUTO_REFRESH_TICK_DURATION_MS);\n      this.autoRefreshTicker = ticker;\n      if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n        // ticker is a NodeJS Timeout object that has an `unref` method\n        // https://nodejs.org/api/timers.html#timeoutunref\n        // When auto refresh is used in NodeJS (like for testing) the\n        // `setInterval` is preventing the process from being marked as\n        // finished and tests run endlessly. This can be prevented by calling\n        // `unref()` on the returned object.\n        ticker.unref();\n        // @ts-expect-error TS has no context of Deno\n      } else if (typeof Deno !== 'undefined' && typeof Deno.unrefTimer === 'function') {\n        // similar like for NodeJS, but with the Deno API\n        // https://deno.land/api@latest?unstable&s=Deno.unrefTimer\n        // @ts-expect-error TS has no context of Deno\n        Deno.unrefTimer(ticker);\n      }\n      // run the tick immediately, but in the next pass of the event loop so that\n      // #_initialize can be allowed to complete without recursively waiting on\n      // itself\n      setTimeout(async () => {\n        await this.initializePromise;\n        await this._autoRefreshTokenTick();\n      }, 0);\n    }\n    /**\n     * This is the private implementation of {@link #stopAutoRefresh}. Use this\n     * within the library.\n     */\n    async _stopAutoRefresh() {\n      this._debug('#_stopAutoRefresh()');\n      const ticker = this.autoRefreshTicker;\n      this.autoRefreshTicker = null;\n      if (ticker) {\n        clearInterval(ticker);\n      }\n    }\n    /**\n     * Starts an auto-refresh process in the background. The session is checked\n     * every few seconds. Close to the time of expiration a process is started to\n     * refresh the session. If refreshing fails it will be retried for as long as\n     * necessary.\n     *\n     * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n     * to call this function, it will be called for you.\n     *\n     * On browsers the refresh process works only when the tab/window is in the\n     * foreground to conserve resources as well as prevent race conditions and\n     * flooding auth with requests. If you call this method any managed\n     * visibility change callback will be removed and you must manage visibility\n     * changes on your own.\n     *\n     * On non-browser platforms the refresh process works *continuously* in the\n     * background, which may not be desirable. You should hook into your\n     * platform's foreground indication mechanism and call these methods\n     * appropriately to conserve resources.\n     *\n     * {@see #stopAutoRefresh}\n     */\n    async startAutoRefresh() {\n      this._removeVisibilityChangedCallback();\n      await this._startAutoRefresh();\n    }\n    /**\n     * Stops an active auto refresh process running in the background (if any).\n     *\n     * If you call this method any managed visibility change callback will be\n     * removed and you must manage visibility changes on your own.\n     *\n     * See {@link #startAutoRefresh} for more details.\n     */\n    async stopAutoRefresh() {\n      this._removeVisibilityChangedCallback();\n      await this._stopAutoRefresh();\n    }\n    /**\n     * Runs the auto refresh token tick.\n     */\n    async _autoRefreshTokenTick() {\n      this._debug('#_autoRefreshTokenTick()', 'begin');\n      try {\n        await this._acquireLock(0, async () => {\n          try {\n            const now = Date.now();\n            try {\n              return await this._useSession(async result => {\n                const {\n                  data: {\n                    session\n                  }\n                } = result;\n                if (!session || !session.refresh_token || !session.expires_at) {\n                  this._debug('#_autoRefreshTokenTick()', 'no session');\n                  return;\n                }\n                // session will expire in this many ticks (or has already expired if <= 0)\n                const expiresInTicks = Math.floor((session.expires_at * 1000 - now) / _libConstants.AUTO_REFRESH_TICK_DURATION_MS);\n                this._debug('#_autoRefreshTokenTick()', `access token expires in ${expiresInTicks} ticks, a tick lasts ${_libConstants.AUTO_REFRESH_TICK_DURATION_MS}ms, refresh threshold is ${_libConstants.AUTO_REFRESH_TICK_THRESHOLD} ticks`);\n                if (expiresInTicks <= _libConstants.AUTO_REFRESH_TICK_THRESHOLD) {\n                  await this._callRefreshToken(session.refresh_token);\n                }\n              });\n            } catch (e) {\n              console.error('Auto refresh tick failed with error. This is likely a transient error.', e);\n            }\n          } finally {\n            this._debug('#_autoRefreshTokenTick()', 'end');\n          }\n        });\n      } catch (e) {\n        if (e.isAcquireTimeout || e instanceof _libLocks.LockAcquireTimeoutError) {\n          this._debug('auto refresh token tick lock not available');\n        } else {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Registers callbacks on the browser / platform, which in-turn run\n     * algorithms when the browser window/tab are in foreground. On non-browser\n     * platforms it assumes always foreground.\n     */\n    async _handleVisibilityChange() {\n      this._debug('#_handleVisibilityChange()');\n      if (!(0, _libHelpers.isBrowser)() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n        if (this.autoRefreshToken) {\n          // in non-browser environments the refresh token ticker runs always\n          this.startAutoRefresh();\n        }\n        return false;\n      }\n      try {\n        this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);\n        window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', this.visibilityChangedCallback);\n        // now immediately call the visbility changed callback to setup with the\n        // current visbility state\n        await this._onVisibilityChanged(true); // initial call\n      } catch (error) {\n        console.error('_handleVisibilityChange', error);\n      }\n    }\n    /**\n     * Callback registered with `window.addEventListener('visibilitychange')`.\n     */\n    async _onVisibilityChanged(calledFromInitialize) {\n      const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;\n      this._debug(methodName, 'visibilityState', document.visibilityState);\n      if (document.visibilityState === 'visible') {\n        if (this.autoRefreshToken) {\n          // in browser environments the refresh token ticker runs only on focused tabs\n          // which prevents race conditions\n          this._startAutoRefresh();\n        }\n        if (!calledFromInitialize) {\n          // called when the visibility has changed, i.e. the browser\n          // transitioned from hidden -> visible so we need to see if the session\n          // should be recovered immediately... but to do that we need to acquire\n          // the lock first asynchronously\n          await this.initializePromise;\n          await this._acquireLock(-1, async () => {\n            if (document.visibilityState !== 'visible') {\n              this._debug(methodName, 'acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting');\n              // visibility has changed while waiting for the lock, abort\n              return;\n            }\n            // recover the session\n            await this._recoverAndRefresh();\n          });\n        }\n      } else if (document.visibilityState === 'hidden') {\n        if (this.autoRefreshToken) {\n          this._stopAutoRefresh();\n        }\n      }\n    }\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n     * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n     */\n    async _getUrlForProvider(url, provider, options) {\n      const urlParams = [`provider=${encodeURIComponent(provider)}`];\n      if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n        urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n      }\n      if (options === null || options === void 0 ? void 0 : options.scopes) {\n        urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n      }\n      if (this.flowType === 'pkce') {\n        const [codeChallenge, codeChallengeMethod] = await (0, _libHelpers.getCodeChallengeAndMethod)(this.storage, this.storageKey);\n        const flowParams = new URLSearchParams({\n          code_challenge: `${encodeURIComponent(codeChallenge)}`,\n          code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`\n        });\n        urlParams.push(flowParams.toString());\n      }\n      if (options === null || options === void 0 ? void 0 : options.queryParams) {\n        const query = new URLSearchParams(options.queryParams);\n        urlParams.push(query.toString());\n      }\n      if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {\n        urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);\n      }\n      return `${url}?${urlParams.join('&')}`;\n    }\n    async _unenroll(params) {\n      try {\n        return await this._useSession(async result => {\n          var _a;\n          const {\n            data: sessionData,\n            error: sessionError\n          } = result;\n          if (sessionError) {\n            return {\n              data: null,\n              error: sessionError\n            };\n          }\n          return await (0, _libFetch._request)(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n            headers: this.headers,\n            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n          });\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    async _enroll(params) {\n      try {\n        return await this._useSession(async result => {\n          var _a, _b;\n          const {\n            data: sessionData,\n            error: sessionError\n          } = result;\n          if (sessionError) {\n            return {\n              data: null,\n              error: sessionError\n            };\n          }\n          const body = Object.assign({\n            friendly_name: params.friendlyName,\n            factor_type: params.factorType\n          }, params.factorType === 'phone' ? {\n            phone: params.phone\n          } : {\n            issuer: params.issuer\n          });\n          const {\n            data,\n            error\n          } = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/factors`, {\n            body,\n            headers: this.headers,\n            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n          });\n          if (error) {\n            return {\n              data: null,\n              error\n            };\n          }\n          if (params.factorType === 'totp' && ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code)) {\n            data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;\n          }\n          return {\n            data,\n            error: null\n          };\n        });\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n    /**\n     * {@see GoTrueMFAApi#verify}\n     */\n    async _verify(params) {\n      return this._acquireLock(-1, async () => {\n        try {\n          return await this._useSession(async result => {\n            var _a;\n            const {\n              data: sessionData,\n              error: sessionError\n            } = result;\n            if (sessionError) {\n              return {\n                data: null,\n                error: sessionError\n              };\n            }\n            const {\n              data,\n              error\n            } = await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/verify`, {\n              body: {\n                code: params.code,\n                challenge_id: params.challengeId\n              },\n              headers: this.headers,\n              jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n            });\n            if (error) {\n              return {\n                data: null,\n                error\n              };\n            }\n            await this._saveSession(Object.assign({\n              expires_at: Math.round(Date.now() / 1000) + data.expires_in\n            }, data));\n            await this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\n            return {\n              data,\n              error\n            };\n          });\n        } catch (error) {\n          if ((0, _libErrors.isAuthError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * {@see GoTrueMFAApi#challenge}\n     */\n    async _challenge(params) {\n      return this._acquireLock(-1, async () => {\n        try {\n          return await this._useSession(async result => {\n            var _a;\n            const {\n              data: sessionData,\n              error: sessionError\n            } = result;\n            if (sessionError) {\n              return {\n                data: null,\n                error: sessionError\n              };\n            }\n            return await (0, _libFetch._request)(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/challenge`, {\n              body: {\n                channel: params.channel\n              },\n              headers: this.headers,\n              jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n            });\n          });\n        } catch (error) {\n          if ((0, _libErrors.isAuthError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * {@see GoTrueMFAApi#challengeAndVerify}\n     */\n    async _challengeAndVerify(params) {\n      // both _challenge and _verify independently acquire the lock, so no need\n      // to acquire it here\n      const {\n        data: challengeData,\n        error: challengeError\n      } = await this._challenge({\n        factorId: params.factorId\n      });\n      if (challengeError) {\n        return {\n          data: null,\n          error: challengeError\n        };\n      }\n      return await this._verify({\n        factorId: params.factorId,\n        challengeId: challengeData.id,\n        code: params.code\n      });\n    }\n    /**\n     * {@see GoTrueMFAApi#listFactors}\n     */\n    async _listFactors() {\n      // use #getUser instead of #_getUser as the former acquires a lock\n      const {\n        data: {\n          user\n        },\n        error: userError\n      } = await this.getUser();\n      if (userError) {\n        return {\n          data: null,\n          error: userError\n        };\n      }\n      const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];\n      const totp = factors.filter(factor => factor.factor_type === 'totp' && factor.status === 'verified');\n      const phone = factors.filter(factor => factor.factor_type === 'phone' && factor.status === 'verified');\n      return {\n        data: {\n          all: factors,\n          totp,\n          phone\n        },\n        error: null\n      };\n    }\n    /**\n     * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n     */\n    async _getAuthenticatorAssuranceLevel() {\n      return this._acquireLock(-1, async () => {\n        return await this._useSession(async result => {\n          var _a, _b;\n          const {\n            data: {\n              session\n            },\n            error: sessionError\n          } = result;\n          if (sessionError) {\n            return {\n              data: null,\n              error: sessionError\n            };\n          }\n          if (!session) {\n            return {\n              data: {\n                currentLevel: null,\n                nextLevel: null,\n                currentAuthenticationMethods: []\n              },\n              error: null\n            };\n          }\n          const {\n            payload\n          } = (0, _libHelpers.decodeJWT)(session.access_token);\n          let currentLevel = null;\n          if (payload.aal) {\n            currentLevel = payload.aal;\n          }\n          let nextLevel = currentLevel;\n          const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter(factor => factor.status === 'verified')) !== null && _b !== void 0 ? _b : [];\n          if (verifiedFactors.length > 0) {\n            nextLevel = 'aal2';\n          }\n          const currentAuthenticationMethods = payload.amr || [];\n          return {\n            data: {\n              currentLevel,\n              nextLevel,\n              currentAuthenticationMethods\n            },\n            error: null\n          };\n        });\n      });\n    }\n    async fetchJwk(kid, jwks = {\n      keys: []\n    }) {\n      // try fetching from the supplied jwks\n      let jwk = jwks.keys.find(key => key.kid === kid);\n      if (jwk) {\n        return jwk;\n      }\n      const now = Date.now();\n      // try fetching from cache\n      jwk = this.jwks.keys.find(key => key.kid === kid);\n      // jwk exists and jwks isn't stale\n      if (jwk && this.jwks_cached_at + _libConstants.JWKS_TTL > now) {\n        return jwk;\n      }\n      // jwk isn't cached in memory so we need to fetch it from the well-known endpoint\n      const {\n        data,\n        error\n      } = await (0, _libFetch._request)(this.fetch, 'GET', `${this.url}/.well-known/jwks.json`, {\n        headers: this.headers\n      });\n      if (error) {\n        throw error;\n      }\n      if (!data.keys || data.keys.length === 0) {\n        return null;\n      }\n      this.jwks = data;\n      this.jwks_cached_at = now;\n      // Find the signing key\n      jwk = data.keys.find(key => key.kid === kid);\n      if (!jwk) {\n        return null;\n      }\n      return jwk;\n    }\n    /**\n     * Extracts the JWT claims present in the access token by first verifying the\n     * JWT against the server's JSON Web Key Set endpoint\n     * `/.well-known/jwks.json` which is often cached, resulting in significantly\n     * faster responses. Prefer this method over {@link #getUser} which always\n     * sends a request to the Auth server for each JWT.\n     *\n     * If the project is not using an asymmetric JWT signing key (like ECC or\n     * RSA) it always sends a request to the Auth server (similar to {@link\n     * #getUser}) to verify the JWT.\n     *\n     * @param jwt An optional specific JWT you wish to verify, not the one you\n     *            can obtain from {@link #getSession}.\n     * @param options Various additional options that allow you to customize the\n     *                behavior of this method.\n     */\n    async getClaims(jwt, options = {}) {\n      try {\n        let token = jwt;\n        if (!token) {\n          const {\n            data,\n            error\n          } = await this.getSession();\n          if (error || !data.session) {\n            return {\n              data: null,\n              error\n            };\n          }\n          token = data.session.access_token;\n        }\n        const {\n          header,\n          payload,\n          signature,\n          raw: {\n            header: rawHeader,\n            payload: rawPayload\n          }\n        } = (0, _libHelpers.decodeJWT)(token);\n        if (!(options === null || options === void 0 ? void 0 : options.allowExpired)) {\n          // Reject expired JWTs should only happen if jwt argument was passed\n          (0, _libHelpers.validateExp)(payload.exp);\n        }\n        const signingKey = !header.alg || header.alg.startsWith('HS') || !header.kid || !('crypto' in globalThis && 'subtle' in globalThis.crypto) ? null : await this.fetchJwk(header.kid, (options === null || options === void 0 ? void 0 : options.keys) ? {\n          keys: options.keys\n        } : options === null || options === void 0 ? void 0 : options.jwks);\n        // If symmetric algorithm or WebCrypto API is unavailable, fallback to getUser()\n        if (!signingKey) {\n          const {\n            error\n          } = await this.getUser(token);\n          if (error) {\n            throw error;\n          }\n          // getUser succeeds so the claims in the JWT can be trusted\n          return {\n            data: {\n              claims: payload,\n              header,\n              signature\n            },\n            error: null\n          };\n        }\n        const algorithm = (0, _libHelpers.getAlgorithm)(header.alg);\n        // Convert JWK to CryptoKey\n        const publicKey = await crypto.subtle.importKey('jwk', signingKey, algorithm, true, ['verify']);\n        // Verify the signature\n        const isValid = await crypto.subtle.verify(algorithm, publicKey, signature, (0, _libBase64url.stringToUint8Array)(`${rawHeader}.${rawPayload}`));\n        if (!isValid) {\n          throw new _libErrors.AuthInvalidJwtError('Invalid JWT signature');\n        }\n        // If verification succeeds, decode and return claims\n        return {\n          data: {\n            claims: payload,\n            header,\n            signature\n          },\n          error: null\n        };\n      } catch (error) {\n        if ((0, _libErrors.isAuthError)(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    }\n  }\n  GoTrueClient.nextInstanceID = 0;\n});","lineCount":3050,"map":[[12,2,36,15,"Object"],[12,8,36,15],[12,9,36,15,"defineProperty"],[12,23,36,15],[12,24,36,15,"exports"],[12,31,36,15],[13,4,36,15,"enumerable"],[13,14,36,15],[14,4,36,15,"get"],[14,7,36,15],[14,18,36,15,"get"],[14,19,36,15],[15,6,36,15],[15,13,36,15,"GoTrueClient"],[15,25,36,15],[16,4,36,15],[17,2,36,15],[18,2,1,0],[18,6,1,0,"_GoTrueAdminApi"],[18,21,1,0],[18,24,1,0,"require"],[18,31,1,0],[18,32,1,0,"_dependencyMap"],[18,46,1,0],[19,2,1,0],[19,6,1,0,"GoTrueAdminApi"],[19,20,1,0],[19,23,1,0,"_interopDefault"],[19,38,1,0],[19,39,1,0,"_GoTrueAdminApi"],[19,54,1,0],[20,2,2,0],[20,6,2,0,"_libConstants"],[20,19,2,0],[20,22,2,0,"require"],[20,29,2,0],[20,30,2,0,"_dependencyMap"],[20,44,2,0],[21,2,3,0],[21,6,3,0,"_libErrors"],[21,16,3,0],[21,19,3,0,"require"],[21,26,3,0],[21,27,3,0,"_dependencyMap"],[21,41,3,0],[22,2,4,0],[22,6,4,0,"_libFetch"],[22,15,4,0],[22,18,4,0,"require"],[22,25,4,0],[22,26,4,0,"_dependencyMap"],[22,40,4,0],[23,2,5,0],[23,6,5,0,"_libHelpers"],[23,17,5,0],[23,20,5,0,"require"],[23,27,5,0],[23,28,5,0,"_dependencyMap"],[23,42,5,0],[24,2,6,0],[24,6,6,0,"_libLocalStorage"],[24,22,6,0],[24,25,6,0,"require"],[24,32,6,0],[24,33,6,0,"_dependencyMap"],[24,47,6,0],[25,2,7,0],[25,6,7,0,"_libPolyfills"],[25,19,7,0],[25,22,7,0,"require"],[25,29,7,0],[25,30,7,0,"_dependencyMap"],[25,44,7,0],[26,2,8,0],[26,6,8,0,"_libVersion"],[26,17,8,0],[26,20,8,0,"require"],[26,27,8,0],[26,28,8,0,"_dependencyMap"],[26,42,8,0],[27,2,9,0],[27,6,9,0,"_libLocks"],[27,15,9,0],[27,18,9,0,"require"],[27,25,9,0],[27,26,9,0,"_dependencyMap"],[27,40,9,0],[28,2,10,0],[28,6,10,0,"_libBase64url"],[28,19,10,0],[28,22,10,0,"require"],[28,29,10,0],[28,30,10,0,"_dependencyMap"],[28,44,10,0],[29,2,11,0],[29,6,11,0,"_libWeb3Ethereum"],[29,22,11,0],[29,25,11,0,"require"],[29,32,11,0],[29,33,11,0,"_dependencyMap"],[29,47,11,0],[30,2,12,0],[30,6,12,0,"polyfillGlobalThis"],[30,19,12,18],[30,20,12,18,"polyfillGlobalThis"],[30,38,12,18],[30,40,12,19],[30,41,12,20],[30,42,12,21],[30,43,12,22],[31,2,13,0],[31,8,13,6,"DEFAULT_OPTIONS"],[31,23,13,21],[31,26,13,24],[32,4,14,4,"url"],[32,7,14,7],[32,9,14,9,"GOTRUE_URL"],[32,22,14,19],[32,23,14,19,"GOTRUE_URL"],[32,33,14,19],[33,4,15,4,"storageKey"],[33,14,15,14],[33,16,15,16,"STORAGE_KEY"],[33,29,15,27],[33,30,15,27,"STORAGE_KEY"],[33,41,15,27],[34,4,16,4,"autoRefreshToken"],[34,20,16,20],[34,22,16,22],[34,26,16,26],[35,4,17,4,"persistSession"],[35,18,17,18],[35,20,17,20],[35,24,17,24],[36,4,18,4,"detectSessionInUrl"],[36,22,18,22],[36,24,18,24],[36,28,18,28],[37,4,19,4,"headers"],[37,11,19,11],[37,13,19,13,"DEFAULT_HEADERS"],[37,26,19,28],[37,27,19,28,"DEFAULT_HEADERS"],[37,42,19,28],[38,4,20,4,"flowType"],[38,12,20,12],[38,14,20,14],[38,24,20,24],[39,4,21,4,"debug"],[39,9,21,9],[39,11,21,11],[39,16,21,16],[40,4,22,4,"hasCustomAuthorizationHeader"],[40,32,22,32],[40,34,22,34],[41,2,23,0],[41,3,23,1],[42,2,24,0],[42,17,24,15,"lockNoOp"],[42,25,24,23,"lockNoOp"],[42,26,24,24,"name"],[42,30,24,28],[42,32,24,30,"acquireTimeout"],[42,46,24,44],[42,48,24,46,"fn"],[42,50,24,48],[42,52,24,50],[43,4,25,4],[43,11,25,11],[43,17,25,17,"fn"],[43,19,25,19],[43,20,25,20],[43,21,25,21],[44,2,26,0],[45,2,27,0],[46,0,28,0],[47,0,29,0],[48,0,30,0],[49,0,31,0],[50,0,32,0],[51,0,33,0],[52,0,34,0],[53,2,35,0],[53,8,35,6,"GLOBAL_JWKS"],[53,19,35,17],[53,22,35,20],[53,23,35,21],[53,24,35,22],[54,2,36,15],[54,8,36,21,"GoTrueClient"],[54,20,36,33],[54,21,36,34],[55,4,37,4],[56,0,38,0],[57,0,39,0],[58,4,40,4,"constructor"],[58,15,40,15,"constructor"],[58,16,40,16,"options"],[58,23,40,23],[58,25,40,25],[59,6,41,8],[59,10,41,12,"_a"],[59,12,41,14],[59,14,41,16,"_b"],[59,16,41,18],[60,6,42,8],[61,0,43,0],[62,0,44,0],[63,6,45,8],[63,10,45,12],[63,11,45,13,"userStorage"],[63,22,45,24],[63,25,45,27],[63,29,45,31],[64,6,46,8],[64,10,46,12],[64,11,46,13,"memoryStorage"],[64,24,46,26],[64,27,46,29],[64,31,46,33],[65,6,47,8],[65,10,47,12],[65,11,47,13,"stateChangeEmitters"],[65,30,47,32],[65,33,47,35],[65,37,47,39,"Map"],[65,40,47,42],[65,41,47,43],[65,42,47,44],[66,6,48,8],[66,10,48,12],[66,11,48,13,"autoRefreshTicker"],[66,28,48,30],[66,31,48,33],[66,35,48,37],[67,6,49,8],[67,10,49,12],[67,11,49,13,"visibilityChangedCallback"],[67,36,49,38],[67,39,49,41],[67,43,49,45],[68,6,50,8],[68,10,50,12],[68,11,50,13,"refreshingDeferred"],[68,29,50,31],[68,32,50,34],[68,36,50,38],[69,6,51,8],[70,0,52,0],[71,0,53,0],[72,0,54,0],[73,0,55,0],[74,0,56,0],[75,6,57,8],[75,10,57,12],[75,11,57,13,"initializePromise"],[75,28,57,30],[75,31,57,33],[75,35,57,37],[76,6,58,8],[76,10,58,12],[76,11,58,13,"detectSessionInUrl"],[76,29,58,31],[76,32,58,34],[76,36,58,38],[77,6,59,8],[77,10,59,12],[77,11,59,13,"hasCustomAuthorizationHeader"],[77,39,59,41],[77,42,59,44],[77,47,59,49],[78,6,60,8],[78,10,60,12],[78,11,60,13,"suppressGetSessionWarning"],[78,36,60,38],[78,39,60,41],[78,44,60,46],[79,6,61,8],[79,10,61,12],[79,11,61,13,"lockAcquired"],[79,23,61,25],[79,26,61,28],[79,31,61,33],[80,6,62,8],[80,10,62,12],[80,11,62,13,"pendingInLock"],[80,24,62,26],[80,27,62,29],[80,29,62,31],[81,6,63,8],[82,0,64,0],[83,0,65,0],[84,6,66,8],[84,10,66,12],[84,11,66,13,"broadcastChannel"],[84,27,66,29],[84,30,66,32],[84,34,66,36],[85,6,67,8],[85,10,67,12],[85,11,67,13,"logger"],[85,17,67,19],[85,20,67,22,"console"],[85,27,67,29],[85,28,67,30,"log"],[85,31,67,33],[86,6,68,8],[86,10,68,12],[86,11,68,13,"instanceID"],[86,21,68,23],[86,24,68,26,"GoTrueClient"],[86,36,68,38],[86,37,68,39,"nextInstanceID"],[86,51,68,53],[87,6,69,8,"GoTrueClient"],[87,18,69,20],[87,19,69,21,"nextInstanceID"],[87,33,69,35],[87,37,69,39],[87,38,69,40],[88,6,70,8],[88,10,70,12],[88,14,70,16],[88,15,70,17,"instanceID"],[88,25,70,27],[88,28,70,30],[88,29,70,31],[88,33,70,35],[88,37,70,35,"isBrowser"],[88,48,70,44],[88,49,70,44,"isBrowser"],[88,58,70,44],[88,60,70,45],[88,61,70,46],[88,63,70,48],[89,8,71,12,"console"],[89,15,71,19],[89,16,71,20,"warn"],[89,20,71,24],[89,21,71,25],[89,227,71,231],[89,228,71,232],[90,6,72,8],[91,6,73,8],[91,12,73,14,"settings"],[91,20,73,22],[91,23,73,25,"Object"],[91,29,73,31],[91,30,73,32,"assign"],[91,36,73,38],[91,37,73,39,"Object"],[91,43,73,45],[91,44,73,46,"assign"],[91,50,73,52],[91,51,73,53],[91,52,73,54],[91,53,73,55],[91,55,73,57,"DEFAULT_OPTIONS"],[91,70,73,72],[91,71,73,73],[91,73,73,75,"options"],[91,80,73,82],[91,81,73,83],[92,6,74,8],[92,10,74,12],[92,11,74,13,"logDebugMessages"],[92,27,74,29],[92,30,74,32],[92,31,74,33],[92,32,74,34,"settings"],[92,40,74,42],[92,41,74,43,"debug"],[92,46,74,48],[93,6,75,8],[93,10,75,12],[93,17,75,19,"settings"],[93,25,75,27],[93,26,75,28,"debug"],[93,31,75,33],[93,36,75,38],[93,46,75,48],[93,48,75,50],[94,8,76,12],[94,12,76,16],[94,13,76,17,"logger"],[94,19,76,23],[94,22,76,26,"settings"],[94,30,76,34],[94,31,76,35,"debug"],[94,36,76,40],[95,6,77,8],[96,6,78,8],[96,10,78,12],[96,11,78,13,"persistSession"],[96,25,78,27],[96,28,78,30,"settings"],[96,36,78,38],[96,37,78,39,"persistSession"],[96,51,78,53],[97,6,79,8],[97,10,79,12],[97,11,79,13,"storageKey"],[97,21,79,23],[97,24,79,26,"settings"],[97,32,79,34],[97,33,79,35,"storageKey"],[97,43,79,45],[98,6,80,8],[98,10,80,12],[98,11,80,13,"autoRefreshToken"],[98,27,80,29],[98,30,80,32,"settings"],[98,38,80,40],[98,39,80,41,"autoRefreshToken"],[98,55,80,57],[99,6,81,8],[99,10,81,12],[99,11,81,13,"admin"],[99,16,81,18],[99,19,81,21],[99,23,81,25,"GoTrueAdminApi"],[99,37,81,39],[99,38,81,39,"default"],[99,45,81,39],[99,46,81,40],[100,8,82,12,"url"],[100,11,82,15],[100,13,82,17,"settings"],[100,21,82,25],[100,22,82,26,"url"],[100,25,82,29],[101,8,83,12,"headers"],[101,15,83,19],[101,17,83,21,"settings"],[101,25,83,29],[101,26,83,30,"headers"],[101,33,83,37],[102,8,84,12,"fetch"],[102,13,84,17],[102,15,84,19,"settings"],[102,23,84,27],[102,24,84,28,"fetch"],[103,6,85,8],[103,7,85,9],[103,8,85,10],[104,6,86,8],[104,10,86,12],[104,11,86,13,"url"],[104,14,86,16],[104,17,86,19,"settings"],[104,25,86,27],[104,26,86,28,"url"],[104,29,86,31],[105,6,87,8],[105,10,87,12],[105,11,87,13,"headers"],[105,18,87,20],[105,21,87,23,"settings"],[105,29,87,31],[105,30,87,32,"headers"],[105,37,87,39],[106,6,88,8],[106,10,88,12],[106,11,88,13,"fetch"],[106,16,88,18],[106,19,88,21],[106,23,88,21,"resolveFetch"],[106,34,88,33],[106,35,88,33,"resolveFetch"],[106,47,88,33],[106,49,88,34,"settings"],[106,57,88,42],[106,58,88,43,"fetch"],[106,63,88,48],[106,64,88,49],[107,6,89,8],[107,10,89,12],[107,11,89,13,"lock"],[107,15,89,17],[107,18,89,20,"settings"],[107,26,89,28],[107,27,89,29,"lock"],[107,31,89,33],[107,35,89,37,"lockNoOp"],[107,43,89,45],[108,6,90,8],[108,10,90,12],[108,11,90,13,"detectSessionInUrl"],[108,29,90,31],[108,32,90,34,"settings"],[108,40,90,42],[108,41,90,43,"detectSessionInUrl"],[108,59,90,61],[109,6,91,8],[109,10,91,12],[109,11,91,13,"flowType"],[109,19,91,21],[109,22,91,24,"settings"],[109,30,91,32],[109,31,91,33,"flowType"],[109,39,91,41],[110,6,92,8],[110,10,92,12],[110,11,92,13,"hasCustomAuthorizationHeader"],[110,39,92,41],[110,42,92,44,"settings"],[110,50,92,52],[110,51,92,53,"hasCustomAuthorizationHeader"],[110,79,92,81],[111,6,93,8],[111,10,93,12,"settings"],[111,18,93,20],[111,19,93,21,"lock"],[111,23,93,25],[111,25,93,27],[112,8,94,12],[112,12,94,16],[112,13,94,17,"lock"],[112,17,94,21],[112,20,94,24,"settings"],[112,28,94,32],[112,29,94,33,"lock"],[112,33,94,37],[113,6,95,8],[113,7,95,9],[113,13,96,13],[113,17,96,17],[113,21,96,17,"isBrowser"],[113,32,96,26],[113,33,96,26,"isBrowser"],[113,42,96,26],[113,44,96,27],[113,45,96,28],[113,50,96,33],[113,51,96,34,"_a"],[113,53,96,36],[113,56,96,39,"globalThis"],[113,66,96,49],[113,71,96,54],[113,75,96,58],[113,79,96,62,"globalThis"],[113,89,96,72],[113,94,96,77],[113,99,96,82],[113,100,96,83],[113,103,96,86],[113,108,96,91],[113,109,96,92],[113,112,96,95,"globalThis"],[113,122,96,105],[113,123,96,106,"navigator"],[113,132,96,115],[113,138,96,121],[113,142,96,125],[113,146,96,129,"_a"],[113,148,96,131],[113,153,96,136],[113,158,96,141],[113,159,96,142],[113,162,96,145],[113,167,96,150],[113,168,96,151],[113,171,96,154,"_a"],[113,173,96,156],[113,174,96,157,"locks"],[113,179,96,162],[113,180,96,163],[113,182,96,165],[114,8,97,12],[114,12,97,16],[114,13,97,17,"lock"],[114,17,97,21],[114,20,97,24,"navigatorLock"],[114,29,97,37],[114,30,97,37,"navigatorLock"],[114,43,97,37],[115,6,98,8],[115,7,98,9],[115,13,99,13],[116,8,100,12],[116,12,100,16],[116,13,100,17,"lock"],[116,17,100,21],[116,20,100,24,"lockNoOp"],[116,28,100,32],[117,6,101,8],[118,6,102,8],[118,10,102,12],[118,11,102,13],[118,15,102,17],[118,16,102,18,"jwks"],[118,20,102,22],[118,22,102,24],[119,8,103,12],[119,12,103,16],[119,13,103,17,"jwks"],[119,17,103,21],[119,20,103,24],[120,10,103,26,"keys"],[120,14,103,30],[120,16,103,32],[121,8,103,35],[121,9,103,36],[122,8,104,12],[122,12,104,16],[122,13,104,17,"jwks_cached_at"],[122,27,104,31],[122,30,104,34,"Number"],[122,36,104,40],[122,37,104,41,"MIN_SAFE_INTEGER"],[122,53,104,57],[123,6,105,8],[124,6,106,8],[124,10,106,12],[124,11,106,13,"mfa"],[124,14,106,16],[124,17,106,19],[125,8,107,12,"verify"],[125,14,107,18],[125,16,107,20],[125,20,107,24],[125,21,107,25,"_verify"],[125,28,107,32],[125,29,107,33,"bind"],[125,33,107,37],[125,34,107,38],[125,38,107,42],[125,39,107,43],[126,8,108,12,"enroll"],[126,14,108,18],[126,16,108,20],[126,20,108,24],[126,21,108,25,"_enroll"],[126,28,108,32],[126,29,108,33,"bind"],[126,33,108,37],[126,34,108,38],[126,38,108,42],[126,39,108,43],[127,8,109,12,"unenroll"],[127,16,109,20],[127,18,109,22],[127,22,109,26],[127,23,109,27,"_unenroll"],[127,32,109,36],[127,33,109,37,"bind"],[127,37,109,41],[127,38,109,42],[127,42,109,46],[127,43,109,47],[128,8,110,12,"challenge"],[128,17,110,21],[128,19,110,23],[128,23,110,27],[128,24,110,28,"_challenge"],[128,34,110,38],[128,35,110,39,"bind"],[128,39,110,43],[128,40,110,44],[128,44,110,48],[128,45,110,49],[129,8,111,12,"listFactors"],[129,19,111,23],[129,21,111,25],[129,25,111,29],[129,26,111,30,"_listFactors"],[129,38,111,42],[129,39,111,43,"bind"],[129,43,111,47],[129,44,111,48],[129,48,111,52],[129,49,111,53],[130,8,112,12,"challengeAndVerify"],[130,26,112,30],[130,28,112,32],[130,32,112,36],[130,33,112,37,"_challengeAndVerify"],[130,52,112,56],[130,53,112,57,"bind"],[130,57,112,61],[130,58,112,62],[130,62,112,66],[130,63,112,67],[131,8,113,12,"getAuthenticatorAssuranceLevel"],[131,38,113,42],[131,40,113,44],[131,44,113,48],[131,45,113,49,"_getAuthenticatorAssuranceLevel"],[131,76,113,80],[131,77,113,81,"bind"],[131,81,113,85],[131,82,113,86],[131,86,113,90],[132,6,114,8],[132,7,114,9],[133,6,115,8],[133,10,115,12],[133,14,115,16],[133,15,115,17,"persistSession"],[133,29,115,31],[133,31,115,33],[134,8,116,12],[134,12,116,16,"settings"],[134,20,116,24],[134,21,116,25,"storage"],[134,28,116,32],[134,30,116,34],[135,10,117,16],[135,14,117,20],[135,15,117,21,"storage"],[135,22,117,28],[135,25,117,31,"settings"],[135,33,117,39],[135,34,117,40,"storage"],[135,41,117,47],[136,8,118,12],[136,9,118,13],[136,15,119,17],[137,10,120,16],[137,14,120,20],[137,18,120,20,"supportsLocalStorage"],[137,29,120,40],[137,30,120,40,"supportsLocalStorage"],[137,50,120,40],[137,52,120,41],[137,53,120,42],[137,55,120,44],[138,12,121,20],[138,16,121,24],[138,17,121,25,"storage"],[138,24,121,32],[138,27,121,35,"globalThis"],[138,37,121,45],[138,38,121,46,"localStorage"],[138,50,121,58],[139,10,122,16],[139,11,122,17],[139,17,123,21],[140,12,124,20],[140,16,124,24],[140,17,124,25,"memoryStorage"],[140,30,124,38],[140,33,124,41],[140,34,124,42],[140,35,124,43],[141,12,125,20],[141,16,125,24],[141,17,125,25,"storage"],[141,24,125,32],[141,27,125,35],[141,31,125,35,"memoryLocalStorageAdapter"],[141,47,125,60],[141,48,125,60,"memoryLocalStorageAdapter"],[141,73,125,60],[141,75,125,61],[141,79,125,65],[141,80,125,66,"memoryStorage"],[141,93,125,79],[141,94,125,80],[142,10,126,16],[143,8,127,12],[144,8,128,12],[144,12,128,16,"settings"],[144,20,128,24],[144,21,128,25,"userStorage"],[144,32,128,36],[144,34,128,38],[145,10,129,16],[145,14,129,20],[145,15,129,21,"userStorage"],[145,26,129,32],[145,29,129,35,"settings"],[145,37,129,43],[145,38,129,44,"userStorage"],[145,49,129,55],[146,8,130,12],[147,6,131,8],[147,7,131,9],[147,13,132,13],[148,8,133,12],[148,12,133,16],[148,13,133,17,"memoryStorage"],[148,26,133,30],[148,29,133,33],[148,30,133,34],[148,31,133,35],[149,8,134,12],[149,12,134,16],[149,13,134,17,"storage"],[149,20,134,24],[149,23,134,27],[149,27,134,27,"memoryLocalStorageAdapter"],[149,43,134,52],[149,44,134,52,"memoryLocalStorageAdapter"],[149,69,134,52],[149,71,134,53],[149,75,134,57],[149,76,134,58,"memoryStorage"],[149,89,134,71],[149,90,134,72],[150,6,135,8],[151,6,136,8],[151,10,136,12],[151,14,136,12,"isBrowser"],[151,25,136,21],[151,26,136,21,"isBrowser"],[151,35,136,21],[151,37,136,22],[151,38,136,23],[151,42,136,27,"globalThis"],[151,52,136,37],[151,53,136,38,"BroadcastChannel"],[151,69,136,54],[151,73,136,58],[151,77,136,62],[151,78,136,63,"persistSession"],[151,92,136,77],[151,96,136,81],[151,100,136,85],[151,101,136,86,"storageKey"],[151,111,136,96],[151,113,136,98],[152,8,137,12],[152,12,137,16],[153,10,138,16],[153,14,138,20],[153,15,138,21,"broadcastChannel"],[153,31,138,37],[153,34,138,40],[153,38,138,44,"globalThis"],[153,48,138,54],[153,49,138,55,"BroadcastChannel"],[153,65,138,71],[153,66,138,72],[153,70,138,76],[153,71,138,77,"storageKey"],[153,81,138,87],[153,82,138,88],[154,8,139,12],[154,9,139,13],[154,10,140,12],[154,17,140,19,"e"],[154,18,140,20],[154,20,140,22],[155,10,141,16,"console"],[155,17,141,23],[155,18,141,24,"error"],[155,23,141,29],[155,24,141,30],[155,112,141,118],[155,114,141,120,"e"],[155,115,141,121],[155,116,141,122],[156,8,142,12],[157,8,143,12],[157,9,143,13,"_b"],[157,11,143,15],[157,14,143,18],[157,18,143,22],[157,19,143,23,"broadcastChannel"],[157,35,143,39],[157,41,143,45],[157,45,143,49],[157,49,143,53,"_b"],[157,51,143,55],[157,56,143,60],[157,61,143,65],[157,62,143,66],[157,65,143,69],[157,70,143,74],[157,71,143,75],[157,74,143,78,"_b"],[157,76,143,80],[157,77,143,81,"addEventListener"],[157,93,143,97],[157,94,143,98],[157,103,143,107],[157,105,143,109],[157,111,143,116,"event"],[157,116,143,121],[157,120,143,126],[158,10,144,16],[158,14,144,20],[158,15,144,21,"_debug"],[158,21,144,27],[158,22,144,28],[158,80,144,86],[158,82,144,88,"event"],[158,87,144,93],[158,88,144,94],[159,10,145,16],[159,16,145,22],[159,20,145,26],[159,21,145,27,"_notifyAllSubscribers"],[159,42,145,48],[159,43,145,49,"event"],[159,48,145,54],[159,49,145,55,"data"],[159,53,145,59],[159,54,145,60,"event"],[159,59,145,65],[159,61,145,67,"event"],[159,66,145,72],[159,67,145,73,"data"],[159,71,145,77],[159,72,145,78,"session"],[159,79,145,85],[159,81,145,87],[159,86,145,92],[159,87,145,93],[159,88,145,94],[159,89,145,95],[160,8,146,12],[160,9,146,13],[160,10,146,14],[161,6,147,8],[162,6,148,8],[162,10,148,12],[162,11,148,13,"initialize"],[162,21,148,23],[162,22,148,24],[162,23,148,25],[163,4,149,4],[164,4,150,4],[165,0,151,0],[166,0,152,0],[167,4,153,4],[167,8,153,8,"jwks"],[167,12,153,12,"jwks"],[167,13,153,12],[167,15,153,15],[168,6,154,8],[168,10,154,12,"_a"],[168,12,154,14],[168,14,154,16,"_b"],[168,16,154,18],[169,6,155,8],[169,13,155,15],[169,14,155,16,"_b"],[169,16,155,18],[169,19,155,21],[169,20,155,22,"_a"],[169,22,155,24],[169,25,155,27,"GLOBAL_JWKS"],[169,36,155,38],[169,37,155,39],[169,41,155,43],[169,42,155,44,"storageKey"],[169,52,155,54],[169,53,155,55],[169,59,155,61],[169,63,155,65],[169,67,155,69,"_a"],[169,69,155,71],[169,74,155,76],[169,79,155,81],[169,80,155,82],[169,83,155,85],[169,88,155,90],[169,89,155,91],[169,92,155,94,"_a"],[169,94,155,96],[169,95,155,97,"jwks"],[169,99,155,101],[169,105,155,107],[169,109,155,111],[169,113,155,115,"_b"],[169,115,155,117],[169,120,155,122],[169,125,155,127],[169,126,155,128],[169,129,155,131,"_b"],[169,131,155,133],[169,134,155,136],[170,8,155,138,"keys"],[170,12,155,142],[170,14,155,144],[171,6,155,147],[171,7,155,148],[172,4,156,4],[173,4,157,4],[173,8,157,8,"jwks"],[173,12,157,12,"jwks"],[173,13,157,13,"value"],[173,18,157,18],[173,20,157,20],[174,6,158,8,"GLOBAL_JWKS"],[174,17,158,19],[174,18,158,20],[174,22,158,24],[174,23,158,25,"storageKey"],[174,33,158,35],[174,34,158,36],[174,37,158,39,"Object"],[174,43,158,45],[174,44,158,46,"assign"],[174,50,158,52],[174,51,158,53,"Object"],[174,57,158,59],[174,58,158,60,"assign"],[174,64,158,66],[174,65,158,67],[174,66,158,68],[174,67,158,69],[174,69,158,71,"GLOBAL_JWKS"],[174,80,158,82],[174,81,158,83],[174,85,158,87],[174,86,158,88,"storageKey"],[174,96,158,98],[174,97,158,99],[174,98,158,100],[174,100,158,102],[175,8,158,104,"jwks"],[175,12,158,108],[175,14,158,110,"value"],[176,6,158,116],[176,7,158,117],[176,8,158,118],[177,4,159,4],[178,4,160,4],[178,8,160,8,"jwks_cached_at"],[178,22,160,22,"jwks_cached_at"],[178,23,160,22],[178,25,160,25],[179,6,161,8],[179,10,161,12,"_a"],[179,12,161,14],[179,14,161,16,"_b"],[179,16,161,18],[180,6,162,8],[180,13,162,15],[180,14,162,16,"_b"],[180,16,162,18],[180,19,162,21],[180,20,162,22,"_a"],[180,22,162,24],[180,25,162,27,"GLOBAL_JWKS"],[180,36,162,38],[180,37,162,39],[180,41,162,43],[180,42,162,44,"storageKey"],[180,52,162,54],[180,53,162,55],[180,59,162,61],[180,63,162,65],[180,67,162,69,"_a"],[180,69,162,71],[180,74,162,76],[180,79,162,81],[180,80,162,82],[180,83,162,85],[180,88,162,90],[180,89,162,91],[180,92,162,94,"_a"],[180,94,162,96],[180,95,162,97,"cachedAt"],[180,103,162,105],[180,109,162,111],[180,113,162,115],[180,117,162,119,"_b"],[180,119,162,121],[180,124,162,126],[180,129,162,131],[180,130,162,132],[180,133,162,135,"_b"],[180,135,162,137],[180,138,162,140,"Number"],[180,144,162,146],[180,145,162,147,"MIN_SAFE_INTEGER"],[180,161,162,163],[181,4,163,4],[182,4,164,4],[182,8,164,8,"jwks_cached_at"],[182,22,164,22,"jwks_cached_at"],[182,23,164,23,"value"],[182,28,164,28],[182,30,164,30],[183,6,165,8,"GLOBAL_JWKS"],[183,17,165,19],[183,18,165,20],[183,22,165,24],[183,23,165,25,"storageKey"],[183,33,165,35],[183,34,165,36],[183,37,165,39,"Object"],[183,43,165,45],[183,44,165,46,"assign"],[183,50,165,52],[183,51,165,53,"Object"],[183,57,165,59],[183,58,165,60,"assign"],[183,64,165,66],[183,65,165,67],[183,66,165,68],[183,67,165,69],[183,69,165,71,"GLOBAL_JWKS"],[183,80,165,82],[183,81,165,83],[183,85,165,87],[183,86,165,88,"storageKey"],[183,96,165,98],[183,97,165,99],[183,98,165,100],[183,100,165,102],[184,8,165,104,"cachedAt"],[184,16,165,112],[184,18,165,114,"value"],[185,6,165,120],[185,7,165,121],[185,8,165,122],[186,4,166,4],[187,4,167,4,"_debug"],[187,10,167,10,"_debug"],[187,11,167,11],[187,14,167,14,"args"],[187,18,167,18],[187,20,167,20],[188,6,168,8],[188,10,168,12],[188,14,168,16],[188,15,168,17,"logDebugMessages"],[188,31,168,33],[188,33,168,35],[189,8,169,12],[189,12,169,16],[189,13,169,17,"logger"],[189,19,169,23],[189,20,169,24],[189,36,169,40],[189,40,169,44],[189,41,169,45,"instanceID"],[189,51,169,55],[189,56,169,60,"version"],[189,67,169,67],[189,68,169,67,"version"],[189,75,169,67],[189,80,169,72],[189,84,169,76,"Date"],[189,88,169,80],[189,89,169,81],[189,90,169,82],[189,91,169,83,"toISOString"],[189,102,169,94],[189,103,169,95],[189,104,169,96],[189,106,169,98],[189,108,169,100],[189,111,169,103,"args"],[189,115,169,107],[189,116,169,108],[190,6,170,8],[191,6,171,8],[191,13,171,15],[191,17,171,19],[192,4,172,4],[193,4,173,4],[194,0,174,0],[195,0,175,0],[196,0,176,0],[197,0,177,0],[198,4,178,4],[198,10,178,10,"initialize"],[198,20,178,20,"initialize"],[198,21,178,20],[198,23,178,23],[199,6,179,8],[199,10,179,12],[199,14,179,16],[199,15,179,17,"initializePromise"],[199,32,179,34],[199,34,179,36],[200,8,180,12],[200,15,180,19],[200,21,180,25],[200,25,180,29],[200,26,180,30,"initializePromise"],[200,43,180,47],[201,6,181,8],[202,6,182,8],[202,10,182,12],[202,11,182,13,"initializePromise"],[202,28,182,30],[202,31,182,33],[202,32,182,34],[202,44,182,46],[203,8,183,12],[203,15,183,19],[203,21,183,25],[203,25,183,29],[203,26,183,30,"_acquireLock"],[203,38,183,42],[203,39,183,43],[203,40,183,44],[203,41,183,45],[203,43,183,47],[203,55,183,59],[204,10,184,16],[204,17,184,23],[204,23,184,29],[204,27,184,33],[204,28,184,34,"_initialize"],[204,39,184,45],[204,40,184,46],[204,41,184,47],[205,8,185,12],[205,9,185,13],[205,10,185,14],[206,6,186,8],[206,7,186,9],[206,9,186,11],[206,10,186,12],[207,6,187,8],[207,13,187,15],[207,19,187,21],[207,23,187,25],[207,24,187,26,"initializePromise"],[207,41,187,43],[208,4,188,4],[209,4,189,4],[210,0,190,0],[211,0,191,0],[212,0,192,0],[213,0,193,0],[214,0,194,0],[215,4,195,4],[215,10,195,10,"_initialize"],[215,21,195,21,"_initialize"],[215,22,195,21],[215,24,195,24],[216,6,196,8],[216,10,196,12,"_a"],[216,12,196,14],[217,6,197,8],[217,10,197,12],[218,8,198,12],[218,14,198,18,"params"],[218,20,198,24],[218,23,198,27],[218,27,198,27,"parseParametersFromURL"],[218,38,198,49],[218,39,198,49,"parseParametersFromURL"],[218,61,198,49],[218,63,198,50,"window"],[218,69,198,56],[218,70,198,57,"location"],[218,78,198,65],[218,79,198,66,"href"],[218,83,198,70],[218,84,198,71],[219,8,199,12],[219,12,199,16,"callbackUrlType"],[219,27,199,31],[219,30,199,34],[219,36,199,40],[220,8,200,12],[220,12,200,16],[220,16,200,20],[220,17,200,21,"_isImplicitGrantCallback"],[220,41,200,45],[220,42,200,46,"params"],[220,48,200,52],[220,49,200,53],[220,51,200,55],[221,10,201,16,"callbackUrlType"],[221,25,201,31],[221,28,201,34],[221,38,201,44],[222,8,202,12],[222,9,202,13],[222,15,203,17],[222,19,203,21],[222,25,203,27],[222,29,203,31],[222,30,203,32,"_isPKCECallback"],[222,45,203,47],[222,46,203,48,"params"],[222,52,203,54],[222,53,203,55],[222,55,203,57],[223,10,204,16,"callbackUrlType"],[223,25,204,31],[223,28,204,34],[223,34,204,40],[224,8,205,12],[225,8,206,12],[226,0,207,0],[227,0,208,0],[228,0,209,0],[229,0,210,0],[230,0,211,0],[231,8,212,12],[231,12,212,16],[231,16,212,16,"isBrowser"],[231,27,212,25],[231,28,212,25,"isBrowser"],[231,37,212,25],[231,39,212,26],[231,40,212,27],[231,44,212,31],[231,48,212,35],[231,49,212,36,"detectSessionInUrl"],[231,67,212,54],[231,71,212,58,"callbackUrlType"],[231,86,212,73],[231,91,212,78],[231,97,212,84],[231,99,212,86],[232,10,213,16],[232,16,213,22],[233,12,213,24,"data"],[233,16,213,28],[234,12,213,30,"error"],[235,10,213,36],[235,11,213,37],[235,14,213,40],[235,20,213,46],[235,24,213,50],[235,25,213,51,"_getSessionFromURL"],[235,43,213,69],[235,44,213,70,"params"],[235,50,213,76],[235,52,213,78,"callbackUrlType"],[235,67,213,93],[235,68,213,94],[236,10,214,16],[236,14,214,20,"error"],[236,19,214,25],[236,21,214,27],[237,12,215,20],[237,16,215,24],[237,17,215,25,"_debug"],[237,23,215,31],[237,24,215,32],[237,40,215,48],[237,42,215,50],[237,76,215,84],[237,78,215,86,"error"],[237,83,215,91],[237,84,215,92],[238,12,216,20],[238,16,216,24],[238,20,216,24,"isAuthImplicitGrantRedirectError"],[238,30,216,56],[238,31,216,56,"isAuthImplicitGrantRedirectError"],[238,63,216,56],[238,65,216,57,"error"],[238,70,216,62],[238,71,216,63],[238,73,216,65],[239,14,217,24],[239,20,217,30,"errorCode"],[239,29,217,39],[239,32,217,42],[239,33,217,43,"_a"],[239,35,217,45],[239,38,217,48,"error"],[239,43,217,53],[239,44,217,54,"details"],[239,51,217,61],[239,57,217,67],[239,61,217,71],[239,65,217,75,"_a"],[239,67,217,77],[239,72,217,82],[239,77,217,87],[239,78,217,88],[239,81,217,91],[239,86,217,96],[239,87,217,97],[239,90,217,100,"_a"],[239,92,217,102],[239,93,217,103,"code"],[239,97,217,107],[240,14,218,24],[240,18,218,28,"errorCode"],[240,27,218,37],[240,32,218,42],[240,57,218,67],[240,61,219,28,"errorCode"],[240,70,219,37],[240,75,219,42],[240,95,219,62],[240,99,220,28,"errorCode"],[240,108,220,37],[240,113,220,42],[240,144,220,73],[240,146,220,75],[241,16,221,28],[241,23,221,35],[242,18,221,37,"error"],[243,16,221,43],[243,17,221,44],[244,14,222,24],[245,12,223,20],[246,12,224,20],[247,12,225,20],[248,12,226,20],[248,18,226,26],[248,22,226,30],[248,23,226,31,"_removeSession"],[248,37,226,45],[248,38,226,46],[248,39,226,47],[249,12,227,20],[249,19,227,27],[250,14,227,29,"error"],[251,12,227,35],[251,13,227,36],[252,10,228,16],[253,10,229,16],[253,16,229,22],[254,12,229,24,"session"],[254,19,229,31],[255,12,229,33,"redirectType"],[256,10,229,46],[256,11,229,47],[256,14,229,50,"data"],[256,18,229,54],[257,10,230,16],[257,14,230,20],[257,15,230,21,"_debug"],[257,21,230,27],[257,22,230,28],[257,38,230,44],[257,40,230,46],[257,65,230,71],[257,67,230,73,"session"],[257,74,230,80],[257,76,230,82],[257,91,230,97],[257,93,230,99,"redirectType"],[257,105,230,111],[257,106,230,112],[258,10,231,16],[258,16,231,22],[258,20,231,26],[258,21,231,27,"_saveSession"],[258,33,231,39],[258,34,231,40,"session"],[258,41,231,47],[258,42,231,48],[259,10,232,16,"setTimeout"],[259,20,232,26],[259,21,232,27],[259,33,232,39],[260,12,233,20],[260,16,233,24,"redirectType"],[260,28,233,36],[260,33,233,41],[260,43,233,51],[260,45,233,53],[261,14,234,24],[261,20,234,30],[261,24,234,34],[261,25,234,35,"_notifyAllSubscribers"],[261,46,234,56],[261,47,234,57],[261,66,234,76],[261,68,234,78,"session"],[261,75,234,85],[261,76,234,86],[262,12,235,20],[262,13,235,21],[262,19,236,25],[263,14,237,24],[263,20,237,30],[263,24,237,34],[263,25,237,35,"_notifyAllSubscribers"],[263,46,237,56],[263,47,237,57],[263,58,237,68],[263,60,237,70,"session"],[263,67,237,77],[263,68,237,78],[264,12,238,20],[265,10,239,16],[265,11,239,17],[265,13,239,19],[265,14,239,20],[265,15,239,21],[266,10,240,16],[266,17,240,23],[267,12,240,25,"error"],[267,17,240,30],[267,19,240,32],[268,10,240,37],[268,11,240,38],[269,8,241,12],[270,8,242,12],[271,8,243,12],[271,14,243,18],[271,18,243,22],[271,19,243,23,"_recoverAndRefresh"],[271,37,243,41],[271,38,243,42],[271,39,243,43],[272,8,244,12],[272,15,244,19],[273,10,244,21,"error"],[273,15,244,26],[273,17,244,28],[274,8,244,33],[274,9,244,34],[275,6,245,8],[275,7,245,9],[275,8,246,8],[275,15,246,15,"error"],[275,20,246,20],[275,22,246,22],[276,8,247,12],[276,12,247,16],[276,16,247,16,"isAuthError"],[276,26,247,27],[276,27,247,27,"isAuthError"],[276,38,247,27],[276,40,247,28,"error"],[276,45,247,33],[276,46,247,34],[276,48,247,36],[277,10,248,16],[277,17,248,23],[278,12,248,25,"error"],[279,10,248,31],[279,11,248,32],[280,8,249,12],[281,8,250,12],[281,15,250,19],[282,10,251,16,"error"],[282,15,251,21],[282,17,251,23],[282,21,251,27,"AuthUnknownError"],[282,31,251,43],[282,32,251,43,"AuthUnknownError"],[282,48,251,43],[282,49,251,44],[282,89,251,84],[282,91,251,86,"error"],[282,96,251,91],[283,8,252,12],[283,9,252,13],[284,6,253,8],[284,7,253,9],[284,16,254,16],[285,8,255,12],[285,14,255,18],[285,18,255,22],[285,19,255,23,"_handleVisibilityChange"],[285,42,255,46],[285,43,255,47],[285,44,255,48],[286,8,256,12],[286,12,256,16],[286,13,256,17,"_debug"],[286,19,256,23],[286,20,256,24],[286,36,256,40],[286,38,256,42],[286,43,256,47],[286,44,256,48],[287,6,257,8],[288,4,258,4],[289,4,259,4],[290,0,260,0],[291,0,261,0],[292,0,262,0],[293,0,263,0],[294,4,264,4],[294,10,264,10,"signInAnonymously"],[294,27,264,27,"signInAnonymously"],[294,28,264,28,"credentials"],[294,39,264,39],[294,41,264,41],[295,6,265,8],[295,10,265,12,"_a"],[295,12,265,14],[295,14,265,16,"_b"],[295,16,265,18],[295,18,265,20,"_c"],[295,20,265,22],[296,6,266,8],[296,10,266,12],[297,8,267,12],[297,14,267,18,"res"],[297,17,267,21],[297,20,267,24],[297,26,267,30],[297,30,267,30,"_request"],[297,39,267,38],[297,40,267,38,"_request"],[297,48,267,38],[297,50,267,39],[297,54,267,43],[297,55,267,44,"fetch"],[297,60,267,49],[297,62,267,51],[297,68,267,57],[297,70,267,59],[297,73,267,62],[297,77,267,66],[297,78,267,67,"url"],[297,81,267,70],[297,90,267,79],[297,92,267,81],[298,10,268,16,"headers"],[298,17,268,23],[298,19,268,25],[298,23,268,29],[298,24,268,30,"headers"],[298,31,268,37],[299,10,269,16,"body"],[299,14,269,20],[299,16,269,22],[300,12,270,20,"data"],[300,16,270,24],[300,18,270,26],[300,19,270,27,"_b"],[300,21,270,29],[300,24,270,32],[300,25,270,33,"_a"],[300,27,270,35],[300,30,270,38,"credentials"],[300,41,270,49],[300,46,270,54],[300,50,270,58],[300,54,270,62,"credentials"],[300,65,270,73],[300,70,270,78],[300,75,270,83],[300,76,270,84],[300,79,270,87],[300,84,270,92],[300,85,270,93],[300,88,270,96,"credentials"],[300,99,270,107],[300,100,270,108,"options"],[300,107,270,115],[300,113,270,121],[300,117,270,125],[300,121,270,129,"_a"],[300,123,270,131],[300,128,270,136],[300,133,270,141],[300,134,270,142],[300,137,270,145],[300,142,270,150],[300,143,270,151],[300,146,270,154,"_a"],[300,148,270,156],[300,149,270,157,"data"],[300,153,270,161],[300,159,270,167],[300,163,270,171],[300,167,270,175,"_b"],[300,169,270,177],[300,174,270,182],[300,179,270,187],[300,180,270,188],[300,183,270,191,"_b"],[300,185,270,193],[300,188,270,196],[300,189,270,197],[300,190,270,198],[301,12,271,20,"gotrue_meta_security"],[301,32,271,40],[301,34,271,42],[302,14,271,44,"captcha_token"],[302,27,271,57],[302,29,271,59],[302,30,271,60,"_c"],[302,32,271,62],[302,35,271,65,"credentials"],[302,46,271,76],[302,51,271,81],[302,55,271,85],[302,59,271,89,"credentials"],[302,70,271,100],[302,75,271,105],[302,80,271,110],[302,81,271,111],[302,84,271,114],[302,89,271,119],[302,90,271,120],[302,93,271,123,"credentials"],[302,104,271,134],[302,105,271,135,"options"],[302,112,271,142],[302,118,271,148],[302,122,271,152],[302,126,271,156,"_c"],[302,128,271,158],[302,133,271,163],[302,138,271,168],[302,139,271,169],[302,142,271,172],[302,147,271,177],[302,148,271,178],[302,151,271,181,"_c"],[302,153,271,183],[302,154,271,184,"captchaToken"],[303,12,271,197],[304,10,272,16],[304,11,272,17],[305,10,273,16,"xform"],[305,15,273,21],[305,17,273,23,"_sessionResponse"],[305,26,273,39],[305,27,273,39,"_sessionResponse"],[306,8,274,12],[306,9,274,13],[306,10,274,14],[307,8,275,12],[307,14,275,18],[308,10,275,20,"data"],[308,14,275,24],[309,10,275,26,"error"],[310,8,275,32],[310,9,275,33],[310,12,275,36,"res"],[310,15,275,39],[311,8,276,12],[311,12,276,16,"error"],[311,17,276,21],[311,21,276,25],[311,22,276,26,"data"],[311,26,276,30],[311,28,276,32],[312,10,277,16],[312,17,277,23],[313,12,277,25,"data"],[313,16,277,29],[313,18,277,31],[314,14,277,33,"user"],[314,18,277,37],[314,20,277,39],[314,24,277,43],[315,14,277,45,"session"],[315,21,277,52],[315,23,277,54],[316,12,277,59],[316,13,277,60],[317,12,277,62,"error"],[317,17,277,67],[317,19,277,69,"error"],[318,10,277,75],[318,11,277,76],[319,8,278,12],[320,8,279,12],[320,14,279,18,"session"],[320,21,279,25],[320,24,279,28,"data"],[320,28,279,32],[320,29,279,33,"session"],[320,36,279,40],[321,8,280,12],[321,14,280,18,"user"],[321,18,280,22],[321,21,280,25,"data"],[321,25,280,29],[321,26,280,30,"user"],[321,30,280,34],[322,8,281,12],[322,12,281,16,"data"],[322,16,281,20],[322,17,281,21,"session"],[322,24,281,28],[322,26,281,30],[323,10,282,16],[323,16,282,22],[323,20,282,26],[323,21,282,27,"_saveSession"],[323,33,282,39],[323,34,282,40,"data"],[323,38,282,44],[323,39,282,45,"session"],[323,46,282,52],[323,47,282,53],[324,10,283,16],[324,16,283,22],[324,20,283,26],[324,21,283,27,"_notifyAllSubscribers"],[324,42,283,48],[324,43,283,49],[324,54,283,60],[324,56,283,62,"session"],[324,63,283,69],[324,64,283,70],[325,8,284,12],[326,8,285,12],[326,15,285,19],[327,10,285,21,"data"],[327,14,285,25],[327,16,285,27],[328,12,285,29,"user"],[328,16,285,33],[329,12,285,35,"session"],[330,10,285,43],[330,11,285,44],[331,10,285,46,"error"],[331,15,285,51],[331,17,285,53],[332,8,285,58],[332,9,285,59],[333,6,286,8],[333,7,286,9],[333,8,287,8],[333,15,287,15,"error"],[333,20,287,20],[333,22,287,22],[334,8,288,12],[334,12,288,16],[334,16,288,16,"isAuthError"],[334,26,288,27],[334,27,288,27,"isAuthError"],[334,38,288,27],[334,40,288,28,"error"],[334,45,288,33],[334,46,288,34],[334,48,288,36],[335,10,289,16],[335,17,289,23],[336,12,289,25,"data"],[336,16,289,29],[336,18,289,31],[337,14,289,33,"user"],[337,18,289,37],[337,20,289,39],[337,24,289,43],[338,14,289,45,"session"],[338,21,289,52],[338,23,289,54],[339,12,289,59],[339,13,289,60],[340,12,289,62,"error"],[341,10,289,68],[341,11,289,69],[342,8,290,12],[343,8,291,12],[343,14,291,18,"error"],[343,19,291,23],[344,6,292,8],[345,4,293,4],[346,4,294,4],[347,0,295,0],[348,0,296,0],[349,0,297,0],[350,0,298,0],[351,0,299,0],[352,0,300,0],[353,0,301,0],[354,0,302,0],[355,0,303,0],[356,4,304,4],[356,10,304,10,"signUp"],[356,16,304,16,"signUp"],[356,17,304,17,"credentials"],[356,28,304,28],[356,30,304,30],[357,6,305,8],[357,10,305,12,"_a"],[357,12,305,14],[357,14,305,16,"_b"],[357,16,305,18],[357,18,305,20,"_c"],[357,20,305,22],[358,6,306,8],[358,10,306,12],[359,8,307,12],[359,12,307,16,"res"],[359,15,307,19],[360,8,308,12],[360,12,308,16],[360,19,308,23],[360,23,308,27,"credentials"],[360,34,308,38],[360,36,308,40],[361,10,309,16],[361,16,309,22],[362,12,309,24,"email"],[362,17,309,29],[363,12,309,31,"password"],[363,20,309,39],[364,12,309,41,"options"],[365,10,309,49],[365,11,309,50],[365,14,309,53,"credentials"],[365,25,309,64],[366,10,310,16],[366,14,310,20,"codeChallenge"],[366,27,310,33],[366,30,310,36],[366,34,310,40],[367,10,311,16],[367,14,311,20,"codeChallengeMethod"],[367,33,311,39],[367,36,311,42],[367,40,311,46],[368,10,312,16],[368,14,312,20],[368,18,312,24],[368,19,312,25,"flowType"],[368,27,312,33],[368,32,312,38],[368,38,312,44],[368,40,312,46],[369,12,313,20],[370,12,314,20],[370,13,314,21,"codeChallenge"],[370,26,314,34],[370,28,314,36,"codeChallengeMethod"],[370,47,314,55],[370,48,314,56],[370,51,314,59],[370,57,314,65],[370,61,314,65,"getCodeChallengeAndMethod"],[370,72,314,90],[370,73,314,90,"getCodeChallengeAndMethod"],[370,98,314,90],[370,100,314,91],[370,104,314,95],[370,105,314,96,"storage"],[370,112,314,103],[370,114,314,105],[370,118,314,109],[370,119,314,110,"storageKey"],[370,129,314,120],[370,130,314,121],[371,10,315,16],[372,10,316,16,"res"],[372,13,316,19],[372,16,316,22],[372,22,316,28],[372,26,316,28,"_request"],[372,35,316,36],[372,36,316,36,"_request"],[372,44,316,36],[372,46,316,37],[372,50,316,41],[372,51,316,42,"fetch"],[372,56,316,47],[372,58,316,49],[372,64,316,55],[372,66,316,57],[372,69,316,60],[372,73,316,64],[372,74,316,65,"url"],[372,77,316,68],[372,86,316,77],[372,88,316,79],[373,12,317,20,"headers"],[373,19,317,27],[373,21,317,29],[373,25,317,33],[373,26,317,34,"headers"],[373,33,317,41],[374,12,318,20,"redirectTo"],[374,22,318,30],[374,24,318,32,"options"],[374,31,318,39],[374,36,318,44],[374,40,318,48],[374,44,318,52,"options"],[374,51,318,59],[374,56,318,64],[374,61,318,69],[374,62,318,70],[374,65,318,73],[374,70,318,78],[374,71,318,79],[374,74,318,82,"options"],[374,81,318,89],[374,82,318,90,"emailRedirectTo"],[374,97,318,105],[375,12,319,20,"body"],[375,16,319,24],[375,18,319,26],[376,14,320,24,"email"],[376,19,320,29],[377,14,321,24,"password"],[377,22,321,32],[378,14,322,24,"data"],[378,18,322,28],[378,20,322,30],[378,21,322,31,"_a"],[378,23,322,33],[378,26,322,36,"options"],[378,33,322,43],[378,38,322,48],[378,42,322,52],[378,46,322,56,"options"],[378,53,322,63],[378,58,322,68],[378,63,322,73],[378,64,322,74],[378,67,322,77],[378,72,322,82],[378,73,322,83],[378,76,322,86,"options"],[378,83,322,93],[378,84,322,94,"data"],[378,88,322,98],[378,94,322,104],[378,98,322,108],[378,102,322,112,"_a"],[378,104,322,114],[378,109,322,119],[378,114,322,124],[378,115,322,125],[378,118,322,128,"_a"],[378,120,322,130],[378,123,322,133],[378,124,322,134],[378,125,322,135],[379,14,323,24,"gotrue_meta_security"],[379,34,323,44],[379,36,323,46],[380,16,323,48,"captcha_token"],[380,29,323,61],[380,31,323,63,"options"],[380,38,323,70],[380,43,323,75],[380,47,323,79],[380,51,323,83,"options"],[380,58,323,90],[380,63,323,95],[380,68,323,100],[380,69,323,101],[380,72,323,104],[380,77,323,109],[380,78,323,110],[380,81,323,113,"options"],[380,88,323,120],[380,89,323,121,"captchaToken"],[381,14,323,134],[381,15,323,135],[382,14,324,24,"code_challenge"],[382,28,324,38],[382,30,324,40,"codeChallenge"],[382,43,324,53],[383,14,325,24,"code_challenge_method"],[383,35,325,45],[383,37,325,47,"codeChallengeMethod"],[384,12,326,20],[384,13,326,21],[385,12,327,20,"xform"],[385,17,327,25],[385,19,327,27,"_sessionResponse"],[385,28,327,43],[385,29,327,43,"_sessionResponse"],[386,10,328,16],[386,11,328,17],[386,12,328,18],[387,8,329,12],[387,9,329,13],[387,15,330,17],[387,19,330,21],[387,26,330,28],[387,30,330,32,"credentials"],[387,41,330,43],[387,43,330,45],[388,10,331,16],[388,16,331,22],[389,12,331,24,"phone"],[389,17,331,29],[390,12,331,31,"password"],[390,20,331,39],[391,12,331,41,"options"],[392,10,331,49],[392,11,331,50],[392,14,331,53,"credentials"],[392,25,331,64],[393,10,332,16,"res"],[393,13,332,19],[393,16,332,22],[393,22,332,28],[393,26,332,28,"_request"],[393,35,332,36],[393,36,332,36,"_request"],[393,44,332,36],[393,46,332,37],[393,50,332,41],[393,51,332,42,"fetch"],[393,56,332,47],[393,58,332,49],[393,64,332,55],[393,66,332,57],[393,69,332,60],[393,73,332,64],[393,74,332,65,"url"],[393,77,332,68],[393,86,332,77],[393,88,332,79],[394,12,333,20,"headers"],[394,19,333,27],[394,21,333,29],[394,25,333,33],[394,26,333,34,"headers"],[394,33,333,41],[395,12,334,20,"body"],[395,16,334,24],[395,18,334,26],[396,14,335,24,"phone"],[396,19,335,29],[397,14,336,24,"password"],[397,22,336,32],[398,14,337,24,"data"],[398,18,337,28],[398,20,337,30],[398,21,337,31,"_b"],[398,23,337,33],[398,26,337,36,"options"],[398,33,337,43],[398,38,337,48],[398,42,337,52],[398,46,337,56,"options"],[398,53,337,63],[398,58,337,68],[398,63,337,73],[398,64,337,74],[398,67,337,77],[398,72,337,82],[398,73,337,83],[398,76,337,86,"options"],[398,83,337,93],[398,84,337,94,"data"],[398,88,337,98],[398,94,337,104],[398,98,337,108],[398,102,337,112,"_b"],[398,104,337,114],[398,109,337,119],[398,114,337,124],[398,115,337,125],[398,118,337,128,"_b"],[398,120,337,130],[398,123,337,133],[398,124,337,134],[398,125,337,135],[399,14,338,24,"channel"],[399,21,338,31],[399,23,338,33],[399,24,338,34,"_c"],[399,26,338,36],[399,29,338,39,"options"],[399,36,338,46],[399,41,338,51],[399,45,338,55],[399,49,338,59,"options"],[399,56,338,66],[399,61,338,71],[399,66,338,76],[399,67,338,77],[399,70,338,80],[399,75,338,85],[399,76,338,86],[399,79,338,89,"options"],[399,86,338,96],[399,87,338,97,"channel"],[399,94,338,104],[399,100,338,110],[399,104,338,114],[399,108,338,118,"_c"],[399,110,338,120],[399,115,338,125],[399,120,338,130],[399,121,338,131],[399,124,338,134,"_c"],[399,126,338,136],[399,129,338,139],[399,134,338,144],[400,14,339,24,"gotrue_meta_security"],[400,34,339,44],[400,36,339,46],[401,16,339,48,"captcha_token"],[401,29,339,61],[401,31,339,63,"options"],[401,38,339,70],[401,43,339,75],[401,47,339,79],[401,51,339,83,"options"],[401,58,339,90],[401,63,339,95],[401,68,339,100],[401,69,339,101],[401,72,339,104],[401,77,339,109],[401,78,339,110],[401,81,339,113,"options"],[401,88,339,120],[401,89,339,121,"captchaToken"],[402,14,339,134],[403,12,340,20],[403,13,340,21],[404,12,341,20,"xform"],[404,17,341,25],[404,19,341,27,"_sessionResponse"],[404,28,341,43],[404,29,341,43,"_sessionResponse"],[405,10,342,16],[405,11,342,17],[405,12,342,18],[406,8,343,12],[406,9,343,13],[406,15,344,17],[407,10,345,16],[407,16,345,22],[407,20,345,26,"AuthInvalidCredentialsError"],[407,30,345,53],[407,31,345,53,"AuthInvalidCredentialsError"],[407,58,345,53],[407,59,345,54],[407,124,345,119],[407,125,345,120],[408,8,346,12],[409,8,347,12],[409,14,347,18],[410,10,347,20,"data"],[410,14,347,24],[411,10,347,26,"error"],[412,8,347,32],[412,9,347,33],[412,12,347,36,"res"],[412,15,347,39],[413,8,348,12],[413,12,348,16,"error"],[413,17,348,21],[413,21,348,25],[413,22,348,26,"data"],[413,26,348,30],[413,28,348,32],[414,10,349,16],[414,17,349,23],[415,12,349,25,"data"],[415,16,349,29],[415,18,349,31],[416,14,349,33,"user"],[416,18,349,37],[416,20,349,39],[416,24,349,43],[417,14,349,45,"session"],[417,21,349,52],[417,23,349,54],[418,12,349,59],[418,13,349,60],[419,12,349,62,"error"],[419,17,349,67],[419,19,349,69,"error"],[420,10,349,75],[420,11,349,76],[421,8,350,12],[422,8,351,12],[422,14,351,18,"session"],[422,21,351,25],[422,24,351,28,"data"],[422,28,351,32],[422,29,351,33,"session"],[422,36,351,40],[423,8,352,12],[423,14,352,18,"user"],[423,18,352,22],[423,21,352,25,"data"],[423,25,352,29],[423,26,352,30,"user"],[423,30,352,34],[424,8,353,12],[424,12,353,16,"data"],[424,16,353,20],[424,17,353,21,"session"],[424,24,353,28],[424,26,353,30],[425,10,354,16],[425,16,354,22],[425,20,354,26],[425,21,354,27,"_saveSession"],[425,33,354,39],[425,34,354,40,"data"],[425,38,354,44],[425,39,354,45,"session"],[425,46,354,52],[425,47,354,53],[426,10,355,16],[426,16,355,22],[426,20,355,26],[426,21,355,27,"_notifyAllSubscribers"],[426,42,355,48],[426,43,355,49],[426,54,355,60],[426,56,355,62,"session"],[426,63,355,69],[426,64,355,70],[427,8,356,12],[428,8,357,12],[428,15,357,19],[429,10,357,21,"data"],[429,14,357,25],[429,16,357,27],[430,12,357,29,"user"],[430,16,357,33],[431,12,357,35,"session"],[432,10,357,43],[432,11,357,44],[433,10,357,46,"error"],[433,15,357,51],[433,17,357,53],[434,8,357,58],[434,9,357,59],[435,6,358,8],[435,7,358,9],[435,8,359,8],[435,15,359,15,"error"],[435,20,359,20],[435,22,359,22],[436,8,360,12],[436,12,360,16],[436,16,360,16,"isAuthError"],[436,26,360,27],[436,27,360,27,"isAuthError"],[436,38,360,27],[436,40,360,28,"error"],[436,45,360,33],[436,46,360,34],[436,48,360,36],[437,10,361,16],[437,17,361,23],[438,12,361,25,"data"],[438,16,361,29],[438,18,361,31],[439,14,361,33,"user"],[439,18,361,37],[439,20,361,39],[439,24,361,43],[440,14,361,45,"session"],[440,21,361,52],[440,23,361,54],[441,12,361,59],[441,13,361,60],[442,12,361,62,"error"],[443,10,361,68],[443,11,361,69],[444,8,362,12],[445,8,363,12],[445,14,363,18,"error"],[445,19,363,23],[446,6,364,8],[447,4,365,4],[448,4,366,4],[449,0,367,0],[450,0,368,0],[451,0,369,0],[452,0,370,0],[453,0,371,0],[454,0,372,0],[455,0,373,0],[456,4,374,4],[456,10,374,10,"signInWithPassword"],[456,28,374,28,"signInWithPassword"],[456,29,374,29,"credentials"],[456,40,374,40],[456,42,374,42],[457,6,375,8],[457,10,375,12],[458,8,376,12],[458,12,376,16,"res"],[458,15,376,19],[459,8,377,12],[459,12,377,16],[459,19,377,23],[459,23,377,27,"credentials"],[459,34,377,38],[459,36,377,40],[460,10,378,16],[460,16,378,22],[461,12,378,24,"email"],[461,17,378,29],[462,12,378,31,"password"],[462,20,378,39],[463,12,378,41,"options"],[464,10,378,49],[464,11,378,50],[464,14,378,53,"credentials"],[464,25,378,64],[465,10,379,16,"res"],[465,13,379,19],[465,16,379,22],[465,22,379,28],[465,26,379,28,"_request"],[465,35,379,36],[465,36,379,36,"_request"],[465,44,379,36],[465,46,379,37],[465,50,379,41],[465,51,379,42,"fetch"],[465,56,379,47],[465,58,379,49],[465,64,379,55],[465,66,379,57],[465,69,379,60],[465,73,379,64],[465,74,379,65,"url"],[465,77,379,68],[465,105,379,96],[465,107,379,98],[466,12,380,20,"headers"],[466,19,380,27],[466,21,380,29],[466,25,380,33],[466,26,380,34,"headers"],[466,33,380,41],[467,12,381,20,"body"],[467,16,381,24],[467,18,381,26],[468,14,382,24,"email"],[468,19,382,29],[469,14,383,24,"password"],[469,22,383,32],[470,14,384,24,"gotrue_meta_security"],[470,34,384,44],[470,36,384,46],[471,16,384,48,"captcha_token"],[471,29,384,61],[471,31,384,63,"options"],[471,38,384,70],[471,43,384,75],[471,47,384,79],[471,51,384,83,"options"],[471,58,384,90],[471,63,384,95],[471,68,384,100],[471,69,384,101],[471,72,384,104],[471,77,384,109],[471,78,384,110],[471,81,384,113,"options"],[471,88,384,120],[471,89,384,121,"captchaToken"],[472,14,384,134],[473,12,385,20],[473,13,385,21],[474,12,386,20,"xform"],[474,17,386,25],[474,19,386,27,"_sessionResponsePassword"],[474,28,386,51],[474,29,386,51,"_sessionResponsePassword"],[475,10,387,16],[475,11,387,17],[475,12,387,18],[476,8,388,12],[476,9,388,13],[476,15,389,17],[476,19,389,21],[476,26,389,28],[476,30,389,32,"credentials"],[476,41,389,43],[476,43,389,45],[477,10,390,16],[477,16,390,22],[478,12,390,24,"phone"],[478,17,390,29],[479,12,390,31,"password"],[479,20,390,39],[480,12,390,41,"options"],[481,10,390,49],[481,11,390,50],[481,14,390,53,"credentials"],[481,25,390,64],[482,10,391,16,"res"],[482,13,391,19],[482,16,391,22],[482,22,391,28],[482,26,391,28,"_request"],[482,35,391,36],[482,36,391,36,"_request"],[482,44,391,36],[482,46,391,37],[482,50,391,41],[482,51,391,42,"fetch"],[482,56,391,47],[482,58,391,49],[482,64,391,55],[482,66,391,57],[482,69,391,60],[482,73,391,64],[482,74,391,65,"url"],[482,77,391,68],[482,105,391,96],[482,107,391,98],[483,12,392,20,"headers"],[483,19,392,27],[483,21,392,29],[483,25,392,33],[483,26,392,34,"headers"],[483,33,392,41],[484,12,393,20,"body"],[484,16,393,24],[484,18,393,26],[485,14,394,24,"phone"],[485,19,394,29],[486,14,395,24,"password"],[486,22,395,32],[487,14,396,24,"gotrue_meta_security"],[487,34,396,44],[487,36,396,46],[488,16,396,48,"captcha_token"],[488,29,396,61],[488,31,396,63,"options"],[488,38,396,70],[488,43,396,75],[488,47,396,79],[488,51,396,83,"options"],[488,58,396,90],[488,63,396,95],[488,68,396,100],[488,69,396,101],[488,72,396,104],[488,77,396,109],[488,78,396,110],[488,81,396,113,"options"],[488,88,396,120],[488,89,396,121,"captchaToken"],[489,14,396,134],[490,12,397,20],[490,13,397,21],[491,12,398,20,"xform"],[491,17,398,25],[491,19,398,27,"_sessionResponsePassword"],[491,28,398,51],[491,29,398,51,"_sessionResponsePassword"],[492,10,399,16],[492,11,399,17],[492,12,399,18],[493,8,400,12],[493,9,400,13],[493,15,401,17],[494,10,402,16],[494,16,402,22],[494,20,402,26,"AuthInvalidCredentialsError"],[494,30,402,53],[494,31,402,53,"AuthInvalidCredentialsError"],[494,58,402,53],[494,59,402,54],[494,124,402,119],[494,125,402,120],[495,8,403,12],[496,8,404,12],[496,14,404,18],[497,10,404,20,"data"],[497,14,404,24],[498,10,404,26,"error"],[499,8,404,32],[499,9,404,33],[499,12,404,36,"res"],[499,15,404,39],[500,8,405,12],[500,12,405,16,"error"],[500,17,405,21],[500,19,405,23],[501,10,406,16],[501,17,406,23],[502,12,406,25,"data"],[502,16,406,29],[502,18,406,31],[503,14,406,33,"user"],[503,18,406,37],[503,20,406,39],[503,24,406,43],[504,14,406,45,"session"],[504,21,406,52],[504,23,406,54],[505,12,406,59],[505,13,406,60],[506,12,406,62,"error"],[507,10,406,68],[507,11,406,69],[508,8,407,12],[508,9,407,13],[508,15,408,17],[508,19,408,21],[508,20,408,22,"data"],[508,24,408,26],[508,28,408,30],[508,29,408,31,"data"],[508,33,408,35],[508,34,408,36,"session"],[508,41,408,43],[508,45,408,47],[508,46,408,48,"data"],[508,50,408,52],[508,51,408,53,"user"],[508,55,408,57],[508,57,408,59],[509,10,409,16],[509,17,409,23],[510,12,409,25,"data"],[510,16,409,29],[510,18,409,31],[511,14,409,33,"user"],[511,18,409,37],[511,20,409,39],[511,24,409,43],[512,14,409,45,"session"],[512,21,409,52],[512,23,409,54],[513,12,409,59],[513,13,409,60],[514,12,409,62,"error"],[514,17,409,67],[514,19,409,69],[514,23,409,73,"AuthInvalidTokenResponseError"],[514,33,409,102],[514,34,409,102,"AuthInvalidTokenResponseError"],[514,63,409,102],[514,64,409,103],[515,10,409,105],[515,11,409,106],[516,8,410,12],[517,8,411,12],[517,12,411,16,"data"],[517,16,411,20],[517,17,411,21,"session"],[517,24,411,28],[517,26,411,30],[518,10,412,16],[518,16,412,22],[518,20,412,26],[518,21,412,27,"_saveSession"],[518,33,412,39],[518,34,412,40,"data"],[518,38,412,44],[518,39,412,45,"session"],[518,46,412,52],[518,47,412,53],[519,10,413,16],[519,16,413,22],[519,20,413,26],[519,21,413,27,"_notifyAllSubscribers"],[519,42,413,48],[519,43,413,49],[519,54,413,60],[519,56,413,62,"data"],[519,60,413,66],[519,61,413,67,"session"],[519,68,413,74],[519,69,413,75],[520,8,414,12],[521,8,415,12],[521,15,415,19],[522,10,416,16,"data"],[522,14,416,20],[522,16,416,22,"Object"],[522,22,416,28],[522,23,416,29,"assign"],[522,29,416,35],[522,30,416,36],[523,12,416,38,"user"],[523,16,416,42],[523,18,416,44,"data"],[523,22,416,48],[523,23,416,49,"user"],[523,27,416,53],[524,12,416,55,"session"],[524,19,416,62],[524,21,416,64,"data"],[524,25,416,68],[524,26,416,69,"session"],[525,10,416,77],[525,11,416,78],[525,13,416,81,"data"],[525,17,416,85],[525,18,416,86,"weak_password"],[525,31,416,99],[525,34,416,102],[526,12,416,104,"weakPassword"],[526,24,416,116],[526,26,416,118,"data"],[526,30,416,122],[526,31,416,123,"weak_password"],[527,10,416,137],[527,11,416,138],[527,14,416,141],[527,18,416,146],[527,19,416,147],[528,10,417,16,"error"],[529,8,418,12],[529,9,418,13],[530,6,419,8],[530,7,419,9],[530,8,420,8],[530,15,420,15,"error"],[530,20,420,20],[530,22,420,22],[531,8,421,12],[531,12,421,16],[531,16,421,16,"isAuthError"],[531,26,421,27],[531,27,421,27,"isAuthError"],[531,38,421,27],[531,40,421,28,"error"],[531,45,421,33],[531,46,421,34],[531,48,421,36],[532,10,422,16],[532,17,422,23],[533,12,422,25,"data"],[533,16,422,29],[533,18,422,31],[534,14,422,33,"user"],[534,18,422,37],[534,20,422,39],[534,24,422,43],[535,14,422,45,"session"],[535,21,422,52],[535,23,422,54],[536,12,422,59],[536,13,422,60],[537,12,422,62,"error"],[538,10,422,68],[538,11,422,69],[539,8,423,12],[540,8,424,12],[540,14,424,18,"error"],[540,19,424,23],[541,6,425,8],[542,4,426,4],[543,4,427,4],[544,0,428,0],[545,0,429,0],[546,0,430,0],[547,4,431,4],[547,10,431,10,"signInWithOAuth"],[547,25,431,25,"signInWithOAuth"],[547,26,431,26,"credentials"],[547,37,431,37],[547,39,431,39],[548,6,432,8],[548,10,432,12,"_a"],[548,12,432,14],[548,14,432,16,"_b"],[548,16,432,18],[548,18,432,20,"_c"],[548,20,432,22],[548,22,432,24,"_d"],[548,24,432,26],[549,6,433,8],[549,13,433,15],[549,19,433,21],[549,23,433,25],[549,24,433,26,"_handleProviderSignIn"],[549,45,433,47],[549,46,433,48,"credentials"],[549,57,433,59],[549,58,433,60,"provider"],[549,66,433,68],[549,68,433,70],[550,8,434,12,"redirectTo"],[550,18,434,22],[550,20,434,24],[550,21,434,25,"_a"],[550,23,434,27],[550,26,434,30,"credentials"],[550,37,434,41],[550,38,434,42,"options"],[550,45,434,49],[550,51,434,55],[550,55,434,59],[550,59,434,63,"_a"],[550,61,434,65],[550,66,434,70],[550,71,434,75],[550,72,434,76],[550,75,434,79],[550,80,434,84],[550,81,434,85],[550,84,434,88,"_a"],[550,86,434,90],[550,87,434,91,"redirectTo"],[550,97,434,101],[551,8,435,12,"scopes"],[551,14,435,18],[551,16,435,20],[551,17,435,21,"_b"],[551,19,435,23],[551,22,435,26,"credentials"],[551,33,435,37],[551,34,435,38,"options"],[551,41,435,45],[551,47,435,51],[551,51,435,55],[551,55,435,59,"_b"],[551,57,435,61],[551,62,435,66],[551,67,435,71],[551,68,435,72],[551,71,435,75],[551,76,435,80],[551,77,435,81],[551,80,435,84,"_b"],[551,82,435,86],[551,83,435,87,"scopes"],[551,89,435,93],[552,8,436,12,"queryParams"],[552,19,436,23],[552,21,436,25],[552,22,436,26,"_c"],[552,24,436,28],[552,27,436,31,"credentials"],[552,38,436,42],[552,39,436,43,"options"],[552,46,436,50],[552,52,436,56],[552,56,436,60],[552,60,436,64,"_c"],[552,62,436,66],[552,67,436,71],[552,72,436,76],[552,73,436,77],[552,76,436,80],[552,81,436,85],[552,82,436,86],[552,85,436,89,"_c"],[552,87,436,91],[552,88,436,92,"queryParams"],[552,99,436,103],[553,8,437,12,"skipBrowserRedirect"],[553,27,437,31],[553,29,437,33],[553,30,437,34,"_d"],[553,32,437,36],[553,35,437,39,"credentials"],[553,46,437,50],[553,47,437,51,"options"],[553,54,437,58],[553,60,437,64],[553,64,437,68],[553,68,437,72,"_d"],[553,70,437,74],[553,75,437,79],[553,80,437,84],[553,81,437,85],[553,84,437,88],[553,89,437,93],[553,90,437,94],[553,93,437,97,"_d"],[553,95,437,99],[553,96,437,100,"skipBrowserRedirect"],[554,6,438,8],[554,7,438,9],[554,8,438,10],[555,4,439,4],[556,4,440,4],[557,0,441,0],[558,0,442,0],[559,4,443,4],[559,10,443,10,"exchangeCodeForSession"],[559,32,443,32,"exchangeCodeForSession"],[559,33,443,33,"authCode"],[559,41,443,41],[559,43,443,43],[560,6,444,8],[560,12,444,14],[560,16,444,18],[560,17,444,19,"initializePromise"],[560,34,444,36],[561,6,445,8],[561,13,445,15],[561,17,445,19],[561,18,445,20,"_acquireLock"],[561,30,445,32],[561,31,445,33],[561,32,445,34],[561,33,445,35],[561,35,445,37],[561,47,445,49],[562,8,446,12],[562,15,446,19],[562,19,446,23],[562,20,446,24,"_exchangeCodeForSession"],[562,43,446,47],[562,44,446,48,"authCode"],[562,52,446,56],[562,53,446,57],[563,6,447,8],[563,7,447,9],[563,8,447,10],[564,4,448,4],[565,4,449,4],[566,0,450,0],[567,0,451,0],[568,0,452,0],[569,0,453,0],[570,0,454,0],[571,0,455,0],[572,4,456,4],[572,10,456,10,"signInWithWeb3"],[572,24,456,24,"signInWithWeb3"],[572,25,456,25,"credentials"],[572,36,456,36],[572,38,456,38],[573,6,457,8],[573,12,457,14],[574,8,457,16,"chain"],[575,6,457,22],[575,7,457,23],[575,10,457,26,"credentials"],[575,21,457,37],[576,6,458,8],[576,14,458,16,"chain"],[576,19,458,21],[577,8,459,12],[577,13,459,17],[577,23,459,27],[578,10,460,16],[578,17,460,23],[578,23,460,29],[578,27,460,33],[578,28,460,34,"signInWithEthereum"],[578,46,460,52],[578,47,460,53,"credentials"],[578,58,460,64],[578,59,460,65],[579,8,461,12],[579,13,461,17],[579,21,461,25],[580,10,462,16],[580,17,462,23],[580,23,462,29],[580,27,462,33],[580,28,462,34,"signInWithSolana"],[580,44,462,50],[580,45,462,51,"credentials"],[580,56,462,62],[580,57,462,63],[581,8,463,12],[582,10,464,16],[582,16,464,22],[582,20,464,26,"Error"],[582,25,464,31],[582,26,464,32],[582,67,464,73,"chain"],[582,72,464,78],[582,75,464,81],[582,76,464,82],[583,6,465,8],[584,4,466,4],[585,4,467,4],[585,10,467,10,"signInWithEthereum"],[585,28,467,28,"signInWithEthereum"],[585,29,467,29,"credentials"],[585,40,467,40],[585,42,467,42],[586,6,468,8],[586,10,468,12,"_a"],[586,12,468,14],[586,14,468,16,"_b"],[586,16,468,18],[586,18,468,20,"_c"],[586,20,468,22],[586,22,468,24,"_d"],[586,24,468,26],[586,26,468,28,"_e"],[586,28,468,30],[586,30,468,32,"_f"],[586,32,468,34],[586,34,468,36,"_g"],[586,36,468,38],[586,38,468,40,"_h"],[586,40,468,42],[586,42,468,44,"_j"],[586,44,468,46],[586,46,468,48,"_k"],[586,48,468,50],[586,50,468,52,"_l"],[586,52,468,54],[587,6,469,8],[588,6,470,8],[588,10,470,12,"message"],[588,17,470,19],[589,6,471,8],[589,10,471,12,"signature"],[589,19,471,21],[590,6,472,8],[590,10,472,12],[590,19,472,21],[590,23,472,25,"credentials"],[590,34,472,36],[590,36,472,38],[591,8,473,12,"message"],[591,15,473,19],[591,18,473,22,"credentials"],[591,29,473,33],[591,30,473,34,"message"],[591,37,473,41],[592,8,474,12,"signature"],[592,17,474,21],[592,20,474,24,"credentials"],[592,31,474,35],[592,32,474,36,"signature"],[592,41,474,45],[593,6,475,8],[593,7,475,9],[593,13,476,13],[594,8,477,12],[594,14,477,18],[595,10,477,20,"chain"],[595,15,477,25],[596,10,477,27,"wallet"],[596,16,477,33],[597,10,477,35,"statement"],[597,19,477,44],[598,10,477,46,"options"],[599,8,477,54],[599,9,477,55],[599,12,477,58,"credentials"],[599,23,477,69],[600,8,478,12],[600,12,478,16,"resolvedWallet"],[600,26,478,30],[601,8,479,12],[601,12,479,16],[601,13,479,17],[601,17,479,17,"isBrowser"],[601,28,479,26],[601,29,479,26,"isBrowser"],[601,38,479,26],[601,40,479,27],[601,41,479,28],[601,43,479,30],[602,10,480,16],[602,14,480,20],[602,21,480,27,"wallet"],[602,27,480,33],[602,32,480,38],[602,40,480,46],[602,44,480,50],[602,46,480,52,"options"],[602,53,480,59],[602,58,480,64],[602,62,480,68],[602,66,480,72,"options"],[602,73,480,79],[602,78,480,84],[602,83,480,89],[602,84,480,90],[602,87,480,93],[602,92,480,98],[602,93,480,99],[602,96,480,102,"options"],[602,103,480,109],[602,104,480,110,"url"],[602,107,480,113],[602,108,480,114],[602,110,480,116],[603,12,481,20],[603,18,481,26],[603,22,481,30,"Error"],[603,27,481,35],[603,28,481,36],[603,115,481,123],[603,116,481,124],[604,10,482,16],[605,10,483,16,"resolvedWallet"],[605,24,483,30],[605,27,483,33,"wallet"],[605,33,483,39],[606,8,484,12],[606,9,484,13],[606,15,485,17],[606,19,485,21],[606,26,485,28,"wallet"],[606,32,485,34],[606,37,485,39],[606,45,485,47],[606,47,485,49],[607,10,486,16,"resolvedWallet"],[607,24,486,30],[607,27,486,33,"wallet"],[607,33,486,39],[608,8,487,12],[608,9,487,13],[608,15,488,17],[609,10,489,16],[609,16,489,22,"windowAny"],[609,25,489,31],[609,28,489,34,"window"],[609,34,489,40],[610,10,490,16],[610,14,490,20],[610,24,490,30],[610,28,490,34,"windowAny"],[610,37,490,43],[610,41,491,20],[610,48,491,27,"windowAny"],[610,57,491,36],[610,58,491,37,"ethereum"],[610,66,491,45],[610,71,491,50],[610,79,491,58],[610,83,492,20],[610,92,492,29],[610,96,492,33,"windowAny"],[610,105,492,42],[610,106,492,43,"ethereum"],[610,114,492,51],[610,118,493,20],[610,125,493,27,"windowAny"],[610,134,493,36],[610,135,493,37,"ethereum"],[610,143,493,45],[610,144,493,46,"request"],[610,151,493,53],[610,156,493,58],[610,166,493,68],[610,168,493,70],[611,12,494,20,"resolvedWallet"],[611,26,494,34],[611,29,494,37,"windowAny"],[611,38,494,46],[611,39,494,47,"ethereum"],[611,47,494,55],[612,10,495,16],[612,11,495,17],[612,17,496,21],[613,12,497,20],[613,18,497,26],[613,22,497,30,"Error"],[613,27,497,35],[613,28,497,36],[613,345,497,353],[613,346,497,354],[614,10,498,16],[615,8,499,12],[616,8,500,12],[616,14,500,18,"url"],[616,17,500,21],[616,20,500,24],[616,24,500,28,"URL"],[616,27,500,31],[616,28,500,32],[616,29,500,33,"_a"],[616,31,500,35],[616,34,500,38,"options"],[616,41,500,45],[616,46,500,50],[616,50,500,54],[616,54,500,58,"options"],[616,61,500,65],[616,66,500,70],[616,71,500,75],[616,72,500,76],[616,75,500,79],[616,80,500,84],[616,81,500,85],[616,84,500,88,"options"],[616,91,500,95],[616,92,500,96,"url"],[616,95,500,99],[616,101,500,105],[616,105,500,109],[616,109,500,113,"_a"],[616,111,500,115],[616,116,500,120],[616,121,500,125],[616,122,500,126],[616,125,500,129,"_a"],[616,127,500,131],[616,130,500,134,"window"],[616,136,500,140],[616,137,500,141,"location"],[616,145,500,149],[616,146,500,150,"href"],[616,150,500,154],[616,151,500,155],[617,8,501,12],[617,14,501,18,"accounts"],[617,22,501,26],[617,25,501,29],[617,31,501,35,"resolvedWallet"],[617,45,501,49],[617,46,502,17,"request"],[617,53,502,24],[617,54,502,25],[618,10,503,16,"method"],[618,16,503,22],[618,18,503,24],[619,8,504,12],[619,9,504,13],[619,10,504,14],[619,11,505,17,"then"],[619,15,505,21],[619,16,505,23,"accs"],[619,20,505,27],[619,24,505,32,"accs"],[619,28,505,36],[619,29,505,37],[619,30,506,17,"catch"],[619,35,506,22],[619,36,506,23],[619,42,506,29],[620,10,507,16],[620,16,507,22],[620,20,507,26,"Error"],[620,25,507,31],[620,26,507,32],[620,102,507,108],[620,103,507,109],[621,8,508,12],[621,9,508,13],[621,10,508,14],[622,8,509,12],[622,12,509,16],[622,13,509,17,"accounts"],[622,21,509,25],[622,25,509,29,"accounts"],[622,33,509,37],[622,34,509,38,"length"],[622,40,509,44],[622,45,509,49],[622,46,509,50],[622,48,509,52],[623,10,510,16],[623,16,510,22],[623,20,510,26,"Error"],[623,25,510,31],[623,26,510,32],[623,108,510,114],[623,109,510,115],[624,8,511,12],[625,8,512,12],[625,14,512,18,"address"],[625,21,512,25],[625,24,512,28],[625,28,512,28,"getAddress"],[625,44,512,38],[625,45,512,38,"getAddress"],[625,55,512,38],[625,57,512,39,"accounts"],[625,65,512,47],[625,66,512,48],[625,67,512,49],[625,68,512,50],[625,69,512,51],[626,8,513,12],[626,12,513,16,"chainId"],[626,19,513,23],[626,22,513,26],[626,23,513,27,"_b"],[626,25,513,29],[626,28,513,32,"options"],[626,35,513,39],[626,40,513,44],[626,44,513,48],[626,48,513,52,"options"],[626,55,513,59],[626,60,513,64],[626,65,513,69],[626,66,513,70],[626,69,513,73],[626,74,513,78],[626,75,513,79],[626,78,513,82,"options"],[626,85,513,89],[626,86,513,90,"signInWithEthereum"],[626,104,513,108],[626,110,513,114],[626,114,513,118],[626,118,513,122,"_b"],[626,120,513,124],[626,125,513,129],[626,130,513,134],[626,131,513,135],[626,134,513,138],[626,139,513,143],[626,140,513,144],[626,143,513,147,"_b"],[626,145,513,149],[626,146,513,150,"chainId"],[626,153,513,157],[627,8,514,12],[627,12,514,16],[627,13,514,17,"chainId"],[627,20,514,24],[627,22,514,26],[628,10,515,16],[628,16,515,22,"chainIdHex"],[628,26,515,32],[628,29,515,35],[628,35,515,41,"resolvedWallet"],[628,49,515,55],[628,50,515,56,"request"],[628,57,515,63],[628,58,515,64],[629,12,516,20,"method"],[629,18,516,26],[629,20,516,28],[630,10,517,16],[630,11,517,17],[630,12,517,18],[631,10,518,16,"chainId"],[631,17,518,23],[631,20,518,26],[631,24,518,26,"fromHex"],[631,40,518,33],[631,41,518,33,"fromHex"],[631,48,518,33],[631,50,518,34,"chainIdHex"],[631,60,518,44],[631,61,518,45],[632,8,519,12],[633,8,520,12],[633,14,520,18,"siweMessage"],[633,25,520,29],[633,28,520,32],[634,10,521,16,"domain"],[634,16,521,22],[634,18,521,24,"url"],[634,21,521,27],[634,22,521,28,"host"],[634,26,521,32],[635,10,522,16,"address"],[635,17,522,23],[635,19,522,25,"address"],[635,26,522,32],[636,10,523,16,"statement"],[636,19,523,25],[636,21,523,27,"statement"],[636,30,523,36],[637,10,524,16,"uri"],[637,13,524,19],[637,15,524,21,"url"],[637,18,524,24],[637,19,524,25,"href"],[637,23,524,29],[638,10,525,16,"version"],[638,17,525,23],[638,19,525,25],[638,22,525,28],[639,10,526,16,"chainId"],[639,17,526,23],[639,19,526,25,"chainId"],[639,26,526,32],[640,10,527,16,"nonce"],[640,15,527,21],[640,17,527,23],[640,18,527,24,"_c"],[640,20,527,26],[640,23,527,29,"options"],[640,30,527,36],[640,35,527,41],[640,39,527,45],[640,43,527,49,"options"],[640,50,527,56],[640,55,527,61],[640,60,527,66],[640,61,527,67],[640,64,527,70],[640,69,527,75],[640,70,527,76],[640,73,527,79,"options"],[640,80,527,86],[640,81,527,87,"signInWithEthereum"],[640,99,527,105],[640,105,527,111],[640,109,527,115],[640,113,527,119,"_c"],[640,115,527,121],[640,120,527,126],[640,125,527,131],[640,126,527,132],[640,129,527,135],[640,134,527,140],[640,135,527,141],[640,138,527,144,"_c"],[640,140,527,146],[640,141,527,147,"nonce"],[640,146,527,152],[641,10,528,16,"issuedAt"],[641,18,528,24],[641,20,528,26],[641,21,528,27,"_e"],[641,23,528,29],[641,26,528,32],[641,27,528,33,"_d"],[641,29,528,35],[641,32,528,38,"options"],[641,39,528,45],[641,44,528,50],[641,48,528,54],[641,52,528,58,"options"],[641,59,528,65],[641,64,528,70],[641,69,528,75],[641,70,528,76],[641,73,528,79],[641,78,528,84],[641,79,528,85],[641,82,528,88,"options"],[641,89,528,95],[641,90,528,96,"signInWithEthereum"],[641,108,528,114],[641,114,528,120],[641,118,528,124],[641,122,528,128,"_d"],[641,124,528,130],[641,129,528,135],[641,134,528,140],[641,135,528,141],[641,138,528,144],[641,143,528,149],[641,144,528,150],[641,147,528,153,"_d"],[641,149,528,155],[641,150,528,156,"issuedAt"],[641,158,528,164],[641,164,528,170],[641,168,528,174],[641,172,528,178,"_e"],[641,174,528,180],[641,179,528,185],[641,184,528,190],[641,185,528,191],[641,188,528,194,"_e"],[641,190,528,196],[641,193,528,199],[641,197,528,203,"Date"],[641,201,528,207],[641,202,528,208],[641,203,528,209],[642,10,529,16,"expirationTime"],[642,24,529,30],[642,26,529,32],[642,27,529,33,"_f"],[642,29,529,35],[642,32,529,38,"options"],[642,39,529,45],[642,44,529,50],[642,48,529,54],[642,52,529,58,"options"],[642,59,529,65],[642,64,529,70],[642,69,529,75],[642,70,529,76],[642,73,529,79],[642,78,529,84],[642,79,529,85],[642,82,529,88,"options"],[642,89,529,95],[642,90,529,96,"signInWithEthereum"],[642,108,529,114],[642,114,529,120],[642,118,529,124],[642,122,529,128,"_f"],[642,124,529,130],[642,129,529,135],[642,134,529,140],[642,135,529,141],[642,138,529,144],[642,143,529,149],[642,144,529,150],[642,147,529,153,"_f"],[642,149,529,155],[642,150,529,156,"expirationTime"],[642,164,529,170],[643,10,530,16,"notBefore"],[643,19,530,25],[643,21,530,27],[643,22,530,28,"_g"],[643,24,530,30],[643,27,530,33,"options"],[643,34,530,40],[643,39,530,45],[643,43,530,49],[643,47,530,53,"options"],[643,54,530,60],[643,59,530,65],[643,64,530,70],[643,65,530,71],[643,68,530,74],[643,73,530,79],[643,74,530,80],[643,77,530,83,"options"],[643,84,530,90],[643,85,530,91,"signInWithEthereum"],[643,103,530,109],[643,109,530,115],[643,113,530,119],[643,117,530,123,"_g"],[643,119,530,125],[643,124,530,130],[643,129,530,135],[643,130,530,136],[643,133,530,139],[643,138,530,144],[643,139,530,145],[643,142,530,148,"_g"],[643,144,530,150],[643,145,530,151,"notBefore"],[643,154,530,160],[644,10,531,16,"requestId"],[644,19,531,25],[644,21,531,27],[644,22,531,28,"_h"],[644,24,531,30],[644,27,531,33,"options"],[644,34,531,40],[644,39,531,45],[644,43,531,49],[644,47,531,53,"options"],[644,54,531,60],[644,59,531,65],[644,64,531,70],[644,65,531,71],[644,68,531,74],[644,73,531,79],[644,74,531,80],[644,77,531,83,"options"],[644,84,531,90],[644,85,531,91,"signInWithEthereum"],[644,103,531,109],[644,109,531,115],[644,113,531,119],[644,117,531,123,"_h"],[644,119,531,125],[644,124,531,130],[644,129,531,135],[644,130,531,136],[644,133,531,139],[644,138,531,144],[644,139,531,145],[644,142,531,148,"_h"],[644,144,531,150],[644,145,531,151,"requestId"],[644,154,531,160],[645,10,532,16,"resources"],[645,19,532,25],[645,21,532,27],[645,22,532,28,"_j"],[645,24,532,30],[645,27,532,33,"options"],[645,34,532,40],[645,39,532,45],[645,43,532,49],[645,47,532,53,"options"],[645,54,532,60],[645,59,532,65],[645,64,532,70],[645,65,532,71],[645,68,532,74],[645,73,532,79],[645,74,532,80],[645,77,532,83,"options"],[645,84,532,90],[645,85,532,91,"signInWithEthereum"],[645,103,532,109],[645,109,532,115],[645,113,532,119],[645,117,532,123,"_j"],[645,119,532,125],[645,124,532,130],[645,129,532,135],[645,130,532,136],[645,133,532,139],[645,138,532,144],[645,139,532,145],[645,142,532,148,"_j"],[645,144,532,150],[645,145,532,151,"resources"],[646,8,533,12],[646,9,533,13],[647,8,534,12,"message"],[647,15,534,19],[647,18,534,22],[647,22,534,22,"createSiweMessage"],[647,38,534,39],[647,39,534,39,"createSiweMessage"],[647,56,534,39],[647,58,534,40,"siweMessage"],[647,69,534,51],[647,70,534,52],[648,8,535,12],[649,8,536,12,"signature"],[649,17,536,21],[649,20,536,25],[649,26,536,31,"resolvedWallet"],[649,40,536,45],[649,41,536,46,"request"],[649,48,536,53],[649,49,536,54],[650,10,537,16,"method"],[650,16,537,22],[650,18,537,24],[650,33,537,39],[651,10,538,16,"params"],[651,16,538,22],[651,18,538,24],[651,19,538,25],[651,23,538,25,"toHex"],[651,39,538,30],[651,40,538,30,"toHex"],[651,45,538,30],[651,47,538,31,"message"],[651,54,538,38],[651,55,538,39],[651,57,538,41,"address"],[651,64,538,48],[652,8,539,12],[652,9,539,13],[652,10,539,15],[653,6,540,8],[654,6,541,8],[654,10,541,12],[655,8,542,12],[655,14,542,18],[656,10,542,20,"data"],[656,14,542,24],[657,10,542,26,"error"],[658,8,542,32],[658,9,542,33],[658,12,542,36],[658,18,542,42],[658,22,542,42,"_request"],[658,31,542,50],[658,32,542,50,"_request"],[658,40,542,50],[658,42,542,51],[658,46,542,55],[658,47,542,56,"fetch"],[658,52,542,61],[658,54,542,63],[658,60,542,69],[658,62,542,71],[658,65,542,74],[658,69,542,78],[658,70,542,79,"url"],[658,73,542,82],[658,97,542,106],[658,99,542,108],[659,10,543,16,"headers"],[659,17,543,23],[659,19,543,25],[659,23,543,29],[659,24,543,30,"headers"],[659,31,543,37],[660,10,544,16,"body"],[660,14,544,20],[660,16,544,22,"Object"],[660,22,544,28],[660,23,544,29,"assign"],[660,29,544,35],[660,30,544,36],[661,12,544,38,"chain"],[661,17,544,43],[661,19,544,45],[661,29,544,55],[662,12,544,57,"message"],[662,19,544,64],[663,12,545,20,"signature"],[664,10,545,30],[664,11,545,31],[664,13,545,34],[664,14,545,35],[664,15,545,36,"_k"],[664,17,545,38],[664,20,545,41,"credentials"],[664,31,545,52],[664,32,545,53,"options"],[664,39,545,60],[664,45,545,66],[664,49,545,70],[664,53,545,74,"_k"],[664,55,545,76],[664,60,545,81],[664,65,545,86],[664,66,545,87],[664,69,545,90],[664,74,545,95],[664,75,545,96],[664,78,545,99,"_k"],[664,80,545,101],[664,81,545,102,"captchaToken"],[664,93,545,114],[664,97,546,22],[665,12,546,24,"gotrue_meta_security"],[665,32,546,44],[665,34,546,46],[666,14,546,48,"captcha_token"],[666,27,546,61],[666,29,546,63],[666,30,546,64,"_l"],[666,32,546,66],[666,35,546,69,"credentials"],[666,46,546,80],[666,47,546,81,"options"],[666,54,546,88],[666,60,546,94],[666,64,546,98],[666,68,546,102,"_l"],[666,70,546,104],[666,75,546,109],[666,80,546,114],[666,81,546,115],[666,84,546,118],[666,89,546,123],[666,90,546,124],[666,93,546,127,"_l"],[666,95,546,129],[666,96,546,130,"captchaToken"],[667,12,546,143],[668,10,546,145],[668,11,546,146],[668,14,547,22],[668,18,547,27],[668,19,547,28],[669,10,548,16,"xform"],[669,15,548,21],[669,17,548,23,"_sessionResponse"],[669,26,548,39],[669,27,548,39,"_sessionResponse"],[670,8,549,12],[670,9,549,13],[670,10,549,14],[671,8,550,12],[671,12,550,16,"error"],[671,17,550,21],[671,19,550,23],[672,10,551,16],[672,16,551,22,"error"],[672,21,551,27],[673,8,552,12],[674,8,553,12],[674,12,553,16],[674,13,553,17,"data"],[674,17,553,21],[674,21,553,25],[674,22,553,26,"data"],[674,26,553,30],[674,27,553,31,"session"],[674,34,553,38],[674,38,553,42],[674,39,553,43,"data"],[674,43,553,47],[674,44,553,48,"user"],[674,48,553,52],[674,50,553,54],[675,10,554,16],[675,17,554,23],[676,12,555,20,"data"],[676,16,555,24],[676,18,555,26],[677,14,555,28,"user"],[677,18,555,32],[677,20,555,34],[677,24,555,38],[678,14,555,40,"session"],[678,21,555,47],[678,23,555,49],[679,12,555,54],[679,13,555,55],[680,12,556,20,"error"],[680,17,556,25],[680,19,556,27],[680,23,556,31,"AuthInvalidTokenResponseError"],[680,33,556,60],[680,34,556,60,"AuthInvalidTokenResponseError"],[680,63,556,60],[680,64,556,61],[681,10,557,16],[681,11,557,17],[682,8,558,12],[683,8,559,12],[683,12,559,16,"data"],[683,16,559,20],[683,17,559,21,"session"],[683,24,559,28],[683,26,559,30],[684,10,560,16],[684,16,560,22],[684,20,560,26],[684,21,560,27,"_saveSession"],[684,33,560,39],[684,34,560,40,"data"],[684,38,560,44],[684,39,560,45,"session"],[684,46,560,52],[684,47,560,53],[685,10,561,16],[685,16,561,22],[685,20,561,26],[685,21,561,27,"_notifyAllSubscribers"],[685,42,561,48],[685,43,561,49],[685,54,561,60],[685,56,561,62,"data"],[685,60,561,66],[685,61,561,67,"session"],[685,68,561,74],[685,69,561,75],[686,8,562,12],[687,8,563,12],[687,15,563,19],[688,10,563,21,"data"],[688,14,563,25],[688,16,563,27,"Object"],[688,22,563,33],[688,23,563,34,"assign"],[688,29,563,40],[688,30,563,41],[688,31,563,42],[688,32,563,43],[688,34,563,45,"data"],[688,38,563,49],[688,39,563,50],[689,10,563,52,"error"],[690,8,563,58],[690,9,563,59],[691,6,564,8],[691,7,564,9],[691,8,565,8],[691,15,565,15,"error"],[691,20,565,20],[691,22,565,22],[692,8,566,12],[692,12,566,16],[692,16,566,16,"isAuthError"],[692,26,566,27],[692,27,566,27,"isAuthError"],[692,38,566,27],[692,40,566,28,"error"],[692,45,566,33],[692,46,566,34],[692,48,566,36],[693,10,567,16],[693,17,567,23],[694,12,567,25,"data"],[694,16,567,29],[694,18,567,31],[695,14,567,33,"user"],[695,18,567,37],[695,20,567,39],[695,24,567,43],[696,14,567,45,"session"],[696,21,567,52],[696,23,567,54],[697,12,567,59],[697,13,567,60],[698,12,567,62,"error"],[699,10,567,68],[699,11,567,69],[700,8,568,12],[701,8,569,12],[701,14,569,18,"error"],[701,19,569,23],[702,6,570,8],[703,4,571,4],[704,4,572,4],[704,10,572,10,"signInWithSolana"],[704,26,572,26,"signInWithSolana"],[704,27,572,27,"credentials"],[704,38,572,38],[704,40,572,40],[705,6,573,8],[705,10,573,12,"_a"],[705,12,573,14],[705,14,573,16,"_b"],[705,16,573,18],[705,18,573,20,"_c"],[705,20,573,22],[705,22,573,24,"_d"],[705,24,573,26],[705,26,573,28,"_e"],[705,28,573,30],[705,30,573,32,"_f"],[705,32,573,34],[705,34,573,36,"_g"],[705,36,573,38],[705,38,573,40,"_h"],[705,40,573,42],[705,42,573,44,"_j"],[705,44,573,46],[705,46,573,48,"_k"],[705,48,573,50],[705,50,573,52,"_l"],[705,52,573,54],[705,54,573,56,"_m"],[705,56,573,58],[706,6,574,8],[706,10,574,12,"message"],[706,17,574,19],[707,6,575,8],[707,10,575,12,"signature"],[707,19,575,21],[708,6,576,8],[708,10,576,12],[708,19,576,21],[708,23,576,25,"credentials"],[708,34,576,36],[708,36,576,38],[709,8,577,12,"message"],[709,15,577,19],[709,18,577,22,"credentials"],[709,29,577,33],[709,30,577,34,"message"],[709,37,577,41],[710,8,578,12,"signature"],[710,17,578,21],[710,20,578,24,"credentials"],[710,31,578,35],[710,32,578,36,"signature"],[710,41,578,45],[711,6,579,8],[711,7,579,9],[711,13,580,13],[712,8,581,12],[712,14,581,18],[713,10,581,20,"chain"],[713,15,581,25],[714,10,581,27,"wallet"],[714,16,581,33],[715,10,581,35,"statement"],[715,19,581,44],[716,10,581,46,"options"],[717,8,581,54],[717,9,581,55],[717,12,581,58,"credentials"],[717,23,581,69],[718,8,582,12],[718,12,582,16,"resolvedWallet"],[718,26,582,30],[719,8,583,12],[719,12,583,16],[719,13,583,17],[719,17,583,17,"isBrowser"],[719,28,583,26],[719,29,583,26,"isBrowser"],[719,38,583,26],[719,40,583,27],[719,41,583,28],[719,43,583,30],[720,10,584,16],[720,14,584,20],[720,21,584,27,"wallet"],[720,27,584,33],[720,32,584,38],[720,40,584,46],[720,44,584,50],[720,46,584,52,"options"],[720,53,584,59],[720,58,584,64],[720,62,584,68],[720,66,584,72,"options"],[720,73,584,79],[720,78,584,84],[720,83,584,89],[720,84,584,90],[720,87,584,93],[720,92,584,98],[720,93,584,99],[720,96,584,102,"options"],[720,103,584,109],[720,104,584,110,"url"],[720,107,584,113],[720,108,584,114],[720,110,584,116],[721,12,585,20],[721,18,585,26],[721,22,585,30,"Error"],[721,27,585,35],[721,28,585,36],[721,115,585,123],[721,116,585,124],[722,10,586,16],[723,10,587,16,"resolvedWallet"],[723,24,587,30],[723,27,587,33,"wallet"],[723,33,587,39],[724,8,588,12],[724,9,588,13],[724,15,589,17],[724,19,589,21],[724,26,589,28,"wallet"],[724,32,589,34],[724,37,589,39],[724,45,589,47],[724,47,589,49],[725,10,590,16,"resolvedWallet"],[725,24,590,30],[725,27,590,33,"wallet"],[725,33,590,39],[726,8,591,12],[726,9,591,13],[726,15,592,17],[727,10,593,16],[727,16,593,22,"windowAny"],[727,25,593,31],[727,28,593,34,"window"],[727,34,593,40],[728,10,594,16],[728,14,594,20],[728,22,594,28],[728,26,594,32,"windowAny"],[728,35,594,41],[728,39,595,20],[728,46,595,27,"windowAny"],[728,55,595,36],[728,56,595,37,"solana"],[728,62,595,43],[728,67,595,48],[728,75,595,56],[728,80,596,22],[728,88,596,30],[728,92,596,34,"windowAny"],[728,101,596,43],[728,102,596,44,"solana"],[728,108,596,50],[728,112,596,54],[728,119,596,61,"windowAny"],[728,128,596,70],[728,129,596,71,"solana"],[728,135,596,77],[728,136,596,78,"signIn"],[728,142,596,84],[728,147,596,89],[728,157,596,99],[728,161,597,25],[728,174,597,38],[728,178,597,42,"windowAny"],[728,187,597,51],[728,188,597,52,"solana"],[728,194,597,58],[728,198,598,28],[728,205,598,35,"windowAny"],[728,214,598,44],[728,215,598,45,"solana"],[728,221,598,51],[728,222,598,52,"signMessage"],[728,233,598,63],[728,238,598,68],[728,248,598,79],[728,249,598,80],[728,251,598,82],[729,12,599,20,"resolvedWallet"],[729,26,599,34],[729,29,599,37,"windowAny"],[729,38,599,46],[729,39,599,47,"solana"],[729,45,599,53],[730,10,600,16],[730,11,600,17],[730,17,601,21],[731,12,602,20],[731,18,602,26],[731,22,602,30,"Error"],[731,27,602,35],[731,28,602,36],[731,339,602,347],[731,340,602,348],[732,10,603,16],[733,8,604,12],[734,8,605,12],[734,14,605,18,"url"],[734,17,605,21],[734,20,605,24],[734,24,605,28,"URL"],[734,27,605,31],[734,28,605,32],[734,29,605,33,"_a"],[734,31,605,35],[734,34,605,38,"options"],[734,41,605,45],[734,46,605,50],[734,50,605,54],[734,54,605,58,"options"],[734,61,605,65],[734,66,605,70],[734,71,605,75],[734,72,605,76],[734,75,605,79],[734,80,605,84],[734,81,605,85],[734,84,605,88,"options"],[734,91,605,95],[734,92,605,96,"url"],[734,95,605,99],[734,101,605,105],[734,105,605,109],[734,109,605,113,"_a"],[734,111,605,115],[734,116,605,120],[734,121,605,125],[734,122,605,126],[734,125,605,129,"_a"],[734,127,605,131],[734,130,605,134,"window"],[734,136,605,140],[734,137,605,141,"location"],[734,145,605,149],[734,146,605,150,"href"],[734,150,605,154],[734,151,605,155],[735,8,606,12],[735,12,606,16],[735,20,606,24],[735,24,606,28,"resolvedWallet"],[735,38,606,42],[735,42,606,46,"resolvedWallet"],[735,56,606,60],[735,57,606,61,"signIn"],[735,63,606,67],[735,65,606,69],[736,10,607,16],[736,16,607,22,"output"],[736,22,607,28],[736,25,607,31],[736,31,607,37,"resolvedWallet"],[736,45,607,51],[736,46,607,52,"signIn"],[736,52,607,58],[736,53,607,59,"Object"],[736,59,607,65],[736,60,607,66,"assign"],[736,66,607,72],[736,67,607,73,"Object"],[736,73,607,79],[736,74,607,80,"assign"],[736,80,607,86],[736,81,607,87,"Object"],[736,87,607,93],[736,88,607,94,"assign"],[736,94,607,100],[736,95,607,101],[737,12,607,103,"issuedAt"],[737,20,607,111],[737,22,607,113],[737,26,607,117,"Date"],[737,30,607,121],[737,31,607,122],[737,32,607,123],[737,33,607,124,"toISOString"],[737,44,607,135],[737,45,607,136],[738,10,607,138],[738,11,607,139],[738,13,607,141,"options"],[738,20,607,148],[738,25,607,153],[738,29,607,157],[738,33,607,161,"options"],[738,40,607,168],[738,45,607,173],[738,50,607,178],[738,51,607,179],[738,54,607,182],[738,59,607,187],[738,60,607,188],[738,63,607,191,"options"],[738,70,607,198],[738,71,607,199,"signInWithSolana"],[738,87,607,215],[738,88,607,216],[738,90,607,218],[739,12,608,20],[740,12,609,20,"version"],[740,19,609,27],[740,21,609,29],[740,24,609,32],[741,12,609,34,"domain"],[741,18,609,40],[741,20,609,42,"url"],[741,23,609,45],[741,24,609,46,"host"],[741,28,609,50],[742,12,609,52,"uri"],[742,15,609,55],[742,17,609,57,"url"],[742,20,609,60],[742,21,609,61,"href"],[743,10,609,66],[743,11,609,67],[743,12,609,68],[743,14,609,71,"statement"],[743,23,609,80],[743,26,609,83],[744,12,609,85,"statement"],[745,10,609,95],[745,11,609,96],[745,14,609,99],[745,18,609,104],[745,19,609,105],[745,20,609,106],[746,10,610,16],[746,14,610,20,"outputToProcess"],[746,29,610,35],[747,10,611,16],[747,14,611,20,"Array"],[747,19,611,25],[747,20,611,26,"isArray"],[747,27,611,33],[747,28,611,34,"output"],[747,34,611,40],[747,35,611,41],[747,39,611,45,"output"],[747,45,611,51],[747,46,611,52],[747,47,611,53],[747,48,611,54],[747,52,611,58],[747,59,611,65,"output"],[747,65,611,71],[747,66,611,72],[747,67,611,73],[747,68,611,74],[747,73,611,79],[747,81,611,87],[747,83,611,89],[748,12,612,20,"outputToProcess"],[748,27,612,35],[748,30,612,38,"output"],[748,36,612,44],[748,37,612,45],[748,38,612,46],[748,39,612,47],[749,10,613,16],[749,11,613,17],[749,17,614,21],[749,21,614,25,"output"],[749,27,614,31],[749,31,615,20],[749,38,615,27,"output"],[749,44,615,33],[749,49,615,38],[749,57,615,46],[749,61,616,20],[749,76,616,35],[749,80,616,39,"output"],[749,86,616,45],[749,90,617,20],[749,101,617,31],[749,105,617,35,"output"],[749,111,617,41],[749,113,617,43],[750,12,618,20,"outputToProcess"],[750,27,618,35],[750,30,618,38,"output"],[750,36,618,44],[751,10,619,16],[751,11,619,17],[751,17,620,21],[752,12,621,20],[752,18,621,26],[752,22,621,30,"Error"],[752,27,621,35],[752,28,621,36],[752,99,621,107],[752,100,621,108],[753,10,622,16],[754,10,623,16],[754,14,623,20],[754,29,623,35],[754,33,623,39,"outputToProcess"],[754,48,623,54],[754,52,624,20],[754,63,624,31],[754,67,624,35,"outputToProcess"],[754,82,624,50],[754,87,625,21],[754,94,625,28,"outputToProcess"],[754,109,625,43],[754,110,625,44,"signedMessage"],[754,123,625,57],[754,128,625,62],[754,136,625,70],[754,140,626,24,"outputToProcess"],[754,155,626,39],[754,156,626,40,"signedMessage"],[754,169,626,53],[754,181,626,65,"Uint8Array"],[754,191,626,75],[754,192,626,76],[754,196,627,20,"outputToProcess"],[754,211,627,35],[754,212,627,36,"signature"],[754,221,627,45],[754,233,627,57,"Uint8Array"],[754,243,627,67],[754,245,627,69],[755,12,628,20,"message"],[755,19,628,27],[755,22,629,24],[755,29,629,31,"outputToProcess"],[755,44,629,46],[755,45,629,47,"signedMessage"],[755,58,629,60],[755,63,629,65],[755,71,629,73],[755,74,630,30,"outputToProcess"],[755,89,630,45],[755,90,630,46,"signedMessage"],[755,103,630,59],[755,106,631,30],[755,110,631,34,"TextDecoder"],[755,121,631,45],[755,122,631,46],[755,123,631,47],[755,124,631,48,"decode"],[755,130,631,54],[755,131,631,55,"outputToProcess"],[755,146,631,70],[755,147,631,71,"signedMessage"],[755,160,631,84],[755,161,631,85],[756,12,632,20,"signature"],[756,21,632,29],[756,24,632,32,"outputToProcess"],[756,39,632,47],[756,40,632,48,"signature"],[756,49,632,57],[757,10,633,16],[757,11,633,17],[757,17,634,21],[758,12,635,20],[758,18,635,26],[758,22,635,30,"Error"],[758,27,635,35],[758,28,635,36],[758,134,635,142],[758,135,635,143],[759,10,636,16],[760,8,637,12],[760,9,637,13],[760,15,638,17],[761,10,639,16],[761,14,639,20],[761,16,639,22],[761,29,639,35],[761,33,639,39,"resolvedWallet"],[761,47,639,53],[761,48,639,54],[761,52,640,20],[761,59,640,27,"resolvedWallet"],[761,73,640,41],[761,74,640,42,"signMessage"],[761,85,640,53],[761,90,640,58],[761,100,640,68],[761,104,641,20],[761,106,641,22],[761,117,641,33],[761,121,641,37,"resolvedWallet"],[761,135,641,51],[761,136,641,52],[761,140,642,20],[761,147,642,27,"resolvedWallet"],[761,161,642,41],[761,166,642,46],[761,174,642,54],[761,178,643,20],[761,179,643,21,"resolvedWallet"],[761,193,643,35],[761,194,643,36,"publicKey"],[761,203,643,45],[761,207,644,20],[761,209,644,22],[761,219,644,32],[761,223,644,36,"resolvedWallet"],[761,237,644,50],[761,238,644,51,"publicKey"],[761,247,644,60],[761,248,644,61],[761,252,645,20],[761,259,645,27,"resolvedWallet"],[761,273,645,41],[761,274,645,42,"publicKey"],[761,283,645,51],[761,284,645,52,"toBase58"],[761,292,645,60],[761,297,645,65],[761,307,645,75],[761,309,645,77],[762,12,646,20],[762,18,646,26],[762,22,646,30,"Error"],[762,27,646,35],[762,28,646,36],[762,125,646,133],[762,126,646,134],[763,10,647,16],[764,10,648,16,"message"],[764,17,648,23],[764,20,648,26],[764,21,649,20],[764,24,649,23,"url"],[764,27,649,26],[764,28,649,27,"host"],[764,32,649,31],[764,81,649,80],[764,83,650,20,"resolvedWallet"],[764,97,650,34],[764,98,650,35,"publicKey"],[764,107,650,44],[764,108,650,45,"toBase58"],[764,116,650,53],[764,117,650,54],[764,118,650,55],[764,120,651,20],[764,124,651,24,"statement"],[764,133,651,33],[764,136,651,36],[764,137,651,37],[764,139,651,39],[764,141,651,41,"statement"],[764,150,651,50],[764,152,651,52],[764,154,651,54],[764,155,651,55],[764,158,651,58],[764,159,651,59],[764,161,651,61],[764,162,651,62],[764,163,651,63],[764,165,652,20],[764,177,652,32],[764,179,653,20],[764,187,653,28,"url"],[764,190,653,31],[764,191,653,32,"href"],[764,195,653,36],[764,197,653,38],[764,199,654,20],[764,213,654,34],[764,214,654,35,"_c"],[764,216,654,37],[764,219,654,40],[764,220,654,41,"_b"],[764,222,654,43],[764,225,654,46,"options"],[764,232,654,53],[764,237,654,58],[764,241,654,62],[764,245,654,66,"options"],[764,252,654,73],[764,257,654,78],[764,262,654,83],[764,263,654,84],[764,266,654,87],[764,271,654,92],[764,272,654,93],[764,275,654,96,"options"],[764,282,654,103],[764,283,654,104,"signInWithSolana"],[764,299,654,120],[764,305,654,126],[764,309,654,130],[764,313,654,134,"_b"],[764,315,654,136],[764,320,654,141],[764,325,654,146],[764,326,654,147],[764,329,654,150],[764,334,654,155],[764,335,654,156],[764,338,654,159,"_b"],[764,340,654,161],[764,341,654,162,"issuedAt"],[764,349,654,170],[764,355,654,176],[764,359,654,180],[764,363,654,184,"_c"],[764,365,654,186],[764,370,654,191],[764,375,654,196],[764,376,654,197],[764,379,654,200,"_c"],[764,381,654,202],[764,384,654,205],[764,388,654,209,"Date"],[764,392,654,213],[764,393,654,214],[764,394,654,215],[764,395,654,216,"toISOString"],[764,406,654,227],[764,407,654,228],[764,408,654,229],[764,410,654,231],[764,412,655,20],[764,416,655,24],[764,417,655,25],[764,418,655,26,"_d"],[764,420,655,28],[764,423,655,31,"options"],[764,430,655,38],[764,435,655,43],[764,439,655,47],[764,443,655,51,"options"],[764,450,655,58],[764,455,655,63],[764,460,655,68],[764,461,655,69],[764,464,655,72],[764,469,655,77],[764,470,655,78],[764,473,655,81,"options"],[764,480,655,88],[764,481,655,89,"signInWithSolana"],[764,497,655,105],[764,503,655,111],[764,507,655,115],[764,511,655,119,"_d"],[764,513,655,121],[764,518,655,126],[764,523,655,131],[764,524,655,132],[764,527,655,135],[764,532,655,140],[764,533,655,141],[764,536,655,144,"_d"],[764,538,655,146],[764,539,655,147,"notBefore"],[764,548,655,156],[764,552,656,26],[764,553,656,27],[764,568,656,42,"options"],[764,575,656,49],[764,576,656,50,"signInWithSolana"],[764,592,656,66],[764,593,656,67,"notBefore"],[764,602,656,76],[764,604,656,78],[764,605,656,79],[764,608,657,26],[764,610,657,28],[764,611,657,29],[764,613,658,20],[764,617,658,24],[764,618,658,25],[764,619,658,26,"_e"],[764,621,658,28],[764,624,658,31,"options"],[764,631,658,38],[764,636,658,43],[764,640,658,47],[764,644,658,51,"options"],[764,651,658,58],[764,656,658,63],[764,661,658,68],[764,662,658,69],[764,665,658,72],[764,670,658,77],[764,671,658,78],[764,674,658,81,"options"],[764,681,658,88],[764,682,658,89,"signInWithSolana"],[764,698,658,105],[764,704,658,111],[764,708,658,115],[764,712,658,119,"_e"],[764,714,658,121],[764,719,658,126],[764,724,658,131],[764,725,658,132],[764,728,658,135],[764,733,658,140],[764,734,658,141],[764,737,658,144,"_e"],[764,739,658,146],[764,740,658,147,"expirationTime"],[764,754,658,161],[764,758,659,26],[764,759,659,27],[764,779,659,47,"options"],[764,786,659,54],[764,787,659,55,"signInWithSolana"],[764,803,659,71],[764,804,659,72,"expirationTime"],[764,818,659,86],[764,820,659,88],[764,821,659,89],[764,824,660,26],[764,826,660,28],[764,827,660,29],[764,829,661,20],[764,833,661,24],[764,834,661,25],[764,835,661,26,"_f"],[764,837,661,28],[764,840,661,31,"options"],[764,847,661,38],[764,852,661,43],[764,856,661,47],[764,860,661,51,"options"],[764,867,661,58],[764,872,661,63],[764,877,661,68],[764,878,661,69],[764,881,661,72],[764,886,661,77],[764,887,661,78],[764,890,661,81,"options"],[764,897,661,88],[764,898,661,89,"signInWithSolana"],[764,914,661,105],[764,920,661,111],[764,924,661,115],[764,928,661,119,"_f"],[764,930,661,121],[764,935,661,126],[764,940,661,131],[764,941,661,132],[764,944,661,135],[764,949,661,140],[764,950,661,141],[764,953,661,144,"_f"],[764,955,661,146],[764,956,661,147,"chainId"],[764,963,661,154],[764,967,662,26],[764,968,662,27],[764,981,662,40,"options"],[764,988,662,47],[764,989,662,48,"signInWithSolana"],[764,1005,662,64],[764,1006,662,65,"chainId"],[764,1013,662,72],[764,1015,662,74],[764,1016,662,75],[764,1019,663,26],[764,1021,663,28],[764,1022,663,29],[764,1024,664,20],[764,1028,664,24],[764,1029,664,25],[764,1030,664,26,"_g"],[764,1032,664,28],[764,1035,664,31,"options"],[764,1042,664,38],[764,1047,664,43],[764,1051,664,47],[764,1055,664,51,"options"],[764,1062,664,58],[764,1067,664,63],[764,1072,664,68],[764,1073,664,69],[764,1076,664,72],[764,1081,664,77],[764,1082,664,78],[764,1085,664,81,"options"],[764,1092,664,88],[764,1093,664,89,"signInWithSolana"],[764,1109,664,105],[764,1115,664,111],[764,1119,664,115],[764,1123,664,119,"_g"],[764,1125,664,121],[764,1130,664,126],[764,1135,664,131],[764,1136,664,132],[764,1139,664,135],[764,1144,664,140],[764,1145,664,141],[764,1148,664,144,"_g"],[764,1150,664,146],[764,1151,664,147,"nonce"],[764,1156,664,152],[764,1160,664,156],[764,1161,664,157],[764,1171,664,167,"options"],[764,1178,664,174],[764,1179,664,175,"signInWithSolana"],[764,1195,664,191],[764,1196,664,192,"nonce"],[764,1201,664,197],[764,1203,664,199],[764,1204,664,200],[764,1207,664,203],[764,1209,664,205],[764,1210,664,206],[764,1212,665,20],[764,1216,665,24],[764,1217,665,25],[764,1218,665,26,"_h"],[764,1220,665,28],[764,1223,665,31,"options"],[764,1230,665,38],[764,1235,665,43],[764,1239,665,47],[764,1243,665,51,"options"],[764,1250,665,58],[764,1255,665,63],[764,1260,665,68],[764,1261,665,69],[764,1264,665,72],[764,1269,665,77],[764,1270,665,78],[764,1273,665,81,"options"],[764,1280,665,88],[764,1281,665,89,"signInWithSolana"],[764,1297,665,105],[764,1303,665,111],[764,1307,665,115],[764,1311,665,119,"_h"],[764,1313,665,121],[764,1318,665,126],[764,1323,665,131],[764,1324,665,132],[764,1327,665,135],[764,1332,665,140],[764,1333,665,141],[764,1336,665,144,"_h"],[764,1338,665,146],[764,1339,665,147,"requestId"],[764,1348,665,156],[764,1352,666,26],[764,1353,666,27],[764,1368,666,42,"options"],[764,1375,666,49],[764,1376,666,50,"signInWithSolana"],[764,1392,666,66],[764,1393,666,67,"requestId"],[764,1402,666,76],[764,1404,666,78],[764,1405,666,79],[764,1408,667,26],[764,1410,667,28],[764,1411,667,29],[764,1413,668,20],[764,1417,668,24],[764,1418,668,25],[764,1419,668,26,"_k"],[764,1421,668,28],[764,1424,668,31],[764,1425,668,32,"_j"],[764,1427,668,34],[764,1430,668,37,"options"],[764,1437,668,44],[764,1442,668,49],[764,1446,668,53],[764,1450,668,57,"options"],[764,1457,668,64],[764,1462,668,69],[764,1467,668,74],[764,1468,668,75],[764,1471,668,78],[764,1476,668,83],[764,1477,668,84],[764,1480,668,87,"options"],[764,1487,668,94],[764,1488,668,95,"signInWithSolana"],[764,1504,668,111],[764,1510,668,117],[764,1514,668,121],[764,1518,668,125,"_j"],[764,1520,668,127],[764,1525,668,132],[764,1530,668,137],[764,1531,668,138],[764,1534,668,141],[764,1539,668,146],[764,1540,668,147],[764,1543,668,150,"_j"],[764,1545,668,152],[764,1546,668,153,"resources"],[764,1555,668,162],[764,1561,668,168],[764,1565,668,172],[764,1569,668,176,"_k"],[764,1571,668,178],[764,1576,668,183],[764,1581,668,188],[764,1582,668,189],[764,1585,668,192],[764,1590,668,197],[764,1591,668,198],[764,1594,668,201,"_k"],[764,1596,668,203],[764,1597,668,204,"length"],[764,1603,668,210],[764,1607,669,26],[764,1608,670,28],[764,1619,670,39],[764,1621,671,28],[764,1624,671,31,"options"],[764,1631,671,38],[764,1632,671,39,"signInWithSolana"],[764,1648,671,55],[764,1649,671,56,"resources"],[764,1658,671,65],[764,1659,671,66,"map"],[764,1662,671,69],[764,1663,671,71,"resource"],[764,1671,671,79],[764,1675,671,84],[764,1680,671,89,"resource"],[764,1688,671,97],[764,1690,671,99],[764,1691,671,100],[764,1692,672,25],[764,1695,673,26],[764,1697,673,28],[764,1698,673,29],[764,1699,674,17],[764,1700,674,18,"join"],[764,1704,674,22],[764,1705,674,23],[764,1709,674,27],[764,1710,674,28],[765,10,675,16],[765,16,675,22,"maybeSignature"],[765,30,675,36],[765,33,675,39],[765,39,675,45,"resolvedWallet"],[765,53,675,59],[765,54,675,60,"signMessage"],[765,65,675,71],[765,66,675,72],[765,70,675,76,"TextEncoder"],[765,81,675,87],[765,82,675,88],[765,83,675,89],[765,84,675,90,"encode"],[765,90,675,96],[765,91,675,97,"message"],[765,98,675,104],[765,99,675,105],[765,101,675,107],[765,107,675,113],[765,108,675,114],[766,10,676,16],[766,14,676,20],[766,15,676,21,"maybeSignature"],[766,29,676,35],[766,33,676,39],[766,35,676,41,"maybeSignature"],[766,49,676,55],[766,61,676,67,"Uint8Array"],[766,71,676,77],[766,72,676,78],[766,74,676,80],[767,12,677,20],[767,18,677,26],[767,22,677,30,"Error"],[767,27,677,35],[767,28,677,36],[767,102,677,110],[767,103,677,111],[768,10,678,16],[769,10,679,16,"signature"],[769,19,679,25],[769,22,679,28,"maybeSignature"],[769,36,679,42],[770,8,680,12],[771,6,681,8],[772,6,682,8],[772,10,682,12],[773,8,683,12],[773,14,683,18],[774,10,683,20,"data"],[774,14,683,24],[775,10,683,26,"error"],[776,8,683,32],[776,9,683,33],[776,12,683,36],[776,18,683,42],[776,22,683,42,"_request"],[776,31,683,50],[776,32,683,50,"_request"],[776,40,683,50],[776,42,683,51],[776,46,683,55],[776,47,683,56,"fetch"],[776,52,683,61],[776,54,683,63],[776,60,683,69],[776,62,683,71],[776,65,683,74],[776,69,683,78],[776,70,683,79,"url"],[776,73,683,82],[776,97,683,106],[776,99,683,108],[777,10,684,16,"headers"],[777,17,684,23],[777,19,684,25],[777,23,684,29],[777,24,684,30,"headers"],[777,31,684,37],[778,10,685,16,"body"],[778,14,685,20],[778,16,685,22,"Object"],[778,22,685,28],[778,23,685,29,"assign"],[778,29,685,35],[778,30,685,36],[779,12,685,38,"chain"],[779,17,685,43],[779,19,685,45],[779,27,685,53],[780,12,685,55,"message"],[780,19,685,62],[781,12,685,64,"signature"],[781,21,685,73],[781,23,685,75],[781,27,685,75,"bytesToBase64URL"],[781,40,685,91],[781,41,685,91,"bytesToBase64URL"],[781,57,685,91],[781,59,685,92,"signature"],[781,68,685,101],[782,10,685,103],[782,11,685,104],[782,13,685,107],[782,14,685,108],[782,15,685,109,"_l"],[782,17,685,111],[782,20,685,114,"credentials"],[782,31,685,125],[782,32,685,126,"options"],[782,39,685,133],[782,45,685,139],[782,49,685,143],[782,53,685,147,"_l"],[782,55,685,149],[782,60,685,154],[782,65,685,159],[782,66,685,160],[782,69,685,163],[782,74,685,168],[782,75,685,169],[782,78,685,172,"_l"],[782,80,685,174],[782,81,685,175,"captchaToken"],[782,93,685,187],[782,97,686,22],[783,12,686,24,"gotrue_meta_security"],[783,32,686,44],[783,34,686,46],[784,14,686,48,"captcha_token"],[784,27,686,61],[784,29,686,63],[784,30,686,64,"_m"],[784,32,686,66],[784,35,686,69,"credentials"],[784,46,686,80],[784,47,686,81,"options"],[784,54,686,88],[784,60,686,94],[784,64,686,98],[784,68,686,102,"_m"],[784,70,686,104],[784,75,686,109],[784,80,686,114],[784,81,686,115],[784,84,686,118],[784,89,686,123],[784,90,686,124],[784,93,686,127,"_m"],[784,95,686,129],[784,96,686,130,"captchaToken"],[785,12,686,143],[786,10,686,145],[786,11,686,146],[786,14,687,22],[786,18,687,27],[786,19,687,28],[787,10,688,16,"xform"],[787,15,688,21],[787,17,688,23,"_sessionResponse"],[787,26,688,39],[787,27,688,39,"_sessionResponse"],[788,8,689,12],[788,9,689,13],[788,10,689,14],[789,8,690,12],[789,12,690,16,"error"],[789,17,690,21],[789,19,690,23],[790,10,691,16],[790,16,691,22,"error"],[790,21,691,27],[791,8,692,12],[792,8,693,12],[792,12,693,16],[792,13,693,17,"data"],[792,17,693,21],[792,21,693,25],[792,22,693,26,"data"],[792,26,693,30],[792,27,693,31,"session"],[792,34,693,38],[792,38,693,42],[792,39,693,43,"data"],[792,43,693,47],[792,44,693,48,"user"],[792,48,693,52],[792,50,693,54],[793,10,694,16],[793,17,694,23],[794,12,695,20,"data"],[794,16,695,24],[794,18,695,26],[795,14,695,28,"user"],[795,18,695,32],[795,20,695,34],[795,24,695,38],[796,14,695,40,"session"],[796,21,695,47],[796,23,695,49],[797,12,695,54],[797,13,695,55],[798,12,696,20,"error"],[798,17,696,25],[798,19,696,27],[798,23,696,31,"AuthInvalidTokenResponseError"],[798,33,696,60],[798,34,696,60,"AuthInvalidTokenResponseError"],[798,63,696,60],[798,64,696,61],[799,10,697,16],[799,11,697,17],[800,8,698,12],[801,8,699,12],[801,12,699,16,"data"],[801,16,699,20],[801,17,699,21,"session"],[801,24,699,28],[801,26,699,30],[802,10,700,16],[802,16,700,22],[802,20,700,26],[802,21,700,27,"_saveSession"],[802,33,700,39],[802,34,700,40,"data"],[802,38,700,44],[802,39,700,45,"session"],[802,46,700,52],[802,47,700,53],[803,10,701,16],[803,16,701,22],[803,20,701,26],[803,21,701,27,"_notifyAllSubscribers"],[803,42,701,48],[803,43,701,49],[803,54,701,60],[803,56,701,62,"data"],[803,60,701,66],[803,61,701,67,"session"],[803,68,701,74],[803,69,701,75],[804,8,702,12],[805,8,703,12],[805,15,703,19],[806,10,703,21,"data"],[806,14,703,25],[806,16,703,27,"Object"],[806,22,703,33],[806,23,703,34,"assign"],[806,29,703,40],[806,30,703,41],[806,31,703,42],[806,32,703,43],[806,34,703,45,"data"],[806,38,703,49],[806,39,703,50],[807,10,703,52,"error"],[808,8,703,58],[808,9,703,59],[809,6,704,8],[809,7,704,9],[809,8,705,8],[809,15,705,15,"error"],[809,20,705,20],[809,22,705,22],[810,8,706,12],[810,12,706,16],[810,16,706,16,"isAuthError"],[810,26,706,27],[810,27,706,27,"isAuthError"],[810,38,706,27],[810,40,706,28,"error"],[810,45,706,33],[810,46,706,34],[810,48,706,36],[811,10,707,16],[811,17,707,23],[812,12,707,25,"data"],[812,16,707,29],[812,18,707,31],[813,14,707,33,"user"],[813,18,707,37],[813,20,707,39],[813,24,707,43],[814,14,707,45,"session"],[814,21,707,52],[814,23,707,54],[815,12,707,59],[815,13,707,60],[816,12,707,62,"error"],[817,10,707,68],[817,11,707,69],[818,8,708,12],[819,8,709,12],[819,14,709,18,"error"],[819,19,709,23],[820,6,710,8],[821,4,711,4],[822,4,712,4],[822,10,712,10,"_exchangeCodeForSession"],[822,33,712,33,"_exchangeCodeForSession"],[822,34,712,34,"authCode"],[822,42,712,42],[822,44,712,44],[823,6,713,8],[823,12,713,14,"storageItem"],[823,23,713,25],[823,26,713,28],[823,32,713,34],[823,36,713,34,"getItemAsync"],[823,47,713,46],[823,48,713,46,"getItemAsync"],[823,60,713,46],[823,62,713,47],[823,66,713,51],[823,67,713,52,"storage"],[823,74,713,59],[823,76,713,61],[823,79,713,64],[823,83,713,68],[823,84,713,69,"storageKey"],[823,94,713,79],[823,110,713,95],[823,111,713,96],[824,6,714,8],[824,12,714,14],[824,13,714,15,"codeVerifier"],[824,25,714,27],[824,27,714,29,"redirectType"],[824,39,714,41],[824,40,714,42],[824,43,714,45],[824,44,714,46,"storageItem"],[824,55,714,57],[824,60,714,62],[824,64,714,66],[824,68,714,70,"storageItem"],[824,79,714,81],[824,84,714,86],[824,89,714,91],[824,90,714,92],[824,93,714,95,"storageItem"],[824,104,714,106],[824,107,714,109],[824,109,714,111],[824,111,714,113,"split"],[824,116,714,118],[824,117,714,119],[824,120,714,122],[824,121,714,123],[825,6,715,8],[825,10,715,12],[826,8,716,12],[826,14,716,18],[827,10,716,20,"data"],[827,14,716,24],[828,10,716,26,"error"],[829,8,716,32],[829,9,716,33],[829,12,716,36],[829,18,716,42],[829,22,716,42,"_request"],[829,31,716,50],[829,32,716,50,"_request"],[829,40,716,50],[829,42,716,51],[829,46,716,55],[829,47,716,56,"fetch"],[829,52,716,61],[829,54,716,63],[829,60,716,69],[829,62,716,71],[829,65,716,74],[829,69,716,78],[829,70,716,79,"url"],[829,73,716,82],[829,97,716,106],[829,99,716,108],[830,10,717,16,"headers"],[830,17,717,23],[830,19,717,25],[830,23,717,29],[830,24,717,30,"headers"],[830,31,717,37],[831,10,718,16,"body"],[831,14,718,20],[831,16,718,22],[832,12,719,20,"auth_code"],[832,21,719,29],[832,23,719,31,"authCode"],[832,31,719,39],[833,12,720,20,"code_verifier"],[833,25,720,33],[833,27,720,35,"codeVerifier"],[834,10,721,16],[834,11,721,17],[835,10,722,16,"xform"],[835,15,722,21],[835,17,722,23,"_sessionResponse"],[835,26,722,39],[835,27,722,39,"_sessionResponse"],[836,8,723,12],[836,9,723,13],[836,10,723,14],[837,8,724,12],[837,14,724,18],[837,18,724,18,"removeItemAsync"],[837,29,724,33],[837,30,724,33,"removeItemAsync"],[837,45,724,33],[837,47,724,34],[837,51,724,38],[837,52,724,39,"storage"],[837,59,724,46],[837,61,724,48],[837,64,724,51],[837,68,724,55],[837,69,724,56,"storageKey"],[837,79,724,66],[837,95,724,82],[837,96,724,83],[838,8,725,12],[838,12,725,16,"error"],[838,17,725,21],[838,19,725,23],[839,10,726,16],[839,16,726,22,"error"],[839,21,726,27],[840,8,727,12],[841,8,728,12],[841,12,728,16],[841,13,728,17,"data"],[841,17,728,21],[841,21,728,25],[841,22,728,26,"data"],[841,26,728,30],[841,27,728,31,"session"],[841,34,728,38],[841,38,728,42],[841,39,728,43,"data"],[841,43,728,47],[841,44,728,48,"user"],[841,48,728,52],[841,50,728,54],[842,10,729,16],[842,17,729,23],[843,12,730,20,"data"],[843,16,730,24],[843,18,730,26],[844,14,730,28,"user"],[844,18,730,32],[844,20,730,34],[844,24,730,38],[845,14,730,40,"session"],[845,21,730,47],[845,23,730,49],[845,27,730,53],[846,14,730,55,"redirectType"],[846,26,730,67],[846,28,730,69],[847,12,730,74],[847,13,730,75],[848,12,731,20,"error"],[848,17,731,25],[848,19,731,27],[848,23,731,31,"AuthInvalidTokenResponseError"],[848,33,731,60],[848,34,731,60,"AuthInvalidTokenResponseError"],[848,63,731,60],[848,64,731,61],[849,10,732,16],[849,11,732,17],[850,8,733,12],[851,8,734,12],[851,12,734,16,"data"],[851,16,734,20],[851,17,734,21,"session"],[851,24,734,28],[851,26,734,30],[852,10,735,16],[852,16,735,22],[852,20,735,26],[852,21,735,27,"_saveSession"],[852,33,735,39],[852,34,735,40,"data"],[852,38,735,44],[852,39,735,45,"session"],[852,46,735,52],[852,47,735,53],[853,10,736,16],[853,16,736,22],[853,20,736,26],[853,21,736,27,"_notifyAllSubscribers"],[853,42,736,48],[853,43,736,49],[853,54,736,60],[853,56,736,62,"data"],[853,60,736,66],[853,61,736,67,"session"],[853,68,736,74],[853,69,736,75],[854,8,737,12],[855,8,738,12],[855,15,738,19],[856,10,738,21,"data"],[856,14,738,25],[856,16,738,27,"Object"],[856,22,738,33],[856,23,738,34,"assign"],[856,29,738,40],[856,30,738,41,"Object"],[856,36,738,47],[856,37,738,48,"assign"],[856,43,738,54],[856,44,738,55],[856,45,738,56],[856,46,738,57],[856,48,738,59,"data"],[856,52,738,63],[856,53,738,64],[856,55,738,66],[857,12,738,68,"redirectType"],[857,24,738,80],[857,26,738,82,"redirectType"],[857,38,738,94],[857,43,738,99],[857,47,738,103],[857,51,738,107,"redirectType"],[857,63,738,119],[857,68,738,124],[857,73,738,129],[857,74,738,130],[857,77,738,133,"redirectType"],[857,89,738,145],[857,92,738,148],[858,10,738,153],[858,11,738,154],[858,12,738,155],[859,10,738,157,"error"],[860,8,738,163],[860,9,738,164],[861,6,739,8],[861,7,739,9],[861,8,740,8],[861,15,740,15,"error"],[861,20,740,20],[861,22,740,22],[862,8,741,12],[862,12,741,16],[862,16,741,16,"isAuthError"],[862,26,741,27],[862,27,741,27,"isAuthError"],[862,38,741,27],[862,40,741,28,"error"],[862,45,741,33],[862,46,741,34],[862,48,741,36],[863,10,742,16],[863,17,742,23],[864,12,742,25,"data"],[864,16,742,29],[864,18,742,31],[865,14,742,33,"user"],[865,18,742,37],[865,20,742,39],[865,24,742,43],[866,14,742,45,"session"],[866,21,742,52],[866,23,742,54],[866,27,742,58],[867,14,742,60,"redirectType"],[867,26,742,72],[867,28,742,74],[868,12,742,79],[868,13,742,80],[869,12,742,82,"error"],[870,10,742,88],[870,11,742,89],[871,8,743,12],[872,8,744,12],[872,14,744,18,"error"],[872,19,744,23],[873,6,745,8],[874,4,746,4],[875,4,747,4],[876,0,748,0],[877,0,749,0],[878,0,750,0],[879,4,751,4],[879,10,751,10,"signInWithIdToken"],[879,27,751,27,"signInWithIdToken"],[879,28,751,28,"credentials"],[879,39,751,39],[879,41,751,41],[880,6,752,8],[880,10,752,12],[881,8,753,12],[881,14,753,18],[882,10,753,20,"options"],[882,17,753,27],[883,10,753,29,"provider"],[883,18,753,37],[884,10,753,39,"token"],[884,15,753,44],[885,10,753,46,"access_token"],[885,22,753,58],[886,10,753,60,"nonce"],[887,8,753,66],[887,9,753,67],[887,12,753,70,"credentials"],[887,23,753,81],[888,8,754,12],[888,14,754,18,"res"],[888,17,754,21],[888,20,754,24],[888,26,754,30],[888,30,754,30,"_request"],[888,39,754,38],[888,40,754,38,"_request"],[888,48,754,38],[888,50,754,39],[888,54,754,43],[888,55,754,44,"fetch"],[888,60,754,49],[888,62,754,51],[888,68,754,57],[888,70,754,59],[888,73,754,62],[888,77,754,66],[888,78,754,67,"url"],[888,81,754,70],[888,109,754,98],[888,111,754,100],[889,10,755,16,"headers"],[889,17,755,23],[889,19,755,25],[889,23,755,29],[889,24,755,30,"headers"],[889,31,755,37],[890,10,756,16,"body"],[890,14,756,20],[890,16,756,22],[891,12,757,20,"provider"],[891,20,757,28],[892,12,758,20,"id_token"],[892,20,758,28],[892,22,758,30,"token"],[892,27,758,35],[893,12,759,20,"access_token"],[893,24,759,32],[894,12,760,20,"nonce"],[894,17,760,25],[895,12,761,20,"gotrue_meta_security"],[895,32,761,40],[895,34,761,42],[896,14,761,44,"captcha_token"],[896,27,761,57],[896,29,761,59,"options"],[896,36,761,66],[896,41,761,71],[896,45,761,75],[896,49,761,79,"options"],[896,56,761,86],[896,61,761,91],[896,66,761,96],[896,67,761,97],[896,70,761,100],[896,75,761,105],[896,76,761,106],[896,79,761,109,"options"],[896,86,761,116],[896,87,761,117,"captchaToken"],[897,12,761,130],[898,10,762,16],[898,11,762,17],[899,10,763,16,"xform"],[899,15,763,21],[899,17,763,23,"_sessionResponse"],[899,26,763,39],[899,27,763,39,"_sessionResponse"],[900,8,764,12],[900,9,764,13],[900,10,764,14],[901,8,765,12],[901,14,765,18],[902,10,765,20,"data"],[902,14,765,24],[903,10,765,26,"error"],[904,8,765,32],[904,9,765,33],[904,12,765,36,"res"],[904,15,765,39],[905,8,766,12],[905,12,766,16,"error"],[905,17,766,21],[905,19,766,23],[906,10,767,16],[906,17,767,23],[907,12,767,25,"data"],[907,16,767,29],[907,18,767,31],[908,14,767,33,"user"],[908,18,767,37],[908,20,767,39],[908,24,767,43],[909,14,767,45,"session"],[909,21,767,52],[909,23,767,54],[910,12,767,59],[910,13,767,60],[911,12,767,62,"error"],[912,10,767,68],[912,11,767,69],[913,8,768,12],[913,9,768,13],[913,15,769,17],[913,19,769,21],[913,20,769,22,"data"],[913,24,769,26],[913,28,769,30],[913,29,769,31,"data"],[913,33,769,35],[913,34,769,36,"session"],[913,41,769,43],[913,45,769,47],[913,46,769,48,"data"],[913,50,769,52],[913,51,769,53,"user"],[913,55,769,57],[913,57,769,59],[914,10,770,16],[914,17,770,23],[915,12,771,20,"data"],[915,16,771,24],[915,18,771,26],[916,14,771,28,"user"],[916,18,771,32],[916,20,771,34],[916,24,771,38],[917,14,771,40,"session"],[917,21,771,47],[917,23,771,49],[918,12,771,54],[918,13,771,55],[919,12,772,20,"error"],[919,17,772,25],[919,19,772,27],[919,23,772,31,"AuthInvalidTokenResponseError"],[919,33,772,60],[919,34,772,60,"AuthInvalidTokenResponseError"],[919,63,772,60],[919,64,772,61],[920,10,773,16],[920,11,773,17],[921,8,774,12],[922,8,775,12],[922,12,775,16,"data"],[922,16,775,20],[922,17,775,21,"session"],[922,24,775,28],[922,26,775,30],[923,10,776,16],[923,16,776,22],[923,20,776,26],[923,21,776,27,"_saveSession"],[923,33,776,39],[923,34,776,40,"data"],[923,38,776,44],[923,39,776,45,"session"],[923,46,776,52],[923,47,776,53],[924,10,777,16],[924,16,777,22],[924,20,777,26],[924,21,777,27,"_notifyAllSubscribers"],[924,42,777,48],[924,43,777,49],[924,54,777,60],[924,56,777,62,"data"],[924,60,777,66],[924,61,777,67,"session"],[924,68,777,74],[924,69,777,75],[925,8,778,12],[926,8,779,12],[926,15,779,19],[927,10,779,21,"data"],[927,14,779,25],[928,10,779,27,"error"],[929,8,779,33],[929,9,779,34],[930,6,780,8],[930,7,780,9],[930,8,781,8],[930,15,781,15,"error"],[930,20,781,20],[930,22,781,22],[931,8,782,12],[931,12,782,16],[931,16,782,16,"isAuthError"],[931,26,782,27],[931,27,782,27,"isAuthError"],[931,38,782,27],[931,40,782,28,"error"],[931,45,782,33],[931,46,782,34],[931,48,782,36],[932,10,783,16],[932,17,783,23],[933,12,783,25,"data"],[933,16,783,29],[933,18,783,31],[934,14,783,33,"user"],[934,18,783,37],[934,20,783,39],[934,24,783,43],[935,14,783,45,"session"],[935,21,783,52],[935,23,783,54],[936,12,783,59],[936,13,783,60],[937,12,783,62,"error"],[938,10,783,68],[938,11,783,69],[939,8,784,12],[940,8,785,12],[940,14,785,18,"error"],[940,19,785,23],[941,6,786,8],[942,4,787,4],[943,4,788,4],[944,0,789,0],[945,0,790,0],[946,0,791,0],[947,0,792,0],[948,0,793,0],[949,0,794,0],[950,0,795,0],[951,0,796,0],[952,0,797,0],[953,0,798,0],[954,0,799,0],[955,0,800,0],[956,0,801,0],[957,0,802,0],[958,0,803,0],[959,0,804,0],[960,4,805,4],[960,10,805,10,"signInWithOtp"],[960,23,805,23,"signInWithOtp"],[960,24,805,24,"credentials"],[960,35,805,35],[960,37,805,37],[961,6,806,8],[961,10,806,12,"_a"],[961,12,806,14],[961,14,806,16,"_b"],[961,16,806,18],[961,18,806,20,"_c"],[961,20,806,22],[961,22,806,24,"_d"],[961,24,806,26],[961,26,806,28,"_e"],[961,28,806,30],[962,6,807,8],[962,10,807,12],[963,8,808,12],[963,12,808,16],[963,19,808,23],[963,23,808,27,"credentials"],[963,34,808,38],[963,36,808,40],[964,10,809,16],[964,16,809,22],[965,12,809,24,"email"],[965,17,809,29],[966,12,809,31,"options"],[967,10,809,39],[967,11,809,40],[967,14,809,43,"credentials"],[967,25,809,54],[968,10,810,16],[968,14,810,20,"codeChallenge"],[968,27,810,33],[968,30,810,36],[968,34,810,40],[969,10,811,16],[969,14,811,20,"codeChallengeMethod"],[969,33,811,39],[969,36,811,42],[969,40,811,46],[970,10,812,16],[970,14,812,20],[970,18,812,24],[970,19,812,25,"flowType"],[970,27,812,33],[970,32,812,38],[970,38,812,44],[970,40,812,46],[971,12,813,20],[972,12,814,20],[972,13,814,21,"codeChallenge"],[972,26,814,34],[972,28,814,36,"codeChallengeMethod"],[972,47,814,55],[972,48,814,56],[972,51,814,59],[972,57,814,65],[972,61,814,65,"getCodeChallengeAndMethod"],[972,72,814,90],[972,73,814,90,"getCodeChallengeAndMethod"],[972,98,814,90],[972,100,814,91],[972,104,814,95],[972,105,814,96,"storage"],[972,112,814,103],[972,114,814,105],[972,118,814,109],[972,119,814,110,"storageKey"],[972,129,814,120],[972,130,814,121],[973,10,815,16],[974,10,816,16],[974,16,816,22],[975,12,816,24,"error"],[976,10,816,30],[976,11,816,31],[976,14,816,34],[976,20,816,40],[976,24,816,40,"_request"],[976,33,816,48],[976,34,816,48,"_request"],[976,42,816,48],[976,44,816,49],[976,48,816,53],[976,49,816,54,"fetch"],[976,54,816,59],[976,56,816,61],[976,62,816,67],[976,64,816,69],[976,67,816,72],[976,71,816,76],[976,72,816,77,"url"],[976,75,816,80],[976,81,816,86],[976,83,816,88],[977,12,817,20,"headers"],[977,19,817,27],[977,21,817,29],[977,25,817,33],[977,26,817,34,"headers"],[977,33,817,41],[978,12,818,20,"body"],[978,16,818,24],[978,18,818,26],[979,14,819,24,"email"],[979,19,819,29],[980,14,820,24,"data"],[980,18,820,28],[980,20,820,30],[980,21,820,31,"_a"],[980,23,820,33],[980,26,820,36,"options"],[980,33,820,43],[980,38,820,48],[980,42,820,52],[980,46,820,56,"options"],[980,53,820,63],[980,58,820,68],[980,63,820,73],[980,64,820,74],[980,67,820,77],[980,72,820,82],[980,73,820,83],[980,76,820,86,"options"],[980,83,820,93],[980,84,820,94,"data"],[980,88,820,98],[980,94,820,104],[980,98,820,108],[980,102,820,112,"_a"],[980,104,820,114],[980,109,820,119],[980,114,820,124],[980,115,820,125],[980,118,820,128,"_a"],[980,120,820,130],[980,123,820,133],[980,124,820,134],[980,125,820,135],[981,14,821,24,"create_user"],[981,25,821,35],[981,27,821,37],[981,28,821,38,"_b"],[981,30,821,40],[981,33,821,43,"options"],[981,40,821,50],[981,45,821,55],[981,49,821,59],[981,53,821,63,"options"],[981,60,821,70],[981,65,821,75],[981,70,821,80],[981,71,821,81],[981,74,821,84],[981,79,821,89],[981,80,821,90],[981,83,821,93,"options"],[981,90,821,100],[981,91,821,101,"shouldCreateUser"],[981,107,821,117],[981,113,821,123],[981,117,821,127],[981,121,821,131,"_b"],[981,123,821,133],[981,128,821,138],[981,133,821,143],[981,134,821,144],[981,137,821,147,"_b"],[981,139,821,149],[981,142,821,152],[981,146,821,156],[982,14,822,24,"gotrue_meta_security"],[982,34,822,44],[982,36,822,46],[983,16,822,48,"captcha_token"],[983,29,822,61],[983,31,822,63,"options"],[983,38,822,70],[983,43,822,75],[983,47,822,79],[983,51,822,83,"options"],[983,58,822,90],[983,63,822,95],[983,68,822,100],[983,69,822,101],[983,72,822,104],[983,77,822,109],[983,78,822,110],[983,81,822,113,"options"],[983,88,822,120],[983,89,822,121,"captchaToken"],[984,14,822,134],[984,15,822,135],[985,14,823,24,"code_challenge"],[985,28,823,38],[985,30,823,40,"codeChallenge"],[985,43,823,53],[986,14,824,24,"code_challenge_method"],[986,35,824,45],[986,37,824,47,"codeChallengeMethod"],[987,12,825,20],[987,13,825,21],[988,12,826,20,"redirectTo"],[988,22,826,30],[988,24,826,32,"options"],[988,31,826,39],[988,36,826,44],[988,40,826,48],[988,44,826,52,"options"],[988,51,826,59],[988,56,826,64],[988,61,826,69],[988,62,826,70],[988,65,826,73],[988,70,826,78],[988,71,826,79],[988,74,826,82,"options"],[988,81,826,89],[988,82,826,90,"emailRedirectTo"],[989,10,827,16],[989,11,827,17],[989,12,827,18],[990,10,828,16],[990,17,828,23],[991,12,828,25,"data"],[991,16,828,29],[991,18,828,31],[992,14,828,33,"user"],[992,18,828,37],[992,20,828,39],[992,24,828,43],[993,14,828,45,"session"],[993,21,828,52],[993,23,828,54],[994,12,828,59],[994,13,828,60],[995,12,828,62,"error"],[996,10,828,68],[996,11,828,69],[997,8,829,12],[998,8,830,12],[998,12,830,16],[998,19,830,23],[998,23,830,27,"credentials"],[998,34,830,38],[998,36,830,40],[999,10,831,16],[999,16,831,22],[1000,12,831,24,"phone"],[1000,17,831,29],[1001,12,831,31,"options"],[1002,10,831,39],[1002,11,831,40],[1002,14,831,43,"credentials"],[1002,25,831,54],[1003,10,832,16],[1003,16,832,22],[1004,12,832,24,"data"],[1004,16,832,28],[1005,12,832,30,"error"],[1006,10,832,36],[1006,11,832,37],[1006,14,832,40],[1006,20,832,46],[1006,24,832,46,"_request"],[1006,33,832,54],[1006,34,832,54,"_request"],[1006,42,832,54],[1006,44,832,55],[1006,48,832,59],[1006,49,832,60,"fetch"],[1006,54,832,65],[1006,56,832,67],[1006,62,832,73],[1006,64,832,75],[1006,67,832,78],[1006,71,832,82],[1006,72,832,83,"url"],[1006,75,832,86],[1006,81,832,92],[1006,83,832,94],[1007,12,833,20,"headers"],[1007,19,833,27],[1007,21,833,29],[1007,25,833,33],[1007,26,833,34,"headers"],[1007,33,833,41],[1008,12,834,20,"body"],[1008,16,834,24],[1008,18,834,26],[1009,14,835,24,"phone"],[1009,19,835,29],[1010,14,836,24,"data"],[1010,18,836,28],[1010,20,836,30],[1010,21,836,31,"_c"],[1010,23,836,33],[1010,26,836,36,"options"],[1010,33,836,43],[1010,38,836,48],[1010,42,836,52],[1010,46,836,56,"options"],[1010,53,836,63],[1010,58,836,68],[1010,63,836,73],[1010,64,836,74],[1010,67,836,77],[1010,72,836,82],[1010,73,836,83],[1010,76,836,86,"options"],[1010,83,836,93],[1010,84,836,94,"data"],[1010,88,836,98],[1010,94,836,104],[1010,98,836,108],[1010,102,836,112,"_c"],[1010,104,836,114],[1010,109,836,119],[1010,114,836,124],[1010,115,836,125],[1010,118,836,128,"_c"],[1010,120,836,130],[1010,123,836,133],[1010,124,836,134],[1010,125,836,135],[1011,14,837,24,"create_user"],[1011,25,837,35],[1011,27,837,37],[1011,28,837,38,"_d"],[1011,30,837,40],[1011,33,837,43,"options"],[1011,40,837,50],[1011,45,837,55],[1011,49,837,59],[1011,53,837,63,"options"],[1011,60,837,70],[1011,65,837,75],[1011,70,837,80],[1011,71,837,81],[1011,74,837,84],[1011,79,837,89],[1011,80,837,90],[1011,83,837,93,"options"],[1011,90,837,100],[1011,91,837,101,"shouldCreateUser"],[1011,107,837,117],[1011,113,837,123],[1011,117,837,127],[1011,121,837,131,"_d"],[1011,123,837,133],[1011,128,837,138],[1011,133,837,143],[1011,134,837,144],[1011,137,837,147,"_d"],[1011,139,837,149],[1011,142,837,152],[1011,146,837,156],[1012,14,838,24,"gotrue_meta_security"],[1012,34,838,44],[1012,36,838,46],[1013,16,838,48,"captcha_token"],[1013,29,838,61],[1013,31,838,63,"options"],[1013,38,838,70],[1013,43,838,75],[1013,47,838,79],[1013,51,838,83,"options"],[1013,58,838,90],[1013,63,838,95],[1013,68,838,100],[1013,69,838,101],[1013,72,838,104],[1013,77,838,109],[1013,78,838,110],[1013,81,838,113,"options"],[1013,88,838,120],[1013,89,838,121,"captchaToken"],[1014,14,838,134],[1014,15,838,135],[1015,14,839,24,"channel"],[1015,21,839,31],[1015,23,839,33],[1015,24,839,34,"_e"],[1015,26,839,36],[1015,29,839,39,"options"],[1015,36,839,46],[1015,41,839,51],[1015,45,839,55],[1015,49,839,59,"options"],[1015,56,839,66],[1015,61,839,71],[1015,66,839,76],[1015,67,839,77],[1015,70,839,80],[1015,75,839,85],[1015,76,839,86],[1015,79,839,89,"options"],[1015,86,839,96],[1015,87,839,97,"channel"],[1015,94,839,104],[1015,100,839,110],[1015,104,839,114],[1015,108,839,118,"_e"],[1015,110,839,120],[1015,115,839,125],[1015,120,839,130],[1015,121,839,131],[1015,124,839,134,"_e"],[1015,126,839,136],[1015,129,839,139],[1016,12,840,20],[1017,10,841,16],[1017,11,841,17],[1017,12,841,18],[1018,10,842,16],[1018,17,842,23],[1019,12,842,25,"data"],[1019,16,842,29],[1019,18,842,31],[1020,14,842,33,"user"],[1020,18,842,37],[1020,20,842,39],[1020,24,842,43],[1021,14,842,45,"session"],[1021,21,842,52],[1021,23,842,54],[1021,27,842,58],[1022,14,842,60,"messageId"],[1022,23,842,69],[1022,25,842,71,"data"],[1022,29,842,75],[1022,34,842,80],[1022,38,842,84],[1022,42,842,88,"data"],[1022,46,842,92],[1022,51,842,97],[1022,56,842,102],[1022,57,842,103],[1022,60,842,106],[1022,65,842,111],[1022,66,842,112],[1022,69,842,115,"data"],[1022,73,842,119],[1022,74,842,120,"message_id"],[1023,12,842,131],[1023,13,842,132],[1024,12,842,134,"error"],[1025,10,842,140],[1025,11,842,141],[1026,8,843,12],[1027,8,844,12],[1027,14,844,18],[1027,18,844,22,"AuthInvalidCredentialsError"],[1027,28,844,49],[1027,29,844,49,"AuthInvalidCredentialsError"],[1027,56,844,49],[1027,57,844,50],[1027,108,844,101],[1027,109,844,102],[1028,6,845,8],[1028,7,845,9],[1028,8,846,8],[1028,15,846,15,"error"],[1028,20,846,20],[1028,22,846,22],[1029,8,847,12],[1029,12,847,16],[1029,16,847,16,"isAuthError"],[1029,26,847,27],[1029,27,847,27,"isAuthError"],[1029,38,847,27],[1029,40,847,28,"error"],[1029,45,847,33],[1029,46,847,34],[1029,48,847,36],[1030,10,848,16],[1030,17,848,23],[1031,12,848,25,"data"],[1031,16,848,29],[1031,18,848,31],[1032,14,848,33,"user"],[1032,18,848,37],[1032,20,848,39],[1032,24,848,43],[1033,14,848,45,"session"],[1033,21,848,52],[1033,23,848,54],[1034,12,848,59],[1034,13,848,60],[1035,12,848,62,"error"],[1036,10,848,68],[1036,11,848,69],[1037,8,849,12],[1038,8,850,12],[1038,14,850,18,"error"],[1038,19,850,23],[1039,6,851,8],[1040,4,852,4],[1041,4,853,4],[1042,0,854,0],[1043,0,855,0],[1044,4,856,4],[1044,10,856,10,"verifyOtp"],[1044,19,856,19,"verifyOtp"],[1044,20,856,20,"params"],[1044,26,856,26],[1044,28,856,28],[1045,6,857,8],[1045,10,857,12,"_a"],[1045,12,857,14],[1045,14,857,16,"_b"],[1045,16,857,18],[1046,6,858,8],[1046,10,858,12],[1047,8,859,12],[1047,12,859,16,"redirectTo"],[1047,22,859,26],[1047,25,859,29,"undefined"],[1047,34,859,38],[1048,8,860,12],[1048,12,860,16,"captchaToken"],[1048,24,860,28],[1048,27,860,31,"undefined"],[1048,36,860,40],[1049,8,861,12],[1049,12,861,16],[1049,21,861,25],[1049,25,861,29,"params"],[1049,31,861,35],[1049,33,861,37],[1050,10,862,16,"redirectTo"],[1050,20,862,26],[1050,23,862,29],[1050,24,862,30,"_a"],[1050,26,862,32],[1050,29,862,35,"params"],[1050,35,862,41],[1050,36,862,42,"options"],[1050,43,862,49],[1050,49,862,55],[1050,53,862,59],[1050,57,862,63,"_a"],[1050,59,862,65],[1050,64,862,70],[1050,69,862,75],[1050,70,862,76],[1050,73,862,79],[1050,78,862,84],[1050,79,862,85],[1050,82,862,88,"_a"],[1050,84,862,90],[1050,85,862,91,"redirectTo"],[1050,95,862,101],[1051,10,863,16,"captchaToken"],[1051,22,863,28],[1051,25,863,31],[1051,26,863,32,"_b"],[1051,28,863,34],[1051,31,863,37,"params"],[1051,37,863,43],[1051,38,863,44,"options"],[1051,45,863,51],[1051,51,863,57],[1051,55,863,61],[1051,59,863,65,"_b"],[1051,61,863,67],[1051,66,863,72],[1051,71,863,77],[1051,72,863,78],[1051,75,863,81],[1051,80,863,86],[1051,81,863,87],[1051,84,863,90,"_b"],[1051,86,863,92],[1051,87,863,93,"captchaToken"],[1051,99,863,105],[1052,8,864,12],[1053,8,865,12],[1053,14,865,18],[1054,10,865,20,"data"],[1054,14,865,24],[1055,10,865,26,"error"],[1056,8,865,32],[1056,9,865,33],[1056,12,865,36],[1056,18,865,42],[1056,22,865,42,"_request"],[1056,31,865,50],[1056,32,865,50,"_request"],[1056,40,865,50],[1056,42,865,51],[1056,46,865,55],[1056,47,865,56,"fetch"],[1056,52,865,61],[1056,54,865,63],[1056,60,865,69],[1056,62,865,71],[1056,65,865,74],[1056,69,865,78],[1056,70,865,79,"url"],[1056,73,865,82],[1056,82,865,91],[1056,84,865,93],[1057,10,866,16,"headers"],[1057,17,866,23],[1057,19,866,25],[1057,23,866,29],[1057,24,866,30,"headers"],[1057,31,866,37],[1058,10,867,16,"body"],[1058,14,867,20],[1058,16,867,22,"Object"],[1058,22,867,28],[1058,23,867,29,"assign"],[1058,29,867,35],[1058,30,867,36,"Object"],[1058,36,867,42],[1058,37,867,43,"assign"],[1058,43,867,49],[1058,44,867,50],[1058,45,867,51],[1058,46,867,52],[1058,48,867,54,"params"],[1058,54,867,60],[1058,55,867,61],[1058,57,867,63],[1059,12,867,65,"gotrue_meta_security"],[1059,32,867,85],[1059,34,867,87],[1060,14,867,89,"captcha_token"],[1060,27,867,102],[1060,29,867,104,"captchaToken"],[1061,12,867,117],[1062,10,867,119],[1062,11,867,120],[1062,12,867,121],[1063,10,868,16,"redirectTo"],[1063,20,868,26],[1064,10,869,16,"xform"],[1064,15,869,21],[1064,17,869,23,"_sessionResponse"],[1064,26,869,39],[1064,27,869,39,"_sessionResponse"],[1065,8,870,12],[1065,9,870,13],[1065,10,870,14],[1066,8,871,12],[1066,12,871,16,"error"],[1066,17,871,21],[1066,19,871,23],[1067,10,872,16],[1067,16,872,22,"error"],[1067,21,872,27],[1068,8,873,12],[1069,8,874,12],[1069,12,874,16],[1069,13,874,17,"data"],[1069,17,874,21],[1069,19,874,23],[1070,10,875,16],[1070,16,875,22],[1070,20,875,26,"Error"],[1070,25,875,31],[1070,26,875,32],[1070,68,875,74],[1070,69,875,75],[1071,8,876,12],[1072,8,877,12],[1072,14,877,18,"session"],[1072,21,877,25],[1072,24,877,28,"data"],[1072,28,877,32],[1072,29,877,33,"session"],[1072,36,877,40],[1073,8,878,12],[1073,14,878,18,"user"],[1073,18,878,22],[1073,21,878,25,"data"],[1073,25,878,29],[1073,26,878,30,"user"],[1073,30,878,34],[1074,8,879,12],[1074,12,879,16,"session"],[1074,19,879,23],[1074,24,879,28],[1074,28,879,32],[1074,32,879,36,"session"],[1074,39,879,43],[1074,44,879,48],[1074,49,879,53],[1074,50,879,54],[1074,53,879,57],[1074,58,879,62],[1074,59,879,63],[1074,62,879,66,"session"],[1074,69,879,73],[1074,70,879,74,"access_token"],[1074,82,879,86],[1074,84,879,88],[1075,10,880,16],[1075,16,880,22],[1075,20,880,26],[1075,21,880,27,"_saveSession"],[1075,33,880,39],[1075,34,880,40,"session"],[1075,41,880,47],[1075,42,880,48],[1076,10,881,16],[1076,16,881,22],[1076,20,881,26],[1076,21,881,27,"_notifyAllSubscribers"],[1076,42,881,48],[1076,43,881,49,"params"],[1076,49,881,55],[1076,50,881,56,"type"],[1076,54,881,60],[1076,58,881,64],[1076,68,881,74],[1076,71,881,77],[1076,90,881,96],[1076,93,881,99],[1076,104,881,110],[1076,106,881,112,"session"],[1076,113,881,119],[1076,114,881,120],[1077,8,882,12],[1078,8,883,12],[1078,15,883,19],[1079,10,883,21,"data"],[1079,14,883,25],[1079,16,883,27],[1080,12,883,29,"user"],[1080,16,883,33],[1081,12,883,35,"session"],[1082,10,883,43],[1082,11,883,44],[1083,10,883,46,"error"],[1083,15,883,51],[1083,17,883,53],[1084,8,883,58],[1084,9,883,59],[1085,6,884,8],[1085,7,884,9],[1085,8,885,8],[1085,15,885,15,"error"],[1085,20,885,20],[1085,22,885,22],[1086,8,886,12],[1086,12,886,16],[1086,16,886,16,"isAuthError"],[1086,26,886,27],[1086,27,886,27,"isAuthError"],[1086,38,886,27],[1086,40,886,28,"error"],[1086,45,886,33],[1086,46,886,34],[1086,48,886,36],[1087,10,887,16],[1087,17,887,23],[1088,12,887,25,"data"],[1088,16,887,29],[1088,18,887,31],[1089,14,887,33,"user"],[1089,18,887,37],[1089,20,887,39],[1089,24,887,43],[1090,14,887,45,"session"],[1090,21,887,52],[1090,23,887,54],[1091,12,887,59],[1091,13,887,60],[1092,12,887,62,"error"],[1093,10,887,68],[1093,11,887,69],[1094,8,888,12],[1095,8,889,12],[1095,14,889,18,"error"],[1095,19,889,23],[1096,6,890,8],[1097,4,891,4],[1098,4,892,4],[1099,0,893,0],[1100,0,894,0],[1101,0,895,0],[1102,0,896,0],[1103,0,897,0],[1104,0,898,0],[1105,0,899,0],[1106,0,900,0],[1107,0,901,0],[1108,0,902,0],[1109,0,903,0],[1110,0,904,0],[1111,0,905,0],[1112,4,906,4],[1112,10,906,10,"signInWithSSO"],[1112,23,906,23,"signInWithSSO"],[1112,24,906,24,"params"],[1112,30,906,30],[1112,32,906,32],[1113,6,907,8],[1113,10,907,12,"_a"],[1113,12,907,14],[1113,14,907,16,"_b"],[1113,16,907,18],[1113,18,907,20,"_c"],[1113,20,907,22],[1114,6,908,8],[1114,10,908,12],[1115,8,909,12],[1115,12,909,16,"codeChallenge"],[1115,25,909,29],[1115,28,909,32],[1115,32,909,36],[1116,8,910,12],[1116,12,910,16,"codeChallengeMethod"],[1116,31,910,35],[1116,34,910,38],[1116,38,910,42],[1117,8,911,12],[1117,12,911,16],[1117,16,911,20],[1117,17,911,21,"flowType"],[1117,25,911,29],[1117,30,911,34],[1117,36,911,40],[1117,38,911,42],[1118,10,912,16],[1119,10,913,16],[1119,11,913,17,"codeChallenge"],[1119,24,913,30],[1119,26,913,32,"codeChallengeMethod"],[1119,45,913,51],[1119,46,913,52],[1119,49,913,55],[1119,55,913,61],[1119,59,913,61,"getCodeChallengeAndMethod"],[1119,70,913,86],[1119,71,913,86,"getCodeChallengeAndMethod"],[1119,96,913,86],[1119,98,913,87],[1119,102,913,91],[1119,103,913,92,"storage"],[1119,110,913,99],[1119,112,913,101],[1119,116,913,105],[1119,117,913,106,"storageKey"],[1119,127,913,116],[1119,128,913,117],[1120,8,914,12],[1121,8,915,12],[1121,15,915,19],[1121,21,915,25],[1121,25,915,25,"_request"],[1121,34,915,33],[1121,35,915,33,"_request"],[1121,43,915,33],[1121,45,915,34],[1121,49,915,38],[1121,50,915,39,"fetch"],[1121,55,915,44],[1121,57,915,46],[1121,63,915,52],[1121,65,915,54],[1121,68,915,57],[1121,72,915,61],[1121,73,915,62,"url"],[1121,76,915,65],[1121,82,915,71],[1121,84,915,73],[1122,10,916,16,"body"],[1122,14,916,20],[1122,16,916,22,"Object"],[1122,22,916,28],[1122,23,916,29,"assign"],[1122,29,916,35],[1122,30,916,36,"Object"],[1122,36,916,42],[1122,37,916,43,"assign"],[1122,43,916,49],[1122,44,916,50,"Object"],[1122,50,916,56],[1122,51,916,57,"assign"],[1122,57,916,63],[1122,58,916,64,"Object"],[1122,64,916,70],[1122,65,916,71,"assign"],[1122,71,916,77],[1122,72,916,78,"Object"],[1122,78,916,84],[1122,79,916,85,"assign"],[1122,85,916,91],[1122,86,916,92],[1122,87,916,93],[1122,88,916,94],[1122,90,916,97],[1122,102,916,109],[1122,106,916,113,"params"],[1122,112,916,119],[1122,115,916,122],[1123,12,916,124,"provider_id"],[1123,23,916,135],[1123,25,916,137,"params"],[1123,31,916,143],[1123,32,916,144,"providerId"],[1124,10,916,155],[1124,11,916,156],[1124,14,916,159],[1124,18,916,164],[1124,19,916,165],[1124,21,916,168],[1124,29,916,176],[1124,33,916,180,"params"],[1124,39,916,186],[1124,42,916,189],[1125,12,916,191,"domain"],[1125,18,916,197],[1125,20,916,199,"params"],[1125,26,916,205],[1125,27,916,206,"domain"],[1126,10,916,213],[1126,11,916,214],[1126,14,916,217],[1126,18,916,222],[1126,19,916,223],[1126,21,916,225],[1127,12,916,227,"redirect_to"],[1127,23,916,238],[1127,25,916,240],[1127,26,916,241,"_b"],[1127,28,916,243],[1127,31,916,246],[1127,32,916,247,"_a"],[1127,34,916,249],[1127,37,916,252,"params"],[1127,43,916,258],[1127,44,916,259,"options"],[1127,51,916,266],[1127,57,916,272],[1127,61,916,276],[1127,65,916,280,"_a"],[1127,67,916,282],[1127,72,916,287],[1127,77,916,292],[1127,78,916,293],[1127,81,916,296],[1127,86,916,301],[1127,87,916,302],[1127,90,916,305,"_a"],[1127,92,916,307],[1127,93,916,308,"redirectTo"],[1127,103,916,318],[1127,109,916,324],[1127,113,916,328],[1127,117,916,332,"_b"],[1127,119,916,334],[1127,124,916,339],[1127,129,916,344],[1127,130,916,345],[1127,133,916,348,"_b"],[1127,135,916,350],[1127,138,916,353,"undefined"],[1128,10,916,363],[1128,11,916,364],[1128,12,916,365],[1128,14,916,368],[1128,15,916,369],[1128,16,916,370,"_c"],[1128,18,916,372],[1128,21,916,375,"params"],[1128,27,916,381],[1128,32,916,386],[1128,36,916,390],[1128,40,916,394,"params"],[1128,46,916,400],[1128,51,916,405],[1128,56,916,410],[1128,57,916,411],[1128,60,916,414],[1128,65,916,419],[1128,66,916,420],[1128,69,916,423,"params"],[1128,75,916,429],[1128,76,916,430,"options"],[1128,83,916,437],[1128,89,916,443],[1128,93,916,447],[1128,97,916,451,"_c"],[1128,99,916,453],[1128,104,916,458],[1128,109,916,463],[1128,110,916,464],[1128,113,916,467],[1128,118,916,472],[1128,119,916,473],[1128,122,916,476,"_c"],[1128,124,916,478],[1128,125,916,479,"captchaToken"],[1128,137,916,491],[1128,141,917,22],[1129,12,917,24,"gotrue_meta_security"],[1129,32,917,44],[1129,34,917,46],[1130,14,917,48,"captcha_token"],[1130,27,917,61],[1130,29,917,63,"params"],[1130,35,917,69],[1130,36,917,70,"options"],[1130,43,917,77],[1130,44,917,78,"captchaToken"],[1131,12,917,91],[1132,10,917,93],[1132,11,917,94],[1132,14,918,22],[1132,18,918,27],[1132,19,918,28],[1132,21,918,30],[1133,12,918,32,"skip_http_redirect"],[1133,30,918,50],[1133,32,918,52],[1133,36,918,56],[1134,12,918,58,"code_challenge"],[1134,26,918,72],[1134,28,918,74,"codeChallenge"],[1134,41,918,87],[1135,12,918,89,"code_challenge_method"],[1135,33,918,110],[1135,35,918,112,"codeChallengeMethod"],[1136,10,918,132],[1136,11,918,133],[1136,12,918,134],[1137,10,919,16,"headers"],[1137,17,919,23],[1137,19,919,25],[1137,23,919,29],[1137,24,919,30,"headers"],[1137,31,919,37],[1138,10,920,16,"xform"],[1138,15,920,21],[1138,17,920,23,"_ssoResponse"],[1138,26,920,35],[1138,27,920,35,"_ssoResponse"],[1139,8,921,12],[1139,9,921,13],[1139,10,921,14],[1140,6,922,8],[1140,7,922,9],[1140,8,923,8],[1140,15,923,15,"error"],[1140,20,923,20],[1140,22,923,22],[1141,8,924,12],[1141,12,924,16],[1141,16,924,16,"isAuthError"],[1141,26,924,27],[1141,27,924,27,"isAuthError"],[1141,38,924,27],[1141,40,924,28,"error"],[1141,45,924,33],[1141,46,924,34],[1141,48,924,36],[1142,10,925,16],[1142,17,925,23],[1143,12,925,25,"data"],[1143,16,925,29],[1143,18,925,31],[1143,22,925,35],[1144,12,925,37,"error"],[1145,10,925,43],[1145,11,925,44],[1146,8,926,12],[1147,8,927,12],[1147,14,927,18,"error"],[1147,19,927,23],[1148,6,928,8],[1149,4,929,4],[1150,4,930,4],[1151,0,931,0],[1152,0,932,0],[1153,0,933,0],[1154,4,934,4],[1154,10,934,10,"reauthenticate"],[1154,24,934,24,"reauthenticate"],[1154,25,934,24],[1154,27,934,27],[1155,6,935,8],[1155,12,935,14],[1155,16,935,18],[1155,17,935,19,"initializePromise"],[1155,34,935,36],[1156,6,936,8],[1156,13,936,15],[1156,19,936,21],[1156,23,936,25],[1156,24,936,26,"_acquireLock"],[1156,36,936,38],[1156,37,936,39],[1156,38,936,40],[1156,39,936,41],[1156,41,936,43],[1156,53,936,55],[1157,8,937,12],[1157,15,937,19],[1157,21,937,25],[1157,25,937,29],[1157,26,937,30,"_reauthenticate"],[1157,41,937,45],[1157,42,937,46],[1157,43,937,47],[1158,6,938,8],[1158,7,938,9],[1158,8,938,10],[1159,4,939,4],[1160,4,940,4],[1160,10,940,10,"_reauthenticate"],[1160,25,940,25,"_reauthenticate"],[1160,26,940,25],[1160,28,940,28],[1161,6,941,8],[1161,10,941,12],[1162,8,942,12],[1162,15,942,19],[1162,21,942,25],[1162,25,942,29],[1162,26,942,30,"_useSession"],[1162,37,942,41],[1162,38,942,42],[1162,44,942,49,"result"],[1162,50,942,55],[1162,54,942,60],[1163,10,943,16],[1163,16,943,22],[1164,12,943,24,"data"],[1164,16,943,28],[1164,18,943,30],[1165,14,943,32,"session"],[1166,12,943,40],[1166,13,943,41],[1167,12,943,43,"error"],[1167,17,943,48],[1167,19,943,50,"sessionError"],[1168,10,943,64],[1168,11,943,65],[1168,14,943,68,"result"],[1168,20,943,74],[1169,10,944,16],[1169,14,944,20,"sessionError"],[1169,26,944,32],[1169,28,945,20],[1169,34,945,26,"sessionError"],[1169,46,945,38],[1170,10,946,16],[1170,14,946,20],[1170,15,946,21,"session"],[1170,22,946,28],[1170,24,947,20],[1170,30,947,26],[1170,34,947,30,"AuthSessionMissingError"],[1170,44,947,53],[1170,45,947,53,"AuthSessionMissingError"],[1170,68,947,53],[1170,69,947,54],[1170,70,947,55],[1171,10,948,16],[1171,16,948,22],[1172,12,948,24,"error"],[1173,10,948,30],[1173,11,948,31],[1173,14,948,34],[1173,20,948,40],[1173,24,948,40,"_request"],[1173,33,948,48],[1173,34,948,48,"_request"],[1173,42,948,48],[1173,44,948,49],[1173,48,948,53],[1173,49,948,54,"fetch"],[1173,54,948,59],[1173,56,948,61],[1173,61,948,66],[1173,63,948,68],[1173,66,948,71],[1173,70,948,75],[1173,71,948,76,"url"],[1173,74,948,79],[1173,91,948,96],[1173,93,948,98],[1174,12,949,20,"headers"],[1174,19,949,27],[1174,21,949,29],[1174,25,949,33],[1174,26,949,34,"headers"],[1174,33,949,41],[1175,12,950,20,"jwt"],[1175,15,950,23],[1175,17,950,25,"session"],[1175,24,950,32],[1175,25,950,33,"access_token"],[1176,10,951,16],[1176,11,951,17],[1176,12,951,18],[1177,10,952,16],[1177,17,952,23],[1178,12,952,25,"data"],[1178,16,952,29],[1178,18,952,31],[1179,14,952,33,"user"],[1179,18,952,37],[1179,20,952,39],[1179,24,952,43],[1180,14,952,45,"session"],[1180,21,952,52],[1180,23,952,54],[1181,12,952,59],[1181,13,952,60],[1182,12,952,62,"error"],[1183,10,952,68],[1183,11,952,69],[1184,8,953,12],[1184,9,953,13],[1184,10,953,14],[1185,6,954,8],[1185,7,954,9],[1185,8,955,8],[1185,15,955,15,"error"],[1185,20,955,20],[1185,22,955,22],[1186,8,956,12],[1186,12,956,16],[1186,16,956,16,"isAuthError"],[1186,26,956,27],[1186,27,956,27,"isAuthError"],[1186,38,956,27],[1186,40,956,28,"error"],[1186,45,956,33],[1186,46,956,34],[1186,48,956,36],[1187,10,957,16],[1187,17,957,23],[1188,12,957,25,"data"],[1188,16,957,29],[1188,18,957,31],[1189,14,957,33,"user"],[1189,18,957,37],[1189,20,957,39],[1189,24,957,43],[1190,14,957,45,"session"],[1190,21,957,52],[1190,23,957,54],[1191,12,957,59],[1191,13,957,60],[1192,12,957,62,"error"],[1193,10,957,68],[1193,11,957,69],[1194,8,958,12],[1195,8,959,12],[1195,14,959,18,"error"],[1195,19,959,23],[1196,6,960,8],[1197,4,961,4],[1198,4,962,4],[1199,0,963,0],[1200,0,964,0],[1201,4,965,4],[1201,10,965,10,"resend"],[1201,16,965,16,"resend"],[1201,17,965,17,"credentials"],[1201,28,965,28],[1201,30,965,30],[1202,6,966,8],[1202,10,966,12],[1203,8,967,12],[1203,14,967,18,"endpoint"],[1203,22,967,26],[1203,25,967,29],[1203,28,967,32],[1203,32,967,36],[1203,33,967,37,"url"],[1203,36,967,40],[1203,45,967,49],[1204,8,968,12],[1204,12,968,16],[1204,19,968,23],[1204,23,968,27,"credentials"],[1204,34,968,38],[1204,36,968,40],[1205,10,969,16],[1205,16,969,22],[1206,12,969,24,"email"],[1206,17,969,29],[1207,12,969,31,"type"],[1207,16,969,35],[1208,12,969,37,"options"],[1209,10,969,45],[1209,11,969,46],[1209,14,969,49,"credentials"],[1209,25,969,60],[1210,10,970,16],[1210,16,970,22],[1211,12,970,24,"error"],[1212,10,970,30],[1212,11,970,31],[1212,14,970,34],[1212,20,970,40],[1212,24,970,40,"_request"],[1212,33,970,48],[1212,34,970,48,"_request"],[1212,42,970,48],[1212,44,970,49],[1212,48,970,53],[1212,49,970,54,"fetch"],[1212,54,970,59],[1212,56,970,61],[1212,62,970,67],[1212,64,970,69,"endpoint"],[1212,72,970,77],[1212,74,970,79],[1213,12,971,20,"headers"],[1213,19,971,27],[1213,21,971,29],[1213,25,971,33],[1213,26,971,34,"headers"],[1213,33,971,41],[1214,12,972,20,"body"],[1214,16,972,24],[1214,18,972,26],[1215,14,973,24,"email"],[1215,19,973,29],[1216,14,974,24,"type"],[1216,18,974,28],[1217,14,975,24,"gotrue_meta_security"],[1217,34,975,44],[1217,36,975,46],[1218,16,975,48,"captcha_token"],[1218,29,975,61],[1218,31,975,63,"options"],[1218,38,975,70],[1218,43,975,75],[1218,47,975,79],[1218,51,975,83,"options"],[1218,58,975,90],[1218,63,975,95],[1218,68,975,100],[1218,69,975,101],[1218,72,975,104],[1218,77,975,109],[1218,78,975,110],[1218,81,975,113,"options"],[1218,88,975,120],[1218,89,975,121,"captchaToken"],[1219,14,975,134],[1220,12,976,20],[1220,13,976,21],[1221,12,977,20,"redirectTo"],[1221,22,977,30],[1221,24,977,32,"options"],[1221,31,977,39],[1221,36,977,44],[1221,40,977,48],[1221,44,977,52,"options"],[1221,51,977,59],[1221,56,977,64],[1221,61,977,69],[1221,62,977,70],[1221,65,977,73],[1221,70,977,78],[1221,71,977,79],[1221,74,977,82,"options"],[1221,81,977,89],[1221,82,977,90,"emailRedirectTo"],[1222,10,978,16],[1222,11,978,17],[1222,12,978,18],[1223,10,979,16],[1223,17,979,23],[1224,12,979,25,"data"],[1224,16,979,29],[1224,18,979,31],[1225,14,979,33,"user"],[1225,18,979,37],[1225,20,979,39],[1225,24,979,43],[1226,14,979,45,"session"],[1226,21,979,52],[1226,23,979,54],[1227,12,979,59],[1227,13,979,60],[1228,12,979,62,"error"],[1229,10,979,68],[1229,11,979,69],[1230,8,980,12],[1230,9,980,13],[1230,15,981,17],[1230,19,981,21],[1230,26,981,28],[1230,30,981,32,"credentials"],[1230,41,981,43],[1230,43,981,45],[1231,10,982,16],[1231,16,982,22],[1232,12,982,24,"phone"],[1232,17,982,29],[1233,12,982,31,"type"],[1233,16,982,35],[1234,12,982,37,"options"],[1235,10,982,45],[1235,11,982,46],[1235,14,982,49,"credentials"],[1235,25,982,60],[1236,10,983,16],[1236,16,983,22],[1237,12,983,24,"data"],[1237,16,983,28],[1238,12,983,30,"error"],[1239,10,983,36],[1239,11,983,37],[1239,14,983,40],[1239,20,983,46],[1239,24,983,46,"_request"],[1239,33,983,54],[1239,34,983,54,"_request"],[1239,42,983,54],[1239,44,983,55],[1239,48,983,59],[1239,49,983,60,"fetch"],[1239,54,983,65],[1239,56,983,67],[1239,62,983,73],[1239,64,983,75,"endpoint"],[1239,72,983,83],[1239,74,983,85],[1240,12,984,20,"headers"],[1240,19,984,27],[1240,21,984,29],[1240,25,984,33],[1240,26,984,34,"headers"],[1240,33,984,41],[1241,12,985,20,"body"],[1241,16,985,24],[1241,18,985,26],[1242,14,986,24,"phone"],[1242,19,986,29],[1243,14,987,24,"type"],[1243,18,987,28],[1244,14,988,24,"gotrue_meta_security"],[1244,34,988,44],[1244,36,988,46],[1245,16,988,48,"captcha_token"],[1245,29,988,61],[1245,31,988,63,"options"],[1245,38,988,70],[1245,43,988,75],[1245,47,988,79],[1245,51,988,83,"options"],[1245,58,988,90],[1245,63,988,95],[1245,68,988,100],[1245,69,988,101],[1245,72,988,104],[1245,77,988,109],[1245,78,988,110],[1245,81,988,113,"options"],[1245,88,988,120],[1245,89,988,121,"captchaToken"],[1246,14,988,134],[1247,12,989,20],[1248,10,990,16],[1248,11,990,17],[1248,12,990,18],[1249,10,991,16],[1249,17,991,23],[1250,12,991,25,"data"],[1250,16,991,29],[1250,18,991,31],[1251,14,991,33,"user"],[1251,18,991,37],[1251,20,991,39],[1251,24,991,43],[1252,14,991,45,"session"],[1252,21,991,52],[1252,23,991,54],[1252,27,991,58],[1253,14,991,60,"messageId"],[1253,23,991,69],[1253,25,991,71,"data"],[1253,29,991,75],[1253,34,991,80],[1253,38,991,84],[1253,42,991,88,"data"],[1253,46,991,92],[1253,51,991,97],[1253,56,991,102],[1253,57,991,103],[1253,60,991,106],[1253,65,991,111],[1253,66,991,112],[1253,69,991,115,"data"],[1253,73,991,119],[1253,74,991,120,"message_id"],[1254,12,991,131],[1254,13,991,132],[1255,12,991,134,"error"],[1256,10,991,140],[1256,11,991,141],[1257,8,992,12],[1258,8,993,12],[1258,14,993,18],[1258,18,993,22,"AuthInvalidCredentialsError"],[1258,28,993,49],[1258,29,993,49,"AuthInvalidCredentialsError"],[1258,56,993,49],[1258,57,993,50],[1258,118,993,111],[1258,119,993,112],[1259,6,994,8],[1259,7,994,9],[1259,8,995,8],[1259,15,995,15,"error"],[1259,20,995,20],[1259,22,995,22],[1260,8,996,12],[1260,12,996,16],[1260,16,996,16,"isAuthError"],[1260,26,996,27],[1260,27,996,27,"isAuthError"],[1260,38,996,27],[1260,40,996,28,"error"],[1260,45,996,33],[1260,46,996,34],[1260,48,996,36],[1261,10,997,16],[1261,17,997,23],[1262,12,997,25,"data"],[1262,16,997,29],[1262,18,997,31],[1263,14,997,33,"user"],[1263,18,997,37],[1263,20,997,39],[1263,24,997,43],[1264,14,997,45,"session"],[1264,21,997,52],[1264,23,997,54],[1265,12,997,59],[1265,13,997,60],[1266,12,997,62,"error"],[1267,10,997,68],[1267,11,997,69],[1268,8,998,12],[1269,8,999,12],[1269,14,999,18,"error"],[1269,19,999,23],[1270,6,1000,8],[1271,4,1001,4],[1272,4,1002,4],[1273,0,1003,0],[1274,0,1004,0],[1275,0,1005,0],[1276,0,1006,0],[1277,0,1007,0],[1278,0,1008,0],[1279,0,1009,0],[1280,0,1010,0],[1281,0,1011,0],[1282,0,1012,0],[1283,4,1013,4],[1283,10,1013,10,"getSession"],[1283,20,1013,20,"getSession"],[1283,21,1013,20],[1283,23,1013,23],[1284,6,1014,8],[1284,12,1014,14],[1284,16,1014,18],[1284,17,1014,19,"initializePromise"],[1284,34,1014,36],[1285,6,1015,8],[1285,12,1015,14,"result"],[1285,18,1015,20],[1285,21,1015,23],[1285,27,1015,29],[1285,31,1015,33],[1285,32,1015,34,"_acquireLock"],[1285,44,1015,46],[1285,45,1015,47],[1285,46,1015,48],[1285,47,1015,49],[1285,49,1015,51],[1285,61,1015,63],[1286,8,1016,12],[1286,15,1016,19],[1286,19,1016,23],[1286,20,1016,24,"_useSession"],[1286,31,1016,35],[1286,32,1016,36],[1286,38,1016,43,"result"],[1286,44,1016,49],[1286,48,1016,54],[1287,10,1017,16],[1287,17,1017,23,"result"],[1287,23,1017,29],[1288,8,1018,12],[1288,9,1018,13],[1288,10,1018,14],[1289,6,1019,8],[1289,7,1019,9],[1289,8,1019,10],[1290,6,1020,8],[1290,13,1020,15,"result"],[1290,19,1020,21],[1291,4,1021,4],[1292,4,1022,4],[1293,0,1023,0],[1294,0,1024,0],[1295,4,1025,4],[1295,10,1025,10,"_acquireLock"],[1295,22,1025,22,"_acquireLock"],[1295,23,1025,23,"acquireTimeout"],[1295,37,1025,37],[1295,39,1025,39,"fn"],[1295,41,1025,41],[1295,43,1025,43],[1296,6,1026,8],[1296,10,1026,12],[1296,11,1026,13,"_debug"],[1296,17,1026,19],[1296,18,1026,20],[1296,33,1026,35],[1296,35,1026,37],[1296,42,1026,44],[1296,44,1026,46,"acquireTimeout"],[1296,58,1026,60],[1296,59,1026,61],[1297,6,1027,8],[1297,10,1027,12],[1298,8,1028,12],[1298,12,1028,16],[1298,16,1028,20],[1298,17,1028,21,"lockAcquired"],[1298,29,1028,33],[1298,31,1028,35],[1299,10,1029,16],[1299,16,1029,22,"last"],[1299,20,1029,26],[1299,23,1029,29],[1299,27,1029,33],[1299,28,1029,34,"pendingInLock"],[1299,41,1029,47],[1299,42,1029,48,"length"],[1299,48,1029,54],[1299,51,1030,22],[1299,55,1030,26],[1299,56,1030,27,"pendingInLock"],[1299,69,1030,40],[1299,70,1030,41],[1299,74,1030,45],[1299,75,1030,46,"pendingInLock"],[1299,88,1030,59],[1299,89,1030,60,"length"],[1299,95,1030,66],[1299,98,1030,69],[1299,99,1030,70],[1299,100,1030,71],[1299,103,1031,22,"Promise"],[1299,110,1031,29],[1299,111,1031,30,"resolve"],[1299,118,1031,37],[1299,119,1031,38],[1299,120,1031,39],[1300,10,1032,16],[1300,16,1032,22,"result"],[1300,22,1032,28],[1300,25,1032,31],[1300,26,1032,32],[1300,38,1032,44],[1301,12,1033,20],[1301,18,1033,26,"last"],[1301,22,1033,30],[1302,12,1034,20],[1302,19,1034,27],[1302,25,1034,33,"fn"],[1302,27,1034,35],[1302,28,1034,36],[1302,29,1034,37],[1303,10,1035,16],[1303,11,1035,17],[1303,13,1035,19],[1303,14,1035,20],[1304,10,1036,16],[1304,14,1036,20],[1304,15,1036,21,"pendingInLock"],[1304,28,1036,34],[1304,29,1036,35,"push"],[1304,33,1036,39],[1304,34,1036,40],[1304,35,1036,41],[1304,47,1036,53],[1305,12,1037,20],[1305,16,1037,24],[1306,14,1038,24],[1306,20,1038,30,"result"],[1306,26,1038,36],[1307,12,1039,20],[1307,13,1039,21],[1307,14,1040,20],[1307,21,1040,27,"e"],[1307,22,1040,28],[1307,24,1040,30],[1308,14,1041,24],[1309,12,1041,24],[1310,10,1043,16],[1310,11,1043,17],[1310,13,1043,19],[1310,14,1043,20],[1310,15,1043,21],[1311,10,1044,16],[1311,17,1044,23,"result"],[1311,23,1044,29],[1312,8,1045,12],[1313,8,1046,12],[1313,15,1046,19],[1313,21,1046,25],[1313,25,1046,29],[1313,26,1046,30,"lock"],[1313,30,1046,34],[1313,31,1046,35],[1313,39,1046,43],[1313,43,1046,47],[1313,44,1046,48,"storageKey"],[1313,54,1046,58],[1313,56,1046,60],[1313,58,1046,62,"acquireTimeout"],[1313,72,1046,76],[1313,74,1046,78],[1313,86,1046,90],[1314,10,1047,16],[1314,14,1047,20],[1314,15,1047,21,"_debug"],[1314,21,1047,27],[1314,22,1047,28],[1314,37,1047,43],[1314,39,1047,45],[1314,70,1047,76],[1314,72,1047,78],[1314,76,1047,82],[1314,77,1047,83,"storageKey"],[1314,87,1047,93],[1314,88,1047,94],[1315,10,1048,16],[1315,14,1048,20],[1316,12,1049,20],[1316,16,1049,24],[1316,17,1049,25,"lockAcquired"],[1316,29,1049,37],[1316,32,1049,40],[1316,36,1049,44],[1317,12,1050,20],[1317,18,1050,26,"result"],[1317,24,1050,32],[1317,27,1050,35,"fn"],[1317,29,1050,37],[1317,30,1050,38],[1317,31,1050,39],[1318,12,1051,20],[1318,16,1051,24],[1318,17,1051,25,"pendingInLock"],[1318,30,1051,38],[1318,31,1051,39,"push"],[1318,35,1051,43],[1318,36,1051,44],[1318,37,1051,45],[1318,49,1051,57],[1319,14,1052,24],[1319,18,1052,28],[1320,16,1053,28],[1320,22,1053,34,"result"],[1320,28,1053,40],[1321,14,1054,24],[1321,15,1054,25],[1321,16,1055,24],[1321,23,1055,31,"e"],[1321,24,1055,32],[1321,26,1055,34],[1322,16,1056,28],[1323,14,1056,28],[1324,12,1058,20],[1324,13,1058,21],[1324,15,1058,23],[1324,16,1058,24],[1324,17,1058,25],[1325,12,1059,20],[1325,18,1059,26,"result"],[1325,24,1059,32],[1326,12,1060,20],[1327,12,1061,20],[1327,19,1061,27],[1327,23,1061,31],[1327,24,1061,32,"pendingInLock"],[1327,37,1061,45],[1327,38,1061,46,"length"],[1327,44,1061,52],[1327,46,1061,54],[1328,14,1062,24],[1328,20,1062,30,"waitOn"],[1328,26,1062,36],[1328,29,1062,39],[1328,30,1062,40],[1328,33,1062,43],[1328,37,1062,47],[1328,38,1062,48,"pendingInLock"],[1328,51,1062,61],[1328,52,1062,62],[1329,14,1063,24],[1329,20,1063,30,"Promise"],[1329,27,1063,37],[1329,28,1063,38,"all"],[1329,31,1063,41],[1329,32,1063,42,"waitOn"],[1329,38,1063,48],[1329,39,1063,49],[1330,14,1064,24],[1330,18,1064,28],[1330,19,1064,29,"pendingInLock"],[1330,32,1064,42],[1330,33,1064,43,"splice"],[1330,39,1064,49],[1330,40,1064,50],[1330,41,1064,51],[1330,43,1064,53,"waitOn"],[1330,49,1064,59],[1330,50,1064,60,"length"],[1330,56,1064,66],[1330,57,1064,67],[1331,12,1065,20],[1332,12,1066,20],[1332,19,1066,27],[1332,25,1066,33,"result"],[1332,31,1066,39],[1333,10,1067,16],[1333,11,1067,17],[1333,20,1068,24],[1334,12,1069,20],[1334,16,1069,24],[1334,17,1069,25,"_debug"],[1334,23,1069,31],[1334,24,1069,32],[1334,39,1069,47],[1334,41,1069,49],[1334,72,1069,80],[1334,74,1069,82],[1334,78,1069,86],[1334,79,1069,87,"storageKey"],[1334,89,1069,97],[1334,90,1069,98],[1335,12,1070,20],[1335,16,1070,24],[1335,17,1070,25,"lockAcquired"],[1335,29,1070,37],[1335,32,1070,40],[1335,37,1070,45],[1336,10,1071,16],[1337,8,1072,12],[1337,9,1072,13],[1337,10,1072,14],[1338,6,1073,8],[1338,7,1073,9],[1338,16,1074,16],[1339,8,1075,12],[1339,12,1075,16],[1339,13,1075,17,"_debug"],[1339,19,1075,23],[1339,20,1075,24],[1339,35,1075,39],[1339,37,1075,41],[1339,42,1075,46],[1339,43,1075,47],[1340,6,1076,8],[1341,4,1077,4],[1342,4,1078,4],[1343,0,1079,0],[1344,0,1080,0],[1345,0,1081,0],[1346,0,1082,0],[1347,0,1083,0],[1348,4,1084,4],[1348,10,1084,10,"_useSession"],[1348,21,1084,21,"_useSession"],[1348,22,1084,22,"fn"],[1348,24,1084,24],[1348,26,1084,26],[1349,6,1085,8],[1349,10,1085,12],[1349,11,1085,13,"_debug"],[1349,17,1085,19],[1349,18,1085,20],[1349,32,1085,34],[1349,34,1085,36],[1349,41,1085,43],[1349,42,1085,44],[1350,6,1086,8],[1350,10,1086,12],[1351,8,1087,12],[1352,8,1088,12],[1352,14,1088,18,"result"],[1352,20,1088,24],[1352,23,1088,27],[1352,29,1088,33],[1352,33,1088,37],[1352,34,1088,38,"__loadSession"],[1352,47,1088,51],[1352,48,1088,52],[1352,49,1088,53],[1353,8,1089,12],[1353,15,1089,19],[1353,21,1089,25,"fn"],[1353,23,1089,27],[1353,24,1089,28,"result"],[1353,30,1089,34],[1353,31,1089,35],[1354,6,1090,8],[1354,7,1090,9],[1354,16,1091,16],[1355,8,1092,12],[1355,12,1092,16],[1355,13,1092,17,"_debug"],[1355,19,1092,23],[1355,20,1092,24],[1355,34,1092,38],[1355,36,1092,40],[1355,41,1092,45],[1355,42,1092,46],[1356,6,1093,8],[1357,4,1094,4],[1358,4,1095,4],[1359,0,1096,0],[1360,0,1097,0],[1361,0,1098,0],[1362,0,1099,0],[1363,4,1100,4],[1363,10,1100,10,"__loadSession"],[1363,23,1100,23,"__loadSession"],[1363,24,1100,23],[1363,26,1100,26],[1364,6,1101,8],[1364,10,1101,12],[1364,11,1101,13,"_debug"],[1364,17,1101,19],[1364,18,1101,20],[1364,36,1101,38],[1364,38,1101,40],[1364,45,1101,47],[1364,46,1101,48],[1365,6,1102,8],[1365,10,1102,12],[1365,11,1102,13],[1365,15,1102,17],[1365,16,1102,18,"lockAcquired"],[1365,28,1102,30],[1365,30,1102,32],[1366,8,1103,12],[1366,12,1103,16],[1366,13,1103,17,"_debug"],[1366,19,1103,23],[1366,20,1103,24],[1366,38,1103,42],[1366,40,1103,44],[1366,75,1103,79],[1366,77,1103,81],[1366,81,1103,85,"Error"],[1366,86,1103,90],[1366,87,1103,91],[1366,88,1103,92],[1366,89,1103,93,"stack"],[1366,94,1103,98],[1366,95,1103,99],[1367,6,1104,8],[1368,6,1105,8],[1368,10,1105,12],[1369,8,1106,12],[1369,12,1106,16,"currentSession"],[1369,26,1106,30],[1369,29,1106,33],[1369,33,1106,37],[1370,8,1107,12],[1370,14,1107,18,"maybeSession"],[1370,26,1107,30],[1370,29,1107,33],[1370,35,1107,39],[1370,39,1107,39,"getItemAsync"],[1370,50,1107,51],[1370,51,1107,51,"getItemAsync"],[1370,63,1107,51],[1370,65,1107,52],[1370,69,1107,56],[1370,70,1107,57,"storage"],[1370,77,1107,64],[1370,79,1107,66],[1370,83,1107,70],[1370,84,1107,71,"storageKey"],[1370,94,1107,81],[1370,95,1107,82],[1371,8,1108,12],[1371,12,1108,16],[1371,13,1108,17,"_debug"],[1371,19,1108,23],[1371,20,1108,24],[1371,35,1108,39],[1371,37,1108,41],[1371,59,1108,63],[1371,61,1108,65,"maybeSession"],[1371,73,1108,77],[1371,74,1108,78],[1372,8,1109,12],[1372,12,1109,16,"maybeSession"],[1372,24,1109,28],[1372,29,1109,33],[1372,33,1109,37],[1372,35,1109,39],[1373,10,1110,16],[1373,14,1110,20],[1373,18,1110,24],[1373,19,1110,25,"_isValidSession"],[1373,34,1110,40],[1373,35,1110,41,"maybeSession"],[1373,47,1110,53],[1373,48,1110,54],[1373,50,1110,56],[1374,12,1111,20,"currentSession"],[1374,26,1111,34],[1374,29,1111,37,"maybeSession"],[1374,41,1111,49],[1375,10,1112,16],[1375,11,1112,17],[1375,17,1113,21],[1376,12,1114,20],[1376,16,1114,24],[1376,17,1114,25,"_debug"],[1376,23,1114,31],[1376,24,1114,32],[1376,39,1114,47],[1376,41,1114,49],[1376,76,1114,84],[1376,77,1114,85],[1377,12,1115,20],[1377,18,1115,26],[1377,22,1115,30],[1377,23,1115,31,"_removeSession"],[1377,37,1115,45],[1377,38,1115,46],[1377,39,1115,47],[1378,10,1116,16],[1379,8,1117,12],[1380,8,1118,12],[1380,12,1118,16],[1380,13,1118,17,"currentSession"],[1380,27,1118,31],[1380,29,1118,33],[1381,10,1119,16],[1381,17,1119,23],[1382,12,1119,25,"data"],[1382,16,1119,29],[1382,18,1119,31],[1383,14,1119,33,"session"],[1383,21,1119,40],[1383,23,1119,42],[1384,12,1119,47],[1384,13,1119,48],[1385,12,1119,50,"error"],[1385,17,1119,55],[1385,19,1119,57],[1386,10,1119,62],[1386,11,1119,63],[1387,8,1120,12],[1388,8,1121,12],[1389,8,1122,12],[1390,8,1123,12],[1391,8,1124,12],[1392,8,1125,12],[1393,8,1126,12],[1393,14,1126,18,"hasExpired"],[1393,24,1126,28],[1393,27,1126,31,"currentSession"],[1393,41,1126,45],[1393,42,1126,46,"expires_at"],[1393,52,1126,56],[1393,55,1127,18,"currentSession"],[1393,69,1127,32],[1393,70,1127,33,"expires_at"],[1393,80,1127,43],[1393,83,1127,46],[1393,87,1127,50],[1393,90,1127,53,"Date"],[1393,94,1127,57],[1393,95,1127,58,"now"],[1393,98,1127,61],[1393,99,1127,62],[1393,100,1127,63],[1393,103,1127,66,"EXPIRY_MARGIN_MS"],[1393,116,1127,82],[1393,117,1127,82,"EXPIRY_MARGIN_MS"],[1393,133,1127,82],[1393,136,1128,18],[1393,141,1128,23],[1394,8,1129,12],[1394,12,1129,16],[1394,13,1129,17,"_debug"],[1394,19,1129,23],[1394,20,1129,24],[1394,38,1129,42],[1394,40,1129,44],[1394,54,1129,58,"hasExpired"],[1394,64,1129,68],[1394,67,1129,71],[1394,69,1129,73],[1394,72,1129,76],[1394,78,1129,82],[1394,88,1129,92],[1394,90,1129,94],[1394,102,1129,106],[1394,104,1129,108,"currentSession"],[1394,118,1129,122],[1394,119,1129,123,"expires_at"],[1394,129,1129,133],[1394,130,1129,134],[1395,8,1130,12],[1395,12,1130,16],[1395,13,1130,17,"hasExpired"],[1395,23,1130,27],[1395,25,1130,29],[1396,10,1131,16],[1396,14,1131,20],[1396,18,1131,24],[1396,19,1131,25,"userStorage"],[1396,30,1131,36],[1396,32,1131,38],[1397,12,1132,20],[1397,18,1132,26,"maybeUser"],[1397,27,1132,35],[1397,30,1132,39],[1397,36,1132,45],[1397,40,1132,45,"getItemAsync"],[1397,51,1132,57],[1397,52,1132,57,"getItemAsync"],[1397,64,1132,57],[1397,66,1132,58],[1397,70,1132,62],[1397,71,1132,63,"userStorage"],[1397,82,1132,74],[1397,84,1132,76],[1397,88,1132,80],[1397,89,1132,81,"storageKey"],[1397,99,1132,91],[1397,102,1132,94],[1397,109,1132,101],[1397,110,1132,103],[1398,12,1133,20],[1398,16,1133,24,"maybeUser"],[1398,25,1133,33],[1398,30,1133,38],[1398,34,1133,42],[1398,38,1133,46,"maybeUser"],[1398,47,1133,55],[1398,52,1133,60],[1398,57,1133,65],[1398,58,1133,66],[1398,61,1133,69],[1398,66,1133,74],[1398,67,1133,75],[1398,70,1133,78,"maybeUser"],[1398,79,1133,87],[1398,80,1133,88,"user"],[1398,84,1133,92],[1398,86,1133,94],[1399,14,1134,24,"currentSession"],[1399,28,1134,38],[1399,29,1134,39,"user"],[1399,33,1134,43],[1399,36,1134,46,"maybeUser"],[1399,45,1134,55],[1399,46,1134,56,"user"],[1399,50,1134,60],[1400,12,1135,20],[1400,13,1135,21],[1400,19,1136,25],[1401,14,1137,24,"currentSession"],[1401,28,1137,38],[1401,29,1137,39,"user"],[1401,33,1137,43],[1401,36,1137,46],[1401,40,1137,46,"userNotAvailableProxy"],[1401,51,1137,67],[1401,52,1137,67,"userNotAvailableProxy"],[1401,73,1137,67],[1401,75,1137,68],[1401,76,1137,69],[1402,12,1138,20],[1403,10,1139,16],[1404,10,1140,16],[1404,14,1140,20],[1404,18,1140,24],[1404,19,1140,25,"storage"],[1404,26,1140,32],[1404,27,1140,33,"isServer"],[1404,35,1140,41],[1404,39,1140,45,"currentSession"],[1404,53,1140,59],[1404,54,1140,60,"user"],[1404,58,1140,64],[1404,60,1140,66],[1405,12,1141,20],[1405,16,1141,24,"suppressWarning"],[1405,31,1141,39],[1405,34,1141,42],[1405,38,1141,46],[1405,39,1141,47,"suppressGetSessionWarning"],[1405,64,1141,72],[1406,12,1142,20],[1406,18,1142,26,"proxySession"],[1406,30,1142,38],[1406,33,1142,41],[1406,37,1142,45,"Proxy"],[1406,42,1142,50],[1406,43,1142,51,"currentSession"],[1406,57,1142,65],[1406,59,1142,67],[1407,14,1143,24,"get"],[1407,17,1143,27],[1407,19,1143,29,"get"],[1407,20,1143,30,"target"],[1407,26,1143,36],[1407,28,1143,38,"prop"],[1407,32,1143,42],[1407,34,1143,44,"receiver"],[1407,42,1143,52],[1407,47,1143,57],[1408,16,1144,28],[1408,20,1144,32],[1408,21,1144,33,"suppressWarning"],[1408,36,1144,48],[1408,40,1144,52,"prop"],[1408,44,1144,56],[1408,49,1144,61],[1408,55,1144,67],[1408,57,1144,69],[1409,18,1145,32],[1410,18,1146,32,"console"],[1410,25,1146,39],[1410,26,1146,40,"warn"],[1410,30,1146,44],[1410,31,1146,45],[1410,384,1146,398],[1410,385,1146,399],[1411,18,1147,32,"suppressWarning"],[1411,33,1147,47],[1411,36,1147,50],[1411,40,1147,54],[1411,41,1147,55],[1411,42,1147,56],[1412,18,1148,32],[1412,22,1148,36],[1412,23,1148,37,"suppressGetSessionWarning"],[1412,48,1148,62],[1412,51,1148,65],[1412,55,1148,69],[1412,56,1148,70],[1412,57,1148,71],[1413,16,1149,28],[1414,16,1150,28],[1414,23,1150,35,"Reflect"],[1414,30,1150,42],[1414,31,1150,43,"get"],[1414,34,1150,46],[1414,35,1150,47,"target"],[1414,41,1150,53],[1414,43,1150,55,"prop"],[1414,47,1150,59],[1414,49,1150,61,"receiver"],[1414,57,1150,69],[1414,58,1150,70],[1415,14,1151,24],[1416,12,1152,20],[1416,13,1152,21],[1416,14,1152,22],[1417,12,1153,20,"currentSession"],[1417,26,1153,34],[1417,29,1153,37,"proxySession"],[1417,41,1153,49],[1418,10,1154,16],[1419,10,1155,16],[1419,17,1155,23],[1420,12,1155,25,"data"],[1420,16,1155,29],[1420,18,1155,31],[1421,14,1155,33,"session"],[1421,21,1155,40],[1421,23,1155,42,"currentSession"],[1422,12,1155,57],[1422,13,1155,58],[1423,12,1155,60,"error"],[1423,17,1155,65],[1423,19,1155,67],[1424,10,1155,72],[1424,11,1155,73],[1425,8,1156,12],[1426,8,1157,12],[1426,14,1157,18],[1427,10,1157,20,"session"],[1427,17,1157,27],[1428,10,1157,29,"error"],[1429,8,1157,35],[1429,9,1157,36],[1429,12,1157,39],[1429,18,1157,45],[1429,22,1157,49],[1429,23,1157,50,"_callRefreshToken"],[1429,40,1157,67],[1429,41,1157,68,"currentSession"],[1429,55,1157,82],[1429,56,1157,83,"refresh_token"],[1429,69,1157,96],[1429,70,1157,97],[1430,8,1158,12],[1430,12,1158,16,"error"],[1430,17,1158,21],[1430,19,1158,23],[1431,10,1159,16],[1431,17,1159,23],[1432,12,1159,25,"data"],[1432,16,1159,29],[1432,18,1159,31],[1433,14,1159,33,"session"],[1433,21,1159,40],[1433,23,1159,42],[1434,12,1159,47],[1434,13,1159,48],[1435,12,1159,50,"error"],[1436,10,1159,56],[1436,11,1159,57],[1437,8,1160,12],[1438,8,1161,12],[1438,15,1161,19],[1439,10,1161,21,"data"],[1439,14,1161,25],[1439,16,1161,27],[1440,12,1161,29,"session"],[1441,10,1161,37],[1441,11,1161,38],[1442,10,1161,40,"error"],[1442,15,1161,45],[1442,17,1161,47],[1443,8,1161,52],[1443,9,1161,53],[1444,6,1162,8],[1444,7,1162,9],[1444,16,1163,16],[1445,8,1164,12],[1445,12,1164,16],[1445,13,1164,17,"_debug"],[1445,19,1164,23],[1445,20,1164,24],[1445,38,1164,42],[1445,40,1164,44],[1445,45,1164,49],[1445,46,1164,50],[1446,6,1165,8],[1447,4,1166,4],[1448,4,1167,4],[1449,0,1168,0],[1450,0,1169,0],[1451,0,1170,0],[1452,0,1171,0],[1453,0,1172,0],[1454,0,1173,0],[1455,4,1174,4],[1455,10,1174,10,"getUser"],[1455,17,1174,17,"getUser"],[1455,18,1174,18,"jwt"],[1455,21,1174,21],[1455,23,1174,23],[1456,6,1175,8],[1456,10,1175,12,"jwt"],[1456,13,1175,15],[1456,15,1175,17],[1457,8,1176,12],[1457,15,1176,19],[1457,21,1176,25],[1457,25,1176,29],[1457,26,1176,30,"_getUser"],[1457,34,1176,38],[1457,35,1176,39,"jwt"],[1457,38,1176,42],[1457,39,1176,43],[1458,6,1177,8],[1459,6,1178,8],[1459,12,1178,14],[1459,16,1178,18],[1459,17,1178,19,"initializePromise"],[1459,34,1178,36],[1460,6,1179,8],[1460,12,1179,14,"result"],[1460,18,1179,20],[1460,21,1179,23],[1460,27,1179,29],[1460,31,1179,33],[1460,32,1179,34,"_acquireLock"],[1460,44,1179,46],[1460,45,1179,47],[1460,46,1179,48],[1460,47,1179,49],[1460,49,1179,51],[1460,61,1179,63],[1461,8,1180,12],[1461,15,1180,19],[1461,21,1180,25],[1461,25,1180,29],[1461,26,1180,30,"_getUser"],[1461,34,1180,38],[1461,35,1180,39],[1461,36,1180,40],[1462,6,1181,8],[1462,7,1181,9],[1462,8,1181,10],[1463,6,1182,8],[1463,13,1182,15,"result"],[1463,19,1182,21],[1464,4,1183,4],[1465,4,1184,4],[1465,10,1184,10,"_getUser"],[1465,18,1184,18,"_getUser"],[1465,19,1184,19,"jwt"],[1465,22,1184,22],[1465,24,1184,24],[1466,6,1185,8],[1466,10,1185,12],[1467,8,1186,12],[1467,12,1186,16,"jwt"],[1467,15,1186,19],[1467,17,1186,21],[1468,10,1187,16],[1468,17,1187,23],[1468,23,1187,29],[1468,27,1187,29,"_request"],[1468,36,1187,37],[1468,37,1187,37,"_request"],[1468,45,1187,37],[1468,47,1187,38],[1468,51,1187,42],[1468,52,1187,43,"fetch"],[1468,57,1187,48],[1468,59,1187,50],[1468,64,1187,55],[1468,66,1187,57],[1468,69,1187,60],[1468,73,1187,64],[1468,74,1187,65,"url"],[1468,77,1187,68],[1468,84,1187,75],[1468,86,1187,77],[1469,12,1188,20,"headers"],[1469,19,1188,27],[1469,21,1188,29],[1469,25,1188,33],[1469,26,1188,34,"headers"],[1469,33,1188,41],[1470,12,1189,20,"jwt"],[1470,15,1189,23],[1470,17,1189,25,"jwt"],[1470,20,1189,28],[1471,12,1190,20,"xform"],[1471,17,1190,25],[1471,19,1190,27,"_userResponse"],[1471,28,1190,40],[1471,29,1190,40,"_userResponse"],[1472,10,1191,16],[1472,11,1191,17],[1472,12,1191,18],[1473,8,1192,12],[1474,8,1193,12],[1474,15,1193,19],[1474,21,1193,25],[1474,25,1193,29],[1474,26,1193,30,"_useSession"],[1474,37,1193,41],[1474,38,1193,42],[1474,44,1193,49,"result"],[1474,50,1193,55],[1474,54,1193,60],[1475,10,1194,16],[1475,14,1194,20,"_a"],[1475,16,1194,22],[1475,18,1194,24,"_b"],[1475,20,1194,26],[1475,22,1194,28,"_c"],[1475,24,1194,30],[1476,10,1195,16],[1476,16,1195,22],[1477,12,1195,24,"data"],[1477,16,1195,28],[1478,12,1195,30,"error"],[1479,10,1195,36],[1479,11,1195,37],[1479,14,1195,40,"result"],[1479,20,1195,46],[1480,10,1196,16],[1480,14,1196,20,"error"],[1480,19,1196,25],[1480,21,1196,27],[1481,12,1197,20],[1481,18,1197,26,"error"],[1481,23,1197,31],[1482,10,1198,16],[1483,10,1199,16],[1484,10,1200,16],[1484,14,1200,20],[1484,16,1200,22],[1484,17,1200,23,"_a"],[1484,19,1200,25],[1484,22,1200,28,"data"],[1484,26,1200,32],[1484,27,1200,33,"session"],[1484,34,1200,40],[1484,40,1200,46],[1484,44,1200,50],[1484,48,1200,54,"_a"],[1484,50,1200,56],[1484,55,1200,61],[1484,60,1200,66],[1484,61,1200,67],[1484,64,1200,70],[1484,69,1200,75],[1484,70,1200,76],[1484,73,1200,79,"_a"],[1484,75,1200,81],[1484,76,1200,82,"access_token"],[1484,88,1200,94],[1484,89,1200,95],[1484,93,1200,99],[1484,94,1200,100],[1484,98,1200,104],[1484,99,1200,105,"hasCustomAuthorizationHeader"],[1484,127,1200,133],[1484,129,1200,135],[1485,12,1201,20],[1485,19,1201,27],[1486,14,1201,29,"data"],[1486,18,1201,33],[1486,20,1201,35],[1487,16,1201,37,"user"],[1487,20,1201,41],[1487,22,1201,43],[1488,14,1201,48],[1488,15,1201,49],[1489,14,1201,51,"error"],[1489,19,1201,56],[1489,21,1201,58],[1489,25,1201,62,"AuthSessionMissingError"],[1489,35,1201,85],[1489,36,1201,85,"AuthSessionMissingError"],[1489,59,1201,85],[1489,60,1201,86],[1490,12,1201,88],[1490,13,1201,89],[1491,10,1202,16],[1492,10,1203,16],[1492,17,1203,23],[1492,23,1203,29],[1492,27,1203,29,"_request"],[1492,36,1203,37],[1492,37,1203,37,"_request"],[1492,45,1203,37],[1492,47,1203,38],[1492,51,1203,42],[1492,52,1203,43,"fetch"],[1492,57,1203,48],[1492,59,1203,50],[1492,64,1203,55],[1492,66,1203,57],[1492,69,1203,60],[1492,73,1203,64],[1492,74,1203,65,"url"],[1492,77,1203,68],[1492,84,1203,75],[1492,86,1203,77],[1493,12,1204,20,"headers"],[1493,19,1204,27],[1493,21,1204,29],[1493,25,1204,33],[1493,26,1204,34,"headers"],[1493,33,1204,41],[1494,12,1205,20,"jwt"],[1494,15,1205,23],[1494,17,1205,25],[1494,18,1205,26,"_c"],[1494,20,1205,28],[1494,23,1205,31],[1494,24,1205,32,"_b"],[1494,26,1205,34],[1494,29,1205,37,"data"],[1494,33,1205,41],[1494,34,1205,42,"session"],[1494,41,1205,49],[1494,47,1205,55],[1494,51,1205,59],[1494,55,1205,63,"_b"],[1494,57,1205,65],[1494,62,1205,70],[1494,67,1205,75],[1494,68,1205,76],[1494,71,1205,79],[1494,76,1205,84],[1494,77,1205,85],[1494,80,1205,88,"_b"],[1494,82,1205,90],[1494,83,1205,91,"access_token"],[1494,95,1205,103],[1494,101,1205,109],[1494,105,1205,113],[1494,109,1205,117,"_c"],[1494,111,1205,119],[1494,116,1205,124],[1494,121,1205,129],[1494,122,1205,130],[1494,125,1205,133,"_c"],[1494,127,1205,135],[1494,130,1205,138,"undefined"],[1494,139,1205,147],[1495,12,1206,20,"xform"],[1495,17,1206,25],[1495,19,1206,27,"_userResponse"],[1495,28,1206,40],[1495,29,1206,40,"_userResponse"],[1496,10,1207,16],[1496,11,1207,17],[1496,12,1207,18],[1497,8,1208,12],[1497,9,1208,13],[1497,10,1208,14],[1498,6,1209,8],[1498,7,1209,9],[1498,8,1210,8],[1498,15,1210,15,"error"],[1498,20,1210,20],[1498,22,1210,22],[1499,8,1211,12],[1499,12,1211,16],[1499,16,1211,16,"isAuthError"],[1499,26,1211,27],[1499,27,1211,27,"isAuthError"],[1499,38,1211,27],[1499,40,1211,28,"error"],[1499,45,1211,33],[1499,46,1211,34],[1499,48,1211,36],[1500,10,1212,16],[1500,14,1212,20],[1500,18,1212,20,"isAuthSessionMissingError"],[1500,28,1212,45],[1500,29,1212,45,"isAuthSessionMissingError"],[1500,54,1212,45],[1500,56,1212,46,"error"],[1500,61,1212,51],[1500,62,1212,52],[1500,64,1212,54],[1501,12,1213,20],[1502,12,1214,20],[1503,12,1215,20],[1503,18,1215,26],[1503,22,1215,30],[1503,23,1215,31,"_removeSession"],[1503,37,1215,45],[1503,38,1215,46],[1503,39,1215,47],[1504,12,1216,20],[1504,18,1216,26],[1504,22,1216,26,"removeItemAsync"],[1504,33,1216,41],[1504,34,1216,41,"removeItemAsync"],[1504,49,1216,41],[1504,51,1216,42],[1504,55,1216,46],[1504,56,1216,47,"storage"],[1504,63,1216,54],[1504,65,1216,56],[1504,68,1216,59],[1504,72,1216,63],[1504,73,1216,64,"storageKey"],[1504,83,1216,74],[1504,99,1216,90],[1504,100,1216,91],[1505,10,1217,16],[1506,10,1218,16],[1506,17,1218,23],[1507,12,1218,25,"data"],[1507,16,1218,29],[1507,18,1218,31],[1508,14,1218,33,"user"],[1508,18,1218,37],[1508,20,1218,39],[1509,12,1218,44],[1509,13,1218,45],[1510,12,1218,47,"error"],[1511,10,1218,53],[1511,11,1218,54],[1512,8,1219,12],[1513,8,1220,12],[1513,14,1220,18,"error"],[1513,19,1220,23],[1514,6,1221,8],[1515,4,1222,4],[1516,4,1223,4],[1517,0,1224,0],[1518,0,1225,0],[1519,4,1226,4],[1519,10,1226,10,"updateUser"],[1519,20,1226,20,"updateUser"],[1519,21,1226,21,"attributes"],[1519,31,1226,31],[1519,33,1226,33,"options"],[1519,40,1226,40],[1519,43,1226,43],[1519,44,1226,44],[1519,45,1226,45],[1519,47,1226,47],[1520,6,1227,8],[1520,12,1227,14],[1520,16,1227,18],[1520,17,1227,19,"initializePromise"],[1520,34,1227,36],[1521,6,1228,8],[1521,13,1228,15],[1521,19,1228,21],[1521,23,1228,25],[1521,24,1228,26,"_acquireLock"],[1521,36,1228,38],[1521,37,1228,39],[1521,38,1228,40],[1521,39,1228,41],[1521,41,1228,43],[1521,53,1228,55],[1522,8,1229,12],[1522,15,1229,19],[1522,21,1229,25],[1522,25,1229,29],[1522,26,1229,30,"_updateUser"],[1522,37,1229,41],[1522,38,1229,42,"attributes"],[1522,48,1229,52],[1522,50,1229,54,"options"],[1522,57,1229,61],[1522,58,1229,62],[1523,6,1230,8],[1523,7,1230,9],[1523,8,1230,10],[1524,4,1231,4],[1525,4,1232,4],[1525,10,1232,10,"_updateUser"],[1525,21,1232,21,"_updateUser"],[1525,22,1232,22,"attributes"],[1525,32,1232,32],[1525,34,1232,34,"options"],[1525,41,1232,41],[1525,44,1232,44],[1525,45,1232,45],[1525,46,1232,46],[1525,48,1232,48],[1526,6,1233,8],[1526,10,1233,12],[1527,8,1234,12],[1527,15,1234,19],[1527,21,1234,25],[1527,25,1234,29],[1527,26,1234,30,"_useSession"],[1527,37,1234,41],[1527,38,1234,42],[1527,44,1234,49,"result"],[1527,50,1234,55],[1527,54,1234,60],[1528,10,1235,16],[1528,16,1235,22],[1529,12,1235,24,"data"],[1529,16,1235,28],[1529,18,1235,30,"sessionData"],[1529,29,1235,41],[1530,12,1235,43,"error"],[1530,17,1235,48],[1530,19,1235,50,"sessionError"],[1531,10,1235,63],[1531,11,1235,64],[1531,14,1235,67,"result"],[1531,20,1235,73],[1532,10,1236,16],[1532,14,1236,20,"sessionError"],[1532,26,1236,32],[1532,28,1236,34],[1533,12,1237,20],[1533,18,1237,26,"sessionError"],[1533,30,1237,38],[1534,10,1238,16],[1535,10,1239,16],[1535,14,1239,20],[1535,15,1239,21,"sessionData"],[1535,26,1239,32],[1535,27,1239,33,"session"],[1535,34,1239,40],[1535,36,1239,42],[1536,12,1240,20],[1536,18,1240,26],[1536,22,1240,30,"AuthSessionMissingError"],[1536,32,1240,53],[1536,33,1240,53,"AuthSessionMissingError"],[1536,56,1240,53],[1536,57,1240,54],[1536,58,1240,55],[1537,10,1241,16],[1538,10,1242,16],[1538,16,1242,22,"session"],[1538,23,1242,29],[1538,26,1242,32,"sessionData"],[1538,37,1242,43],[1538,38,1242,44,"session"],[1538,45,1242,51],[1539,10,1243,16],[1539,14,1243,20,"codeChallenge"],[1539,27,1243,33],[1539,30,1243,36],[1539,34,1243,40],[1540,10,1244,16],[1540,14,1244,20,"codeChallengeMethod"],[1540,33,1244,39],[1540,36,1244,42],[1540,40,1244,46],[1541,10,1245,16],[1541,14,1245,20],[1541,18,1245,24],[1541,19,1245,25,"flowType"],[1541,27,1245,33],[1541,32,1245,38],[1541,38,1245,44],[1541,42,1245,48,"attributes"],[1541,52,1245,58],[1541,53,1245,59,"email"],[1541,58,1245,64],[1541,62,1245,68],[1541,66,1245,72],[1541,68,1245,74],[1542,12,1246,20],[1543,12,1247,20],[1543,13,1247,21,"codeChallenge"],[1543,26,1247,34],[1543,28,1247,36,"codeChallengeMethod"],[1543,47,1247,55],[1543,48,1247,56],[1543,51,1247,59],[1543,57,1247,65],[1543,61,1247,65,"getCodeChallengeAndMethod"],[1543,72,1247,90],[1543,73,1247,90,"getCodeChallengeAndMethod"],[1543,98,1247,90],[1543,100,1247,91],[1543,104,1247,95],[1543,105,1247,96,"storage"],[1543,112,1247,103],[1543,114,1247,105],[1543,118,1247,109],[1543,119,1247,110,"storageKey"],[1543,129,1247,120],[1543,130,1247,121],[1544,10,1248,16],[1545,10,1249,16],[1545,16,1249,22],[1546,12,1249,24,"data"],[1546,16,1249,28],[1547,12,1249,30,"error"],[1547,17,1249,35],[1547,19,1249,37,"userError"],[1548,10,1249,47],[1548,11,1249,48],[1548,14,1249,51],[1548,20,1249,57],[1548,24,1249,57,"_request"],[1548,33,1249,65],[1548,34,1249,65,"_request"],[1548,42,1249,65],[1548,44,1249,66],[1548,48,1249,70],[1548,49,1249,71,"fetch"],[1548,54,1249,76],[1548,56,1249,78],[1548,61,1249,83],[1548,63,1249,85],[1548,66,1249,88],[1548,70,1249,92],[1548,71,1249,93,"url"],[1548,74,1249,96],[1548,81,1249,103],[1548,83,1249,105],[1549,12,1250,20,"headers"],[1549,19,1250,27],[1549,21,1250,29],[1549,25,1250,33],[1549,26,1250,34,"headers"],[1549,33,1250,41],[1550,12,1251,20,"redirectTo"],[1550,22,1251,30],[1550,24,1251,32,"options"],[1550,31,1251,39],[1550,36,1251,44],[1550,40,1251,48],[1550,44,1251,52,"options"],[1550,51,1251,59],[1550,56,1251,64],[1550,61,1251,69],[1550,62,1251,70],[1550,65,1251,73],[1550,70,1251,78],[1550,71,1251,79],[1550,74,1251,82,"options"],[1550,81,1251,89],[1550,82,1251,90,"emailRedirectTo"],[1550,97,1251,105],[1551,12,1252,20,"body"],[1551,16,1252,24],[1551,18,1252,26,"Object"],[1551,24,1252,32],[1551,25,1252,33,"assign"],[1551,31,1252,39],[1551,32,1252,40,"Object"],[1551,38,1252,46],[1551,39,1252,47,"assign"],[1551,45,1252,53],[1551,46,1252,54],[1551,47,1252,55],[1551,48,1252,56],[1551,50,1252,58,"attributes"],[1551,60,1252,68],[1551,61,1252,69],[1551,63,1252,71],[1552,14,1252,73,"code_challenge"],[1552,28,1252,87],[1552,30,1252,89,"codeChallenge"],[1552,43,1252,102],[1553,14,1252,104,"code_challenge_method"],[1553,35,1252,125],[1553,37,1252,127,"codeChallengeMethod"],[1554,12,1252,147],[1554,13,1252,148],[1554,14,1252,149],[1555,12,1253,20,"jwt"],[1555,15,1253,23],[1555,17,1253,25,"session"],[1555,24,1253,32],[1555,25,1253,33,"access_token"],[1555,37,1253,45],[1556,12,1254,20,"xform"],[1556,17,1254,25],[1556,19,1254,27,"_userResponse"],[1556,28,1254,40],[1556,29,1254,40,"_userResponse"],[1557,10,1255,16],[1557,11,1255,17],[1557,12,1255,18],[1558,10,1256,16],[1558,14,1256,20,"userError"],[1558,23,1256,29],[1558,25,1257,20],[1558,31,1257,26,"userError"],[1558,40,1257,35],[1559,10,1258,16,"session"],[1559,17,1258,23],[1559,18,1258,24,"user"],[1559,22,1258,28],[1559,25,1258,31,"data"],[1559,29,1258,35],[1559,30,1258,36,"user"],[1559,34,1258,40],[1560,10,1259,16],[1560,16,1259,22],[1560,20,1259,26],[1560,21,1259,27,"_saveSession"],[1560,33,1259,39],[1560,34,1259,40,"session"],[1560,41,1259,47],[1560,42,1259,48],[1561,10,1260,16],[1561,16,1260,22],[1561,20,1260,26],[1561,21,1260,27,"_notifyAllSubscribers"],[1561,42,1260,48],[1561,43,1260,49],[1561,57,1260,63],[1561,59,1260,65,"session"],[1561,66,1260,72],[1561,67,1260,73],[1562,10,1261,16],[1562,17,1261,23],[1563,12,1261,25,"data"],[1563,16,1261,29],[1563,18,1261,31],[1564,14,1261,33,"user"],[1564,18,1261,37],[1564,20,1261,39,"session"],[1564,27,1261,46],[1564,28,1261,47,"user"],[1565,12,1261,52],[1565,13,1261,53],[1566,12,1261,55,"error"],[1566,17,1261,60],[1566,19,1261,62],[1567,10,1261,67],[1567,11,1261,68],[1568,8,1262,12],[1568,9,1262,13],[1568,10,1262,14],[1569,6,1263,8],[1569,7,1263,9],[1569,8,1264,8],[1569,15,1264,15,"error"],[1569,20,1264,20],[1569,22,1264,22],[1570,8,1265,12],[1570,12,1265,16],[1570,16,1265,16,"isAuthError"],[1570,26,1265,27],[1570,27,1265,27,"isAuthError"],[1570,38,1265,27],[1570,40,1265,28,"error"],[1570,45,1265,33],[1570,46,1265,34],[1570,48,1265,36],[1571,10,1266,16],[1571,17,1266,23],[1572,12,1266,25,"data"],[1572,16,1266,29],[1572,18,1266,31],[1573,14,1266,33,"user"],[1573,18,1266,37],[1573,20,1266,39],[1574,12,1266,44],[1574,13,1266,45],[1575,12,1266,47,"error"],[1576,10,1266,53],[1576,11,1266,54],[1577,8,1267,12],[1578,8,1268,12],[1578,14,1268,18,"error"],[1578,19,1268,23],[1579,6,1269,8],[1580,4,1270,4],[1581,4,1271,4],[1582,0,1272,0],[1583,0,1273,0],[1584,0,1274,0],[1585,0,1275,0],[1586,4,1276,4],[1586,10,1276,10,"setSession"],[1586,20,1276,20,"setSession"],[1586,21,1276,21,"currentSession"],[1586,35,1276,35],[1586,37,1276,37],[1587,6,1277,8],[1587,12,1277,14],[1587,16,1277,18],[1587,17,1277,19,"initializePromise"],[1587,34,1277,36],[1588,6,1278,8],[1588,13,1278,15],[1588,19,1278,21],[1588,23,1278,25],[1588,24,1278,26,"_acquireLock"],[1588,36,1278,38],[1588,37,1278,39],[1588,38,1278,40],[1588,39,1278,41],[1588,41,1278,43],[1588,53,1278,55],[1589,8,1279,12],[1589,15,1279,19],[1589,21,1279,25],[1589,25,1279,29],[1589,26,1279,30,"_setSession"],[1589,37,1279,41],[1589,38,1279,42,"currentSession"],[1589,52,1279,56],[1589,53,1279,57],[1590,6,1280,8],[1590,7,1280,9],[1590,8,1280,10],[1591,4,1281,4],[1592,4,1282,4],[1592,10,1282,10,"_setSession"],[1592,21,1282,21,"_setSession"],[1592,22,1282,22,"currentSession"],[1592,36,1282,36],[1592,38,1282,38],[1593,6,1283,8],[1593,10,1283,12],[1594,8,1284,12],[1594,12,1284,16],[1594,13,1284,17,"currentSession"],[1594,27,1284,31],[1594,28,1284,32,"access_token"],[1594,40,1284,44],[1594,44,1284,48],[1594,45,1284,49,"currentSession"],[1594,59,1284,63],[1594,60,1284,64,"refresh_token"],[1594,73,1284,77],[1594,75,1284,79],[1595,10,1285,16],[1595,16,1285,22],[1595,20,1285,26,"AuthSessionMissingError"],[1595,30,1285,49],[1595,31,1285,49,"AuthSessionMissingError"],[1595,54,1285,49],[1595,55,1285,50],[1595,56,1285,51],[1596,8,1286,12],[1597,8,1287,12],[1597,14,1287,18,"timeNow"],[1597,21,1287,25],[1597,24,1287,28,"Date"],[1597,28,1287,32],[1597,29,1287,33,"now"],[1597,32,1287,36],[1597,33,1287,37],[1597,34,1287,38],[1597,37,1287,41],[1597,41,1287,45],[1598,8,1288,12],[1598,12,1288,16,"expiresAt"],[1598,21,1288,25],[1598,24,1288,28,"timeNow"],[1598,31,1288,35],[1599,8,1289,12],[1599,12,1289,16,"hasExpired"],[1599,22,1289,26],[1599,25,1289,29],[1599,29,1289,33],[1600,8,1290,12],[1600,12,1290,16,"session"],[1600,19,1290,23],[1600,22,1290,26],[1600,26,1290,30],[1601,8,1291,12],[1601,14,1291,18],[1602,10,1291,20,"payload"],[1603,8,1291,28],[1603,9,1291,29],[1603,12,1291,32],[1603,16,1291,32,"decodeJWT"],[1603,27,1291,41],[1603,28,1291,41,"decodeJWT"],[1603,37,1291,41],[1603,39,1291,42,"currentSession"],[1603,53,1291,56],[1603,54,1291,57,"access_token"],[1603,66,1291,69],[1603,67,1291,70],[1604,8,1292,12],[1604,12,1292,16,"payload"],[1604,19,1292,23],[1604,20,1292,24,"exp"],[1604,23,1292,27],[1604,25,1292,29],[1605,10,1293,16,"expiresAt"],[1605,19,1293,25],[1605,22,1293,28,"payload"],[1605,29,1293,35],[1605,30,1293,36,"exp"],[1605,33,1293,39],[1606,10,1294,16,"hasExpired"],[1606,20,1294,26],[1606,23,1294,29,"expiresAt"],[1606,32,1294,38],[1606,36,1294,42,"timeNow"],[1606,43,1294,49],[1607,8,1295,12],[1608,8,1296,12],[1608,12,1296,16,"hasExpired"],[1608,22,1296,26],[1608,24,1296,28],[1609,10,1297,16],[1609,16,1297,22],[1610,12,1297,24,"session"],[1610,19,1297,31],[1610,21,1297,33,"refreshedSession"],[1610,37,1297,49],[1611,12,1297,51,"error"],[1612,10,1297,57],[1612,11,1297,58],[1612,14,1297,61],[1612,20,1297,67],[1612,24,1297,71],[1612,25,1297,72,"_callRefreshToken"],[1612,42,1297,89],[1612,43,1297,90,"currentSession"],[1612,57,1297,104],[1612,58,1297,105,"refresh_token"],[1612,71,1297,118],[1612,72,1297,119],[1613,10,1298,16],[1613,14,1298,20,"error"],[1613,19,1298,25],[1613,21,1298,27],[1614,12,1299,20],[1614,19,1299,27],[1615,14,1299,29,"data"],[1615,18,1299,33],[1615,20,1299,35],[1616,16,1299,37,"user"],[1616,20,1299,41],[1616,22,1299,43],[1616,26,1299,47],[1617,16,1299,49,"session"],[1617,23,1299,56],[1617,25,1299,58],[1618,14,1299,63],[1618,15,1299,64],[1619,14,1299,66,"error"],[1619,19,1299,71],[1619,21,1299,73,"error"],[1620,12,1299,79],[1620,13,1299,80],[1621,10,1300,16],[1622,10,1301,16],[1622,14,1301,20],[1622,15,1301,21,"refreshedSession"],[1622,31,1301,37],[1622,33,1301,39],[1623,12,1302,20],[1623,19,1302,27],[1624,14,1302,29,"data"],[1624,18,1302,33],[1624,20,1302,35],[1625,16,1302,37,"user"],[1625,20,1302,41],[1625,22,1302,43],[1625,26,1302,47],[1626,16,1302,49,"session"],[1626,23,1302,56],[1626,25,1302,58],[1627,14,1302,63],[1627,15,1302,64],[1628,14,1302,66,"error"],[1628,19,1302,71],[1628,21,1302,73],[1629,12,1302,78],[1629,13,1302,79],[1630,10,1303,16],[1631,10,1304,16,"session"],[1631,17,1304,23],[1631,20,1304,26,"refreshedSession"],[1631,36,1304,42],[1632,8,1305,12],[1632,9,1305,13],[1632,15,1306,17],[1633,10,1307,16],[1633,16,1307,22],[1634,12,1307,24,"data"],[1634,16,1307,28],[1635,12,1307,30,"error"],[1636,10,1307,36],[1636,11,1307,37],[1636,14,1307,40],[1636,20,1307,46],[1636,24,1307,50],[1636,25,1307,51,"_getUser"],[1636,33,1307,59],[1636,34,1307,60,"currentSession"],[1636,48,1307,74],[1636,49,1307,75,"access_token"],[1636,61,1307,87],[1636,62,1307,88],[1637,10,1308,16],[1637,14,1308,20,"error"],[1637,19,1308,25],[1637,21,1308,27],[1638,12,1309,20],[1638,18,1309,26,"error"],[1638,23,1309,31],[1639,10,1310,16],[1640,10,1311,16,"session"],[1640,17,1311,23],[1640,20,1311,26],[1641,12,1312,20,"access_token"],[1641,24,1312,32],[1641,26,1312,34,"currentSession"],[1641,40,1312,48],[1641,41,1312,49,"access_token"],[1641,53,1312,61],[1642,12,1313,20,"refresh_token"],[1642,25,1313,33],[1642,27,1313,35,"currentSession"],[1642,41,1313,49],[1642,42,1313,50,"refresh_token"],[1642,55,1313,63],[1643,12,1314,20,"user"],[1643,16,1314,24],[1643,18,1314,26,"data"],[1643,22,1314,30],[1643,23,1314,31,"user"],[1643,27,1314,35],[1644,12,1315,20,"token_type"],[1644,22,1315,30],[1644,24,1315,32],[1644,32,1315,40],[1645,12,1316,20,"expires_in"],[1645,22,1316,30],[1645,24,1316,32,"expiresAt"],[1645,33,1316,41],[1645,36,1316,44,"timeNow"],[1645,43,1316,51],[1646,12,1317,20,"expires_at"],[1646,22,1317,30],[1646,24,1317,32,"expiresAt"],[1647,10,1318,16],[1647,11,1318,17],[1648,10,1319,16],[1648,16,1319,22],[1648,20,1319,26],[1648,21,1319,27,"_saveSession"],[1648,33,1319,39],[1648,34,1319,40,"session"],[1648,41,1319,47],[1648,42,1319,48],[1649,10,1320,16],[1649,16,1320,22],[1649,20,1320,26],[1649,21,1320,27,"_notifyAllSubscribers"],[1649,42,1320,48],[1649,43,1320,49],[1649,54,1320,60],[1649,56,1320,62,"session"],[1649,63,1320,69],[1649,64,1320,70],[1650,8,1321,12],[1651,8,1322,12],[1651,15,1322,19],[1652,10,1322,21,"data"],[1652,14,1322,25],[1652,16,1322,27],[1653,12,1322,29,"user"],[1653,16,1322,33],[1653,18,1322,35,"session"],[1653,25,1322,42],[1653,26,1322,43,"user"],[1653,30,1322,47],[1654,12,1322,49,"session"],[1655,10,1322,57],[1655,11,1322,58],[1656,10,1322,60,"error"],[1656,15,1322,65],[1656,17,1322,67],[1657,8,1322,72],[1657,9,1322,73],[1658,6,1323,8],[1658,7,1323,9],[1658,8,1324,8],[1658,15,1324,15,"error"],[1658,20,1324,20],[1658,22,1324,22],[1659,8,1325,12],[1659,12,1325,16],[1659,16,1325,16,"isAuthError"],[1659,26,1325,27],[1659,27,1325,27,"isAuthError"],[1659,38,1325,27],[1659,40,1325,28,"error"],[1659,45,1325,33],[1659,46,1325,34],[1659,48,1325,36],[1660,10,1326,16],[1660,17,1326,23],[1661,12,1326,25,"data"],[1661,16,1326,29],[1661,18,1326,31],[1662,14,1326,33,"session"],[1662,21,1326,40],[1662,23,1326,42],[1662,27,1326,46],[1663,14,1326,48,"user"],[1663,18,1326,52],[1663,20,1326,54],[1664,12,1326,59],[1664,13,1326,60],[1665,12,1326,62,"error"],[1666,10,1326,68],[1666,11,1326,69],[1667,8,1327,12],[1668,8,1328,12],[1668,14,1328,18,"error"],[1668,19,1328,23],[1669,6,1329,8],[1670,4,1330,4],[1671,4,1331,4],[1672,0,1332,0],[1673,0,1333,0],[1674,0,1334,0],[1675,0,1335,0],[1676,0,1336,0],[1677,4,1337,4],[1677,10,1337,10,"refreshSession"],[1677,24,1337,24,"refreshSession"],[1677,25,1337,25,"currentSession"],[1677,39,1337,39],[1677,41,1337,41],[1678,6,1338,8],[1678,12,1338,14],[1678,16,1338,18],[1678,17,1338,19,"initializePromise"],[1678,34,1338,36],[1679,6,1339,8],[1679,13,1339,15],[1679,19,1339,21],[1679,23,1339,25],[1679,24,1339,26,"_acquireLock"],[1679,36,1339,38],[1679,37,1339,39],[1679,38,1339,40],[1679,39,1339,41],[1679,41,1339,43],[1679,53,1339,55],[1680,8,1340,12],[1680,15,1340,19],[1680,21,1340,25],[1680,25,1340,29],[1680,26,1340,30,"_refreshSession"],[1680,41,1340,45],[1680,42,1340,46,"currentSession"],[1680,56,1340,60],[1680,57,1340,61],[1681,6,1341,8],[1681,7,1341,9],[1681,8,1341,10],[1682,4,1342,4],[1683,4,1343,4],[1683,10,1343,10,"_refreshSession"],[1683,25,1343,25,"_refreshSession"],[1683,26,1343,26,"currentSession"],[1683,40,1343,40],[1683,42,1343,42],[1684,6,1344,8],[1684,10,1344,12],[1685,8,1345,12],[1685,15,1345,19],[1685,21,1345,25],[1685,25,1345,29],[1685,26,1345,30,"_useSession"],[1685,37,1345,41],[1685,38,1345,42],[1685,44,1345,49,"result"],[1685,50,1345,55],[1685,54,1345,60],[1686,10,1346,16],[1686,14,1346,20,"_a"],[1686,16,1346,22],[1687,10,1347,16],[1687,14,1347,20],[1687,15,1347,21,"currentSession"],[1687,29,1347,35],[1687,31,1347,37],[1688,12,1348,20],[1688,18,1348,26],[1689,14,1348,28,"data"],[1689,18,1348,32],[1690,14,1348,34,"error"],[1691,12,1348,40],[1691,13,1348,41],[1691,16,1348,44,"result"],[1691,22,1348,50],[1692,12,1349,20],[1692,16,1349,24,"error"],[1692,21,1349,29],[1692,23,1349,31],[1693,14,1350,24],[1693,20,1350,30,"error"],[1693,25,1350,35],[1694,12,1351,20],[1695,12,1352,20,"currentSession"],[1695,26,1352,34],[1695,29,1352,37],[1695,30,1352,38,"_a"],[1695,32,1352,40],[1695,35,1352,43,"data"],[1695,39,1352,47],[1695,40,1352,48,"session"],[1695,47,1352,55],[1695,53,1352,61],[1695,57,1352,65],[1695,61,1352,69,"_a"],[1695,63,1352,71],[1695,68,1352,76],[1695,73,1352,81],[1695,74,1352,82],[1695,77,1352,85,"_a"],[1695,79,1352,87],[1695,82,1352,90,"undefined"],[1695,91,1352,99],[1696,10,1353,16],[1697,10,1354,16],[1697,14,1354,20],[1697,16,1354,22,"currentSession"],[1697,30,1354,36],[1697,35,1354,41],[1697,39,1354,45],[1697,43,1354,49,"currentSession"],[1697,57,1354,63],[1697,62,1354,68],[1697,67,1354,73],[1697,68,1354,74],[1697,71,1354,77],[1697,76,1354,82],[1697,77,1354,83],[1697,80,1354,86,"currentSession"],[1697,94,1354,100],[1697,95,1354,101,"refresh_token"],[1697,108,1354,114],[1697,109,1354,115],[1697,111,1354,117],[1698,12,1355,20],[1698,18,1355,26],[1698,22,1355,30,"AuthSessionMissingError"],[1698,32,1355,53],[1698,33,1355,53,"AuthSessionMissingError"],[1698,56,1355,53],[1698,57,1355,54],[1698,58,1355,55],[1699,10,1356,16],[1700,10,1357,16],[1700,16,1357,22],[1701,12,1357,24,"session"],[1701,19,1357,31],[1702,12,1357,33,"error"],[1703,10,1357,39],[1703,11,1357,40],[1703,14,1357,43],[1703,20,1357,49],[1703,24,1357,53],[1703,25,1357,54,"_callRefreshToken"],[1703,42,1357,71],[1703,43,1357,72,"currentSession"],[1703,57,1357,86],[1703,58,1357,87,"refresh_token"],[1703,71,1357,100],[1703,72,1357,101],[1704,10,1358,16],[1704,14,1358,20,"error"],[1704,19,1358,25],[1704,21,1358,27],[1705,12,1359,20],[1705,19,1359,27],[1706,14,1359,29,"data"],[1706,18,1359,33],[1706,20,1359,35],[1707,16,1359,37,"user"],[1707,20,1359,41],[1707,22,1359,43],[1707,26,1359,47],[1708,16,1359,49,"session"],[1708,23,1359,56],[1708,25,1359,58],[1709,14,1359,63],[1709,15,1359,64],[1710,14,1359,66,"error"],[1710,19,1359,71],[1710,21,1359,73,"error"],[1711,12,1359,79],[1711,13,1359,80],[1712,10,1360,16],[1713,10,1361,16],[1713,14,1361,20],[1713,15,1361,21,"session"],[1713,22,1361,28],[1713,24,1361,30],[1714,12,1362,20],[1714,19,1362,27],[1715,14,1362,29,"data"],[1715,18,1362,33],[1715,20,1362,35],[1716,16,1362,37,"user"],[1716,20,1362,41],[1716,22,1362,43],[1716,26,1362,47],[1717,16,1362,49,"session"],[1717,23,1362,56],[1717,25,1362,58],[1718,14,1362,63],[1718,15,1362,64],[1719,14,1362,66,"error"],[1719,19,1362,71],[1719,21,1362,73],[1720,12,1362,78],[1720,13,1362,79],[1721,10,1363,16],[1722,10,1364,16],[1722,17,1364,23],[1723,12,1364,25,"data"],[1723,16,1364,29],[1723,18,1364,31],[1724,14,1364,33,"user"],[1724,18,1364,37],[1724,20,1364,39,"session"],[1724,27,1364,46],[1724,28,1364,47,"user"],[1724,32,1364,51],[1725,14,1364,53,"session"],[1726,12,1364,61],[1726,13,1364,62],[1727,12,1364,64,"error"],[1727,17,1364,69],[1727,19,1364,71],[1728,10,1364,76],[1728,11,1364,77],[1729,8,1365,12],[1729,9,1365,13],[1729,10,1365,14],[1730,6,1366,8],[1730,7,1366,9],[1730,8,1367,8],[1730,15,1367,15,"error"],[1730,20,1367,20],[1730,22,1367,22],[1731,8,1368,12],[1731,12,1368,16],[1731,16,1368,16,"isAuthError"],[1731,26,1368,27],[1731,27,1368,27,"isAuthError"],[1731,38,1368,27],[1731,40,1368,28,"error"],[1731,45,1368,33],[1731,46,1368,34],[1731,48,1368,36],[1732,10,1369,16],[1732,17,1369,23],[1733,12,1369,25,"data"],[1733,16,1369,29],[1733,18,1369,31],[1734,14,1369,33,"user"],[1734,18,1369,37],[1734,20,1369,39],[1734,24,1369,43],[1735,14,1369,45,"session"],[1735,21,1369,52],[1735,23,1369,54],[1736,12,1369,59],[1736,13,1369,60],[1737,12,1369,62,"error"],[1738,10,1369,68],[1738,11,1369,69],[1739,8,1370,12],[1740,8,1371,12],[1740,14,1371,18,"error"],[1740,19,1371,23],[1741,6,1372,8],[1742,4,1373,4],[1743,4,1374,4],[1744,0,1375,0],[1745,0,1376,0],[1746,4,1377,4],[1746,10,1377,10,"_getSessionFromURL"],[1746,28,1377,28,"_getSessionFromURL"],[1746,29,1377,29,"params"],[1746,35,1377,35],[1746,37,1377,37,"callbackUrlType"],[1746,52,1377,52],[1746,54,1377,54],[1747,6,1378,8],[1747,10,1378,12],[1748,8,1379,12],[1748,12,1379,16],[1748,13,1379,17],[1748,17,1379,17,"isBrowser"],[1748,28,1379,26],[1748,29,1379,26,"isBrowser"],[1748,38,1379,26],[1748,40,1379,27],[1748,41,1379,28],[1748,43,1380,16],[1748,49,1380,22],[1748,53,1380,26,"AuthImplicitGrantRedirectError"],[1748,63,1380,56],[1748,64,1380,56,"AuthImplicitGrantRedirectError"],[1748,94,1380,56],[1748,95,1380,57],[1748,117,1380,79],[1748,118,1380,80],[1749,8,1381,12],[1750,8,1382,12],[1750,12,1382,16,"params"],[1750,18,1382,22],[1750,19,1382,23,"error"],[1750,24,1382,28],[1750,28,1382,32,"params"],[1750,34,1382,38],[1750,35,1382,39,"error_description"],[1750,52,1382,56],[1750,56,1382,60,"params"],[1750,62,1382,66],[1750,63,1382,67,"error_code"],[1750,73,1382,77],[1750,75,1382,79],[1751,10,1383,16],[1752,10,1384,16],[1753,10,1385,16],[1753,16,1385,22],[1753,20,1385,26,"AuthImplicitGrantRedirectError"],[1753,30,1385,56],[1753,31,1385,56,"AuthImplicitGrantRedirectError"],[1753,61,1385,56],[1753,62,1385,57,"params"],[1753,68,1385,63],[1753,69,1385,64,"error_description"],[1753,86,1385,81],[1753,90,1385,85],[1753,139,1385,134],[1753,141,1385,136],[1754,12,1386,20,"error"],[1754,17,1386,25],[1754,19,1386,27,"params"],[1754,25,1386,33],[1754,26,1386,34,"error"],[1754,31,1386,39],[1754,35,1386,43],[1754,54,1386,62],[1755,12,1387,20,"code"],[1755,16,1387,24],[1755,18,1387,26,"params"],[1755,24,1387,32],[1755,25,1387,33,"error_code"],[1755,35,1387,43],[1755,39,1387,47],[1756,10,1388,16],[1756,11,1388,17],[1756,12,1388,18],[1757,8,1389,12],[1758,8,1390,12],[1759,8,1391,12],[1759,16,1391,20,"callbackUrlType"],[1759,31,1391,35],[1760,10,1392,16],[1760,15,1392,21],[1760,25,1392,31],[1761,12,1393,20],[1761,16,1393,24],[1761,20,1393,28],[1761,21,1393,29,"flowType"],[1761,29,1393,37],[1761,34,1393,42],[1761,40,1393,48],[1761,42,1393,50],[1762,14,1394,24],[1762,20,1394,30],[1762,24,1394,34,"AuthPKCEGrantCodeExchangeError"],[1762,34,1394,64],[1762,35,1394,64,"AuthPKCEGrantCodeExchangeError"],[1762,65,1394,64],[1762,66,1394,65],[1762,94,1394,93],[1762,95,1394,94],[1763,12,1395,20],[1764,12,1396,20],[1765,10,1397,16],[1765,15,1397,21],[1765,21,1397,27],[1766,12,1398,20],[1766,16,1398,24],[1766,20,1398,28],[1766,21,1398,29,"flowType"],[1766,29,1398,37],[1766,34,1398,42],[1766,44,1398,52],[1766,46,1398,54],[1767,14,1399,24],[1767,20,1399,30],[1767,24,1399,34,"AuthImplicitGrantRedirectError"],[1767,34,1399,64],[1767,35,1399,64,"AuthImplicitGrantRedirectError"],[1767,65,1399,64],[1767,66,1399,65],[1767,104,1399,103],[1767,105,1399,104],[1768,12,1400,20],[1769,12,1401,20],[1770,10,1402,16],[1771,10,1403,16],[1772,8,1404,12],[1773,8,1405,12],[1774,8,1406,12],[1774,12,1406,16,"callbackUrlType"],[1774,27,1406,31],[1774,32,1406,36],[1774,38,1406,42],[1774,40,1406,44],[1775,10,1407,16],[1775,14,1407,20],[1775,15,1407,21,"_debug"],[1775,21,1407,27],[1775,22,1407,28],[1775,38,1407,44],[1775,40,1407,46],[1775,47,1407,53],[1775,49,1407,55],[1775,63,1407,69],[1775,65,1407,71],[1775,69,1407,75],[1775,70,1407,76],[1776,10,1408,16],[1776,14,1408,20],[1776,15,1408,21,"params"],[1776,21,1408,27],[1776,22,1408,28,"code"],[1776,26,1408,32],[1776,28,1409,20],[1776,34,1409,26],[1776,38,1409,30,"AuthPKCEGrantCodeExchangeError"],[1776,48,1409,60],[1776,49,1409,60,"AuthPKCEGrantCodeExchangeError"],[1776,79,1409,60],[1776,80,1409,61],[1776,99,1409,80],[1776,100,1409,81],[1777,10,1410,16],[1777,16,1410,22],[1778,12,1410,24,"data"],[1778,16,1410,28],[1779,12,1410,30,"error"],[1780,10,1410,36],[1780,11,1410,37],[1780,14,1410,40],[1780,20,1410,46],[1780,24,1410,50],[1780,25,1410,51,"_exchangeCodeForSession"],[1780,48,1410,74],[1780,49,1410,75,"params"],[1780,55,1410,81],[1780,56,1410,82,"code"],[1780,60,1410,86],[1780,61,1410,87],[1781,10,1411,16],[1781,14,1411,20,"error"],[1781,19,1411,25],[1781,21,1412,20],[1781,27,1412,26,"error"],[1781,32,1412,31],[1782,10,1413,16],[1782,16,1413,22,"url"],[1782,19,1413,25],[1782,22,1413,28],[1782,26,1413,32,"URL"],[1782,29,1413,35],[1782,30,1413,36,"window"],[1782,36,1413,42],[1782,37,1413,43,"location"],[1782,45,1413,51],[1782,46,1413,52,"href"],[1782,50,1413,56],[1782,51,1413,57],[1783,10,1414,16,"url"],[1783,13,1414,19],[1783,14,1414,20,"searchParams"],[1783,26,1414,32],[1783,27,1414,33,"delete"],[1783,33,1414,39],[1783,34,1414,40],[1783,40,1414,46],[1783,41,1414,47],[1784,10,1415,16,"window"],[1784,16,1415,22],[1784,17,1415,23,"history"],[1784,24,1415,30],[1784,25,1415,31,"replaceState"],[1784,37,1415,43],[1784,38,1415,44,"window"],[1784,44,1415,50],[1784,45,1415,51,"history"],[1784,52,1415,58],[1784,53,1415,59,"state"],[1784,58,1415,64],[1784,60,1415,66],[1784,62,1415,68],[1784,64,1415,70,"url"],[1784,67,1415,73],[1784,68,1415,74,"toString"],[1784,76,1415,82],[1784,77,1415,83],[1784,78,1415,84],[1784,79,1415,85],[1785,10,1416,16],[1785,17,1416,23],[1786,12,1416,25,"data"],[1786,16,1416,29],[1786,18,1416,31],[1787,14,1416,33,"session"],[1787,21,1416,40],[1787,23,1416,42,"data"],[1787,27,1416,46],[1787,28,1416,47,"session"],[1787,35,1416,54],[1788,14,1416,56,"redirectType"],[1788,26,1416,68],[1788,28,1416,70],[1789,12,1416,75],[1789,13,1416,76],[1790,12,1416,78,"error"],[1790,17,1416,83],[1790,19,1416,85],[1791,10,1416,90],[1791,11,1416,91],[1792,8,1417,12],[1793,8,1418,12],[1793,14,1418,18],[1794,10,1418,20,"provider_token"],[1794,24,1418,34],[1795,10,1418,36,"provider_refresh_token"],[1795,32,1418,58],[1796,10,1418,60,"access_token"],[1796,22,1418,72],[1797,10,1418,74,"refresh_token"],[1797,23,1418,87],[1798,10,1418,89,"expires_in"],[1798,20,1418,99],[1799,10,1418,101,"expires_at"],[1799,20,1418,111],[1800,10,1418,113,"token_type"],[1801,8,1418,125],[1801,9,1418,126],[1801,12,1418,129,"params"],[1801,18,1418,135],[1802,8,1419,12],[1802,12,1419,16],[1802,13,1419,17,"access_token"],[1802,25,1419,29],[1802,29,1419,33],[1802,30,1419,34,"expires_in"],[1802,40,1419,44],[1802,44,1419,48],[1802,45,1419,49,"refresh_token"],[1802,58,1419,62],[1802,62,1419,66],[1802,63,1419,67,"token_type"],[1802,73,1419,77],[1802,75,1419,79],[1803,10,1420,16],[1803,16,1420,22],[1803,20,1420,26,"AuthImplicitGrantRedirectError"],[1803,30,1420,56],[1803,31,1420,56,"AuthImplicitGrantRedirectError"],[1803,61,1420,56],[1803,62,1420,57],[1803,89,1420,84],[1803,90,1420,85],[1804,8,1421,12],[1805,8,1422,12],[1805,14,1422,18,"timeNow"],[1805,21,1422,25],[1805,24,1422,28,"Math"],[1805,28,1422,32],[1805,29,1422,33,"round"],[1805,34,1422,38],[1805,35,1422,39,"Date"],[1805,39,1422,43],[1805,40,1422,44,"now"],[1805,43,1422,47],[1805,44,1422,48],[1805,45,1422,49],[1805,48,1422,52],[1805,52,1422,56],[1805,53,1422,57],[1806,8,1423,12],[1806,14,1423,18,"expiresIn"],[1806,23,1423,27],[1806,26,1423,30,"parseInt"],[1806,34,1423,38],[1806,35,1423,39,"expires_in"],[1806,45,1423,49],[1806,46,1423,50],[1807,8,1424,12],[1807,12,1424,16,"expiresAt"],[1807,21,1424,25],[1807,24,1424,28,"timeNow"],[1807,31,1424,35],[1807,34,1424,38,"expiresIn"],[1807,43,1424,47],[1808,8,1425,12],[1808,12,1425,16,"expires_at"],[1808,22,1425,26],[1808,24,1425,28],[1809,10,1426,16,"expiresAt"],[1809,19,1426,25],[1809,22,1426,28,"parseInt"],[1809,30,1426,36],[1809,31,1426,37,"expires_at"],[1809,41,1426,47],[1809,42,1426,48],[1810,8,1427,12],[1811,8,1428,12],[1811,14,1428,18,"actuallyExpiresIn"],[1811,31,1428,35],[1811,34,1428,38,"expiresAt"],[1811,43,1428,47],[1811,46,1428,50,"timeNow"],[1811,53,1428,57],[1812,8,1429,12],[1812,12,1429,16,"actuallyExpiresIn"],[1812,29,1429,33],[1812,32,1429,36],[1812,36,1429,40],[1812,40,1429,44,"AUTO_REFRESH_TICK_DURATION_MS"],[1812,53,1429,73],[1812,54,1429,73,"AUTO_REFRESH_TICK_DURATION_MS"],[1812,83,1429,73],[1812,85,1429,75],[1813,10,1430,16,"console"],[1813,17,1430,23],[1813,18,1430,24,"warn"],[1813,22,1430,28],[1813,23,1430,29],[1813,88,1430,94,"actuallyExpiresIn"],[1813,105,1430,111],[1813,138,1430,144,"expiresIn"],[1813,147,1430,153],[1813,150,1430,156],[1813,151,1430,157],[1814,8,1431,12],[1815,8,1432,12],[1815,14,1432,18,"issuedAt"],[1815,22,1432,26],[1815,25,1432,29,"expiresAt"],[1815,34,1432,38],[1815,37,1432,41,"expiresIn"],[1815,46,1432,50],[1816,8,1433,12],[1816,12,1433,16,"timeNow"],[1816,19,1433,23],[1816,22,1433,26,"issuedAt"],[1816,30,1433,34],[1816,34,1433,38],[1816,37,1433,41],[1816,39,1433,43],[1817,10,1434,16,"console"],[1817,17,1434,23],[1817,18,1434,24,"warn"],[1817,22,1434,28],[1817,23,1434,29],[1817,120,1434,126],[1817,122,1434,128,"issuedAt"],[1817,130,1434,136],[1817,132,1434,138,"expiresAt"],[1817,141,1434,147],[1817,143,1434,149,"timeNow"],[1817,150,1434,156],[1817,151,1434,157],[1818,8,1435,12],[1818,9,1435,13],[1818,15,1436,17],[1818,19,1436,21,"timeNow"],[1818,26,1436,28],[1818,29,1436,31,"issuedAt"],[1818,37,1436,39],[1818,40,1436,42],[1818,41,1436,43],[1818,43,1436,45],[1819,10,1437,16,"console"],[1819,17,1437,23],[1819,18,1437,24,"warn"],[1819,22,1437,28],[1819,23,1437,29],[1819,133,1437,139],[1819,135,1437,141,"issuedAt"],[1819,143,1437,149],[1819,145,1437,151,"expiresAt"],[1819,154,1437,160],[1819,156,1437,162,"timeNow"],[1819,163,1437,169],[1819,164,1437,170],[1820,8,1438,12],[1821,8,1439,12],[1821,14,1439,18],[1822,10,1439,20,"data"],[1822,14,1439,24],[1823,10,1439,26,"error"],[1824,8,1439,32],[1824,9,1439,33],[1824,12,1439,36],[1824,18,1439,42],[1824,22,1439,46],[1824,23,1439,47,"_getUser"],[1824,31,1439,55],[1824,32,1439,56,"access_token"],[1824,44,1439,68],[1824,45,1439,69],[1825,8,1440,12],[1825,12,1440,16,"error"],[1825,17,1440,21],[1825,19,1441,16],[1825,25,1441,22,"error"],[1825,30,1441,27],[1826,8,1442,12],[1826,14,1442,18,"session"],[1826,21,1442,25],[1826,24,1442,28],[1827,10,1443,16,"provider_token"],[1827,24,1443,30],[1828,10,1444,16,"provider_refresh_token"],[1828,32,1444,38],[1829,10,1445,16,"access_token"],[1829,22,1445,28],[1830,10,1446,16,"expires_in"],[1830,20,1446,26],[1830,22,1446,28,"expiresIn"],[1830,31,1446,37],[1831,10,1447,16,"expires_at"],[1831,20,1447,26],[1831,22,1447,28,"expiresAt"],[1831,31,1447,37],[1832,10,1448,16,"refresh_token"],[1832,23,1448,29],[1833,10,1449,16,"token_type"],[1833,20,1449,26],[1834,10,1450,16,"user"],[1834,14,1450,20],[1834,16,1450,22,"data"],[1834,20,1450,26],[1834,21,1450,27,"user"],[1835,8,1451,12],[1835,9,1451,13],[1836,8,1452,12],[1837,8,1453,12,"window"],[1837,14,1453,18],[1837,15,1453,19,"location"],[1837,23,1453,27],[1837,24,1453,28,"hash"],[1837,28,1453,32],[1837,31,1453,35],[1837,33,1453,37],[1838,8,1454,12],[1838,12,1454,16],[1838,13,1454,17,"_debug"],[1838,19,1454,23],[1838,20,1454,24],[1838,43,1454,47],[1838,45,1454,49],[1838,76,1454,80],[1838,77,1454,81],[1839,8,1455,12],[1839,15,1455,19],[1840,10,1455,21,"data"],[1840,14,1455,25],[1840,16,1455,27],[1841,12,1455,29,"session"],[1841,19,1455,36],[1842,12,1455,38,"redirectType"],[1842,24,1455,50],[1842,26,1455,52,"params"],[1842,32,1455,58],[1842,33,1455,59,"type"],[1843,10,1455,64],[1843,11,1455,65],[1844,10,1455,67,"error"],[1844,15,1455,72],[1844,17,1455,74],[1845,8,1455,79],[1845,9,1455,80],[1846,6,1456,8],[1846,7,1456,9],[1846,8,1457,8],[1846,15,1457,15,"error"],[1846,20,1457,20],[1846,22,1457,22],[1847,8,1458,12],[1847,12,1458,16],[1847,16,1458,16,"isAuthError"],[1847,26,1458,27],[1847,27,1458,27,"isAuthError"],[1847,38,1458,27],[1847,40,1458,28,"error"],[1847,45,1458,33],[1847,46,1458,34],[1847,48,1458,36],[1848,10,1459,16],[1848,17,1459,23],[1849,12,1459,25,"data"],[1849,16,1459,29],[1849,18,1459,31],[1850,14,1459,33,"session"],[1850,21,1459,40],[1850,23,1459,42],[1850,27,1459,46],[1851,14,1459,48,"redirectType"],[1851,26,1459,60],[1851,28,1459,62],[1852,12,1459,67],[1852,13,1459,68],[1853,12,1459,70,"error"],[1854,10,1459,76],[1854,11,1459,77],[1855,8,1460,12],[1856,8,1461,12],[1856,14,1461,18,"error"],[1856,19,1461,23],[1857,6,1462,8],[1858,4,1463,4],[1859,4,1464,4],[1860,0,1465,0],[1861,0,1466,0],[1862,4,1467,4,"_isImplicitGrantCallback"],[1862,28,1467,28,"_isImplicitGrantCallback"],[1862,29,1467,29,"params"],[1862,35,1467,35],[1862,37,1467,37],[1863,6,1468,8],[1863,13,1468,15,"Boolean"],[1863,20,1468,22],[1863,21,1468,23,"params"],[1863,27,1468,29],[1863,28,1468,30,"access_token"],[1863,40,1468,42],[1863,44,1468,46,"params"],[1863,50,1468,52],[1863,51,1468,53,"error_description"],[1863,68,1468,70],[1863,69,1468,71],[1864,4,1469,4],[1865,4,1470,4],[1866,0,1471,0],[1867,0,1472,0],[1868,4,1473,4],[1868,10,1473,10,"_isPKCECallback"],[1868,25,1473,25,"_isPKCECallback"],[1868,26,1473,26,"params"],[1868,32,1473,32],[1868,34,1473,34],[1869,6,1474,8],[1869,12,1474,14,"currentStorageContent"],[1869,33,1474,35],[1869,36,1474,38],[1869,42,1474,44],[1869,46,1474,44,"getItemAsync"],[1869,57,1474,56],[1869,58,1474,56,"getItemAsync"],[1869,70,1474,56],[1869,72,1474,57],[1869,76,1474,61],[1869,77,1474,62,"storage"],[1869,84,1474,69],[1869,86,1474,71],[1869,89,1474,74],[1869,93,1474,78],[1869,94,1474,79,"storageKey"],[1869,104,1474,89],[1869,120,1474,105],[1869,121,1474,106],[1870,6,1475,8],[1870,13,1475,15],[1870,14,1475,16],[1870,16,1475,18,"params"],[1870,22,1475,24],[1870,23,1475,25,"code"],[1870,27,1475,29],[1870,31,1475,33,"currentStorageContent"],[1870,52,1475,54],[1870,53,1475,55],[1871,4,1476,4],[1872,4,1477,4],[1873,0,1478,0],[1874,0,1479,0],[1875,0,1480,0],[1876,0,1481,0],[1877,0,1482,0],[1878,0,1483,0],[1879,0,1484,0],[1880,4,1485,4],[1880,10,1485,10,"signOut"],[1880,17,1485,17,"signOut"],[1880,18,1485,18,"options"],[1880,25,1485,25],[1880,28,1485,28],[1881,6,1485,30,"scope"],[1881,11,1485,35],[1881,13,1485,37],[1882,4,1485,46],[1882,5,1485,47],[1882,7,1485,49],[1883,6,1486,8],[1883,12,1486,14],[1883,16,1486,18],[1883,17,1486,19,"initializePromise"],[1883,34,1486,36],[1884,6,1487,8],[1884,13,1487,15],[1884,19,1487,21],[1884,23,1487,25],[1884,24,1487,26,"_acquireLock"],[1884,36,1487,38],[1884,37,1487,39],[1884,38,1487,40],[1884,39,1487,41],[1884,41,1487,43],[1884,53,1487,55],[1885,8,1488,12],[1885,15,1488,19],[1885,21,1488,25],[1885,25,1488,29],[1885,26,1488,30,"_signOut"],[1885,34,1488,38],[1885,35,1488,39,"options"],[1885,42,1488,46],[1885,43,1488,47],[1886,6,1489,8],[1886,7,1489,9],[1886,8,1489,10],[1887,4,1490,4],[1888,4,1491,4],[1888,10,1491,10,"_signOut"],[1888,18,1491,18,"_signOut"],[1888,19,1491,19],[1889,6,1491,21,"scope"],[1890,4,1491,27],[1890,5,1491,28],[1890,8,1491,31],[1891,6,1491,33,"scope"],[1891,11,1491,38],[1891,13,1491,40],[1892,4,1491,49],[1892,5,1491,50],[1892,7,1491,52],[1893,6,1492,8],[1893,13,1492,15],[1893,19,1492,21],[1893,23,1492,25],[1893,24,1492,26,"_useSession"],[1893,35,1492,37],[1893,36,1492,38],[1893,42,1492,45,"result"],[1893,48,1492,51],[1893,52,1492,56],[1894,8,1493,12],[1894,12,1493,16,"_a"],[1894,14,1493,18],[1895,8,1494,12],[1895,14,1494,18],[1896,10,1494,20,"data"],[1896,14,1494,24],[1897,10,1494,26,"error"],[1897,15,1494,31],[1897,17,1494,33,"sessionError"],[1898,8,1494,46],[1898,9,1494,47],[1898,12,1494,50,"result"],[1898,18,1494,56],[1899,8,1495,12],[1899,12,1495,16,"sessionError"],[1899,24,1495,28],[1899,26,1495,30],[1900,10,1496,16],[1900,17,1496,23],[1901,12,1496,25,"error"],[1901,17,1496,30],[1901,19,1496,32,"sessionError"],[1902,10,1496,45],[1902,11,1496,46],[1903,8,1497,12],[1904,8,1498,12],[1904,14,1498,18,"accessToken"],[1904,25,1498,29],[1904,28,1498,32],[1904,29,1498,33,"_a"],[1904,31,1498,35],[1904,34,1498,38,"data"],[1904,38,1498,42],[1904,39,1498,43,"session"],[1904,46,1498,50],[1904,52,1498,56],[1904,56,1498,60],[1904,60,1498,64,"_a"],[1904,62,1498,66],[1904,67,1498,71],[1904,72,1498,76],[1904,73,1498,77],[1904,76,1498,80],[1904,81,1498,85],[1904,82,1498,86],[1904,85,1498,89,"_a"],[1904,87,1498,91],[1904,88,1498,92,"access_token"],[1904,100,1498,104],[1905,8,1499,12],[1905,12,1499,16,"accessToken"],[1905,23,1499,27],[1905,25,1499,29],[1906,10,1500,16],[1906,16,1500,22],[1907,12,1500,24,"error"],[1908,10,1500,30],[1908,11,1500,31],[1908,14,1500,34],[1908,20,1500,40],[1908,24,1500,44],[1908,25,1500,45,"admin"],[1908,30,1500,50],[1908,31,1500,51,"signOut"],[1908,38,1500,58],[1908,39,1500,59,"accessToken"],[1908,50,1500,70],[1908,52,1500,72,"scope"],[1908,57,1500,77],[1908,58,1500,78],[1909,10,1501,16],[1909,14,1501,20,"error"],[1909,19,1501,25],[1909,21,1501,27],[1910,12,1502,20],[1911,12,1503,20],[1912,12,1504,20],[1912,16,1504,24],[1912,18,1504,26],[1912,22,1504,26,"isAuthApiError"],[1912,32,1504,40],[1912,33,1504,40,"isAuthApiError"],[1912,47,1504,40],[1912,49,1504,41,"error"],[1912,54,1504,46],[1912,55,1504,47],[1912,60,1505,25,"error"],[1912,65,1505,30],[1912,66,1505,31,"status"],[1912,72,1505,37],[1912,77,1505,42],[1912,80,1505,45],[1912,84,1505,49,"error"],[1912,89,1505,54],[1912,90,1505,55,"status"],[1912,96,1505,61],[1912,101,1505,66],[1912,104,1505,69],[1912,108,1505,73,"error"],[1912,113,1505,78],[1912,114,1505,79,"status"],[1912,120,1505,85],[1912,125,1505,90],[1912,128,1505,93],[1912,129,1505,94],[1912,130,1505,95],[1912,132,1505,97],[1913,14,1506,24],[1913,21,1506,31],[1914,16,1506,33,"error"],[1915,14,1506,39],[1915,15,1506,40],[1916,12,1507,20],[1917,10,1508,16],[1918,8,1509,12],[1919,8,1510,12],[1919,12,1510,16,"scope"],[1919,17,1510,21],[1919,22,1510,26],[1919,30,1510,34],[1919,32,1510,36],[1920,10,1511,16],[1920,16,1511,22],[1920,20,1511,26],[1920,21,1511,27,"_removeSession"],[1920,35,1511,41],[1920,36,1511,42],[1920,37,1511,43],[1921,10,1512,16],[1921,16,1512,22],[1921,20,1512,22,"removeItemAsync"],[1921,31,1512,37],[1921,32,1512,37,"removeItemAsync"],[1921,47,1512,37],[1921,49,1512,38],[1921,53,1512,42],[1921,54,1512,43,"storage"],[1921,61,1512,50],[1921,63,1512,52],[1921,66,1512,55],[1921,70,1512,59],[1921,71,1512,60,"storageKey"],[1921,81,1512,70],[1921,97,1512,86],[1921,98,1512,87],[1922,8,1513,12],[1923,8,1514,12],[1923,15,1514,19],[1924,10,1514,21,"error"],[1924,15,1514,26],[1924,17,1514,28],[1925,8,1514,33],[1925,9,1514,34],[1926,6,1515,8],[1926,7,1515,9],[1926,8,1515,10],[1927,4,1516,4],[1928,4,1517,4],[1929,0,1518,0],[1930,0,1519,0],[1931,0,1520,0],[1932,4,1521,4,"onAuthStateChange"],[1932,21,1521,21,"onAuthStateChange"],[1932,22,1521,22,"callback"],[1932,30,1521,30],[1932,32,1521,32],[1933,6,1522,8],[1933,12,1522,14,"id"],[1933,14,1522,16],[1933,17,1522,19],[1933,21,1522,19,"uuid"],[1933,32,1522,23],[1933,33,1522,23,"uuid"],[1933,37,1522,23],[1933,39,1522,24],[1933,40,1522,25],[1934,6,1523,8],[1934,12,1523,14,"subscription"],[1934,24,1523,26],[1934,27,1523,29],[1935,8,1524,12,"id"],[1935,10,1524,14],[1936,8,1525,12,"callback"],[1936,16,1525,20],[1937,8,1526,12,"unsubscribe"],[1937,19,1526,23],[1937,21,1526,25,"unsubscribe"],[1937,22,1526,25],[1937,27,1526,31],[1938,10,1527,16],[1938,14,1527,20],[1938,15,1527,21,"_debug"],[1938,21,1527,27],[1938,22,1527,28],[1938,38,1527,44],[1938,40,1527,46],[1938,79,1527,85],[1938,81,1527,87,"id"],[1938,83,1527,89],[1938,84,1527,90],[1939,10,1528,16],[1939,14,1528,20],[1939,15,1528,21,"stateChangeEmitters"],[1939,34,1528,40],[1939,35,1528,41,"delete"],[1939,41,1528,47],[1939,42,1528,48,"id"],[1939,44,1528,50],[1939,45,1528,51],[1940,8,1529,12],[1941,6,1530,8],[1941,7,1530,9],[1942,6,1531,8],[1942,10,1531,12],[1942,11,1531,13,"_debug"],[1942,17,1531,19],[1942,18,1531,20],[1942,40,1531,42],[1942,42,1531,44],[1942,71,1531,73],[1942,73,1531,75,"id"],[1942,75,1531,77],[1942,76,1531,78],[1943,6,1532,8],[1943,10,1532,12],[1943,11,1532,13,"stateChangeEmitters"],[1943,30,1532,32],[1943,31,1532,33,"set"],[1943,34,1532,36],[1943,35,1532,37,"id"],[1943,37,1532,39],[1943,39,1532,41,"subscription"],[1943,51,1532,53],[1943,52,1532,54],[1944,6,1533,8],[1944,7,1533,9],[1944,19,1533,21],[1945,8,1534,12],[1945,14,1534,18],[1945,18,1534,22],[1945,19,1534,23,"initializePromise"],[1945,36,1534,40],[1946,8,1535,12],[1946,14,1535,18],[1946,18,1535,22],[1946,19,1535,23,"_acquireLock"],[1946,31,1535,35],[1946,32,1535,36],[1946,33,1535,37],[1946,34,1535,38],[1946,36,1535,40],[1946,48,1535,52],[1947,10,1536,16],[1947,14,1536,20],[1947,15,1536,21,"_emitInitialSession"],[1947,34,1536,40],[1947,35,1536,41,"id"],[1947,37,1536,43],[1947,38,1536,44],[1948,8,1537,12],[1948,9,1537,13],[1948,10,1537,14],[1949,6,1538,8],[1949,7,1538,9],[1949,9,1538,11],[1949,10,1538,12],[1950,6,1539,8],[1950,13,1539,15],[1951,8,1539,17,"data"],[1951,12,1539,21],[1951,14,1539,23],[1952,10,1539,25,"subscription"],[1953,8,1539,38],[1954,6,1539,40],[1954,7,1539,41],[1955,4,1540,4],[1956,4,1541,4],[1956,10,1541,10,"_emitInitialSession"],[1956,29,1541,29,"_emitInitialSession"],[1956,30,1541,30,"id"],[1956,32,1541,32],[1956,34,1541,34],[1957,6,1542,8],[1957,13,1542,15],[1957,19,1542,21],[1957,23,1542,25],[1957,24,1542,26,"_useSession"],[1957,35,1542,37],[1957,36,1542,38],[1957,42,1542,45,"result"],[1957,48,1542,51],[1957,52,1542,56],[1958,8,1543,12],[1958,12,1543,16,"_a"],[1958,14,1543,18],[1958,16,1543,20,"_b"],[1958,18,1543,22],[1959,8,1544,12],[1959,12,1544,16],[1960,10,1545,16],[1960,16,1545,22],[1961,12,1545,24,"data"],[1961,16,1545,28],[1961,18,1545,30],[1962,14,1545,32,"session"],[1963,12,1545,40],[1963,13,1545,41],[1964,12,1545,43,"error"],[1965,10,1545,50],[1965,11,1545,51],[1965,14,1545,54,"result"],[1965,20,1545,60],[1966,10,1546,16],[1966,14,1546,20,"error"],[1966,19,1546,25],[1966,21,1547,20],[1966,27,1547,26,"error"],[1966,32,1547,31],[1967,10,1548,16],[1967,17,1548,23],[1967,18,1548,24,"_a"],[1967,20,1548,26],[1967,23,1548,29],[1967,27,1548,33],[1967,28,1548,34,"stateChangeEmitters"],[1967,47,1548,53],[1967,48,1548,54,"get"],[1967,51,1548,57],[1967,52,1548,58,"id"],[1967,54,1548,60],[1967,55,1548,61],[1967,61,1548,67],[1967,65,1548,71],[1967,69,1548,75,"_a"],[1967,71,1548,77],[1967,76,1548,82],[1967,81,1548,87],[1967,82,1548,88],[1967,85,1548,91],[1967,90,1548,96],[1967,91,1548,97],[1967,94,1548,100,"_a"],[1967,96,1548,102],[1967,97,1548,103,"callback"],[1967,105,1548,111],[1967,106,1548,112],[1967,123,1548,129],[1967,125,1548,131,"session"],[1967,132,1548,138],[1967,133,1548,139],[1967,134,1548,140],[1968,10,1549,16],[1968,14,1549,20],[1968,15,1549,21,"_debug"],[1968,21,1549,27],[1968,22,1549,28],[1968,39,1549,45],[1968,41,1549,47],[1968,54,1549,60],[1968,56,1549,62,"id"],[1968,58,1549,64],[1968,60,1549,66],[1968,69,1549,75],[1968,71,1549,77,"session"],[1968,78,1549,84],[1968,79,1549,85],[1969,8,1550,12],[1969,9,1550,13],[1969,10,1551,12],[1969,17,1551,19,"err"],[1969,20,1551,22],[1969,22,1551,24],[1970,10,1552,16],[1970,17,1552,23],[1970,18,1552,24,"_b"],[1970,20,1552,26],[1970,23,1552,29],[1970,27,1552,33],[1970,28,1552,34,"stateChangeEmitters"],[1970,47,1552,53],[1970,48,1552,54,"get"],[1970,51,1552,57],[1970,52,1552,58,"id"],[1970,54,1552,60],[1970,55,1552,61],[1970,61,1552,67],[1970,65,1552,71],[1970,69,1552,75,"_b"],[1970,71,1552,77],[1970,76,1552,82],[1970,81,1552,87],[1970,82,1552,88],[1970,85,1552,91],[1970,90,1552,96],[1970,91,1552,97],[1970,94,1552,100,"_b"],[1970,96,1552,102],[1970,97,1552,103,"callback"],[1970,105,1552,111],[1970,106,1552,112],[1970,123,1552,129],[1970,125,1552,131],[1970,129,1552,135],[1970,130,1552,136],[1970,131,1552,137],[1971,10,1553,16],[1971,14,1553,20],[1971,15,1553,21,"_debug"],[1971,21,1553,27],[1971,22,1553,28],[1971,39,1553,45],[1971,41,1553,47],[1971,54,1553,60],[1971,56,1553,62,"id"],[1971,58,1553,64],[1971,60,1553,66],[1971,67,1553,73],[1971,69,1553,75,"err"],[1971,72,1553,78],[1971,73,1553,79],[1972,10,1554,16,"console"],[1972,17,1554,23],[1972,18,1554,24,"error"],[1972,23,1554,29],[1972,24,1554,30,"err"],[1972,27,1554,33],[1972,28,1554,34],[1973,8,1555,12],[1974,6,1556,8],[1974,7,1556,9],[1974,8,1556,10],[1975,4,1557,4],[1976,4,1558,4],[1977,0,1559,0],[1978,0,1560,0],[1979,0,1561,0],[1980,0,1562,0],[1981,0,1563,0],[1982,0,1564,0],[1983,4,1565,4],[1983,10,1565,10,"resetPasswordForEmail"],[1983,31,1565,31,"resetPasswordForEmail"],[1983,32,1565,32,"email"],[1983,37,1565,37],[1983,39,1565,39,"options"],[1983,46,1565,46],[1983,49,1565,49],[1983,50,1565,50],[1983,51,1565,51],[1983,53,1565,53],[1984,6,1566,8],[1984,10,1566,12,"codeChallenge"],[1984,23,1566,25],[1984,26,1566,28],[1984,30,1566,32],[1985,6,1567,8],[1985,10,1567,12,"codeChallengeMethod"],[1985,29,1567,31],[1985,32,1567,34],[1985,36,1567,38],[1986,6,1568,8],[1986,10,1568,12],[1986,14,1568,16],[1986,15,1568,17,"flowType"],[1986,23,1568,25],[1986,28,1568,30],[1986,34,1568,36],[1986,36,1568,38],[1987,8,1569,12],[1988,8,1570,12],[1988,9,1570,13,"codeChallenge"],[1988,22,1570,26],[1988,24,1570,28,"codeChallengeMethod"],[1988,43,1570,47],[1988,44,1570,48],[1988,47,1570,51],[1988,53,1570,57],[1988,57,1570,57,"getCodeChallengeAndMethod"],[1988,68,1570,82],[1988,69,1570,82,"getCodeChallengeAndMethod"],[1988,94,1570,82],[1988,96,1570,83],[1988,100,1570,87],[1988,101,1570,88,"storage"],[1988,108,1570,95],[1988,110,1570,97],[1988,114,1570,101],[1988,115,1570,102,"storageKey"],[1988,125,1570,112],[1988,127,1570,114],[1988,131,1570,118],[1988,132,1570,119],[1989,8,1571,12],[1989,9,1571,13],[1990,6,1572,8],[1991,6,1573,8],[1991,10,1573,12],[1992,8,1574,12],[1992,15,1574,19],[1992,21,1574,25],[1992,25,1574,25,"_request"],[1992,34,1574,33],[1992,35,1574,33,"_request"],[1992,43,1574,33],[1992,45,1574,34],[1992,49,1574,38],[1992,50,1574,39,"fetch"],[1992,55,1574,44],[1992,57,1574,46],[1992,63,1574,52],[1992,65,1574,54],[1992,68,1574,57],[1992,72,1574,61],[1992,73,1574,62,"url"],[1992,76,1574,65],[1992,86,1574,75],[1992,88,1574,77],[1993,10,1575,16,"body"],[1993,14,1575,20],[1993,16,1575,22],[1994,12,1576,20,"email"],[1994,17,1576,25],[1995,12,1577,20,"code_challenge"],[1995,26,1577,34],[1995,28,1577,36,"codeChallenge"],[1995,41,1577,49],[1996,12,1578,20,"code_challenge_method"],[1996,33,1578,41],[1996,35,1578,43,"codeChallengeMethod"],[1996,54,1578,62],[1997,12,1579,20,"gotrue_meta_security"],[1997,32,1579,40],[1997,34,1579,42],[1998,14,1579,44,"captcha_token"],[1998,27,1579,57],[1998,29,1579,59,"options"],[1998,36,1579,66],[1998,37,1579,67,"captchaToken"],[1999,12,1579,80],[2000,10,1580,16],[2000,11,1580,17],[2001,10,1581,16,"headers"],[2001,17,1581,23],[2001,19,1581,25],[2001,23,1581,29],[2001,24,1581,30,"headers"],[2001,31,1581,37],[2002,10,1582,16,"redirectTo"],[2002,20,1582,26],[2002,22,1582,28,"options"],[2002,29,1582,35],[2002,30,1582,36,"redirectTo"],[2003,8,1583,12],[2003,9,1583,13],[2003,10,1583,14],[2004,6,1584,8],[2004,7,1584,9],[2004,8,1585,8],[2004,15,1585,15,"error"],[2004,20,1585,20],[2004,22,1585,22],[2005,8,1586,12],[2005,12,1586,16],[2005,16,1586,16,"isAuthError"],[2005,26,1586,27],[2005,27,1586,27,"isAuthError"],[2005,38,1586,27],[2005,40,1586,28,"error"],[2005,45,1586,33],[2005,46,1586,34],[2005,48,1586,36],[2006,10,1587,16],[2006,17,1587,23],[2007,12,1587,25,"data"],[2007,16,1587,29],[2007,18,1587,31],[2007,22,1587,35],[2008,12,1587,37,"error"],[2009,10,1587,43],[2009,11,1587,44],[2010,8,1588,12],[2011,8,1589,12],[2011,14,1589,18,"error"],[2011,19,1589,23],[2012,6,1590,8],[2013,4,1591,4],[2014,4,1592,4],[2015,0,1593,0],[2016,0,1594,0],[2017,4,1595,4],[2017,10,1595,10,"getUserIdentities"],[2017,27,1595,27,"getUserIdentities"],[2017,28,1595,27],[2017,30,1595,30],[2018,6,1596,8],[2018,10,1596,12,"_a"],[2018,12,1596,14],[2019,6,1597,8],[2019,10,1597,12],[2020,8,1598,12],[2020,14,1598,18],[2021,10,1598,20,"data"],[2021,14,1598,24],[2022,10,1598,26,"error"],[2023,8,1598,32],[2023,9,1598,33],[2023,12,1598,36],[2023,18,1598,42],[2023,22,1598,46],[2023,23,1598,47,"getUser"],[2023,30,1598,54],[2023,31,1598,55],[2023,32,1598,56],[2024,8,1599,12],[2024,12,1599,16,"error"],[2024,17,1599,21],[2024,19,1600,16],[2024,25,1600,22,"error"],[2024,30,1600,27],[2025,8,1601,12],[2025,15,1601,19],[2026,10,1601,21,"data"],[2026,14,1601,25],[2026,16,1601,27],[2027,12,1601,29,"identities"],[2027,22,1601,39],[2027,24,1601,41],[2027,25,1601,42,"_a"],[2027,27,1601,44],[2027,30,1601,47,"data"],[2027,34,1601,51],[2027,35,1601,52,"user"],[2027,39,1601,56],[2027,40,1601,57,"identities"],[2027,50,1601,67],[2027,56,1601,73],[2027,60,1601,77],[2027,64,1601,81,"_a"],[2027,66,1601,83],[2027,71,1601,88],[2027,76,1601,93],[2027,77,1601,94],[2027,80,1601,97,"_a"],[2027,82,1601,99],[2027,85,1601,102],[2028,10,1601,105],[2028,11,1601,106],[2029,10,1601,108,"error"],[2029,15,1601,113],[2029,17,1601,115],[2030,8,1601,120],[2030,9,1601,121],[2031,6,1602,8],[2031,7,1602,9],[2031,8,1603,8],[2031,15,1603,15,"error"],[2031,20,1603,20],[2031,22,1603,22],[2032,8,1604,12],[2032,12,1604,16],[2032,16,1604,16,"isAuthError"],[2032,26,1604,27],[2032,27,1604,27,"isAuthError"],[2032,38,1604,27],[2032,40,1604,28,"error"],[2032,45,1604,33],[2032,46,1604,34],[2032,48,1604,36],[2033,10,1605,16],[2033,17,1605,23],[2034,12,1605,25,"data"],[2034,16,1605,29],[2034,18,1605,31],[2034,22,1605,35],[2035,12,1605,37,"error"],[2036,10,1605,43],[2036,11,1605,44],[2037,8,1606,12],[2038,8,1607,12],[2038,14,1607,18,"error"],[2038,19,1607,23],[2039,6,1608,8],[2040,4,1609,4],[2041,4,1610,4],[2042,0,1611,0],[2043,0,1612,0],[2044,0,1613,0],[2045,4,1614,4],[2045,10,1614,10,"linkIdentity"],[2045,22,1614,22,"linkIdentity"],[2045,23,1614,23,"credentials"],[2045,34,1614,34],[2045,36,1614,36],[2046,6,1615,8],[2046,10,1615,12,"_a"],[2046,12,1615,14],[2047,6,1616,8],[2047,10,1616,12],[2048,8,1617,12],[2048,14,1617,18],[2049,10,1617,20,"data"],[2049,14,1617,24],[2050,10,1617,26,"error"],[2051,8,1617,32],[2051,9,1617,33],[2051,12,1617,36],[2051,18,1617,42],[2051,22,1617,46],[2051,23,1617,47,"_useSession"],[2051,34,1617,58],[2051,35,1617,59],[2051,41,1617,66,"result"],[2051,47,1617,72],[2051,51,1617,77],[2052,10,1618,16],[2052,14,1618,20,"_a"],[2052,16,1618,22],[2052,18,1618,24,"_b"],[2052,20,1618,26],[2052,22,1618,28,"_c"],[2052,24,1618,30],[2052,26,1618,32,"_d"],[2052,28,1618,34],[2052,30,1618,36,"_e"],[2052,32,1618,38],[2053,10,1619,16],[2053,16,1619,22],[2054,12,1619,24,"data"],[2054,16,1619,28],[2055,12,1619,30,"error"],[2056,10,1619,36],[2056,11,1619,37],[2056,14,1619,40,"result"],[2056,20,1619,46],[2057,10,1620,16],[2057,14,1620,20,"error"],[2057,19,1620,25],[2057,21,1621,20],[2057,27,1621,26,"error"],[2057,32,1621,31],[2058,10,1622,16],[2058,16,1622,22,"url"],[2058,19,1622,25],[2058,22,1622,28],[2058,28,1622,34],[2058,32,1622,38],[2058,33,1622,39,"_getUrlForProvider"],[2058,51,1622,57],[2058,52,1622,58],[2058,55,1622,61],[2058,59,1622,65],[2058,60,1622,66,"url"],[2058,63,1622,69],[2058,91,1622,97],[2058,93,1622,99,"credentials"],[2058,104,1622,110],[2058,105,1622,111,"provider"],[2058,113,1622,119],[2058,115,1622,121],[2059,12,1623,20,"redirectTo"],[2059,22,1623,30],[2059,24,1623,32],[2059,25,1623,33,"_a"],[2059,27,1623,35],[2059,30,1623,38,"credentials"],[2059,41,1623,49],[2059,42,1623,50,"options"],[2059,49,1623,57],[2059,55,1623,63],[2059,59,1623,67],[2059,63,1623,71,"_a"],[2059,65,1623,73],[2059,70,1623,78],[2059,75,1623,83],[2059,76,1623,84],[2059,79,1623,87],[2059,84,1623,92],[2059,85,1623,93],[2059,88,1623,96,"_a"],[2059,90,1623,98],[2059,91,1623,99,"redirectTo"],[2059,101,1623,109],[2060,12,1624,20,"scopes"],[2060,18,1624,26],[2060,20,1624,28],[2060,21,1624,29,"_b"],[2060,23,1624,31],[2060,26,1624,34,"credentials"],[2060,37,1624,45],[2060,38,1624,46,"options"],[2060,45,1624,53],[2060,51,1624,59],[2060,55,1624,63],[2060,59,1624,67,"_b"],[2060,61,1624,69],[2060,66,1624,74],[2060,71,1624,79],[2060,72,1624,80],[2060,75,1624,83],[2060,80,1624,88],[2060,81,1624,89],[2060,84,1624,92,"_b"],[2060,86,1624,94],[2060,87,1624,95,"scopes"],[2060,93,1624,101],[2061,12,1625,20,"queryParams"],[2061,23,1625,31],[2061,25,1625,33],[2061,26,1625,34,"_c"],[2061,28,1625,36],[2061,31,1625,39,"credentials"],[2061,42,1625,50],[2061,43,1625,51,"options"],[2061,50,1625,58],[2061,56,1625,64],[2061,60,1625,68],[2061,64,1625,72,"_c"],[2061,66,1625,74],[2061,71,1625,79],[2061,76,1625,84],[2061,77,1625,85],[2061,80,1625,88],[2061,85,1625,93],[2061,86,1625,94],[2061,89,1625,97,"_c"],[2061,91,1625,99],[2061,92,1625,100,"queryParams"],[2061,103,1625,111],[2062,12,1626,20,"skipBrowserRedirect"],[2062,31,1626,39],[2062,33,1626,41],[2063,10,1627,16],[2063,11,1627,17],[2063,12,1627,18],[2064,10,1628,16],[2064,17,1628,23],[2064,23,1628,29],[2064,27,1628,29,"_request"],[2064,36,1628,37],[2064,37,1628,37,"_request"],[2064,45,1628,37],[2064,47,1628,38],[2064,51,1628,42],[2064,52,1628,43,"fetch"],[2064,57,1628,48],[2064,59,1628,50],[2064,64,1628,55],[2064,66,1628,57,"url"],[2064,69,1628,60],[2064,71,1628,62],[2065,12,1629,20,"headers"],[2065,19,1629,27],[2065,21,1629,29],[2065,25,1629,33],[2065,26,1629,34,"headers"],[2065,33,1629,41],[2066,12,1630,20,"jwt"],[2066,15,1630,23],[2066,17,1630,25],[2066,18,1630,26,"_e"],[2066,20,1630,28],[2066,23,1630,31],[2066,24,1630,32,"_d"],[2066,26,1630,34],[2066,29,1630,37,"data"],[2066,33,1630,41],[2066,34,1630,42,"session"],[2066,41,1630,49],[2066,47,1630,55],[2066,51,1630,59],[2066,55,1630,63,"_d"],[2066,57,1630,65],[2066,62,1630,70],[2066,67,1630,75],[2066,68,1630,76],[2066,71,1630,79],[2066,76,1630,84],[2066,77,1630,85],[2066,80,1630,88,"_d"],[2066,82,1630,90],[2066,83,1630,91,"access_token"],[2066,95,1630,103],[2066,101,1630,109],[2066,105,1630,113],[2066,109,1630,117,"_e"],[2066,111,1630,119],[2066,116,1630,124],[2066,121,1630,129],[2066,122,1630,130],[2066,125,1630,133,"_e"],[2066,127,1630,135],[2066,130,1630,138,"undefined"],[2067,10,1631,16],[2067,11,1631,17],[2067,12,1631,18],[2068,8,1632,12],[2068,9,1632,13],[2068,10,1632,14],[2069,8,1633,12],[2069,12,1633,16,"error"],[2069,17,1633,21],[2069,19,1634,16],[2069,25,1634,22,"error"],[2069,30,1634,27],[2070,8,1635,12],[2070,12,1635,16],[2070,16,1635,16,"isBrowser"],[2070,27,1635,25],[2070,28,1635,25,"isBrowser"],[2070,37,1635,25],[2070,39,1635,26],[2070,40,1635,27],[2070,44,1635,31],[2070,46,1635,33],[2070,47,1635,34,"_a"],[2070,49,1635,36],[2070,52,1635,39,"credentials"],[2070,63,1635,50],[2070,64,1635,51,"options"],[2070,71,1635,58],[2070,77,1635,64],[2070,81,1635,68],[2070,85,1635,72,"_a"],[2070,87,1635,74],[2070,92,1635,79],[2070,97,1635,84],[2070,98,1635,85],[2070,101,1635,88],[2070,106,1635,93],[2070,107,1635,94],[2070,110,1635,97,"_a"],[2070,112,1635,99],[2070,113,1635,100,"skipBrowserRedirect"],[2070,132,1635,119],[2070,133,1635,120],[2070,135,1635,122],[2071,10,1636,16,"window"],[2071,16,1636,22],[2071,17,1636,23,"location"],[2071,25,1636,31],[2071,26,1636,32,"assign"],[2071,32,1636,38],[2071,33,1636,39,"data"],[2071,37,1636,43],[2071,42,1636,48],[2071,46,1636,52],[2071,50,1636,56,"data"],[2071,54,1636,60],[2071,59,1636,65],[2071,64,1636,70],[2071,65,1636,71],[2071,68,1636,74],[2071,73,1636,79],[2071,74,1636,80],[2071,77,1636,83,"data"],[2071,81,1636,87],[2071,82,1636,88,"url"],[2071,85,1636,91],[2071,86,1636,92],[2072,8,1637,12],[2073,8,1638,12],[2073,15,1638,19],[2074,10,1638,21,"data"],[2074,14,1638,25],[2074,16,1638,27],[2075,12,1638,29,"provider"],[2075,20,1638,37],[2075,22,1638,39,"credentials"],[2075,33,1638,50],[2075,34,1638,51,"provider"],[2075,42,1638,59],[2076,12,1638,61,"url"],[2076,15,1638,64],[2076,17,1638,66,"data"],[2076,21,1638,70],[2076,26,1638,75],[2076,30,1638,79],[2076,34,1638,83,"data"],[2076,38,1638,87],[2076,43,1638,92],[2076,48,1638,97],[2076,49,1638,98],[2076,52,1638,101],[2076,57,1638,106],[2076,58,1638,107],[2076,61,1638,110,"data"],[2076,65,1638,114],[2076,66,1638,115,"url"],[2077,10,1638,119],[2077,11,1638,120],[2078,10,1638,122,"error"],[2078,15,1638,127],[2078,17,1638,129],[2079,8,1638,134],[2079,9,1638,135],[2080,6,1639,8],[2080,7,1639,9],[2080,8,1640,8],[2080,15,1640,15,"error"],[2080,20,1640,20],[2080,22,1640,22],[2081,8,1641,12],[2081,12,1641,16],[2081,16,1641,16,"isAuthError"],[2081,26,1641,27],[2081,27,1641,27,"isAuthError"],[2081,38,1641,27],[2081,40,1641,28,"error"],[2081,45,1641,33],[2081,46,1641,34],[2081,48,1641,36],[2082,10,1642,16],[2082,17,1642,23],[2083,12,1642,25,"data"],[2083,16,1642,29],[2083,18,1642,31],[2084,14,1642,33,"provider"],[2084,22,1642,41],[2084,24,1642,43,"credentials"],[2084,35,1642,54],[2084,36,1642,55,"provider"],[2084,44,1642,63],[2085,14,1642,65,"url"],[2085,17,1642,68],[2085,19,1642,70],[2086,12,1642,75],[2086,13,1642,76],[2087,12,1642,78,"error"],[2088,10,1642,84],[2088,11,1642,85],[2089,8,1643,12],[2090,8,1644,12],[2090,14,1644,18,"error"],[2090,19,1644,23],[2091,6,1645,8],[2092,4,1646,4],[2093,4,1647,4],[2094,0,1648,0],[2095,0,1649,0],[2096,4,1650,4],[2096,10,1650,10,"unlinkIdentity"],[2096,24,1650,24,"unlinkIdentity"],[2096,25,1650,25,"identity"],[2096,33,1650,33],[2096,35,1650,35],[2097,6,1651,8],[2097,10,1651,12],[2098,8,1652,12],[2098,15,1652,19],[2098,21,1652,25],[2098,25,1652,29],[2098,26,1652,30,"_useSession"],[2098,37,1652,41],[2098,38,1652,42],[2098,44,1652,49,"result"],[2098,50,1652,55],[2098,54,1652,60],[2099,10,1653,16],[2099,14,1653,20,"_a"],[2099,16,1653,22],[2099,18,1653,24,"_b"],[2099,20,1653,26],[2100,10,1654,16],[2100,16,1654,22],[2101,12,1654,24,"data"],[2101,16,1654,28],[2102,12,1654,30,"error"],[2103,10,1654,36],[2103,11,1654,37],[2103,14,1654,40,"result"],[2103,20,1654,46],[2104,10,1655,16],[2104,14,1655,20,"error"],[2104,19,1655,25],[2104,21,1655,27],[2105,12,1656,20],[2105,18,1656,26,"error"],[2105,23,1656,31],[2106,10,1657,16],[2107,10,1658,16],[2107,17,1658,23],[2107,23,1658,29],[2107,27,1658,29,"_request"],[2107,36,1658,37],[2107,37,1658,37,"_request"],[2107,45,1658,37],[2107,47,1658,38],[2107,51,1658,42],[2107,52,1658,43,"fetch"],[2107,57,1658,48],[2107,59,1658,50],[2107,67,1658,58],[2107,69,1658,60],[2107,72,1658,63],[2107,76,1658,67],[2107,77,1658,68,"url"],[2107,80,1658,71],[2107,100,1658,91,"identity"],[2107,108,1658,99],[2107,109,1658,100,"identity_id"],[2107,120,1658,111],[2107,122,1658,113],[2107,124,1658,115],[2108,12,1659,20,"headers"],[2108,19,1659,27],[2108,21,1659,29],[2108,25,1659,33],[2108,26,1659,34,"headers"],[2108,33,1659,41],[2109,12,1660,20,"jwt"],[2109,15,1660,23],[2109,17,1660,25],[2109,18,1660,26,"_b"],[2109,20,1660,28],[2109,23,1660,31],[2109,24,1660,32,"_a"],[2109,26,1660,34],[2109,29,1660,37,"data"],[2109,33,1660,41],[2109,34,1660,42,"session"],[2109,41,1660,49],[2109,47,1660,55],[2109,51,1660,59],[2109,55,1660,63,"_a"],[2109,57,1660,65],[2109,62,1660,70],[2109,67,1660,75],[2109,68,1660,76],[2109,71,1660,79],[2109,76,1660,84],[2109,77,1660,85],[2109,80,1660,88,"_a"],[2109,82,1660,90],[2109,83,1660,91,"access_token"],[2109,95,1660,103],[2109,101,1660,109],[2109,105,1660,113],[2109,109,1660,117,"_b"],[2109,111,1660,119],[2109,116,1660,124],[2109,121,1660,129],[2109,122,1660,130],[2109,125,1660,133,"_b"],[2109,127,1660,135],[2109,130,1660,138,"undefined"],[2110,10,1661,16],[2110,11,1661,17],[2110,12,1661,18],[2111,8,1662,12],[2111,9,1662,13],[2111,10,1662,14],[2112,6,1663,8],[2112,7,1663,9],[2112,8,1664,8],[2112,15,1664,15,"error"],[2112,20,1664,20],[2112,22,1664,22],[2113,8,1665,12],[2113,12,1665,16],[2113,16,1665,16,"isAuthError"],[2113,26,1665,27],[2113,27,1665,27,"isAuthError"],[2113,38,1665,27],[2113,40,1665,28,"error"],[2113,45,1665,33],[2113,46,1665,34],[2113,48,1665,36],[2114,10,1666,16],[2114,17,1666,23],[2115,12,1666,25,"data"],[2115,16,1666,29],[2115,18,1666,31],[2115,22,1666,35],[2116,12,1666,37,"error"],[2117,10,1666,43],[2117,11,1666,44],[2118,8,1667,12],[2119,8,1668,12],[2119,14,1668,18,"error"],[2119,19,1668,23],[2120,6,1669,8],[2121,4,1670,4],[2122,4,1671,4],[2123,0,1672,0],[2124,0,1673,0],[2125,0,1674,0],[2126,4,1675,4],[2126,10,1675,10,"_refreshAccessToken"],[2126,29,1675,29,"_refreshAccessToken"],[2126,30,1675,30,"refreshToken"],[2126,42,1675,42],[2126,44,1675,44],[2127,6,1676,8],[2127,12,1676,14,"debugName"],[2127,21,1676,23],[2127,24,1676,26],[2127,48,1676,50,"refreshToken"],[2127,60,1676,62],[2127,61,1676,63,"substring"],[2127,70,1676,72],[2127,71,1676,73],[2127,72,1676,74],[2127,74,1676,76],[2127,75,1676,77],[2127,76,1676,78],[2127,82,1676,84],[2128,6,1677,8],[2128,10,1677,12],[2128,11,1677,13,"_debug"],[2128,17,1677,19],[2128,18,1677,20,"debugName"],[2128,27,1677,29],[2128,29,1677,31],[2128,36,1677,38],[2128,37,1677,39],[2129,6,1678,8],[2129,10,1678,12],[2130,8,1679,12],[2130,14,1679,18,"startedAt"],[2130,23,1679,27],[2130,26,1679,30,"Date"],[2130,30,1679,34],[2130,31,1679,35,"now"],[2130,34,1679,38],[2130,35,1679,39],[2130,36,1679,40],[2131,8,1680,12],[2132,8,1681,12],[2132,15,1681,19],[2132,21,1681,25],[2132,25,1681,25,"retryable"],[2132,36,1681,34],[2132,37,1681,34,"retryable"],[2132,46,1681,34],[2132,48,1681,35],[2132,54,1681,42,"attempt"],[2132,61,1681,49],[2132,65,1681,54],[2133,10,1682,16],[2133,14,1682,20,"attempt"],[2133,21,1682,27],[2133,24,1682,30],[2133,25,1682,31],[2133,27,1682,33],[2134,12,1683,20],[2134,18,1683,26],[2134,22,1683,26,"sleep"],[2134,33,1683,31],[2134,34,1683,31,"sleep"],[2134,39,1683,31],[2134,41,1683,32],[2134,44,1683,35],[2134,47,1683,38,"Math"],[2134,51,1683,42],[2134,52,1683,43,"pow"],[2134,55,1683,46],[2134,56,1683,47],[2134,57,1683,48],[2134,59,1683,50,"attempt"],[2134,66,1683,57],[2134,69,1683,60],[2134,70,1683,61],[2134,71,1683,62],[2134,72,1683,63],[2134,73,1683,64],[2134,74,1683,65],[2135,10,1684,16],[2136,10,1685,16],[2136,14,1685,20],[2136,15,1685,21,"_debug"],[2136,21,1685,27],[2136,22,1685,28,"debugName"],[2136,31,1685,37],[2136,33,1685,39],[2136,53,1685,59],[2136,55,1685,61,"attempt"],[2136,62,1685,68],[2136,63,1685,69],[2137,10,1686,16],[2137,17,1686,23],[2137,23,1686,29],[2137,27,1686,29,"_request"],[2137,36,1686,37],[2137,37,1686,37,"_request"],[2137,45,1686,37],[2137,47,1686,38],[2137,51,1686,42],[2137,52,1686,43,"fetch"],[2137,57,1686,48],[2137,59,1686,50],[2137,65,1686,56],[2137,67,1686,58],[2137,70,1686,61],[2137,74,1686,65],[2137,75,1686,66,"url"],[2137,78,1686,69],[2137,111,1686,102],[2137,113,1686,104],[2138,12,1687,20,"body"],[2138,16,1687,24],[2138,18,1687,26],[2139,14,1687,28,"refresh_token"],[2139,27,1687,41],[2139,29,1687,43,"refreshToken"],[2140,12,1687,56],[2140,13,1687,57],[2141,12,1688,20,"headers"],[2141,19,1688,27],[2141,21,1688,29],[2141,25,1688,33],[2141,26,1688,34,"headers"],[2141,33,1688,41],[2142,12,1689,20,"xform"],[2142,17,1689,25],[2142,19,1689,27,"_sessionResponse"],[2142,28,1689,43],[2142,29,1689,43,"_sessionResponse"],[2143,10,1690,16],[2143,11,1690,17],[2143,12,1690,18],[2144,8,1691,12],[2144,9,1691,13],[2144,11,1691,15],[2144,12,1691,16,"attempt"],[2144,19,1691,23],[2144,21,1691,25,"error"],[2144,26,1691,30],[2144,31,1691,35],[2145,10,1692,16],[2145,16,1692,22,"nextBackOffInterval"],[2145,35,1692,41],[2145,38,1692,44],[2145,41,1692,47],[2145,44,1692,50,"Math"],[2145,48,1692,54],[2145,49,1692,55,"pow"],[2145,52,1692,58],[2145,53,1692,59],[2145,54,1692,60],[2145,56,1692,62,"attempt"],[2145,63,1692,69],[2145,64,1692,70],[2146,10,1693,16],[2146,17,1693,24,"error"],[2146,22,1693,29],[2146,26,1694,20],[2146,30,1694,20,"isAuthRetryableFetchError"],[2146,40,1694,45],[2146,41,1694,45,"isAuthRetryableFetchError"],[2146,66,1694,45],[2146,68,1694,46,"error"],[2146,73,1694,51],[2146,74,1694,52],[2147,10,1695,20],[2148,10,1696,20,"Date"],[2148,14,1696,24],[2148,15,1696,25,"now"],[2148,18,1696,28],[2148,19,1696,29],[2148,20,1696,30],[2148,23,1696,33,"nextBackOffInterval"],[2148,42,1696,52],[2148,45,1696,55,"startedAt"],[2148,54,1696,64],[2148,57,1696,67,"AUTO_REFRESH_TICK_DURATION_MS"],[2148,70,1696,96],[2148,71,1696,96,"AUTO_REFRESH_TICK_DURATION_MS"],[2148,100,1696,96],[2149,8,1697,12],[2149,9,1697,13],[2149,10,1697,14],[2150,6,1698,8],[2150,7,1698,9],[2150,8,1699,8],[2150,15,1699,15,"error"],[2150,20,1699,20],[2150,22,1699,22],[2151,8,1700,12],[2151,12,1700,16],[2151,13,1700,17,"_debug"],[2151,19,1700,23],[2151,20,1700,24,"debugName"],[2151,29,1700,33],[2151,31,1700,35],[2151,38,1700,42],[2151,40,1700,44,"error"],[2151,45,1700,49],[2151,46,1700,50],[2152,8,1701,12],[2152,12,1701,16],[2152,16,1701,16,"isAuthError"],[2152,26,1701,27],[2152,27,1701,27,"isAuthError"],[2152,38,1701,27],[2152,40,1701,28,"error"],[2152,45,1701,33],[2152,46,1701,34],[2152,48,1701,36],[2153,10,1702,16],[2153,17,1702,23],[2154,12,1702,25,"data"],[2154,16,1702,29],[2154,18,1702,31],[2155,14,1702,33,"session"],[2155,21,1702,40],[2155,23,1702,42],[2155,27,1702,46],[2156,14,1702,48,"user"],[2156,18,1702,52],[2156,20,1702,54],[2157,12,1702,59],[2157,13,1702,60],[2158,12,1702,62,"error"],[2159,10,1702,68],[2159,11,1702,69],[2160,8,1703,12],[2161,8,1704,12],[2161,14,1704,18,"error"],[2161,19,1704,23],[2162,6,1705,8],[2162,7,1705,9],[2162,16,1706,16],[2163,8,1707,12],[2163,12,1707,16],[2163,13,1707,17,"_debug"],[2163,19,1707,23],[2163,20,1707,24,"debugName"],[2163,29,1707,33],[2163,31,1707,35],[2163,36,1707,40],[2163,37,1707,41],[2164,6,1708,8],[2165,4,1709,4],[2166,4,1710,4,"_isValidSession"],[2166,19,1710,19,"_isValidSession"],[2166,20,1710,20,"maybeSession"],[2166,32,1710,32],[2166,34,1710,34],[2167,6,1711,8],[2167,12,1711,14,"isValidSession"],[2167,26,1711,28],[2167,29,1711,31],[2167,36,1711,38,"maybeSession"],[2167,48,1711,50],[2167,53,1711,55],[2167,61,1711,63],[2167,65,1712,12,"maybeSession"],[2167,77,1712,24],[2167,82,1712,29],[2167,86,1712,33],[2167,90,1713,12],[2167,104,1713,26],[2167,108,1713,30,"maybeSession"],[2167,120,1713,42],[2167,124,1714,12],[2167,139,1714,27],[2167,143,1714,31,"maybeSession"],[2167,155,1714,43],[2167,159,1715,12],[2167,171,1715,24],[2167,175,1715,28,"maybeSession"],[2167,187,1715,40],[2168,6,1716,8],[2168,13,1716,15,"isValidSession"],[2168,27,1716,29],[2169,4,1717,4],[2170,4,1718,4],[2170,10,1718,10,"_handleProviderSignIn"],[2170,31,1718,31,"_handleProviderSignIn"],[2170,32,1718,32,"provider"],[2170,40,1718,40],[2170,42,1718,42,"options"],[2170,49,1718,49],[2170,51,1718,51],[2171,6,1719,8],[2171,12,1719,14,"url"],[2171,15,1719,17],[2171,18,1719,20],[2171,24,1719,26],[2171,28,1719,30],[2171,29,1719,31,"_getUrlForProvider"],[2171,47,1719,49],[2171,48,1719,50],[2171,51,1719,53],[2171,55,1719,57],[2171,56,1719,58,"url"],[2171,59,1719,61],[2171,71,1719,73],[2171,73,1719,75,"provider"],[2171,81,1719,83],[2171,83,1719,85],[2172,8,1720,12,"redirectTo"],[2172,18,1720,22],[2172,20,1720,24,"options"],[2172,27,1720,31],[2172,28,1720,32,"redirectTo"],[2172,38,1720,42],[2173,8,1721,12,"scopes"],[2173,14,1721,18],[2173,16,1721,20,"options"],[2173,23,1721,27],[2173,24,1721,28,"scopes"],[2173,30,1721,34],[2174,8,1722,12,"queryParams"],[2174,19,1722,23],[2174,21,1722,25,"options"],[2174,28,1722,32],[2174,29,1722,33,"queryParams"],[2175,6,1723,8],[2175,7,1723,9],[2175,8,1723,10],[2176,6,1724,8],[2176,10,1724,12],[2176,11,1724,13,"_debug"],[2176,17,1724,19],[2176,18,1724,20],[2176,44,1724,46],[2176,46,1724,48],[2176,56,1724,58],[2176,58,1724,60,"provider"],[2176,66,1724,68],[2176,68,1724,70],[2176,77,1724,79],[2176,79,1724,81,"options"],[2176,86,1724,88],[2176,88,1724,90],[2176,93,1724,95],[2176,95,1724,97,"url"],[2176,98,1724,100],[2176,99,1724,101],[2177,6,1725,8],[2178,6,1726,8],[2178,10,1726,12],[2178,14,1726,12,"isBrowser"],[2178,25,1726,21],[2178,26,1726,21,"isBrowser"],[2178,35,1726,21],[2178,37,1726,22],[2178,38,1726,23],[2178,42,1726,27],[2178,43,1726,28,"options"],[2178,50,1726,35],[2178,51,1726,36,"skipBrowserRedirect"],[2178,70,1726,55],[2178,72,1726,57],[2179,8,1727,12,"window"],[2179,14,1727,18],[2179,15,1727,19,"location"],[2179,23,1727,27],[2179,24,1727,28,"assign"],[2179,30,1727,34],[2179,31,1727,35,"url"],[2179,34,1727,38],[2179,35,1727,39],[2180,6,1728,8],[2181,6,1729,8],[2181,13,1729,15],[2182,8,1729,17,"data"],[2182,12,1729,21],[2182,14,1729,23],[2183,10,1729,25,"provider"],[2183,18,1729,33],[2184,10,1729,35,"url"],[2185,8,1729,39],[2185,9,1729,40],[2186,8,1729,42,"error"],[2186,13,1729,47],[2186,15,1729,49],[2187,6,1729,54],[2187,7,1729,55],[2188,4,1730,4],[2189,4,1731,4],[2190,0,1732,0],[2191,0,1733,0],[2192,0,1734,0],[2193,4,1735,4],[2193,10,1735,10,"_recoverAndRefresh"],[2193,28,1735,28,"_recoverAndRefresh"],[2193,29,1735,28],[2193,31,1735,31],[2194,6,1736,8],[2194,10,1736,12,"_a"],[2194,12,1736,14],[2194,14,1736,16,"_b"],[2194,16,1736,18],[2195,6,1737,8],[2195,12,1737,14,"debugName"],[2195,21,1737,23],[2195,24,1737,26],[2195,47,1737,49],[2196,6,1738,8],[2196,10,1738,12],[2196,11,1738,13,"_debug"],[2196,17,1738,19],[2196,18,1738,20,"debugName"],[2196,27,1738,29],[2196,29,1738,31],[2196,36,1738,38],[2196,37,1738,39],[2197,6,1739,8],[2197,10,1739,12],[2198,8,1740,12],[2198,14,1740,18,"currentSession"],[2198,28,1740,32],[2198,31,1740,36],[2198,37,1740,42],[2198,41,1740,42,"getItemAsync"],[2198,52,1740,54],[2198,53,1740,54,"getItemAsync"],[2198,65,1740,54],[2198,67,1740,55],[2198,71,1740,59],[2198,72,1740,60,"storage"],[2198,79,1740,67],[2198,81,1740,69],[2198,85,1740,73],[2198,86,1740,74,"storageKey"],[2198,96,1740,84],[2198,97,1740,86],[2199,8,1741,12],[2199,12,1741,16,"currentSession"],[2199,26,1741,30],[2199,30,1741,34],[2199,34,1741,38],[2199,35,1741,39,"userStorage"],[2199,46,1741,50],[2199,48,1741,52],[2200,10,1742,16],[2200,14,1742,20,"maybeUser"],[2200,23,1742,29],[2200,26,1742,33],[2200,32,1742,39],[2200,36,1742,39,"getItemAsync"],[2200,47,1742,51],[2200,48,1742,51,"getItemAsync"],[2200,60,1742,51],[2200,62,1742,52],[2200,66,1742,56],[2200,67,1742,57,"userStorage"],[2200,78,1742,68],[2200,80,1742,70],[2200,84,1742,74],[2200,85,1742,75,"storageKey"],[2200,95,1742,85],[2200,98,1742,88],[2200,105,1742,95],[2200,106,1742,97],[2201,10,1743,16],[2201,14,1743,20],[2201,15,1743,21],[2201,19,1743,25],[2201,20,1743,26,"storage"],[2201,27,1743,33],[2201,28,1743,34,"isServer"],[2201,36,1743,42],[2201,40,1743,46,"Object"],[2201,46,1743,52],[2201,47,1743,53,"is"],[2201,49,1743,55],[2201,50,1743,56],[2201,54,1743,60],[2201,55,1743,61,"storage"],[2201,62,1743,68],[2201,64,1743,70],[2201,68,1743,74],[2201,69,1743,75,"userStorage"],[2201,80,1743,86],[2201,81,1743,87],[2201,85,1743,91],[2201,86,1743,92,"maybeUser"],[2201,95,1743,101],[2201,97,1743,103],[2202,12,1744,20],[2203,12,1745,20],[2204,12,1746,20],[2205,12,1747,20],[2206,12,1748,20,"maybeUser"],[2206,21,1748,29],[2206,24,1748,32],[2207,14,1748,34,"user"],[2207,18,1748,38],[2207,20,1748,40,"currentSession"],[2207,34,1748,54],[2207,35,1748,55,"user"],[2208,12,1748,60],[2208,13,1748,61],[2209,12,1749,20],[2209,18,1749,26],[2209,22,1749,26,"setItemAsync"],[2209,33,1749,38],[2209,34,1749,38,"setItemAsync"],[2209,46,1749,38],[2209,48,1749,39],[2209,52,1749,43],[2209,53,1749,44,"userStorage"],[2209,64,1749,55],[2209,66,1749,57],[2209,70,1749,61],[2209,71,1749,62,"storageKey"],[2209,81,1749,72],[2209,84,1749,75],[2209,91,1749,82],[2209,93,1749,84,"maybeUser"],[2209,102,1749,93],[2209,103,1749,94],[2210,10,1750,16],[2211,10,1751,16,"currentSession"],[2211,24,1751,30],[2211,25,1751,31,"user"],[2211,29,1751,35],[2211,32,1751,38],[2211,33,1751,39,"_a"],[2211,35,1751,41],[2211,38,1751,44,"maybeUser"],[2211,47,1751,53],[2211,52,1751,58],[2211,56,1751,62],[2211,60,1751,66,"maybeUser"],[2211,69,1751,75],[2211,74,1751,80],[2211,79,1751,85],[2211,80,1751,86],[2211,83,1751,89],[2211,88,1751,94],[2211,89,1751,95],[2211,92,1751,98,"maybeUser"],[2211,101,1751,107],[2211,102,1751,108,"user"],[2211,106,1751,112],[2211,112,1751,118],[2211,116,1751,122],[2211,120,1751,126,"_a"],[2211,122,1751,128],[2211,127,1751,133],[2211,132,1751,138],[2211,133,1751,139],[2211,136,1751,142,"_a"],[2211,138,1751,144],[2211,141,1751,147],[2211,145,1751,147,"userNotAvailableProxy"],[2211,156,1751,168],[2211,157,1751,168,"userNotAvailableProxy"],[2211,178,1751,168],[2211,180,1751,169],[2211,181,1751,170],[2212,8,1752,12],[2212,9,1752,13],[2212,15,1753,17],[2212,19,1753,21,"currentSession"],[2212,33,1753,35],[2212,37,1753,39],[2212,38,1753,40,"currentSession"],[2212,52,1753,54],[2212,53,1753,55,"user"],[2212,57,1753,59],[2212,59,1753,61],[2213,10,1754,16],[2214,10,1755,16],[2215,10,1756,16],[2215,14,1756,20],[2215,15,1756,21,"currentSession"],[2215,29,1756,35],[2215,30,1756,36,"user"],[2215,34,1756,40],[2215,36,1756,42],[2216,12,1757,20],[2217,12,1758,20],[2217,18,1758,26,"separateUser"],[2217,30,1758,38],[2217,33,1758,42],[2217,39,1758,48],[2217,43,1758,48,"getItemAsync"],[2217,54,1758,60],[2217,55,1758,60,"getItemAsync"],[2217,67,1758,60],[2217,69,1758,61],[2217,73,1758,65],[2217,74,1758,66,"storage"],[2217,81,1758,73],[2217,83,1758,75],[2217,87,1758,79],[2217,88,1758,80,"storageKey"],[2217,98,1758,90],[2217,101,1758,93],[2217,108,1758,100],[2217,109,1758,102],[2218,12,1759,20],[2218,16,1759,24,"separateUser"],[2218,28,1759,36],[2218,33,1759,41,"separateUser"],[2218,45,1759,53],[2218,50,1759,58],[2218,54,1759,62],[2218,58,1759,66,"separateUser"],[2218,70,1759,78],[2218,75,1759,83],[2218,80,1759,88],[2218,81,1759,89],[2218,84,1759,92],[2218,89,1759,97],[2218,90,1759,98],[2218,93,1759,101,"separateUser"],[2218,105,1759,113],[2218,106,1759,114,"user"],[2218,110,1759,118],[2218,111,1759,119],[2218,113,1759,121],[2219,14,1760,24,"currentSession"],[2219,28,1760,38],[2219,29,1760,39,"user"],[2219,33,1760,43],[2219,36,1760,46,"separateUser"],[2219,48,1760,58],[2219,49,1760,59,"user"],[2219,53,1760,63],[2220,14,1761,24],[2220,20,1761,30],[2220,24,1761,30,"removeItemAsync"],[2220,35,1761,45],[2220,36,1761,45,"removeItemAsync"],[2220,51,1761,45],[2220,53,1761,46],[2220,57,1761,50],[2220,58,1761,51,"storage"],[2220,65,1761,58],[2220,67,1761,60],[2220,71,1761,64],[2220,72,1761,65,"storageKey"],[2220,82,1761,75],[2220,85,1761,78],[2220,92,1761,85],[2220,93,1761,86],[2221,14,1762,24],[2221,20,1762,30],[2221,24,1762,30,"setItemAsync"],[2221,35,1762,42],[2221,36,1762,42,"setItemAsync"],[2221,48,1762,42],[2221,50,1762,43],[2221,54,1762,47],[2221,55,1762,48,"storage"],[2221,62,1762,55],[2221,64,1762,57],[2221,68,1762,61],[2221,69,1762,62,"storageKey"],[2221,79,1762,72],[2221,81,1762,74,"currentSession"],[2221,95,1762,88],[2221,96,1762,89],[2222,12,1763,20],[2222,13,1763,21],[2222,19,1764,25],[2223,14,1765,24,"currentSession"],[2223,28,1765,38],[2223,29,1765,39,"user"],[2223,33,1765,43],[2223,36,1765,46],[2223,40,1765,46,"userNotAvailableProxy"],[2223,51,1765,67],[2223,52,1765,67,"userNotAvailableProxy"],[2223,73,1765,67],[2223,75,1765,68],[2223,76,1765,69],[2224,12,1766,20],[2225,10,1767,16],[2226,8,1768,12],[2227,8,1769,12],[2227,12,1769,16],[2227,13,1769,17,"_debug"],[2227,19,1769,23],[2227,20,1769,24,"debugName"],[2227,29,1769,33],[2227,31,1769,35],[2227,53,1769,57],[2227,55,1769,59,"currentSession"],[2227,69,1769,73],[2227,70,1769,74],[2228,8,1770,12],[2228,12,1770,16],[2228,13,1770,17],[2228,17,1770,21],[2228,18,1770,22,"_isValidSession"],[2228,33,1770,37],[2228,34,1770,38,"currentSession"],[2228,48,1770,52],[2228,49,1770,53],[2228,51,1770,55],[2229,10,1771,16],[2229,14,1771,20],[2229,15,1771,21,"_debug"],[2229,21,1771,27],[2229,22,1771,28,"debugName"],[2229,31,1771,37],[2229,33,1771,39],[2229,55,1771,61],[2229,56,1771,62],[2230,10,1772,16],[2230,14,1772,20,"currentSession"],[2230,28,1772,34],[2230,33,1772,39],[2230,37,1772,43],[2230,39,1772,45],[2231,12,1773,20],[2231,18,1773,26],[2231,22,1773,30],[2231,23,1773,31,"_removeSession"],[2231,37,1773,45],[2231,38,1773,46],[2231,39,1773,47],[2232,10,1774,16],[2233,10,1775,16],[2234,8,1776,12],[2235,8,1777,12],[2235,14,1777,18,"expiresWithMargin"],[2235,31,1777,35],[2235,34,1777,38],[2235,35,1777,39],[2235,36,1777,40,"_b"],[2235,38,1777,42],[2235,41,1777,45,"currentSession"],[2235,55,1777,59],[2235,56,1777,60,"expires_at"],[2235,66,1777,70],[2235,72,1777,76],[2235,76,1777,80],[2235,80,1777,84,"_b"],[2235,82,1777,86],[2235,87,1777,91],[2235,92,1777,96],[2235,93,1777,97],[2235,96,1777,100,"_b"],[2235,98,1777,102],[2235,101,1777,105,"Infinity"],[2235,109,1777,113],[2235,113,1777,117],[2235,117,1777,121],[2235,120,1777,124,"Date"],[2235,124,1777,128],[2235,125,1777,129,"now"],[2235,128,1777,132],[2235,129,1777,133],[2235,130,1777,134],[2235,133,1777,137,"EXPIRY_MARGIN_MS"],[2235,146,1777,153],[2235,147,1777,153,"EXPIRY_MARGIN_MS"],[2235,163,1777,153],[2236,8,1778,12],[2236,12,1778,16],[2236,13,1778,17,"_debug"],[2236,19,1778,23],[2236,20,1778,24,"debugName"],[2236,29,1778,33],[2236,31,1778,35],[2236,45,1778,49,"expiresWithMargin"],[2236,62,1778,66],[2236,65,1778,69],[2236,67,1778,71],[2236,70,1778,74],[2236,76,1778,80],[2236,103,1778,107,"EXPIRY_MARGIN_MS"],[2236,116,1778,123],[2236,117,1778,123,"EXPIRY_MARGIN_MS"],[2236,133,1778,123],[2236,136,1778,126],[2236,137,1778,127],[2237,8,1779,12],[2237,12,1779,16,"expiresWithMargin"],[2237,29,1779,33],[2237,31,1779,35],[2238,10,1780,16],[2238,14,1780,20],[2238,18,1780,24],[2238,19,1780,25,"autoRefreshToken"],[2238,35,1780,41],[2238,39,1780,45,"currentSession"],[2238,53,1780,59],[2238,54,1780,60,"refresh_token"],[2238,67,1780,73],[2238,69,1780,75],[2239,12,1781,20],[2239,18,1781,26],[2240,14,1781,28,"error"],[2241,12,1781,34],[2241,13,1781,35],[2241,16,1781,38],[2241,22,1781,44],[2241,26,1781,48],[2241,27,1781,49,"_callRefreshToken"],[2241,44,1781,66],[2241,45,1781,67,"currentSession"],[2241,59,1781,81],[2241,60,1781,82,"refresh_token"],[2241,73,1781,95],[2241,74,1781,96],[2242,12,1782,20],[2242,16,1782,24,"error"],[2242,21,1782,29],[2242,23,1782,31],[2243,14,1783,24,"console"],[2243,21,1783,31],[2243,22,1783,32,"error"],[2243,27,1783,37],[2243,28,1783,38,"error"],[2243,33,1783,43],[2243,34,1783,44],[2244,14,1784,24],[2244,18,1784,28],[2244,19,1784,29],[2244,23,1784,29,"isAuthRetryableFetchError"],[2244,33,1784,54],[2244,34,1784,54,"isAuthRetryableFetchError"],[2244,59,1784,54],[2244,61,1784,55,"error"],[2244,66,1784,60],[2244,67,1784,61],[2244,69,1784,63],[2245,16,1785,28],[2245,20,1785,32],[2245,21,1785,33,"_debug"],[2245,27,1785,39],[2245,28,1785,40,"debugName"],[2245,37,1785,49],[2245,39,1785,51],[2245,104,1785,116],[2245,106,1785,118,"error"],[2245,111,1785,123],[2245,112,1785,124],[2246,16,1786,28],[2246,22,1786,34],[2246,26,1786,38],[2246,27,1786,39,"_removeSession"],[2246,41,1786,53],[2246,42,1786,54],[2246,43,1786,55],[2247,14,1787,24],[2248,12,1788,20],[2249,10,1789,16],[2250,8,1790,12],[2250,9,1790,13],[2250,15,1791,17],[2250,19,1791,21,"currentSession"],[2250,33,1791,35],[2250,34,1791,36,"user"],[2250,38,1791,40],[2250,42,1792,16,"currentSession"],[2250,56,1792,30],[2250,57,1792,31,"user"],[2250,61,1792,35],[2250,62,1792,36,"__isUserNotAvailableProxy"],[2250,87,1792,61],[2250,92,1792,66],[2250,96,1792,70],[2250,98,1792,72],[2251,10,1793,16],[2252,10,1794,16],[2252,14,1794,20],[2253,12,1795,20],[2253,18,1795,26],[2254,14,1795,28,"data"],[2254,18,1795,32],[2255,14,1795,34,"error"],[2255,19,1795,39],[2255,21,1795,41,"userError"],[2256,12,1795,51],[2256,13,1795,52],[2256,16,1795,55],[2256,22,1795,61],[2256,26,1795,65],[2256,27,1795,66,"_getUser"],[2256,35,1795,74],[2256,36,1795,75,"currentSession"],[2256,50,1795,89],[2256,51,1795,90,"access_token"],[2256,63,1795,102],[2256,64,1795,103],[2257,12,1796,20],[2257,16,1796,24],[2257,17,1796,25,"userError"],[2257,26,1796,34],[2257,31,1796,39,"data"],[2257,35,1796,43],[2257,40,1796,48],[2257,44,1796,52],[2257,48,1796,56,"data"],[2257,52,1796,60],[2257,57,1796,65],[2257,62,1796,70],[2257,63,1796,71],[2257,66,1796,74],[2257,71,1796,79],[2257,72,1796,80],[2257,75,1796,83,"data"],[2257,79,1796,87],[2257,80,1796,88,"user"],[2257,84,1796,92],[2257,85,1796,93],[2257,87,1796,95],[2258,14,1797,24,"currentSession"],[2258,28,1797,38],[2258,29,1797,39,"user"],[2258,33,1797,43],[2258,36,1797,46,"data"],[2258,40,1797,50],[2258,41,1797,51,"user"],[2258,45,1797,55],[2259,14,1798,24],[2259,20,1798,30],[2259,24,1798,34],[2259,25,1798,35,"_saveSession"],[2259,37,1798,47],[2259,38,1798,48,"currentSession"],[2259,52,1798,62],[2259,53,1798,63],[2260,14,1799,24],[2260,20,1799,30],[2260,24,1799,34],[2260,25,1799,35,"_notifyAllSubscribers"],[2260,46,1799,56],[2260,47,1799,57],[2260,58,1799,68],[2260,60,1799,70,"currentSession"],[2260,74,1799,84],[2260,75,1799,85],[2261,12,1800,20],[2261,13,1800,21],[2261,19,1801,25],[2262,14,1802,24],[2262,18,1802,28],[2262,19,1802,29,"_debug"],[2262,25,1802,35],[2262,26,1802,36,"debugName"],[2262,35,1802,45],[2262,37,1802,47],[2262,95,1802,105],[2262,96,1802,106],[2263,12,1803,20],[2264,10,1804,16],[2264,11,1804,17],[2264,12,1805,16],[2264,19,1805,23,"getUserError"],[2264,31,1805,35],[2264,33,1805,37],[2265,12,1806,20,"console"],[2265,19,1806,27],[2265,20,1806,28,"error"],[2265,25,1806,33],[2265,26,1806,34],[2265,52,1806,60],[2265,54,1806,62,"getUserError"],[2265,66,1806,74],[2265,67,1806,75],[2266,12,1807,20],[2266,16,1807,24],[2266,17,1807,25,"_debug"],[2266,23,1807,31],[2266,24,1807,32,"debugName"],[2266,33,1807,41],[2266,35,1807,43],[2266,93,1807,101],[2266,95,1807,103,"getUserError"],[2266,107,1807,115],[2266,108,1807,116],[2267,10,1808,16],[2268,8,1809,12],[2268,9,1809,13],[2268,15,1810,17],[2269,10,1811,16],[2270,10,1812,16],[2271,10,1813,16],[2272,10,1814,16],[2272,16,1814,22],[2272,20,1814,26],[2272,21,1814,27,"_notifyAllSubscribers"],[2272,42,1814,48],[2272,43,1814,49],[2272,54,1814,60],[2272,56,1814,62,"currentSession"],[2272,70,1814,76],[2272,71,1814,77],[2273,8,1815,12],[2274,6,1816,8],[2274,7,1816,9],[2274,8,1817,8],[2274,15,1817,15,"err"],[2274,18,1817,18],[2274,20,1817,20],[2275,8,1818,12],[2275,12,1818,16],[2275,13,1818,17,"_debug"],[2275,19,1818,23],[2275,20,1818,24,"debugName"],[2275,29,1818,33],[2275,31,1818,35],[2275,38,1818,42],[2275,40,1818,44,"err"],[2275,43,1818,47],[2275,44,1818,48],[2276,8,1819,12,"console"],[2276,15,1819,19],[2276,16,1819,20,"error"],[2276,21,1819,25],[2276,22,1819,26,"err"],[2276,25,1819,29],[2276,26,1819,30],[2277,8,1820,12],[2278,6,1821,8],[2278,7,1821,9],[2278,16,1822,16],[2279,8,1823,12],[2279,12,1823,16],[2279,13,1823,17,"_debug"],[2279,19,1823,23],[2279,20,1823,24,"debugName"],[2279,29,1823,33],[2279,31,1823,35],[2279,36,1823,40],[2279,37,1823,41],[2280,6,1824,8],[2281,4,1825,4],[2282,4,1826,4],[2282,10,1826,10,"_callRefreshToken"],[2282,27,1826,27,"_callRefreshToken"],[2282,28,1826,28,"refreshToken"],[2282,40,1826,40],[2282,42,1826,42],[2283,6,1827,8],[2283,10,1827,12,"_a"],[2283,12,1827,14],[2283,14,1827,16,"_b"],[2283,16,1827,18],[2284,6,1828,8],[2284,10,1828,12],[2284,11,1828,13,"refreshToken"],[2284,23,1828,25],[2284,25,1828,27],[2285,8,1829,12],[2285,14,1829,18],[2285,18,1829,22,"AuthSessionMissingError"],[2285,28,1829,45],[2285,29,1829,45,"AuthSessionMissingError"],[2285,52,1829,45],[2285,53,1829,46],[2285,54,1829,47],[2286,6,1830,8],[2287,6,1831,8],[2288,6,1832,8],[2288,10,1832,12],[2288,14,1832,16],[2288,15,1832,17,"refreshingDeferred"],[2288,33,1832,35],[2288,35,1832,37],[2289,8,1833,12],[2289,15,1833,19],[2289,19,1833,23],[2289,20,1833,24,"refreshingDeferred"],[2289,38,1833,42],[2289,39,1833,43,"promise"],[2289,46,1833,50],[2290,6,1834,8],[2291,6,1835,8],[2291,12,1835,14,"debugName"],[2291,21,1835,23],[2291,24,1835,26],[2291,46,1835,48,"refreshToken"],[2291,58,1835,60],[2291,59,1835,61,"substring"],[2291,68,1835,70],[2291,69,1835,71],[2291,70,1835,72],[2291,72,1835,74],[2291,73,1835,75],[2291,74,1835,76],[2291,80,1835,82],[2292,6,1836,8],[2292,10,1836,12],[2292,11,1836,13,"_debug"],[2292,17,1836,19],[2292,18,1836,20,"debugName"],[2292,27,1836,29],[2292,29,1836,31],[2292,36,1836,38],[2292,37,1836,39],[2293,6,1837,8],[2293,10,1837,12],[2294,8,1838,12],[2294,12,1838,16],[2294,13,1838,17,"refreshingDeferred"],[2294,31,1838,35],[2294,34,1838,38],[2294,38,1838,42,"Deferred"],[2294,49,1838,50],[2294,50,1838,50,"Deferred"],[2294,58,1838,50],[2294,59,1838,51],[2294,60,1838,52],[2295,8,1839,12],[2295,14,1839,18],[2296,10,1839,20,"data"],[2296,14,1839,24],[2297,10,1839,26,"error"],[2298,8,1839,32],[2298,9,1839,33],[2298,12,1839,36],[2298,18,1839,42],[2298,22,1839,46],[2298,23,1839,47,"_refreshAccessToken"],[2298,42,1839,66],[2298,43,1839,67,"refreshToken"],[2298,55,1839,79],[2298,56,1839,80],[2299,8,1840,12],[2299,12,1840,16,"error"],[2299,17,1840,21],[2299,19,1841,16],[2299,25,1841,22,"error"],[2299,30,1841,27],[2300,8,1842,12],[2300,12,1842,16],[2300,13,1842,17,"data"],[2300,17,1842,21],[2300,18,1842,22,"session"],[2300,25,1842,29],[2300,27,1843,16],[2300,33,1843,22],[2300,37,1843,26,"AuthSessionMissingError"],[2300,47,1843,49],[2300,48,1843,49,"AuthSessionMissingError"],[2300,71,1843,49],[2300,72,1843,50],[2300,73,1843,51],[2301,8,1844,12],[2301,14,1844,18],[2301,18,1844,22],[2301,19,1844,23,"_saveSession"],[2301,31,1844,35],[2301,32,1844,36,"data"],[2301,36,1844,40],[2301,37,1844,41,"session"],[2301,44,1844,48],[2301,45,1844,49],[2302,8,1845,12],[2302,14,1845,18],[2302,18,1845,22],[2302,19,1845,23,"_notifyAllSubscribers"],[2302,40,1845,44],[2302,41,1845,45],[2302,58,1845,62],[2302,60,1845,64,"data"],[2302,64,1845,68],[2302,65,1845,69,"session"],[2302,72,1845,76],[2302,73,1845,77],[2303,8,1846,12],[2303,14,1846,18,"result"],[2303,20,1846,24],[2303,23,1846,27],[2304,10,1846,29,"session"],[2304,17,1846,36],[2304,19,1846,38,"data"],[2304,23,1846,42],[2304,24,1846,43,"session"],[2304,31,1846,50],[2305,10,1846,52,"error"],[2305,15,1846,57],[2305,17,1846,59],[2306,8,1846,64],[2306,9,1846,65],[2307,8,1847,12],[2307,12,1847,16],[2307,13,1847,17,"refreshingDeferred"],[2307,31,1847,35],[2307,32,1847,36,"resolve"],[2307,39,1847,43],[2307,40,1847,44,"result"],[2307,46,1847,50],[2307,47,1847,51],[2308,8,1848,12],[2308,15,1848,19,"result"],[2308,21,1848,25],[2309,6,1849,8],[2309,7,1849,9],[2309,8,1850,8],[2309,15,1850,15,"error"],[2309,20,1850,20],[2309,22,1850,22],[2310,8,1851,12],[2310,12,1851,16],[2310,13,1851,17,"_debug"],[2310,19,1851,23],[2310,20,1851,24,"debugName"],[2310,29,1851,33],[2310,31,1851,35],[2310,38,1851,42],[2310,40,1851,44,"error"],[2310,45,1851,49],[2310,46,1851,50],[2311,8,1852,12],[2311,12,1852,16],[2311,16,1852,16,"isAuthError"],[2311,26,1852,27],[2311,27,1852,27,"isAuthError"],[2311,38,1852,27],[2311,40,1852,28,"error"],[2311,45,1852,33],[2311,46,1852,34],[2311,48,1852,36],[2312,10,1853,16],[2312,16,1853,22,"result"],[2312,22,1853,28],[2312,25,1853,31],[2313,12,1853,33,"session"],[2313,19,1853,40],[2313,21,1853,42],[2313,25,1853,46],[2314,12,1853,48,"error"],[2315,10,1853,54],[2315,11,1853,55],[2316,10,1854,16],[2316,14,1854,20],[2316,15,1854,21],[2316,19,1854,21,"isAuthRetryableFetchError"],[2316,29,1854,46],[2316,30,1854,46,"isAuthRetryableFetchError"],[2316,55,1854,46],[2316,57,1854,47,"error"],[2316,62,1854,52],[2316,63,1854,53],[2316,65,1854,55],[2317,12,1855,20],[2317,18,1855,26],[2317,22,1855,30],[2317,23,1855,31,"_removeSession"],[2317,37,1855,45],[2317,38,1855,46],[2317,39,1855,47],[2318,10,1856,16],[2319,10,1857,16],[2319,11,1857,17,"_a"],[2319,13,1857,19],[2319,16,1857,22],[2319,20,1857,26],[2319,21,1857,27,"refreshingDeferred"],[2319,39,1857,45],[2319,45,1857,51],[2319,49,1857,55],[2319,53,1857,59,"_a"],[2319,55,1857,61],[2319,60,1857,66],[2319,65,1857,71],[2319,66,1857,72],[2319,69,1857,75],[2319,74,1857,80],[2319,75,1857,81],[2319,78,1857,84,"_a"],[2319,80,1857,86],[2319,81,1857,87,"resolve"],[2319,88,1857,94],[2319,89,1857,95,"result"],[2319,95,1857,101],[2319,96,1857,102],[2320,10,1858,16],[2320,17,1858,23,"result"],[2320,23,1858,29],[2321,8,1859,12],[2322,8,1860,12],[2322,9,1860,13,"_b"],[2322,11,1860,15],[2322,14,1860,18],[2322,18,1860,22],[2322,19,1860,23,"refreshingDeferred"],[2322,37,1860,41],[2322,43,1860,47],[2322,47,1860,51],[2322,51,1860,55,"_b"],[2322,53,1860,57],[2322,58,1860,62],[2322,63,1860,67],[2322,64,1860,68],[2322,67,1860,71],[2322,72,1860,76],[2322,73,1860,77],[2322,76,1860,80,"_b"],[2322,78,1860,82],[2322,79,1860,83,"reject"],[2322,85,1860,89],[2322,86,1860,90,"error"],[2322,91,1860,95],[2322,92,1860,96],[2323,8,1861,12],[2323,14,1861,18,"error"],[2323,19,1861,23],[2324,6,1862,8],[2324,7,1862,9],[2324,16,1863,16],[2325,8,1864,12],[2325,12,1864,16],[2325,13,1864,17,"refreshingDeferred"],[2325,31,1864,35],[2325,34,1864,38],[2325,38,1864,42],[2326,8,1865,12],[2326,12,1865,16],[2326,13,1865,17,"_debug"],[2326,19,1865,23],[2326,20,1865,24,"debugName"],[2326,29,1865,33],[2326,31,1865,35],[2326,36,1865,40],[2326,37,1865,41],[2327,6,1866,8],[2328,4,1867,4],[2329,4,1868,4],[2329,10,1868,10,"_notifyAllSubscribers"],[2329,31,1868,31,"_notifyAllSubscribers"],[2329,32,1868,32,"event"],[2329,37,1868,37],[2329,39,1868,39,"session"],[2329,46,1868,46],[2329,48,1868,48,"broadcast"],[2329,57,1868,57],[2329,60,1868,60],[2329,64,1868,64],[2329,66,1868,66],[2330,6,1869,8],[2330,12,1869,14,"debugName"],[2330,21,1869,23],[2330,24,1869,26],[2330,50,1869,52,"event"],[2330,55,1869,57],[2330,58,1869,60],[2331,6,1870,8],[2331,10,1870,12],[2331,11,1870,13,"_debug"],[2331,17,1870,19],[2331,18,1870,20,"debugName"],[2331,27,1870,29],[2331,29,1870,31],[2331,36,1870,38],[2331,38,1870,40,"session"],[2331,45,1870,47],[2331,47,1870,49],[2331,62,1870,64,"broadcast"],[2331,71,1870,73],[2331,73,1870,75],[2331,74,1870,76],[2332,6,1871,8],[2332,10,1871,12],[2333,8,1872,12],[2333,12,1872,16],[2333,16,1872,20],[2333,17,1872,21,"broadcastChannel"],[2333,33,1872,37],[2333,37,1872,41,"broadcast"],[2333,46,1872,50],[2333,48,1872,52],[2334,10,1873,16],[2334,14,1873,20],[2334,15,1873,21,"broadcastChannel"],[2334,31,1873,37],[2334,32,1873,38,"postMessage"],[2334,43,1873,49],[2334,44,1873,50],[2335,12,1873,52,"event"],[2335,17,1873,57],[2336,12,1873,59,"session"],[2337,10,1873,67],[2337,11,1873,68],[2337,12,1873,69],[2338,8,1874,12],[2339,8,1875,12],[2339,14,1875,18,"errors"],[2339,20,1875,24],[2339,23,1875,27],[2339,25,1875,29],[2340,8,1876,12],[2340,14,1876,18,"promises"],[2340,22,1876,26],[2340,25,1876,29,"Array"],[2340,30,1876,34],[2340,31,1876,35,"from"],[2340,35,1876,39],[2340,36,1876,40],[2340,40,1876,44],[2340,41,1876,45,"stateChangeEmitters"],[2340,60,1876,64],[2340,61,1876,65,"values"],[2340,67,1876,71],[2340,68,1876,72],[2340,69,1876,73],[2340,70,1876,74],[2340,71,1876,75,"map"],[2340,74,1876,78],[2340,75,1876,79],[2340,81,1876,86,"x"],[2340,82,1876,87],[2340,86,1876,92],[2341,10,1877,16],[2341,14,1877,20],[2342,12,1878,20],[2342,18,1878,26,"x"],[2342,19,1878,27],[2342,20,1878,28,"callback"],[2342,28,1878,36],[2342,29,1878,37,"event"],[2342,34,1878,42],[2342,36,1878,44,"session"],[2342,43,1878,51],[2342,44,1878,52],[2343,10,1879,16],[2343,11,1879,17],[2343,12,1880,16],[2343,19,1880,23,"e"],[2343,20,1880,24],[2343,22,1880,26],[2344,12,1881,20,"errors"],[2344,18,1881,26],[2344,19,1881,27,"push"],[2344,23,1881,31],[2344,24,1881,32,"e"],[2344,25,1881,33],[2344,26,1881,34],[2345,10,1882,16],[2346,8,1883,12],[2346,9,1883,13],[2346,10,1883,14],[2347,8,1884,12],[2347,14,1884,18,"Promise"],[2347,21,1884,25],[2347,22,1884,26,"all"],[2347,25,1884,29],[2347,26,1884,30,"promises"],[2347,34,1884,38],[2347,35,1884,39],[2348,8,1885,12],[2348,12,1885,16,"errors"],[2348,18,1885,22],[2348,19,1885,23,"length"],[2348,25,1885,29],[2348,28,1885,32],[2348,29,1885,33],[2348,31,1885,35],[2349,10,1886,16],[2349,15,1886,21],[2349,19,1886,25,"i"],[2349,20,1886,26],[2349,23,1886,29],[2349,24,1886,30],[2349,26,1886,32,"i"],[2349,27,1886,33],[2349,30,1886,36,"errors"],[2349,36,1886,42],[2349,37,1886,43,"length"],[2349,43,1886,49],[2349,45,1886,51,"i"],[2349,46,1886,52],[2349,50,1886,56],[2349,51,1886,57],[2349,53,1886,59],[2350,12,1887,20,"console"],[2350,19,1887,27],[2350,20,1887,28,"error"],[2350,25,1887,33],[2350,26,1887,34,"errors"],[2350,32,1887,40],[2350,33,1887,41,"i"],[2350,34,1887,42],[2350,35,1887,43],[2350,36,1887,44],[2351,10,1888,16],[2352,10,1889,16],[2352,16,1889,22,"errors"],[2352,22,1889,28],[2352,23,1889,29],[2352,24,1889,30],[2352,25,1889,31],[2353,8,1890,12],[2354,6,1891,8],[2354,7,1891,9],[2354,16,1892,16],[2355,8,1893,12],[2355,12,1893,16],[2355,13,1893,17,"_debug"],[2355,19,1893,23],[2355,20,1893,24,"debugName"],[2355,29,1893,33],[2355,31,1893,35],[2355,36,1893,40],[2355,37,1893,41],[2356,6,1894,8],[2357,4,1895,4],[2358,4,1896,4],[2359,0,1897,0],[2360,0,1898,0],[2361,0,1899,0],[2362,4,1900,4],[2362,10,1900,10,"_saveSession"],[2362,22,1900,22,"_saveSession"],[2362,23,1900,23,"session"],[2362,30,1900,30],[2362,32,1900,32],[2363,6,1901,8],[2363,10,1901,12],[2363,11,1901,13,"_debug"],[2363,17,1901,19],[2363,18,1901,20],[2363,35,1901,37],[2363,37,1901,39,"session"],[2363,44,1901,46],[2363,45,1901,47],[2364,6,1902,8],[2365,6,1903,8],[2366,6,1904,8],[2366,10,1904,12],[2366,11,1904,13,"suppressGetSessionWarning"],[2366,36,1904,38],[2366,39,1904,41],[2366,43,1904,45],[2367,6,1905,8],[2368,6,1906,8],[2368,12,1906,14,"sessionToProcess"],[2368,28,1906,30],[2368,31,1906,33,"Object"],[2368,37,1906,39],[2368,38,1906,40,"assign"],[2368,44,1906,46],[2368,45,1906,47],[2368,46,1906,48],[2368,47,1906,49],[2368,49,1906,51,"session"],[2368,56,1906,58],[2368,57,1906,59],[2369,6,1907,8],[2369,12,1907,14,"userIsProxy"],[2369,23,1907,25],[2369,26,1907,28,"sessionToProcess"],[2369,42,1907,44],[2369,43,1907,45,"user"],[2369,47,1907,49],[2369,51,1907,53,"sessionToProcess"],[2369,67,1907,69],[2369,68,1907,70,"user"],[2369,72,1907,74],[2369,73,1907,75,"__isUserNotAvailableProxy"],[2369,98,1907,100],[2369,103,1907,105],[2369,107,1907,109],[2370,6,1908,8],[2370,10,1908,12],[2370,14,1908,16],[2370,15,1908,17,"userStorage"],[2370,26,1908,28],[2370,28,1908,30],[2371,8,1909,12],[2371,12,1909,16],[2371,13,1909,17,"userIsProxy"],[2371,24,1909,28],[2371,28,1909,32,"sessionToProcess"],[2371,44,1909,48],[2371,45,1909,49,"user"],[2371,49,1909,53],[2371,51,1909,55],[2372,10,1910,16],[2373,10,1911,16],[2373,16,1911,22],[2373,20,1911,22,"setItemAsync"],[2373,31,1911,34],[2373,32,1911,34,"setItemAsync"],[2373,44,1911,34],[2373,46,1911,35],[2373,50,1911,39],[2373,51,1911,40,"userStorage"],[2373,62,1911,51],[2373,64,1911,53],[2373,68,1911,57],[2373,69,1911,58,"storageKey"],[2373,79,1911,68],[2373,82,1911,71],[2373,89,1911,78],[2373,91,1911,80],[2374,12,1912,20,"user"],[2374,16,1912,24],[2374,18,1912,26,"sessionToProcess"],[2374,34,1912,42],[2374,35,1912,43,"user"],[2375,10,1913,16],[2375,11,1913,17],[2375,12,1913,18],[2376,8,1914,12],[2376,9,1914,13],[2376,15,1915,17],[2376,19,1915,21,"userIsProxy"],[2376,30,1915,32],[2376,32,1915,34],[2377,10,1916,16],[2378,10,1917,16],[2379,10,1918,16],[2380,10,1919,16],[2381,8,1919,16],[2382,8,1921,12],[2383,8,1922,12],[2384,8,1923,12],[2384,14,1923,18,"mainSessionData"],[2384,29,1923,33],[2384,32,1923,36,"Object"],[2384,38,1923,42],[2384,39,1923,43,"assign"],[2384,45,1923,49],[2384,46,1923,50],[2384,47,1923,51],[2384,48,1923,52],[2384,50,1923,54,"sessionToProcess"],[2384,66,1923,70],[2384,67,1923,71],[2385,8,1924,12],[2385,15,1924,19,"mainSessionData"],[2385,30,1924,34],[2385,31,1924,35,"user"],[2385,35,1924,39],[2385,36,1924,40],[2385,37,1924,41],[2386,8,1925,12],[2386,14,1925,18,"clonedMainSessionData"],[2386,35,1925,39],[2386,38,1925,42],[2386,42,1925,42,"deepClone"],[2386,53,1925,51],[2386,54,1925,51,"deepClone"],[2386,63,1925,51],[2386,65,1925,52,"mainSessionData"],[2386,80,1925,67],[2386,81,1925,68],[2387,8,1926,12],[2387,14,1926,18],[2387,18,1926,18,"setItemAsync"],[2387,29,1926,30],[2387,30,1926,30,"setItemAsync"],[2387,42,1926,30],[2387,44,1926,31],[2387,48,1926,35],[2387,49,1926,36,"storage"],[2387,56,1926,43],[2387,58,1926,45],[2387,62,1926,49],[2387,63,1926,50,"storageKey"],[2387,73,1926,60],[2387,75,1926,62,"clonedMainSessionData"],[2387,96,1926,83],[2387,97,1926,84],[2388,6,1927,8],[2388,7,1927,9],[2388,13,1928,13],[2389,8,1929,12],[2390,8,1930,12],[2391,8,1931,12],[2392,8,1932,12],[2392,14,1932,18,"clonedSession"],[2392,27,1932,31],[2392,30,1932,34],[2392,34,1932,34,"deepClone"],[2392,45,1932,43],[2392,46,1932,43,"deepClone"],[2392,55,1932,43],[2392,57,1932,44,"sessionToProcess"],[2392,73,1932,60],[2392,74,1932,61],[2392,75,1932,62],[2392,76,1932,63],[2393,8,1933,12],[2393,14,1933,18],[2393,18,1933,18,"setItemAsync"],[2393,29,1933,30],[2393,30,1933,30,"setItemAsync"],[2393,42,1933,30],[2393,44,1933,31],[2393,48,1933,35],[2393,49,1933,36,"storage"],[2393,56,1933,43],[2393,58,1933,45],[2393,62,1933,49],[2393,63,1933,50,"storageKey"],[2393,73,1933,60],[2393,75,1933,62,"clonedSession"],[2393,88,1933,75],[2393,89,1933,76],[2394,6,1934,8],[2395,4,1935,4],[2396,4,1936,4],[2396,10,1936,10,"_removeSession"],[2396,24,1936,24,"_removeSession"],[2396,25,1936,24],[2396,27,1936,27],[2397,6,1937,8],[2397,10,1937,12],[2397,11,1937,13,"_debug"],[2397,17,1937,19],[2397,18,1937,20],[2397,37,1937,39],[2397,38,1937,40],[2398,6,1938,8],[2398,12,1938,14],[2398,16,1938,14,"removeItemAsync"],[2398,27,1938,29],[2398,28,1938,29,"removeItemAsync"],[2398,43,1938,29],[2398,45,1938,30],[2398,49,1938,34],[2398,50,1938,35,"storage"],[2398,57,1938,42],[2398,59,1938,44],[2398,63,1938,48],[2398,64,1938,49,"storageKey"],[2398,74,1938,59],[2398,75,1938,60],[2399,6,1939,8],[2399,12,1939,14],[2399,16,1939,14,"removeItemAsync"],[2399,27,1939,29],[2399,28,1939,29,"removeItemAsync"],[2399,43,1939,29],[2399,45,1939,30],[2399,49,1939,34],[2399,50,1939,35,"storage"],[2399,57,1939,42],[2399,59,1939,44],[2399,63,1939,48],[2399,64,1939,49,"storageKey"],[2399,74,1939,59],[2399,77,1939,62],[2399,93,1939,78],[2399,94,1939,79],[2400,6,1940,8],[2400,12,1940,14],[2400,16,1940,14,"removeItemAsync"],[2400,27,1940,29],[2400,28,1940,29,"removeItemAsync"],[2400,43,1940,29],[2400,45,1940,30],[2400,49,1940,34],[2400,50,1940,35,"storage"],[2400,57,1940,42],[2400,59,1940,44],[2400,63,1940,48],[2400,64,1940,49,"storageKey"],[2400,74,1940,59],[2400,77,1940,62],[2400,84,1940,69],[2400,85,1940,70],[2401,6,1941,8],[2401,10,1941,12],[2401,14,1941,16],[2401,15,1941,17,"userStorage"],[2401,26,1941,28],[2401,28,1941,30],[2402,8,1942,12],[2402,14,1942,18],[2402,18,1942,18,"removeItemAsync"],[2402,29,1942,33],[2402,30,1942,33,"removeItemAsync"],[2402,45,1942,33],[2402,47,1942,34],[2402,51,1942,38],[2402,52,1942,39,"userStorage"],[2402,63,1942,50],[2402,65,1942,52],[2402,69,1942,56],[2402,70,1942,57,"storageKey"],[2402,80,1942,67],[2402,83,1942,70],[2402,90,1942,77],[2402,91,1942,78],[2403,6,1943,8],[2404,6,1944,8],[2404,12,1944,14],[2404,16,1944,18],[2404,17,1944,19,"_notifyAllSubscribers"],[2404,38,1944,40],[2404,39,1944,41],[2404,51,1944,53],[2404,53,1944,55],[2404,57,1944,59],[2404,58,1944,60],[2405,4,1945,4],[2406,4,1946,4],[2407,0,1947,0],[2408,0,1948,0],[2409,0,1949,0],[2410,0,1950,0],[2411,0,1951,0],[2412,4,1952,4,"_removeVisibilityChangedCallback"],[2412,36,1952,36,"_removeVisibilityChangedCallback"],[2412,37,1952,36],[2412,39,1952,39],[2413,6,1953,8],[2413,10,1953,12],[2413,11,1953,13,"_debug"],[2413,17,1953,19],[2413,18,1953,20],[2413,55,1953,57],[2413,56,1953,58],[2414,6,1954,8],[2414,12,1954,14,"callback"],[2414,20,1954,22],[2414,23,1954,25],[2414,27,1954,29],[2414,28,1954,30,"visibilityChangedCallback"],[2414,53,1954,55],[2415,6,1955,8],[2415,10,1955,12],[2415,11,1955,13,"visibilityChangedCallback"],[2415,36,1955,38],[2415,39,1955,41],[2415,43,1955,45],[2416,6,1956,8],[2416,10,1956,12],[2417,8,1957,12],[2417,12,1957,16,"callback"],[2417,20,1957,24],[2417,24,1957,28],[2417,28,1957,28,"isBrowser"],[2417,39,1957,37],[2417,40,1957,37,"isBrowser"],[2417,49,1957,37],[2417,51,1957,38],[2417,52,1957,39],[2417,57,1957,44,"window"],[2417,63,1957,50],[2417,68,1957,55],[2417,72,1957,59],[2417,76,1957,63,"window"],[2417,82,1957,69],[2417,87,1957,74],[2417,92,1957,79],[2417,93,1957,80],[2417,96,1957,83],[2417,101,1957,88],[2417,102,1957,89],[2417,105,1957,92,"window"],[2417,111,1957,98],[2417,112,1957,99,"removeEventListener"],[2417,131,1957,118],[2417,132,1957,119],[2417,134,1957,121],[2418,10,1958,16,"window"],[2418,16,1958,22],[2418,17,1958,23,"removeEventListener"],[2418,36,1958,42],[2418,37,1958,43],[2418,55,1958,61],[2418,57,1958,63,"callback"],[2418,65,1958,71],[2418,66,1958,72],[2419,8,1959,12],[2420,6,1960,8],[2420,7,1960,9],[2420,8,1961,8],[2420,15,1961,15,"e"],[2420,16,1961,16],[2420,18,1961,18],[2421,8,1962,12,"console"],[2421,15,1962,19],[2421,16,1962,20,"error"],[2421,21,1962,25],[2421,22,1962,26],[2421,65,1962,69],[2421,67,1962,71,"e"],[2421,68,1962,72],[2421,69,1962,73],[2422,6,1963,8],[2423,4,1964,4],[2424,4,1965,4],[2425,0,1966,0],[2426,0,1967,0],[2427,0,1968,0],[2428,4,1969,4],[2428,10,1969,10,"_startAutoRefresh"],[2428,27,1969,27,"_startAutoRefresh"],[2428,28,1969,27],[2428,30,1969,30],[2429,6,1970,8],[2429,12,1970,14],[2429,16,1970,18],[2429,17,1970,19,"_stopAutoRefresh"],[2429,33,1970,35],[2429,34,1970,36],[2429,35,1970,37],[2430,6,1971,8],[2430,10,1971,12],[2430,11,1971,13,"_debug"],[2430,17,1971,19],[2430,18,1971,20],[2430,40,1971,42],[2430,41,1971,43],[2431,6,1972,8],[2431,12,1972,14,"ticker"],[2431,18,1972,20],[2431,21,1972,23,"setInterval"],[2431,32,1972,34],[2431,33,1972,35],[2431,39,1972,41],[2431,43,1972,45],[2431,44,1972,46,"_autoRefreshTokenTick"],[2431,65,1972,67],[2431,66,1972,68],[2431,67,1972,69],[2431,69,1972,71,"AUTO_REFRESH_TICK_DURATION_MS"],[2431,82,1972,100],[2431,83,1972,100,"AUTO_REFRESH_TICK_DURATION_MS"],[2431,112,1972,100],[2431,113,1972,101],[2432,6,1973,8],[2432,10,1973,12],[2432,11,1973,13,"autoRefreshTicker"],[2432,28,1973,30],[2432,31,1973,33,"ticker"],[2432,37,1973,39],[2433,6,1974,8],[2433,10,1974,12,"ticker"],[2433,16,1974,18],[2433,20,1974,22],[2433,27,1974,29,"ticker"],[2433,33,1974,35],[2433,38,1974,40],[2433,46,1974,48],[2433,50,1974,52],[2433,57,1974,59,"ticker"],[2433,63,1974,65],[2433,64,1974,66,"unref"],[2433,69,1974,71],[2433,74,1974,76],[2433,84,1974,86],[2433,86,1974,88],[2434,8,1975,12],[2435,8,1976,12],[2436,8,1977,12],[2437,8,1978,12],[2438,8,1979,12],[2439,8,1980,12],[2440,8,1981,12,"ticker"],[2440,14,1981,18],[2440,15,1981,19,"unref"],[2440,20,1981,24],[2440,21,1981,25],[2440,22,1981,26],[2441,8,1982,12],[2442,6,1983,8],[2442,7,1983,9],[2442,13,1984,13],[2442,17,1984,17],[2442,24,1984,24,"Deno"],[2442,28,1984,28],[2442,33,1984,33],[2442,44,1984,44],[2442,48,1984,48],[2442,55,1984,55,"Deno"],[2442,59,1984,59],[2442,60,1984,60,"unrefTimer"],[2442,70,1984,70],[2442,75,1984,75],[2442,85,1984,85],[2442,87,1984,87],[2443,8,1985,12],[2444,8,1986,12],[2445,8,1987,12],[2446,8,1988,12,"Deno"],[2446,12,1988,16],[2446,13,1988,17,"unrefTimer"],[2446,23,1988,27],[2446,24,1988,28,"ticker"],[2446,30,1988,34],[2446,31,1988,35],[2447,6,1989,8],[2448,6,1990,8],[2449,6,1991,8],[2450,6,1992,8],[2451,6,1993,8,"setTimeout"],[2451,16,1993,18],[2451,17,1993,19],[2451,29,1993,31],[2452,8,1994,12],[2452,14,1994,18],[2452,18,1994,22],[2452,19,1994,23,"initializePromise"],[2452,36,1994,40],[2453,8,1995,12],[2453,14,1995,18],[2453,18,1995,22],[2453,19,1995,23,"_autoRefreshTokenTick"],[2453,40,1995,44],[2453,41,1995,45],[2453,42,1995,46],[2454,6,1996,8],[2454,7,1996,9],[2454,9,1996,11],[2454,10,1996,12],[2454,11,1996,13],[2455,4,1997,4],[2456,4,1998,4],[2457,0,1999,0],[2458,0,2000,0],[2459,0,2001,0],[2460,4,2002,4],[2460,10,2002,10,"_stopAutoRefresh"],[2460,26,2002,26,"_stopAutoRefresh"],[2460,27,2002,26],[2460,29,2002,29],[2461,6,2003,8],[2461,10,2003,12],[2461,11,2003,13,"_debug"],[2461,17,2003,19],[2461,18,2003,20],[2461,39,2003,41],[2461,40,2003,42],[2462,6,2004,8],[2462,12,2004,14,"ticker"],[2462,18,2004,20],[2462,21,2004,23],[2462,25,2004,27],[2462,26,2004,28,"autoRefreshTicker"],[2462,43,2004,45],[2463,6,2005,8],[2463,10,2005,12],[2463,11,2005,13,"autoRefreshTicker"],[2463,28,2005,30],[2463,31,2005,33],[2463,35,2005,37],[2464,6,2006,8],[2464,10,2006,12,"ticker"],[2464,16,2006,18],[2464,18,2006,20],[2465,8,2007,12,"clearInterval"],[2465,21,2007,25],[2465,22,2007,26,"ticker"],[2465,28,2007,32],[2465,29,2007,33],[2466,6,2008,8],[2467,4,2009,4],[2468,4,2010,4],[2469,0,2011,0],[2470,0,2012,0],[2471,0,2013,0],[2472,0,2014,0],[2473,0,2015,0],[2474,0,2016,0],[2475,0,2017,0],[2476,0,2018,0],[2477,0,2019,0],[2478,0,2020,0],[2479,0,2021,0],[2480,0,2022,0],[2481,0,2023,0],[2482,0,2024,0],[2483,0,2025,0],[2484,0,2026,0],[2485,0,2027,0],[2486,0,2028,0],[2487,0,2029,0],[2488,0,2030,0],[2489,0,2031,0],[2490,4,2032,4],[2490,10,2032,10,"startAutoRefresh"],[2490,26,2032,26,"startAutoRefresh"],[2490,27,2032,26],[2490,29,2032,29],[2491,6,2033,8],[2491,10,2033,12],[2491,11,2033,13,"_removeVisibilityChangedCallback"],[2491,43,2033,45],[2491,44,2033,46],[2491,45,2033,47],[2492,6,2034,8],[2492,12,2034,14],[2492,16,2034,18],[2492,17,2034,19,"_startAutoRefresh"],[2492,34,2034,36],[2492,35,2034,37],[2492,36,2034,38],[2493,4,2035,4],[2494,4,2036,4],[2495,0,2037,0],[2496,0,2038,0],[2497,0,2039,0],[2498,0,2040,0],[2499,0,2041,0],[2500,0,2042,0],[2501,0,2043,0],[2502,4,2044,4],[2502,10,2044,10,"stopAutoRefresh"],[2502,25,2044,25,"stopAutoRefresh"],[2502,26,2044,25],[2502,28,2044,28],[2503,6,2045,8],[2503,10,2045,12],[2503,11,2045,13,"_removeVisibilityChangedCallback"],[2503,43,2045,45],[2503,44,2045,46],[2503,45,2045,47],[2504,6,2046,8],[2504,12,2046,14],[2504,16,2046,18],[2504,17,2046,19,"_stopAutoRefresh"],[2504,33,2046,35],[2504,34,2046,36],[2504,35,2046,37],[2505,4,2047,4],[2506,4,2048,4],[2507,0,2049,0],[2508,0,2050,0],[2509,4,2051,4],[2509,10,2051,10,"_autoRefreshTokenTick"],[2509,31,2051,31,"_autoRefreshTokenTick"],[2509,32,2051,31],[2509,34,2051,34],[2510,6,2052,8],[2510,10,2052,12],[2510,11,2052,13,"_debug"],[2510,17,2052,19],[2510,18,2052,20],[2510,44,2052,46],[2510,46,2052,48],[2510,53,2052,55],[2510,54,2052,56],[2511,6,2053,8],[2511,10,2053,12],[2512,8,2054,12],[2512,14,2054,18],[2512,18,2054,22],[2512,19,2054,23,"_acquireLock"],[2512,31,2054,35],[2512,32,2054,36],[2512,33,2054,37],[2512,35,2054,39],[2512,47,2054,51],[2513,10,2055,16],[2513,14,2055,20],[2514,12,2056,20],[2514,18,2056,26,"now"],[2514,21,2056,29],[2514,24,2056,32,"Date"],[2514,28,2056,36],[2514,29,2056,37,"now"],[2514,32,2056,40],[2514,33,2056,41],[2514,34,2056,42],[2515,12,2057,20],[2515,16,2057,24],[2516,14,2058,24],[2516,21,2058,31],[2516,27,2058,37],[2516,31,2058,41],[2516,32,2058,42,"_useSession"],[2516,43,2058,53],[2516,44,2058,54],[2516,50,2058,61,"result"],[2516,56,2058,67],[2516,60,2058,72],[2517,16,2059,28],[2517,22,2059,34],[2518,18,2059,36,"data"],[2518,22,2059,40],[2518,24,2059,42],[2519,20,2059,44,"session"],[2520,18,2059,52],[2521,16,2059,55],[2521,17,2059,56],[2521,20,2059,59,"result"],[2521,26,2059,65],[2522,16,2060,28],[2522,20,2060,32],[2522,21,2060,33,"session"],[2522,28,2060,40],[2522,32,2060,44],[2522,33,2060,45,"session"],[2522,40,2060,52],[2522,41,2060,53,"refresh_token"],[2522,54,2060,66],[2522,58,2060,70],[2522,59,2060,71,"session"],[2522,66,2060,78],[2522,67,2060,79,"expires_at"],[2522,77,2060,89],[2522,79,2060,91],[2523,18,2061,32],[2523,22,2061,36],[2523,23,2061,37,"_debug"],[2523,29,2061,43],[2523,30,2061,44],[2523,56,2061,70],[2523,58,2061,72],[2523,70,2061,84],[2523,71,2061,85],[2524,18,2062,32],[2525,16,2063,28],[2526,16,2064,28],[2527,16,2065,28],[2527,22,2065,34,"expiresInTicks"],[2527,36,2065,48],[2527,39,2065,51,"Math"],[2527,43,2065,55],[2527,44,2065,56,"floor"],[2527,49,2065,61],[2527,50,2065,62],[2527,51,2065,63,"session"],[2527,58,2065,70],[2527,59,2065,71,"expires_at"],[2527,69,2065,81],[2527,72,2065,84],[2527,76,2065,88],[2527,79,2065,91,"now"],[2527,82,2065,94],[2527,86,2065,98,"AUTO_REFRESH_TICK_DURATION_MS"],[2527,99,2065,127],[2527,100,2065,127,"AUTO_REFRESH_TICK_DURATION_MS"],[2527,129,2065,127],[2527,130,2065,128],[2528,16,2066,28],[2528,20,2066,32],[2528,21,2066,33,"_debug"],[2528,27,2066,39],[2528,28,2066,40],[2528,54,2066,66],[2528,56,2066,68],[2528,83,2066,95,"expiresInTicks"],[2528,97,2066,109],[2528,121,2066,133,"AUTO_REFRESH_TICK_DURATION_MS"],[2528,134,2066,162],[2528,135,2066,162,"AUTO_REFRESH_TICK_DURATION_MS"],[2528,164,2066,162],[2528,192,2066,190,"AUTO_REFRESH_TICK_THRESHOLD"],[2528,205,2066,217],[2528,206,2066,217,"AUTO_REFRESH_TICK_THRESHOLD"],[2528,233,2066,217],[2528,241,2066,225],[2528,242,2066,226],[2529,16,2067,28],[2529,20,2067,32,"expiresInTicks"],[2529,34,2067,46],[2529,38,2067,50,"AUTO_REFRESH_TICK_THRESHOLD"],[2529,51,2067,77],[2529,52,2067,77,"AUTO_REFRESH_TICK_THRESHOLD"],[2529,79,2067,77],[2529,81,2067,79],[2530,18,2068,32],[2530,24,2068,38],[2530,28,2068,42],[2530,29,2068,43,"_callRefreshToken"],[2530,46,2068,60],[2530,47,2068,61,"session"],[2530,54,2068,68],[2530,55,2068,69,"refresh_token"],[2530,68,2068,82],[2530,69,2068,83],[2531,16,2069,28],[2532,14,2070,24],[2532,15,2070,25],[2532,16,2070,26],[2533,12,2071,20],[2533,13,2071,21],[2533,14,2072,20],[2533,21,2072,27,"e"],[2533,22,2072,28],[2533,24,2072,30],[2534,14,2073,24,"console"],[2534,21,2073,31],[2534,22,2073,32,"error"],[2534,27,2073,37],[2534,28,2073,38],[2534,100,2073,110],[2534,102,2073,112,"e"],[2534,103,2073,113],[2534,104,2073,114],[2535,12,2074,20],[2536,10,2075,16],[2536,11,2075,17],[2536,20,2076,24],[2537,12,2077,20],[2537,16,2077,24],[2537,17,2077,25,"_debug"],[2537,23,2077,31],[2537,24,2077,32],[2537,50,2077,58],[2537,52,2077,60],[2537,57,2077,65],[2537,58,2077,66],[2538,10,2078,16],[2539,8,2079,12],[2539,9,2079,13],[2539,10,2079,14],[2540,6,2080,8],[2540,7,2080,9],[2540,8,2081,8],[2540,15,2081,15,"e"],[2540,16,2081,16],[2540,18,2081,18],[2541,8,2082,12],[2541,12,2082,16,"e"],[2541,13,2082,17],[2541,14,2082,18,"isAcquireTimeout"],[2541,30,2082,34],[2541,34,2082,38,"e"],[2541,35,2082,39],[2541,47,2082,51,"LockAcquireTimeoutError"],[2541,56,2082,74],[2541,57,2082,74,"LockAcquireTimeoutError"],[2541,80,2082,74],[2541,82,2082,76],[2542,10,2083,16],[2542,14,2083,20],[2542,15,2083,21,"_debug"],[2542,21,2083,27],[2542,22,2083,28],[2542,66,2083,72],[2542,67,2083,73],[2543,8,2084,12],[2543,9,2084,13],[2543,15,2085,17],[2544,10,2086,16],[2544,16,2086,22,"e"],[2544,17,2086,23],[2545,8,2087,12],[2546,6,2088,8],[2547,4,2089,4],[2548,4,2090,4],[2549,0,2091,0],[2550,0,2092,0],[2551,0,2093,0],[2552,0,2094,0],[2553,4,2095,4],[2553,10,2095,10,"_handleVisibilityChange"],[2553,33,2095,33,"_handleVisibilityChange"],[2553,34,2095,33],[2553,36,2095,36],[2554,6,2096,8],[2554,10,2096,12],[2554,11,2096,13,"_debug"],[2554,17,2096,19],[2554,18,2096,20],[2554,46,2096,48],[2554,47,2096,49],[2555,6,2097,8],[2555,10,2097,12],[2555,11,2097,13],[2555,15,2097,13,"isBrowser"],[2555,26,2097,22],[2555,27,2097,22,"isBrowser"],[2555,36,2097,22],[2555,38,2097,23],[2555,39,2097,24],[2555,43,2097,28],[2555,45,2097,30,"window"],[2555,51,2097,36],[2555,56,2097,41],[2555,60,2097,45],[2555,64,2097,49,"window"],[2555,70,2097,55],[2555,75,2097,60],[2555,80,2097,65],[2555,81,2097,66],[2555,84,2097,69],[2555,89,2097,74],[2555,90,2097,75],[2555,93,2097,78,"window"],[2555,99,2097,84],[2555,100,2097,85,"addEventListener"],[2555,116,2097,101],[2555,117,2097,102],[2555,119,2097,104],[2556,8,2098,12],[2556,12,2098,16],[2556,16,2098,20],[2556,17,2098,21,"autoRefreshToken"],[2556,33,2098,37],[2556,35,2098,39],[2557,10,2099,16],[2558,10,2100,16],[2558,14,2100,20],[2558,15,2100,21,"startAutoRefresh"],[2558,31,2100,37],[2558,32,2100,38],[2558,33,2100,39],[2559,8,2101,12],[2560,8,2102,12],[2560,15,2102,19],[2560,20,2102,24],[2561,6,2103,8],[2562,6,2104,8],[2562,10,2104,12],[2563,8,2105,12],[2563,12,2105,16],[2563,13,2105,17,"visibilityChangedCallback"],[2563,38,2105,42],[2563,41,2105,45],[2563,53,2105,57],[2563,59,2105,63],[2563,63,2105,67],[2563,64,2105,68,"_onVisibilityChanged"],[2563,84,2105,88],[2563,85,2105,89],[2563,90,2105,94],[2563,91,2105,95],[2564,8,2106,12,"window"],[2564,14,2106,18],[2564,19,2106,23],[2564,23,2106,27],[2564,27,2106,31,"window"],[2564,33,2106,37],[2564,38,2106,42],[2564,43,2106,47],[2564,44,2106,48],[2564,47,2106,51],[2564,52,2106,56],[2564,53,2106,57],[2564,56,2106,60,"window"],[2564,62,2106,66],[2564,63,2106,67,"addEventListener"],[2564,79,2106,83],[2564,80,2106,84],[2564,98,2106,102],[2564,100,2106,104],[2564,104,2106,108],[2564,105,2106,109,"visibilityChangedCallback"],[2564,130,2106,134],[2564,131,2106,135],[2565,8,2107,12],[2566,8,2108,12],[2567,8,2109,12],[2567,14,2109,18],[2567,18,2109,22],[2567,19,2109,23,"_onVisibilityChanged"],[2567,39,2109,43],[2567,40,2109,44],[2567,44,2109,48],[2567,45,2109,49],[2567,46,2109,50],[2567,47,2109,51],[2568,6,2110,8],[2568,7,2110,9],[2568,8,2111,8],[2568,15,2111,15,"error"],[2568,20,2111,20],[2568,22,2111,22],[2569,8,2112,12,"console"],[2569,15,2112,19],[2569,16,2112,20,"error"],[2569,21,2112,25],[2569,22,2112,26],[2569,47,2112,51],[2569,49,2112,53,"error"],[2569,54,2112,58],[2569,55,2112,59],[2570,6,2113,8],[2571,4,2114,4],[2572,4,2115,4],[2573,0,2116,0],[2574,0,2117,0],[2575,4,2118,4],[2575,10,2118,10,"_onVisibilityChanged"],[2575,30,2118,30,"_onVisibilityChanged"],[2575,31,2118,31,"calledFromInitialize"],[2575,51,2118,51],[2575,53,2118,53],[2576,6,2119,8],[2576,12,2119,14,"methodName"],[2576,22,2119,24],[2576,25,2119,27],[2576,50,2119,52,"calledFromInitialize"],[2576,70,2119,72],[2576,73,2119,75],[2577,6,2120,8],[2577,10,2120,12],[2577,11,2120,13,"_debug"],[2577,17,2120,19],[2577,18,2120,20,"methodName"],[2577,28,2120,30],[2577,30,2120,32],[2577,47,2120,49],[2577,49,2120,51,"document"],[2577,57,2120,59],[2577,58,2120,60,"visibilityState"],[2577,73,2120,75],[2577,74,2120,76],[2578,6,2121,8],[2578,10,2121,12,"document"],[2578,18,2121,20],[2578,19,2121,21,"visibilityState"],[2578,34,2121,36],[2578,39,2121,41],[2578,48,2121,50],[2578,50,2121,52],[2579,8,2122,12],[2579,12,2122,16],[2579,16,2122,20],[2579,17,2122,21,"autoRefreshToken"],[2579,33,2122,37],[2579,35,2122,39],[2580,10,2123,16],[2581,10,2124,16],[2582,10,2125,16],[2582,14,2125,20],[2582,15,2125,21,"_startAutoRefresh"],[2582,32,2125,38],[2582,33,2125,39],[2582,34,2125,40],[2583,8,2126,12],[2584,8,2127,12],[2584,12,2127,16],[2584,13,2127,17,"calledFromInitialize"],[2584,33,2127,37],[2584,35,2127,39],[2585,10,2128,16],[2586,10,2129,16],[2587,10,2130,16],[2588,10,2131,16],[2589,10,2132,16],[2589,16,2132,22],[2589,20,2132,26],[2589,21,2132,27,"initializePromise"],[2589,38,2132,44],[2590,10,2133,16],[2590,16,2133,22],[2590,20,2133,26],[2590,21,2133,27,"_acquireLock"],[2590,33,2133,39],[2590,34,2133,40],[2590,35,2133,41],[2590,36,2133,42],[2590,38,2133,44],[2590,50,2133,56],[2591,12,2134,20],[2591,16,2134,24,"document"],[2591,24,2134,32],[2591,25,2134,33,"visibilityState"],[2591,40,2134,48],[2591,45,2134,53],[2591,54,2134,62],[2591,56,2134,64],[2592,14,2135,24],[2592,18,2135,28],[2592,19,2135,29,"_debug"],[2592,25,2135,35],[2592,26,2135,36,"methodName"],[2592,36,2135,46],[2592,38,2135,48],[2592,144,2135,154],[2592,145,2135,155],[2593,14,2136,24],[2594,14,2137,24],[2595,12,2138,20],[2596,12,2139,20],[2597,12,2140,20],[2597,18,2140,26],[2597,22,2140,30],[2597,23,2140,31,"_recoverAndRefresh"],[2597,41,2140,49],[2597,42,2140,50],[2597,43,2140,51],[2598,10,2141,16],[2598,11,2141,17],[2598,12,2141,18],[2599,8,2142,12],[2600,6,2143,8],[2600,7,2143,9],[2600,13,2144,13],[2600,17,2144,17,"document"],[2600,25,2144,25],[2600,26,2144,26,"visibilityState"],[2600,41,2144,41],[2600,46,2144,46],[2600,54,2144,54],[2600,56,2144,56],[2601,8,2145,12],[2601,12,2145,16],[2601,16,2145,20],[2601,17,2145,21,"autoRefreshToken"],[2601,33,2145,37],[2601,35,2145,39],[2602,10,2146,16],[2602,14,2146,20],[2602,15,2146,21,"_stopAutoRefresh"],[2602,31,2146,37],[2602,32,2146,38],[2602,33,2146,39],[2603,8,2147,12],[2604,6,2148,8],[2605,4,2149,4],[2606,4,2150,4],[2607,0,2151,0],[2608,0,2152,0],[2609,0,2153,0],[2610,0,2154,0],[2611,0,2155,0],[2612,4,2156,4],[2612,10,2156,10,"_getUrlForProvider"],[2612,28,2156,28,"_getUrlForProvider"],[2612,29,2156,29,"url"],[2612,32,2156,32],[2612,34,2156,34,"provider"],[2612,42,2156,42],[2612,44,2156,44,"options"],[2612,51,2156,51],[2612,53,2156,53],[2613,6,2157,8],[2613,12,2157,14,"urlParams"],[2613,21,2157,23],[2613,24,2157,26],[2613,25,2157,27],[2613,37,2157,39,"encodeURIComponent"],[2613,55,2157,57],[2613,56,2157,58,"provider"],[2613,64,2157,66],[2613,65,2157,67],[2613,67,2157,69],[2613,68,2157,70],[2614,6,2158,8],[2614,10,2158,12,"options"],[2614,17,2158,19],[2614,22,2158,24],[2614,26,2158,28],[2614,30,2158,32,"options"],[2614,37,2158,39],[2614,42,2158,44],[2614,47,2158,49],[2614,48,2158,50],[2614,51,2158,53],[2614,56,2158,58],[2614,57,2158,59],[2614,60,2158,62,"options"],[2614,67,2158,69],[2614,68,2158,70,"redirectTo"],[2614,78,2158,80],[2614,80,2158,82],[2615,8,2159,12,"urlParams"],[2615,17,2159,21],[2615,18,2159,22,"push"],[2615,22,2159,26],[2615,23,2159,27],[2615,38,2159,42,"encodeURIComponent"],[2615,56,2159,60],[2615,57,2159,61,"options"],[2615,64,2159,68],[2615,65,2159,69,"redirectTo"],[2615,75,2159,79],[2615,76,2159,80],[2615,78,2159,82],[2615,79,2159,83],[2616,6,2160,8],[2617,6,2161,8],[2617,10,2161,12,"options"],[2617,17,2161,19],[2617,22,2161,24],[2617,26,2161,28],[2617,30,2161,32,"options"],[2617,37,2161,39],[2617,42,2161,44],[2617,47,2161,49],[2617,48,2161,50],[2617,51,2161,53],[2617,56,2161,58],[2617,57,2161,59],[2617,60,2161,62,"options"],[2617,67,2161,69],[2617,68,2161,70,"scopes"],[2617,74,2161,76],[2617,76,2161,78],[2618,8,2162,12,"urlParams"],[2618,17,2162,21],[2618,18,2162,22,"push"],[2618,22,2162,26],[2618,23,2162,27],[2618,33,2162,37,"encodeURIComponent"],[2618,51,2162,55],[2618,52,2162,56,"options"],[2618,59,2162,63],[2618,60,2162,64,"scopes"],[2618,66,2162,70],[2618,67,2162,71],[2618,69,2162,73],[2618,70,2162,74],[2619,6,2163,8],[2620,6,2164,8],[2620,10,2164,12],[2620,14,2164,16],[2620,15,2164,17,"flowType"],[2620,23,2164,25],[2620,28,2164,30],[2620,34,2164,36],[2620,36,2164,38],[2621,8,2165,12],[2621,14,2165,18],[2621,15,2165,19,"codeChallenge"],[2621,28,2165,32],[2621,30,2165,34,"codeChallengeMethod"],[2621,49,2165,53],[2621,50,2165,54],[2621,53,2165,57],[2621,59,2165,63],[2621,63,2165,63,"getCodeChallengeAndMethod"],[2621,74,2165,88],[2621,75,2165,88,"getCodeChallengeAndMethod"],[2621,100,2165,88],[2621,102,2165,89],[2621,106,2165,93],[2621,107,2165,94,"storage"],[2621,114,2165,101],[2621,116,2165,103],[2621,120,2165,107],[2621,121,2165,108,"storageKey"],[2621,131,2165,118],[2621,132,2165,119],[2622,8,2166,12],[2622,14,2166,18,"flowParams"],[2622,24,2166,28],[2622,27,2166,31],[2622,31,2166,35,"URLSearchParams"],[2622,46,2166,50],[2622,47,2166,51],[2623,10,2167,16,"code_challenge"],[2623,24,2167,30],[2623,26,2167,32],[2623,29,2167,35,"encodeURIComponent"],[2623,47,2167,53],[2623,48,2167,54,"codeChallenge"],[2623,61,2167,67],[2623,62,2167,68],[2623,64,2167,70],[2624,10,2168,16,"code_challenge_method"],[2624,31,2168,37],[2624,33,2168,39],[2624,36,2168,42,"encodeURIComponent"],[2624,54,2168,60],[2624,55,2168,61,"codeChallengeMethod"],[2624,74,2168,80],[2624,75,2168,81],[2625,8,2169,12],[2625,9,2169,13],[2625,10,2169,14],[2626,8,2170,12,"urlParams"],[2626,17,2170,21],[2626,18,2170,22,"push"],[2626,22,2170,26],[2626,23,2170,27,"flowParams"],[2626,33,2170,37],[2626,34,2170,38,"toString"],[2626,42,2170,46],[2626,43,2170,47],[2626,44,2170,48],[2626,45,2170,49],[2627,6,2171,8],[2628,6,2172,8],[2628,10,2172,12,"options"],[2628,17,2172,19],[2628,22,2172,24],[2628,26,2172,28],[2628,30,2172,32,"options"],[2628,37,2172,39],[2628,42,2172,44],[2628,47,2172,49],[2628,48,2172,50],[2628,51,2172,53],[2628,56,2172,58],[2628,57,2172,59],[2628,60,2172,62,"options"],[2628,67,2172,69],[2628,68,2172,70,"queryParams"],[2628,79,2172,81],[2628,81,2172,83],[2629,8,2173,12],[2629,14,2173,18,"query"],[2629,19,2173,23],[2629,22,2173,26],[2629,26,2173,30,"URLSearchParams"],[2629,41,2173,45],[2629,42,2173,46,"options"],[2629,49,2173,53],[2629,50,2173,54,"queryParams"],[2629,61,2173,65],[2629,62,2173,66],[2630,8,2174,12,"urlParams"],[2630,17,2174,21],[2630,18,2174,22,"push"],[2630,22,2174,26],[2630,23,2174,27,"query"],[2630,28,2174,32],[2630,29,2174,33,"toString"],[2630,37,2174,41],[2630,38,2174,42],[2630,39,2174,43],[2630,40,2174,44],[2631,6,2175,8],[2632,6,2176,8],[2632,10,2176,12,"options"],[2632,17,2176,19],[2632,22,2176,24],[2632,26,2176,28],[2632,30,2176,32,"options"],[2632,37,2176,39],[2632,42,2176,44],[2632,47,2176,49],[2632,48,2176,50],[2632,51,2176,53],[2632,56,2176,58],[2632,57,2176,59],[2632,60,2176,62,"options"],[2632,67,2176,69],[2632,68,2176,70,"skipBrowserRedirect"],[2632,87,2176,89],[2632,89,2176,91],[2633,8,2177,12,"urlParams"],[2633,17,2177,21],[2633,18,2177,22,"push"],[2633,22,2177,26],[2633,23,2177,27],[2633,45,2177,49,"options"],[2633,52,2177,56],[2633,53,2177,57,"skipBrowserRedirect"],[2633,72,2177,76],[2633,74,2177,78],[2633,75,2177,79],[2634,6,2178,8],[2635,6,2179,8],[2635,13,2179,15],[2635,16,2179,18,"url"],[2635,19,2179,21],[2635,23,2179,25,"urlParams"],[2635,32,2179,34],[2635,33,2179,35,"join"],[2635,37,2179,39],[2635,38,2179,40],[2635,41,2179,43],[2635,42,2179,44],[2635,44,2179,46],[2636,4,2180,4],[2637,4,2181,4],[2637,10,2181,10,"_unenroll"],[2637,19,2181,19,"_unenroll"],[2637,20,2181,20,"params"],[2637,26,2181,26],[2637,28,2181,28],[2638,6,2182,8],[2638,10,2182,12],[2639,8,2183,12],[2639,15,2183,19],[2639,21,2183,25],[2639,25,2183,29],[2639,26,2183,30,"_useSession"],[2639,37,2183,41],[2639,38,2183,42],[2639,44,2183,49,"result"],[2639,50,2183,55],[2639,54,2183,60],[2640,10,2184,16],[2640,14,2184,20,"_a"],[2640,16,2184,22],[2641,10,2185,16],[2641,16,2185,22],[2642,12,2185,24,"data"],[2642,16,2185,28],[2642,18,2185,30,"sessionData"],[2642,29,2185,41],[2643,12,2185,43,"error"],[2643,17,2185,48],[2643,19,2185,50,"sessionError"],[2644,10,2185,63],[2644,11,2185,64],[2644,14,2185,67,"result"],[2644,20,2185,73],[2645,10,2186,16],[2645,14,2186,20,"sessionError"],[2645,26,2186,32],[2645,28,2186,34],[2646,12,2187,20],[2646,19,2187,27],[2647,14,2187,29,"data"],[2647,18,2187,33],[2647,20,2187,35],[2647,24,2187,39],[2648,14,2187,41,"error"],[2648,19,2187,46],[2648,21,2187,48,"sessionError"],[2649,12,2187,61],[2649,13,2187,62],[2650,10,2188,16],[2651,10,2189,16],[2651,17,2189,23],[2651,23,2189,29],[2651,27,2189,29,"_request"],[2651,36,2189,37],[2651,37,2189,37,"_request"],[2651,45,2189,37],[2651,47,2189,38],[2651,51,2189,42],[2651,52,2189,43,"fetch"],[2651,57,2189,48],[2651,59,2189,50],[2651,67,2189,58],[2651,69,2189,60],[2651,72,2189,63],[2651,76,2189,67],[2651,77,2189,68,"url"],[2651,80,2189,71],[2651,92,2189,83,"params"],[2651,98,2189,89],[2651,99,2189,90,"factorId"],[2651,107,2189,98],[2651,109,2189,100],[2651,111,2189,102],[2652,12,2190,20,"headers"],[2652,19,2190,27],[2652,21,2190,29],[2652,25,2190,33],[2652,26,2190,34,"headers"],[2652,33,2190,41],[2653,12,2191,20,"jwt"],[2653,15,2191,23],[2653,17,2191,25],[2653,18,2191,26,"_a"],[2653,20,2191,28],[2653,23,2191,31,"sessionData"],[2653,34,2191,42],[2653,39,2191,47],[2653,43,2191,51],[2653,47,2191,55,"sessionData"],[2653,58,2191,66],[2653,63,2191,71],[2653,68,2191,76],[2653,69,2191,77],[2653,72,2191,80],[2653,77,2191,85],[2653,78,2191,86],[2653,81,2191,89,"sessionData"],[2653,92,2191,100],[2653,93,2191,101,"session"],[2653,100,2191,108],[2653,106,2191,114],[2653,110,2191,118],[2653,114,2191,122,"_a"],[2653,116,2191,124],[2653,121,2191,129],[2653,126,2191,134],[2653,127,2191,135],[2653,130,2191,138],[2653,135,2191,143],[2653,136,2191,144],[2653,139,2191,147,"_a"],[2653,141,2191,149],[2653,142,2191,150,"access_token"],[2654,10,2192,16],[2654,11,2192,17],[2654,12,2192,18],[2655,8,2193,12],[2655,9,2193,13],[2655,10,2193,14],[2656,6,2194,8],[2656,7,2194,9],[2656,8,2195,8],[2656,15,2195,15,"error"],[2656,20,2195,20],[2656,22,2195,22],[2657,8,2196,12],[2657,12,2196,16],[2657,16,2196,16,"isAuthError"],[2657,26,2196,27],[2657,27,2196,27,"isAuthError"],[2657,38,2196,27],[2657,40,2196,28,"error"],[2657,45,2196,33],[2657,46,2196,34],[2657,48,2196,36],[2658,10,2197,16],[2658,17,2197,23],[2659,12,2197,25,"data"],[2659,16,2197,29],[2659,18,2197,31],[2659,22,2197,35],[2660,12,2197,37,"error"],[2661,10,2197,43],[2661,11,2197,44],[2662,8,2198,12],[2663,8,2199,12],[2663,14,2199,18,"error"],[2663,19,2199,23],[2664,6,2200,8],[2665,4,2201,4],[2666,4,2202,4],[2666,10,2202,10,"_enroll"],[2666,17,2202,17,"_enroll"],[2666,18,2202,18,"params"],[2666,24,2202,24],[2666,26,2202,26],[2667,6,2203,8],[2667,10,2203,12],[2668,8,2204,12],[2668,15,2204,19],[2668,21,2204,25],[2668,25,2204,29],[2668,26,2204,30,"_useSession"],[2668,37,2204,41],[2668,38,2204,42],[2668,44,2204,49,"result"],[2668,50,2204,55],[2668,54,2204,60],[2669,10,2205,16],[2669,14,2205,20,"_a"],[2669,16,2205,22],[2669,18,2205,24,"_b"],[2669,20,2205,26],[2670,10,2206,16],[2670,16,2206,22],[2671,12,2206,24,"data"],[2671,16,2206,28],[2671,18,2206,30,"sessionData"],[2671,29,2206,41],[2672,12,2206,43,"error"],[2672,17,2206,48],[2672,19,2206,50,"sessionError"],[2673,10,2206,63],[2673,11,2206,64],[2673,14,2206,67,"result"],[2673,20,2206,73],[2674,10,2207,16],[2674,14,2207,20,"sessionError"],[2674,26,2207,32],[2674,28,2207,34],[2675,12,2208,20],[2675,19,2208,27],[2676,14,2208,29,"data"],[2676,18,2208,33],[2676,20,2208,35],[2676,24,2208,39],[2677,14,2208,41,"error"],[2677,19,2208,46],[2677,21,2208,48,"sessionError"],[2678,12,2208,61],[2678,13,2208,62],[2679,10,2209,16],[2680,10,2210,16],[2680,16,2210,22,"body"],[2680,20,2210,26],[2680,23,2210,29,"Object"],[2680,29,2210,35],[2680,30,2210,36,"assign"],[2680,36,2210,42],[2680,37,2210,43],[2681,12,2210,45,"friendly_name"],[2681,25,2210,58],[2681,27,2210,60,"params"],[2681,33,2210,66],[2681,34,2210,67,"friendlyName"],[2681,46,2210,79],[2682,12,2210,81,"factor_type"],[2682,23,2210,92],[2682,25,2210,94,"params"],[2682,31,2210,100],[2682,32,2210,101,"factorType"],[2683,10,2210,112],[2683,11,2210,113],[2683,13,2210,116,"params"],[2683,19,2210,122],[2683,20,2210,123,"factorType"],[2683,30,2210,133],[2683,35,2210,138],[2683,42,2210,145],[2683,45,2210,148],[2684,12,2210,150,"phone"],[2684,17,2210,155],[2684,19,2210,157,"params"],[2684,25,2210,163],[2684,26,2210,164,"phone"],[2685,10,2210,170],[2685,11,2210,171],[2685,14,2210,174],[2686,12,2210,176,"issuer"],[2686,18,2210,182],[2686,20,2210,184,"params"],[2686,26,2210,190],[2686,27,2210,191,"issuer"],[2687,10,2210,198],[2687,11,2210,200],[2687,12,2210,201],[2688,10,2211,16],[2688,16,2211,22],[2689,12,2211,24,"data"],[2689,16,2211,28],[2690,12,2211,30,"error"],[2691,10,2211,36],[2691,11,2211,37],[2691,14,2211,40],[2691,20,2211,46],[2691,24,2211,46,"_request"],[2691,33,2211,54],[2691,34,2211,54,"_request"],[2691,42,2211,54],[2691,44,2211,55],[2691,48,2211,59],[2691,49,2211,60,"fetch"],[2691,54,2211,65],[2691,56,2211,67],[2691,62,2211,73],[2691,64,2211,75],[2691,67,2211,78],[2691,71,2211,82],[2691,72,2211,83,"url"],[2691,75,2211,86],[2691,85,2211,96],[2691,87,2211,98],[2692,12,2212,20,"body"],[2692,16,2212,24],[2693,12,2213,20,"headers"],[2693,19,2213,27],[2693,21,2213,29],[2693,25,2213,33],[2693,26,2213,34,"headers"],[2693,33,2213,41],[2694,12,2214,20,"jwt"],[2694,15,2214,23],[2694,17,2214,25],[2694,18,2214,26,"_a"],[2694,20,2214,28],[2694,23,2214,31,"sessionData"],[2694,34,2214,42],[2694,39,2214,47],[2694,43,2214,51],[2694,47,2214,55,"sessionData"],[2694,58,2214,66],[2694,63,2214,71],[2694,68,2214,76],[2694,69,2214,77],[2694,72,2214,80],[2694,77,2214,85],[2694,78,2214,86],[2694,81,2214,89,"sessionData"],[2694,92,2214,100],[2694,93,2214,101,"session"],[2694,100,2214,108],[2694,106,2214,114],[2694,110,2214,118],[2694,114,2214,122,"_a"],[2694,116,2214,124],[2694,121,2214,129],[2694,126,2214,134],[2694,127,2214,135],[2694,130,2214,138],[2694,135,2214,143],[2694,136,2214,144],[2694,139,2214,147,"_a"],[2694,141,2214,149],[2694,142,2214,150,"access_token"],[2695,10,2215,16],[2695,11,2215,17],[2695,12,2215,18],[2696,10,2216,16],[2696,14,2216,20,"error"],[2696,19,2216,25],[2696,21,2216,27],[2697,12,2217,20],[2697,19,2217,27],[2698,14,2217,29,"data"],[2698,18,2217,33],[2698,20,2217,35],[2698,24,2217,39],[2699,14,2217,41,"error"],[2700,12,2217,47],[2700,13,2217,48],[2701,10,2218,16],[2702,10,2219,16],[2702,14,2219,20,"params"],[2702,20,2219,26],[2702,21,2219,27,"factorType"],[2702,31,2219,37],[2702,36,2219,42],[2702,42,2219,48],[2702,47,2219,53],[2702,48,2219,54,"_b"],[2702,50,2219,56],[2702,53,2219,59,"data"],[2702,57,2219,63],[2702,62,2219,68],[2702,66,2219,72],[2702,70,2219,76,"data"],[2702,74,2219,80],[2702,79,2219,85],[2702,84,2219,90],[2702,85,2219,91],[2702,88,2219,94],[2702,93,2219,99],[2702,94,2219,100],[2702,97,2219,103,"data"],[2702,101,2219,107],[2702,102,2219,108,"totp"],[2702,106,2219,112],[2702,112,2219,118],[2702,116,2219,122],[2702,120,2219,126,"_b"],[2702,122,2219,128],[2702,127,2219,133],[2702,132,2219,138],[2702,133,2219,139],[2702,136,2219,142],[2702,141,2219,147],[2702,142,2219,148],[2702,145,2219,151,"_b"],[2702,147,2219,153],[2702,148,2219,154,"qr_code"],[2702,155,2219,161],[2702,156,2219,162],[2702,158,2219,164],[2703,12,2220,20,"data"],[2703,16,2220,24],[2703,17,2220,25,"totp"],[2703,21,2220,29],[2703,22,2220,30,"qr_code"],[2703,29,2220,37],[2703,32,2220,40],[2703,60,2220,68,"data"],[2703,64,2220,72],[2703,65,2220,73,"totp"],[2703,69,2220,77],[2703,70,2220,78,"qr_code"],[2703,77,2220,85],[2703,79,2220,87],[2704,10,2221,16],[2705,10,2222,16],[2705,17,2222,23],[2706,12,2222,25,"data"],[2706,16,2222,29],[2707,12,2222,31,"error"],[2707,17,2222,36],[2707,19,2222,38],[2708,10,2222,43],[2708,11,2222,44],[2709,8,2223,12],[2709,9,2223,13],[2709,10,2223,14],[2710,6,2224,8],[2710,7,2224,9],[2710,8,2225,8],[2710,15,2225,15,"error"],[2710,20,2225,20],[2710,22,2225,22],[2711,8,2226,12],[2711,12,2226,16],[2711,16,2226,16,"isAuthError"],[2711,26,2226,27],[2711,27,2226,27,"isAuthError"],[2711,38,2226,27],[2711,40,2226,28,"error"],[2711,45,2226,33],[2711,46,2226,34],[2711,48,2226,36],[2712,10,2227,16],[2712,17,2227,23],[2713,12,2227,25,"data"],[2713,16,2227,29],[2713,18,2227,31],[2713,22,2227,35],[2714,12,2227,37,"error"],[2715,10,2227,43],[2715,11,2227,44],[2716,8,2228,12],[2717,8,2229,12],[2717,14,2229,18,"error"],[2717,19,2229,23],[2718,6,2230,8],[2719,4,2231,4],[2720,4,2232,4],[2721,0,2233,0],[2722,0,2234,0],[2723,4,2235,4],[2723,10,2235,10,"_verify"],[2723,17,2235,17,"_verify"],[2723,18,2235,18,"params"],[2723,24,2235,24],[2723,26,2235,26],[2724,6,2236,8],[2724,13,2236,15],[2724,17,2236,19],[2724,18,2236,20,"_acquireLock"],[2724,30,2236,32],[2724,31,2236,33],[2724,32,2236,34],[2724,33,2236,35],[2724,35,2236,37],[2724,47,2236,49],[2725,8,2237,12],[2725,12,2237,16],[2726,10,2238,16],[2726,17,2238,23],[2726,23,2238,29],[2726,27,2238,33],[2726,28,2238,34,"_useSession"],[2726,39,2238,45],[2726,40,2238,46],[2726,46,2238,53,"result"],[2726,52,2238,59],[2726,56,2238,64],[2727,12,2239,20],[2727,16,2239,24,"_a"],[2727,18,2239,26],[2728,12,2240,20],[2728,18,2240,26],[2729,14,2240,28,"data"],[2729,18,2240,32],[2729,20,2240,34,"sessionData"],[2729,31,2240,45],[2730,14,2240,47,"error"],[2730,19,2240,52],[2730,21,2240,54,"sessionError"],[2731,12,2240,67],[2731,13,2240,68],[2731,16,2240,71,"result"],[2731,22,2240,77],[2732,12,2241,20],[2732,16,2241,24,"sessionError"],[2732,28,2241,36],[2732,30,2241,38],[2733,14,2242,24],[2733,21,2242,31],[2734,16,2242,33,"data"],[2734,20,2242,37],[2734,22,2242,39],[2734,26,2242,43],[2735,16,2242,45,"error"],[2735,21,2242,50],[2735,23,2242,52,"sessionError"],[2736,14,2242,65],[2736,15,2242,66],[2737,12,2243,20],[2738,12,2244,20],[2738,18,2244,26],[2739,14,2244,28,"data"],[2739,18,2244,32],[2740,14,2244,34,"error"],[2741,12,2244,40],[2741,13,2244,41],[2741,16,2244,44],[2741,22,2244,50],[2741,26,2244,50,"_request"],[2741,35,2244,58],[2741,36,2244,58,"_request"],[2741,44,2244,58],[2741,46,2244,59],[2741,50,2244,63],[2741,51,2244,64,"fetch"],[2741,56,2244,69],[2741,58,2244,71],[2741,64,2244,77],[2741,66,2244,79],[2741,69,2244,82],[2741,73,2244,86],[2741,74,2244,87,"url"],[2741,77,2244,90],[2741,89,2244,102,"params"],[2741,95,2244,108],[2741,96,2244,109,"factorId"],[2741,104,2244,117],[2741,113,2244,126],[2741,115,2244,128],[2742,14,2245,24,"body"],[2742,18,2245,28],[2742,20,2245,30],[2743,16,2245,32,"code"],[2743,20,2245,36],[2743,22,2245,38,"params"],[2743,28,2245,44],[2743,29,2245,45,"code"],[2743,33,2245,49],[2744,16,2245,51,"challenge_id"],[2744,28,2245,63],[2744,30,2245,65,"params"],[2744,36,2245,71],[2744,37,2245,72,"challengeId"],[2745,14,2245,84],[2745,15,2245,85],[2746,14,2246,24,"headers"],[2746,21,2246,31],[2746,23,2246,33],[2746,27,2246,37],[2746,28,2246,38,"headers"],[2746,35,2246,45],[2747,14,2247,24,"jwt"],[2747,17,2247,27],[2747,19,2247,29],[2747,20,2247,30,"_a"],[2747,22,2247,32],[2747,25,2247,35,"sessionData"],[2747,36,2247,46],[2747,41,2247,51],[2747,45,2247,55],[2747,49,2247,59,"sessionData"],[2747,60,2247,70],[2747,65,2247,75],[2747,70,2247,80],[2747,71,2247,81],[2747,74,2247,84],[2747,79,2247,89],[2747,80,2247,90],[2747,83,2247,93,"sessionData"],[2747,94,2247,104],[2747,95,2247,105,"session"],[2747,102,2247,112],[2747,108,2247,118],[2747,112,2247,122],[2747,116,2247,126,"_a"],[2747,118,2247,128],[2747,123,2247,133],[2747,128,2247,138],[2747,129,2247,139],[2747,132,2247,142],[2747,137,2247,147],[2747,138,2247,148],[2747,141,2247,151,"_a"],[2747,143,2247,153],[2747,144,2247,154,"access_token"],[2748,12,2248,20],[2748,13,2248,21],[2748,14,2248,22],[2749,12,2249,20],[2749,16,2249,24,"error"],[2749,21,2249,29],[2749,23,2249,31],[2750,14,2250,24],[2750,21,2250,31],[2751,16,2250,33,"data"],[2751,20,2250,37],[2751,22,2250,39],[2751,26,2250,43],[2752,16,2250,45,"error"],[2753,14,2250,51],[2753,15,2250,52],[2754,12,2251,20],[2755,12,2252,20],[2755,18,2252,26],[2755,22,2252,30],[2755,23,2252,31,"_saveSession"],[2755,35,2252,43],[2755,36,2252,44,"Object"],[2755,42,2252,50],[2755,43,2252,51,"assign"],[2755,49,2252,57],[2755,50,2252,58],[2756,14,2252,60,"expires_at"],[2756,24,2252,70],[2756,26,2252,72,"Math"],[2756,30,2252,76],[2756,31,2252,77,"round"],[2756,36,2252,82],[2756,37,2252,83,"Date"],[2756,41,2252,87],[2756,42,2252,88,"now"],[2756,45,2252,91],[2756,46,2252,92],[2756,47,2252,93],[2756,50,2252,96],[2756,54,2252,100],[2756,55,2252,101],[2756,58,2252,104,"data"],[2756,62,2252,108],[2756,63,2252,109,"expires_in"],[2757,12,2252,120],[2757,13,2252,121],[2757,15,2252,123,"data"],[2757,19,2252,127],[2757,20,2252,128],[2757,21,2252,129],[2758,12,2253,20],[2758,18,2253,26],[2758,22,2253,30],[2758,23,2253,31,"_notifyAllSubscribers"],[2758,44,2253,52],[2758,45,2253,53],[2758,69,2253,77],[2758,71,2253,79,"data"],[2758,75,2253,83],[2758,76,2253,84],[2759,12,2254,20],[2759,19,2254,27],[2760,14,2254,29,"data"],[2760,18,2254,33],[2761,14,2254,35,"error"],[2762,12,2254,41],[2762,13,2254,42],[2763,10,2255,16],[2763,11,2255,17],[2763,12,2255,18],[2764,8,2256,12],[2764,9,2256,13],[2764,10,2257,12],[2764,17,2257,19,"error"],[2764,22,2257,24],[2764,24,2257,26],[2765,10,2258,16],[2765,14,2258,20],[2765,18,2258,20,"isAuthError"],[2765,28,2258,31],[2765,29,2258,31,"isAuthError"],[2765,40,2258,31],[2765,42,2258,32,"error"],[2765,47,2258,37],[2765,48,2258,38],[2765,50,2258,40],[2766,12,2259,20],[2766,19,2259,27],[2767,14,2259,29,"data"],[2767,18,2259,33],[2767,20,2259,35],[2767,24,2259,39],[2768,14,2259,41,"error"],[2769,12,2259,47],[2769,13,2259,48],[2770,10,2260,16],[2771,10,2261,16],[2771,16,2261,22,"error"],[2771,21,2261,27],[2772,8,2262,12],[2773,6,2263,8],[2773,7,2263,9],[2773,8,2263,10],[2774,4,2264,4],[2775,4,2265,4],[2776,0,2266,0],[2777,0,2267,0],[2778,4,2268,4],[2778,10,2268,10,"_challenge"],[2778,20,2268,20,"_challenge"],[2778,21,2268,21,"params"],[2778,27,2268,27],[2778,29,2268,29],[2779,6,2269,8],[2779,13,2269,15],[2779,17,2269,19],[2779,18,2269,20,"_acquireLock"],[2779,30,2269,32],[2779,31,2269,33],[2779,32,2269,34],[2779,33,2269,35],[2779,35,2269,37],[2779,47,2269,49],[2780,8,2270,12],[2780,12,2270,16],[2781,10,2271,16],[2781,17,2271,23],[2781,23,2271,29],[2781,27,2271,33],[2781,28,2271,34,"_useSession"],[2781,39,2271,45],[2781,40,2271,46],[2781,46,2271,53,"result"],[2781,52,2271,59],[2781,56,2271,64],[2782,12,2272,20],[2782,16,2272,24,"_a"],[2782,18,2272,26],[2783,12,2273,20],[2783,18,2273,26],[2784,14,2273,28,"data"],[2784,18,2273,32],[2784,20,2273,34,"sessionData"],[2784,31,2273,45],[2785,14,2273,47,"error"],[2785,19,2273,52],[2785,21,2273,54,"sessionError"],[2786,12,2273,67],[2786,13,2273,68],[2786,16,2273,71,"result"],[2786,22,2273,77],[2787,12,2274,20],[2787,16,2274,24,"sessionError"],[2787,28,2274,36],[2787,30,2274,38],[2788,14,2275,24],[2788,21,2275,31],[2789,16,2275,33,"data"],[2789,20,2275,37],[2789,22,2275,39],[2789,26,2275,43],[2790,16,2275,45,"error"],[2790,21,2275,50],[2790,23,2275,52,"sessionError"],[2791,14,2275,65],[2791,15,2275,66],[2792,12,2276,20],[2793,12,2277,20],[2793,19,2277,27],[2793,25,2277,33],[2793,29,2277,33,"_request"],[2793,38,2277,41],[2793,39,2277,41,"_request"],[2793,47,2277,41],[2793,49,2277,42],[2793,53,2277,46],[2793,54,2277,47,"fetch"],[2793,59,2277,52],[2793,61,2277,54],[2793,67,2277,60],[2793,69,2277,62],[2793,72,2277,65],[2793,76,2277,69],[2793,77,2277,70,"url"],[2793,80,2277,73],[2793,92,2277,85,"params"],[2793,98,2277,91],[2793,99,2277,92,"factorId"],[2793,107,2277,100],[2793,119,2277,112],[2793,121,2277,114],[2794,14,2278,24,"body"],[2794,18,2278,28],[2794,20,2278,30],[2795,16,2278,32,"channel"],[2795,23,2278,39],[2795,25,2278,41,"params"],[2795,31,2278,47],[2795,32,2278,48,"channel"],[2796,14,2278,56],[2796,15,2278,57],[2797,14,2279,24,"headers"],[2797,21,2279,31],[2797,23,2279,33],[2797,27,2279,37],[2797,28,2279,38,"headers"],[2797,35,2279,45],[2798,14,2280,24,"jwt"],[2798,17,2280,27],[2798,19,2280,29],[2798,20,2280,30,"_a"],[2798,22,2280,32],[2798,25,2280,35,"sessionData"],[2798,36,2280,46],[2798,41,2280,51],[2798,45,2280,55],[2798,49,2280,59,"sessionData"],[2798,60,2280,70],[2798,65,2280,75],[2798,70,2280,80],[2798,71,2280,81],[2798,74,2280,84],[2798,79,2280,89],[2798,80,2280,90],[2798,83,2280,93,"sessionData"],[2798,94,2280,104],[2798,95,2280,105,"session"],[2798,102,2280,112],[2798,108,2280,118],[2798,112,2280,122],[2798,116,2280,126,"_a"],[2798,118,2280,128],[2798,123,2280,133],[2798,128,2280,138],[2798,129,2280,139],[2798,132,2280,142],[2798,137,2280,147],[2798,138,2280,148],[2798,141,2280,151,"_a"],[2798,143,2280,153],[2798,144,2280,154,"access_token"],[2799,12,2281,20],[2799,13,2281,21],[2799,14,2281,22],[2800,10,2282,16],[2800,11,2282,17],[2800,12,2282,18],[2801,8,2283,12],[2801,9,2283,13],[2801,10,2284,12],[2801,17,2284,19,"error"],[2801,22,2284,24],[2801,24,2284,26],[2802,10,2285,16],[2802,14,2285,20],[2802,18,2285,20,"isAuthError"],[2802,28,2285,31],[2802,29,2285,31,"isAuthError"],[2802,40,2285,31],[2802,42,2285,32,"error"],[2802,47,2285,37],[2802,48,2285,38],[2802,50,2285,40],[2803,12,2286,20],[2803,19,2286,27],[2804,14,2286,29,"data"],[2804,18,2286,33],[2804,20,2286,35],[2804,24,2286,39],[2805,14,2286,41,"error"],[2806,12,2286,47],[2806,13,2286,48],[2807,10,2287,16],[2808,10,2288,16],[2808,16,2288,22,"error"],[2808,21,2288,27],[2809,8,2289,12],[2810,6,2290,8],[2810,7,2290,9],[2810,8,2290,10],[2811,4,2291,4],[2812,4,2292,4],[2813,0,2293,0],[2814,0,2294,0],[2815,4,2295,4],[2815,10,2295,10,"_challengeAndVerify"],[2815,29,2295,29,"_challengeAndVerify"],[2815,30,2295,30,"params"],[2815,36,2295,36],[2815,38,2295,38],[2816,6,2296,8],[2817,6,2297,8],[2818,6,2298,8],[2818,12,2298,14],[2819,8,2298,16,"data"],[2819,12,2298,20],[2819,14,2298,22,"challengeData"],[2819,27,2298,35],[2820,8,2298,37,"error"],[2820,13,2298,42],[2820,15,2298,44,"challengeError"],[2821,6,2298,59],[2821,7,2298,60],[2821,10,2298,63],[2821,16,2298,69],[2821,20,2298,73],[2821,21,2298,74,"_challenge"],[2821,31,2298,84],[2821,32,2298,85],[2822,8,2299,12,"factorId"],[2822,16,2299,20],[2822,18,2299,22,"params"],[2822,24,2299,28],[2822,25,2299,29,"factorId"],[2823,6,2300,8],[2823,7,2300,9],[2823,8,2300,10],[2824,6,2301,8],[2824,10,2301,12,"challengeError"],[2824,24,2301,26],[2824,26,2301,28],[2825,8,2302,12],[2825,15,2302,19],[2826,10,2302,21,"data"],[2826,14,2302,25],[2826,16,2302,27],[2826,20,2302,31],[2827,10,2302,33,"error"],[2827,15,2302,38],[2827,17,2302,40,"challengeError"],[2828,8,2302,55],[2828,9,2302,56],[2829,6,2303,8],[2830,6,2304,8],[2830,13,2304,15],[2830,19,2304,21],[2830,23,2304,25],[2830,24,2304,26,"_verify"],[2830,31,2304,33],[2830,32,2304,34],[2831,8,2305,12,"factorId"],[2831,16,2305,20],[2831,18,2305,22,"params"],[2831,24,2305,28],[2831,25,2305,29,"factorId"],[2831,33,2305,37],[2832,8,2306,12,"challengeId"],[2832,19,2306,23],[2832,21,2306,25,"challengeData"],[2832,34,2306,38],[2832,35,2306,39,"id"],[2832,37,2306,41],[2833,8,2307,12,"code"],[2833,12,2307,16],[2833,14,2307,18,"params"],[2833,20,2307,24],[2833,21,2307,25,"code"],[2834,6,2308,8],[2834,7,2308,9],[2834,8,2308,10],[2835,4,2309,4],[2836,4,2310,4],[2837,0,2311,0],[2838,0,2312,0],[2839,4,2313,4],[2839,10,2313,10,"_listFactors"],[2839,22,2313,22,"_listFactors"],[2839,23,2313,22],[2839,25,2313,25],[2840,6,2314,8],[2841,6,2315,8],[2841,12,2315,14],[2842,8,2315,16,"data"],[2842,12,2315,20],[2842,14,2315,22],[2843,10,2315,24,"user"],[2844,8,2315,29],[2844,9,2315,30],[2845,8,2315,32,"error"],[2845,13,2315,37],[2845,15,2315,39,"userError"],[2846,6,2315,50],[2846,7,2315,51],[2846,10,2315,54],[2846,16,2315,60],[2846,20,2315,64],[2846,21,2315,65,"getUser"],[2846,28,2315,72],[2846,29,2315,73],[2846,30,2315,74],[2847,6,2316,8],[2847,10,2316,12,"userError"],[2847,19,2316,21],[2847,21,2316,23],[2848,8,2317,12],[2848,15,2317,19],[2849,10,2317,21,"data"],[2849,14,2317,25],[2849,16,2317,27],[2849,20,2317,31],[2850,10,2317,33,"error"],[2850,15,2317,38],[2850,17,2317,40,"userError"],[2851,8,2317,50],[2851,9,2317,51],[2852,6,2318,8],[2853,6,2319,8],[2853,12,2319,14,"factors"],[2853,19,2319,21],[2853,22,2319,24],[2853,23,2319,25,"user"],[2853,27,2319,29],[2853,32,2319,34],[2853,36,2319,38],[2853,40,2319,42,"user"],[2853,44,2319,46],[2853,49,2319,51],[2853,54,2319,56],[2853,55,2319,57],[2853,58,2319,60],[2853,63,2319,65],[2853,64,2319,66],[2853,67,2319,69,"user"],[2853,71,2319,73],[2853,72,2319,74,"factors"],[2853,79,2319,81],[2853,84,2319,86],[2853,86,2319,88],[2854,6,2320,8],[2854,12,2320,14,"totp"],[2854,16,2320,18],[2854,19,2320,21,"factors"],[2854,26,2320,28],[2854,27,2320,29,"filter"],[2854,33,2320,35],[2854,34,2320,37,"factor"],[2854,40,2320,43],[2854,44,2320,48,"factor"],[2854,50,2320,54],[2854,51,2320,55,"factor_type"],[2854,62,2320,66],[2854,67,2320,71],[2854,73,2320,77],[2854,77,2320,81,"factor"],[2854,83,2320,87],[2854,84,2320,88,"status"],[2854,90,2320,94],[2854,95,2320,99],[2854,105,2320,109],[2854,106,2320,110],[2855,6,2321,8],[2855,12,2321,14,"phone"],[2855,17,2321,19],[2855,20,2321,22,"factors"],[2855,27,2321,29],[2855,28,2321,30,"filter"],[2855,34,2321,36],[2855,35,2321,38,"factor"],[2855,41,2321,44],[2855,45,2321,49,"factor"],[2855,51,2321,55],[2855,52,2321,56,"factor_type"],[2855,63,2321,67],[2855,68,2321,72],[2855,75,2321,79],[2855,79,2321,83,"factor"],[2855,85,2321,89],[2855,86,2321,90,"status"],[2855,92,2321,96],[2855,97,2321,101],[2855,107,2321,111],[2855,108,2321,112],[2856,6,2322,8],[2856,13,2322,15],[2857,8,2323,12,"data"],[2857,12,2323,16],[2857,14,2323,18],[2858,10,2324,16,"all"],[2858,13,2324,19],[2858,15,2324,21,"factors"],[2858,22,2324,28],[2859,10,2325,16,"totp"],[2859,14,2325,20],[2860,10,2326,16,"phone"],[2861,8,2327,12],[2861,9,2327,13],[2862,8,2328,12,"error"],[2862,13,2328,17],[2862,15,2328,19],[2863,6,2329,8],[2863,7,2329,9],[2864,4,2330,4],[2865,4,2331,4],[2866,0,2332,0],[2867,0,2333,0],[2868,4,2334,4],[2868,10,2334,10,"_getAuthenticatorAssuranceLevel"],[2868,41,2334,41,"_getAuthenticatorAssuranceLevel"],[2868,42,2334,41],[2868,44,2334,44],[2869,6,2335,8],[2869,13,2335,15],[2869,17,2335,19],[2869,18,2335,20,"_acquireLock"],[2869,30,2335,32],[2869,31,2335,33],[2869,32,2335,34],[2869,33,2335,35],[2869,35,2335,37],[2869,47,2335,49],[2870,8,2336,12],[2870,15,2336,19],[2870,21,2336,25],[2870,25,2336,29],[2870,26,2336,30,"_useSession"],[2870,37,2336,41],[2870,38,2336,42],[2870,44,2336,49,"result"],[2870,50,2336,55],[2870,54,2336,60],[2871,10,2337,16],[2871,14,2337,20,"_a"],[2871,16,2337,22],[2871,18,2337,24,"_b"],[2871,20,2337,26],[2872,10,2338,16],[2872,16,2338,22],[2873,12,2338,24,"data"],[2873,16,2338,28],[2873,18,2338,30],[2874,14,2338,32,"session"],[2875,12,2338,40],[2875,13,2338,41],[2876,12,2338,43,"error"],[2876,17,2338,48],[2876,19,2338,50,"sessionError"],[2877,10,2338,64],[2877,11,2338,65],[2877,14,2338,68,"result"],[2877,20,2338,74],[2878,10,2339,16],[2878,14,2339,20,"sessionError"],[2878,26,2339,32],[2878,28,2339,34],[2879,12,2340,20],[2879,19,2340,27],[2880,14,2340,29,"data"],[2880,18,2340,33],[2880,20,2340,35],[2880,24,2340,39],[2881,14,2340,41,"error"],[2881,19,2340,46],[2881,21,2340,48,"sessionError"],[2882,12,2340,61],[2882,13,2340,62],[2883,10,2341,16],[2884,10,2342,16],[2884,14,2342,20],[2884,15,2342,21,"session"],[2884,22,2342,28],[2884,24,2342,30],[2885,12,2343,20],[2885,19,2343,27],[2886,14,2344,24,"data"],[2886,18,2344,28],[2886,20,2344,30],[2887,16,2344,32,"currentLevel"],[2887,28,2344,44],[2887,30,2344,46],[2887,34,2344,50],[2888,16,2344,52,"nextLevel"],[2888,25,2344,61],[2888,27,2344,63],[2888,31,2344,67],[2889,16,2344,69,"currentAuthenticationMethods"],[2889,44,2344,97],[2889,46,2344,99],[2890,14,2344,102],[2890,15,2344,103],[2891,14,2345,24,"error"],[2891,19,2345,29],[2891,21,2345,31],[2892,12,2346,20],[2892,13,2346,21],[2893,10,2347,16],[2894,10,2348,16],[2894,16,2348,22],[2895,12,2348,24,"payload"],[2896,10,2348,32],[2896,11,2348,33],[2896,14,2348,36],[2896,18,2348,36,"decodeJWT"],[2896,29,2348,45],[2896,30,2348,45,"decodeJWT"],[2896,39,2348,45],[2896,41,2348,46,"session"],[2896,48,2348,53],[2896,49,2348,54,"access_token"],[2896,61,2348,66],[2896,62,2348,67],[2897,10,2349,16],[2897,14,2349,20,"currentLevel"],[2897,26,2349,32],[2897,29,2349,35],[2897,33,2349,39],[2898,10,2350,16],[2898,14,2350,20,"payload"],[2898,21,2350,27],[2898,22,2350,28,"aal"],[2898,25,2350,31],[2898,27,2350,33],[2899,12,2351,20,"currentLevel"],[2899,24,2351,32],[2899,27,2351,35,"payload"],[2899,34,2351,42],[2899,35,2351,43,"aal"],[2899,38,2351,46],[2900,10,2352,16],[2901,10,2353,16],[2901,14,2353,20,"nextLevel"],[2901,23,2353,29],[2901,26,2353,32,"currentLevel"],[2901,38,2353,44],[2902,10,2354,16],[2902,16,2354,22,"verifiedFactors"],[2902,31,2354,37],[2902,34,2354,40],[2902,35,2354,41,"_b"],[2902,37,2354,43],[2902,40,2354,46],[2902,41,2354,47,"_a"],[2902,43,2354,49],[2902,46,2354,52,"session"],[2902,53,2354,59],[2902,54,2354,60,"user"],[2902,58,2354,64],[2902,59,2354,65,"factors"],[2902,66,2354,72],[2902,72,2354,78],[2902,76,2354,82],[2902,80,2354,86,"_a"],[2902,82,2354,88],[2902,87,2354,93],[2902,92,2354,98],[2902,93,2354,99],[2902,96,2354,102],[2902,101,2354,107],[2902,102,2354,108],[2902,105,2354,111,"_a"],[2902,107,2354,113],[2902,108,2354,114,"filter"],[2902,114,2354,120],[2902,115,2354,122,"factor"],[2902,121,2354,128],[2902,125,2354,133,"factor"],[2902,131,2354,139],[2902,132,2354,140,"status"],[2902,138,2354,146],[2902,143,2354,151],[2902,153,2354,161],[2902,154,2354,162],[2902,160,2354,168],[2902,164,2354,172],[2902,168,2354,176,"_b"],[2902,170,2354,178],[2902,175,2354,183],[2902,180,2354,188],[2902,181,2354,189],[2902,184,2354,192,"_b"],[2902,186,2354,194],[2902,189,2354,197],[2902,191,2354,199],[2903,10,2355,16],[2903,14,2355,20,"verifiedFactors"],[2903,29,2355,35],[2903,30,2355,36,"length"],[2903,36,2355,42],[2903,39,2355,45],[2903,40,2355,46],[2903,42,2355,48],[2904,12,2356,20,"nextLevel"],[2904,21,2356,29],[2904,24,2356,32],[2904,30,2356,38],[2905,10,2357,16],[2906,10,2358,16],[2906,16,2358,22,"currentAuthenticationMethods"],[2906,44,2358,50],[2906,47,2358,53,"payload"],[2906,54,2358,60],[2906,55,2358,61,"amr"],[2906,58,2358,64],[2906,62,2358,68],[2906,64,2358,70],[2907,10,2359,16],[2907,17,2359,23],[2908,12,2359,25,"data"],[2908,16,2359,29],[2908,18,2359,31],[2909,14,2359,33,"currentLevel"],[2909,26,2359,45],[2910,14,2359,47,"nextLevel"],[2910,23,2359,56],[2911,14,2359,58,"currentAuthenticationMethods"],[2912,12,2359,87],[2912,13,2359,88],[2913,12,2359,90,"error"],[2913,17,2359,95],[2913,19,2359,97],[2914,10,2359,102],[2914,11,2359,103],[2915,8,2360,12],[2915,9,2360,13],[2915,10,2360,14],[2916,6,2361,8],[2916,7,2361,9],[2916,8,2361,10],[2917,4,2362,4],[2918,4,2363,4],[2918,10,2363,10,"fetchJwk"],[2918,18,2363,18,"fetchJwk"],[2918,19,2363,19,"kid"],[2918,22,2363,22],[2918,24,2363,24,"jwks"],[2918,28,2363,28],[2918,31,2363,31],[2919,6,2363,33,"keys"],[2919,10,2363,37],[2919,12,2363,39],[2920,4,2363,42],[2920,5,2363,43],[2920,7,2363,45],[2921,6,2364,8],[2922,6,2365,8],[2922,10,2365,12,"jwk"],[2922,13,2365,15],[2922,16,2365,18,"jwks"],[2922,20,2365,22],[2922,21,2365,23,"keys"],[2922,25,2365,27],[2922,26,2365,28,"find"],[2922,30,2365,32],[2922,31,2365,34,"key"],[2922,34,2365,37],[2922,38,2365,42,"key"],[2922,41,2365,45],[2922,42,2365,46,"kid"],[2922,45,2365,49],[2922,50,2365,54,"kid"],[2922,53,2365,57],[2922,54,2365,58],[2923,6,2366,8],[2923,10,2366,12,"jwk"],[2923,13,2366,15],[2923,15,2366,17],[2924,8,2367,12],[2924,15,2367,19,"jwk"],[2924,18,2367,22],[2925,6,2368,8],[2926,6,2369,8],[2926,12,2369,14,"now"],[2926,15,2369,17],[2926,18,2369,20,"Date"],[2926,22,2369,24],[2926,23,2369,25,"now"],[2926,26,2369,28],[2926,27,2369,29],[2926,28,2369,30],[2927,6,2370,8],[2928,6,2371,8,"jwk"],[2928,9,2371,11],[2928,12,2371,14],[2928,16,2371,18],[2928,17,2371,19,"jwks"],[2928,21,2371,23],[2928,22,2371,24,"keys"],[2928,26,2371,28],[2928,27,2371,29,"find"],[2928,31,2371,33],[2928,32,2371,35,"key"],[2928,35,2371,38],[2928,39,2371,43,"key"],[2928,42,2371,46],[2928,43,2371,47,"kid"],[2928,46,2371,50],[2928,51,2371,55,"kid"],[2928,54,2371,58],[2928,55,2371,59],[2929,6,2372,8],[2930,6,2373,8],[2930,10,2373,12,"jwk"],[2930,13,2373,15],[2930,17,2373,19],[2930,21,2373,23],[2930,22,2373,24,"jwks_cached_at"],[2930,36,2373,38],[2930,39,2373,41,"JWKS_TTL"],[2930,52,2373,49],[2930,53,2373,49,"JWKS_TTL"],[2930,61,2373,49],[2930,64,2373,52,"now"],[2930,67,2373,55],[2930,69,2373,57],[2931,8,2374,12],[2931,15,2374,19,"jwk"],[2931,18,2374,22],[2932,6,2375,8],[2933,6,2376,8],[2934,6,2377,8],[2934,12,2377,14],[2935,8,2377,16,"data"],[2935,12,2377,20],[2936,8,2377,22,"error"],[2937,6,2377,28],[2937,7,2377,29],[2937,10,2377,32],[2937,16,2377,38],[2937,20,2377,38,"_request"],[2937,29,2377,46],[2937,30,2377,46,"_request"],[2937,38,2377,46],[2937,40,2377,47],[2937,44,2377,51],[2937,45,2377,52,"fetch"],[2937,50,2377,57],[2937,52,2377,59],[2937,57,2377,64],[2937,59,2377,66],[2937,62,2377,69],[2937,66,2377,73],[2937,67,2377,74,"url"],[2937,70,2377,77],[2937,94,2377,101],[2937,96,2377,103],[2938,8,2378,12,"headers"],[2938,15,2378,19],[2938,17,2378,21],[2938,21,2378,25],[2938,22,2378,26,"headers"],[2939,6,2379,8],[2939,7,2379,9],[2939,8,2379,10],[2940,6,2380,8],[2940,10,2380,12,"error"],[2940,15,2380,17],[2940,17,2380,19],[2941,8,2381,12],[2941,14,2381,18,"error"],[2941,19,2381,23],[2942,6,2382,8],[2943,6,2383,8],[2943,10,2383,12],[2943,11,2383,13,"data"],[2943,15,2383,17],[2943,16,2383,18,"keys"],[2943,20,2383,22],[2943,24,2383,26,"data"],[2943,28,2383,30],[2943,29,2383,31,"keys"],[2943,33,2383,35],[2943,34,2383,36,"length"],[2943,40,2383,42],[2943,45,2383,47],[2943,46,2383,48],[2943,48,2383,50],[2944,8,2384,12],[2944,15,2384,19],[2944,19,2384,23],[2945,6,2385,8],[2946,6,2386,8],[2946,10,2386,12],[2946,11,2386,13,"jwks"],[2946,15,2386,17],[2946,18,2386,20,"data"],[2946,22,2386,24],[2947,6,2387,8],[2947,10,2387,12],[2947,11,2387,13,"jwks_cached_at"],[2947,25,2387,27],[2947,28,2387,30,"now"],[2947,31,2387,33],[2948,6,2388,8],[2949,6,2389,8,"jwk"],[2949,9,2389,11],[2949,12,2389,14,"data"],[2949,16,2389,18],[2949,17,2389,19,"keys"],[2949,21,2389,23],[2949,22,2389,24,"find"],[2949,26,2389,28],[2949,27,2389,30,"key"],[2949,30,2389,33],[2949,34,2389,38,"key"],[2949,37,2389,41],[2949,38,2389,42,"kid"],[2949,41,2389,45],[2949,46,2389,50,"kid"],[2949,49,2389,53],[2949,50,2389,54],[2950,6,2390,8],[2950,10,2390,12],[2950,11,2390,13,"jwk"],[2950,14,2390,16],[2950,16,2390,18],[2951,8,2391,12],[2951,15,2391,19],[2951,19,2391,23],[2952,6,2392,8],[2953,6,2393,8],[2953,13,2393,15,"jwk"],[2953,16,2393,18],[2954,4,2394,4],[2955,4,2395,4],[2956,0,2396,0],[2957,0,2397,0],[2958,0,2398,0],[2959,0,2399,0],[2960,0,2400,0],[2961,0,2401,0],[2962,0,2402,0],[2963,0,2403,0],[2964,0,2404,0],[2965,0,2405,0],[2966,0,2406,0],[2967,0,2407,0],[2968,0,2408,0],[2969,0,2409,0],[2970,0,2410,0],[2971,4,2411,4],[2971,10,2411,10,"getClaims"],[2971,19,2411,19,"getClaims"],[2971,20,2411,20,"jwt"],[2971,23,2411,23],[2971,25,2411,25,"options"],[2971,32,2411,32],[2971,35,2411,35],[2971,36,2411,36],[2971,37,2411,37],[2971,39,2411,39],[2972,6,2412,8],[2972,10,2412,12],[2973,8,2413,12],[2973,12,2413,16,"token"],[2973,17,2413,21],[2973,20,2413,24,"jwt"],[2973,23,2413,27],[2974,8,2414,12],[2974,12,2414,16],[2974,13,2414,17,"token"],[2974,18,2414,22],[2974,20,2414,24],[2975,10,2415,16],[2975,16,2415,22],[2976,12,2415,24,"data"],[2976,16,2415,28],[2977,12,2415,30,"error"],[2978,10,2415,36],[2978,11,2415,37],[2978,14,2415,40],[2978,20,2415,46],[2978,24,2415,50],[2978,25,2415,51,"getSession"],[2978,35,2415,61],[2978,36,2415,62],[2978,37,2415,63],[2979,10,2416,16],[2979,14,2416,20,"error"],[2979,19,2416,25],[2979,23,2416,29],[2979,24,2416,30,"data"],[2979,28,2416,34],[2979,29,2416,35,"session"],[2979,36,2416,42],[2979,38,2416,44],[2980,12,2417,20],[2980,19,2417,27],[2981,14,2417,29,"data"],[2981,18,2417,33],[2981,20,2417,35],[2981,24,2417,39],[2982,14,2417,41,"error"],[2983,12,2417,47],[2983,13,2417,48],[2984,10,2418,16],[2985,10,2419,16,"token"],[2985,15,2419,21],[2985,18,2419,24,"data"],[2985,22,2419,28],[2985,23,2419,29,"session"],[2985,30,2419,36],[2985,31,2419,37,"access_token"],[2985,43,2419,49],[2986,8,2420,12],[2987,8,2421,12],[2987,14,2421,18],[2988,10,2421,20,"header"],[2988,16,2421,26],[2989,10,2421,28,"payload"],[2989,17,2421,35],[2990,10,2421,37,"signature"],[2990,19,2421,46],[2991,10,2421,48,"raw"],[2991,13,2421,51],[2991,15,2421,53],[2992,12,2421,55,"header"],[2992,18,2421,61],[2992,20,2421,63,"rawHeader"],[2992,29,2421,72],[2993,12,2421,74,"payload"],[2993,19,2421,81],[2993,21,2421,83,"rawPayload"],[2994,10,2421,94],[2995,8,2421,97],[2995,9,2421,98],[2995,12,2421,101],[2995,16,2421,101,"decodeJWT"],[2995,27,2421,110],[2995,28,2421,110,"decodeJWT"],[2995,37,2421,110],[2995,39,2421,111,"token"],[2995,44,2421,116],[2995,45,2421,117],[2996,8,2422,12],[2996,12,2422,16],[2996,14,2422,18,"options"],[2996,21,2422,25],[2996,26,2422,30],[2996,30,2422,34],[2996,34,2422,38,"options"],[2996,41,2422,45],[2996,46,2422,50],[2996,51,2422,55],[2996,52,2422,56],[2996,55,2422,59],[2996,60,2422,64],[2996,61,2422,65],[2996,64,2422,68,"options"],[2996,71,2422,75],[2996,72,2422,76,"allowExpired"],[2996,84,2422,88],[2996,85,2422,89],[2996,87,2422,91],[2997,10,2423,16],[2998,10,2424,16],[2998,14,2424,16,"validateExp"],[2998,25,2424,27],[2998,26,2424,27,"validateExp"],[2998,37,2424,27],[2998,39,2424,28,"payload"],[2998,46,2424,35],[2998,47,2424,36,"exp"],[2998,50,2424,39],[2998,51,2424,40],[2999,8,2425,12],[3000,8,2426,12],[3000,14,2426,18,"signingKey"],[3000,24,2426,28],[3000,27,2426,31],[3000,28,2426,32,"header"],[3000,34,2426,38],[3000,35,2426,39,"alg"],[3000,38,2426,42],[3000,42,2427,16,"header"],[3000,48,2427,22],[3000,49,2427,23,"alg"],[3000,52,2427,26],[3000,53,2427,27,"startsWith"],[3000,63,2427,37],[3000,64,2427,38],[3000,68,2427,42],[3000,69,2427,43],[3000,73,2428,16],[3000,74,2428,17,"header"],[3000,80,2428,23],[3000,81,2428,24,"kid"],[3000,84,2428,27],[3000,88,2429,16],[3000,90,2429,18],[3000,98,2429,26],[3000,102,2429,30,"globalThis"],[3000,112,2429,40],[3000,116,2429,44],[3000,124,2429,52],[3000,128,2429,56,"globalThis"],[3000,138,2429,66],[3000,139,2429,67,"crypto"],[3000,145,2429,73],[3000,146,2429,74],[3000,149,2430,18],[3000,153,2430,22],[3000,156,2431,18],[3000,162,2431,24],[3000,166,2431,28],[3000,167,2431,29,"fetchJwk"],[3000,175,2431,37],[3000,176,2431,38,"header"],[3000,182,2431,44],[3000,183,2431,45,"kid"],[3000,186,2431,48],[3000,188,2431,50],[3000,189,2431,51,"options"],[3000,196,2431,58],[3000,201,2431,63],[3000,205,2431,67],[3000,209,2431,71,"options"],[3000,216,2431,78],[3000,221,2431,83],[3000,226,2431,88],[3000,227,2431,89],[3000,230,2431,92],[3000,235,2431,97],[3000,236,2431,98],[3000,239,2431,101,"options"],[3000,246,2431,108],[3000,247,2431,109,"keys"],[3000,251,2431,113],[3000,255,2431,117],[3001,10,2431,119,"keys"],[3001,14,2431,123],[3001,16,2431,125,"options"],[3001,23,2431,132],[3001,24,2431,133,"keys"],[3002,8,2431,138],[3002,9,2431,139],[3002,12,2431,142,"options"],[3002,19,2431,149],[3002,24,2431,154],[3002,28,2431,158],[3002,32,2431,162,"options"],[3002,39,2431,169],[3002,44,2431,174],[3002,49,2431,179],[3002,50,2431,180],[3002,53,2431,183],[3002,58,2431,188],[3002,59,2431,189],[3002,62,2431,192,"options"],[3002,69,2431,199],[3002,70,2431,200,"jwks"],[3002,74,2431,204],[3002,75,2431,205],[3003,8,2432,12],[3004,8,2433,12],[3004,12,2433,16],[3004,13,2433,17,"signingKey"],[3004,23,2433,27],[3004,25,2433,29],[3005,10,2434,16],[3005,16,2434,22],[3006,12,2434,24,"error"],[3007,10,2434,30],[3007,11,2434,31],[3007,14,2434,34],[3007,20,2434,40],[3007,24,2434,44],[3007,25,2434,45,"getUser"],[3007,32,2434,52],[3007,33,2434,53,"token"],[3007,38,2434,58],[3007,39,2434,59],[3008,10,2435,16],[3008,14,2435,20,"error"],[3008,19,2435,25],[3008,21,2435,27],[3009,12,2436,20],[3009,18,2436,26,"error"],[3009,23,2436,31],[3010,10,2437,16],[3011,10,2438,16],[3012,10,2439,16],[3012,17,2439,23],[3013,12,2440,20,"data"],[3013,16,2440,24],[3013,18,2440,26],[3014,14,2441,24,"claims"],[3014,20,2441,30],[3014,22,2441,32,"payload"],[3014,29,2441,39],[3015,14,2442,24,"header"],[3015,20,2442,30],[3016,14,2443,24,"signature"],[3017,12,2444,20],[3017,13,2444,21],[3018,12,2445,20,"error"],[3018,17,2445,25],[3018,19,2445,27],[3019,10,2446,16],[3019,11,2446,17],[3020,8,2447,12],[3021,8,2448,12],[3021,14,2448,18,"algorithm"],[3021,23,2448,27],[3021,26,2448,30],[3021,30,2448,30,"getAlgorithm"],[3021,41,2448,42],[3021,42,2448,42,"getAlgorithm"],[3021,54,2448,42],[3021,56,2448,43,"header"],[3021,62,2448,49],[3021,63,2448,50,"alg"],[3021,66,2448,53],[3021,67,2448,54],[3022,8,2449,12],[3023,8,2450,12],[3023,14,2450,18,"publicKey"],[3023,23,2450,27],[3023,26,2450,30],[3023,32,2450,36,"crypto"],[3023,38,2450,42],[3023,39,2450,43,"subtle"],[3023,45,2450,49],[3023,46,2450,50,"importKey"],[3023,55,2450,59],[3023,56,2450,60],[3023,61,2450,65],[3023,63,2450,67,"signingKey"],[3023,73,2450,77],[3023,75,2450,79,"algorithm"],[3023,84,2450,88],[3023,86,2450,90],[3023,90,2450,94],[3023,92,2450,96],[3023,93,2451,16],[3023,101,2451,24],[3023,102,2452,13],[3023,103,2452,14],[3024,8,2453,12],[3025,8,2454,12],[3025,14,2454,18,"isValid"],[3025,21,2454,25],[3025,24,2454,28],[3025,30,2454,34,"crypto"],[3025,36,2454,40],[3025,37,2454,41,"subtle"],[3025,43,2454,47],[3025,44,2454,48,"verify"],[3025,50,2454,54],[3025,51,2454,55,"algorithm"],[3025,60,2454,64],[3025,62,2454,66,"publicKey"],[3025,71,2454,75],[3025,73,2454,77,"signature"],[3025,82,2454,86],[3025,84,2454,88],[3025,88,2454,88,"stringToUint8Array"],[3025,101,2454,106],[3025,102,2454,106,"stringToUint8Array"],[3025,120,2454,106],[3025,122,2454,107],[3025,125,2454,110,"rawHeader"],[3025,134,2454,119],[3025,138,2454,123,"rawPayload"],[3025,148,2454,133],[3025,150,2454,135],[3025,151,2454,136],[3025,152,2454,137],[3026,8,2455,12],[3026,12,2455,16],[3026,13,2455,17,"isValid"],[3026,20,2455,24],[3026,22,2455,26],[3027,10,2456,16],[3027,16,2456,22],[3027,20,2456,26,"AuthInvalidJwtError"],[3027,30,2456,45],[3027,31,2456,45,"AuthInvalidJwtError"],[3027,50,2456,45],[3027,51,2456,46],[3027,74,2456,69],[3027,75,2456,70],[3028,8,2457,12],[3029,8,2458,12],[3030,8,2459,12],[3030,15,2459,19],[3031,10,2460,16,"data"],[3031,14,2460,20],[3031,16,2460,22],[3032,12,2461,20,"claims"],[3032,18,2461,26],[3032,20,2461,28,"payload"],[3032,27,2461,35],[3033,12,2462,20,"header"],[3033,18,2462,26],[3034,12,2463,20,"signature"],[3035,10,2464,16],[3035,11,2464,17],[3036,10,2465,16,"error"],[3036,15,2465,21],[3036,17,2465,23],[3037,8,2466,12],[3037,9,2466,13],[3038,6,2467,8],[3038,7,2467,9],[3038,8,2468,8],[3038,15,2468,15,"error"],[3038,20,2468,20],[3038,22,2468,22],[3039,8,2469,12],[3039,12,2469,16],[3039,16,2469,16,"isAuthError"],[3039,26,2469,27],[3039,27,2469,27,"isAuthError"],[3039,38,2469,27],[3039,40,2469,28,"error"],[3039,45,2469,33],[3039,46,2469,34],[3039,48,2469,36],[3040,10,2470,16],[3040,17,2470,23],[3041,12,2470,25,"data"],[3041,16,2470,29],[3041,18,2470,31],[3041,22,2470,35],[3042,12,2470,37,"error"],[3043,10,2470,43],[3043,11,2470,44],[3044,8,2471,12],[3045,8,2472,12],[3045,14,2472,18,"error"],[3045,19,2472,23],[3046,6,2473,8],[3047,4,2474,4],[3048,2,2475,0],[3049,2,2476,0,"GoTrueClient"],[3049,14,2476,12],[3049,15,2476,13,"nextInstanceID"],[3049,29,2476,27],[3049,32,2476,30],[3049,33,2476,31],[3050,0,2476,32],[3050,3]],"functionMap":{"names":["<global>","lockNoOp","GoTrueClient","constructor","_b.addEventListener$argument_1","get__jwks","set__jwks","get__jwks_cached_at","set__jwks_cached_at","_debug","initialize","<anonymous>","_acquireLock$argument_1","_initialize","setTimeout$argument_0","signInAnonymously","signUp","signInWithPassword","signInWithOAuth","exchangeCodeForSession","signInWithWeb3","signInWithEthereum","resolvedWallet.request.then$argument_0","resolvedWallet.request.then._catch$argument_0","signInWithSolana","options.signInWithSolana.resources.map$argument_0","_exchangeCodeForSession","signInWithIdToken","signInWithOtp","verifyOtp","signInWithSSO","reauthenticate","_reauthenticate","_useSession$argument_0","resend","getSession","_acquireLock","lock$argument_2","_useSession","__loadSession","Proxy$argument_1.get","getUser","_getUser","updateUser","_updateUser","setSession","_setSession","refreshSession","_refreshSession","_getSessionFromURL","_isImplicitGrantCallback","_isPKCECallback","signOut","_signOut","onAuthStateChange","subscription.unsubscribe","_emitInitialSession","resetPasswordForEmail","getUserIdentities","linkIdentity","unlinkIdentity","_refreshAccessToken","retryable$argument_0","retryable$argument_1","_isValidSession","_handleProviderSignIn","_recoverAndRefresh","_callRefreshToken","_notifyAllSubscribers","Array.from.map$argument_0","_saveSession","_removeSession","_removeVisibilityChangedCallback","_startAutoRefresh","setInterval$argument_0","_stopAutoRefresh","startAutoRefresh","stopAutoRefresh","_autoRefreshTokenTick","_handleVisibilityChange","visibilityChangedCallback","_onVisibilityChanged","_getUrlForProvider","_unenroll","_enroll","_verify","_challenge","_challengeAndVerify","_listFactors","factors.filter$argument_0","_getAuthenticatorAssuranceLevel","_a.filter$argument_0","fetchJwk","jwks.keys.find$argument_0","data.keys.find$argument_0","getClaims"],"mappings":"AAA;ACuB;CDE;eEU;ICI;6GCuG;aDG;KDG;IGI;KHG;IIC;KJE;IKC;KLG;IMC;KNE;IOC;KPK;IQM;kCCI;+CCC;aDE;SDC;KRE;IWO;2BCqC;iBDO;KXmB;IaM;Kb6B;IcW;Kd6D;IeS;KfoD;IgBK;KhBQ;IiBI;qCPE;SOE;KjBC;IkBQ;KlBU;ImBC;sBCsC,cD;uBEC;aFE;KnB+D;IsBC;sECmG,6BD;KtBwC;IwBC;KxBkC;IyBK;KzBoC;I0BkB;K1B+C;I2BI;K3BmC;I4Be;K5BuB;I6BK;2CnBE;SmBE;K7BC;I8BC;0CCE;aDW;K9BQ;IgCI;KhCoC;IiCY;mDvBE;oCqBC;arBE;SuBC;KjCE;IkCI;gCzBO;iByBG;yCzBC;iByBO;8ECG;6C1BK;qB0BO;aDc;KlCK;IoCO;KpCU;IqCM;6BC2C;yBDQ;KrCe;IuCQ;mD7BK;S6BE;KvCE;IwCC;0CTS;aSe;KxCc;IyCI;2C/BE;S+BE;KzCC;I0CC;0CXE;aW4B;K1CQ;I2CM;2CjCE;SiCE;K3CC;I4CC;K5CgD;I6CO;2CnCE;SmCE;K7CC;I8CC;0CfE;aeoB;K9CQ;I+CI;K/CsF;IgDI;KhDE;IiDI;KjDG;IkDS;2CxCE;SwCE;KlDC;ImDC;sCpBC;SoBuB;KnDC;IoDK;yBCK;aDG;S3CI;wCCE;aDE;S2CC;KpDE;IsDC;sCvBC;SuBc;KtDC;IuDQ;KvD0B;IwDI;KxDc;IyDK;2D1BG;a0Be;KzDc;I0DI;0C3BE;a2BU;K1DQ;I2DK;mCCM;aDU,EE;aFM;K3DY;I8DC;K9DO;I+DC;K/DY;IgEK;KhE0F;IiEC;KjEyC;IkEC;+ECQ;aDO;KlEY;IoEK;KpEmC;IqEC;KrES;IsEO;KtEY;IuEK;mCCG,kCD;mB3DqB;S2DG;KvEC;IyEK;KzEO;I0EuB;K1EG;I2ES;K3EG;I4EI;uClEG;sDqBI;yBrBY;akES;K5EU;I6EM;6CCU,kDD;K7ES;I+EI;4CrEe;iBqEQ;K/EQ;IgFO;KhFwB;IiFC;0ClDE;akDU;KjFQ;IkFC;0CnDE;amDmB;KlFQ;ImFI;qCzEC;8CqBE;iBrBiB;SyEQ;KnFC;IoFI;qC1EC;8CqBE;iBrBW;S0EQ;KpFC;IqFI;KrFc;IsFI;oCCO,yED;qCCC,0ED;KtFS;IwFI;qC9EC;0CqBC;yH0DkB,wC1D;arBM;S8EC;KxFC;I0FC;iCCE,wBD;kCCM,wBD;6BEkB,wBF;K1FK;I6FiB;K7F+D;CFC"},"hasCjsExports":false},"type":"js/module"}]}