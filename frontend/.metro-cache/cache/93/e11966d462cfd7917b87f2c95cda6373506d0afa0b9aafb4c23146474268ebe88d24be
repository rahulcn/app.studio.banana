{"dependencies":[{"name":"buffer/","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":19,"index":33},"end":{"line":2,"column":37,"index":51}}],"key":"bRm6ooWoG+lcXqdRQYxxgXDOd5s=","exportNames":["*"],"imports":1}},{"name":"./infra","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":23,"index":77},"end":{"line":4,"column":41,"index":95}}],"key":"R5VSp/ZUQjtPw91o58u7sT8/cWc=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  const {\n    Buffer\n  } = require(_dependencyMap[0], \"buffer/\");\n  const {\n    isASCIIHex\n  } = require(_dependencyMap[1], \"./infra\");\n  function strictlySplitByteSequence(buf, cp) {\n    const list = [];\n    let last = 0;\n    let i = buf.indexOf(cp);\n    while (i >= 0) {\n      list.push(buf.slice(last, i));\n      last = i + 1;\n      i = buf.indexOf(cp, last);\n    }\n    if (last !== buf.length) {\n      list.push(buf.slice(last));\n    }\n    return list;\n  }\n  function replaceByteInByteSequence(buf, from, to) {\n    let i = buf.indexOf(from);\n    while (i >= 0) {\n      buf[i] = to;\n      i = buf.indexOf(from, i + 1);\n    }\n    return buf;\n  }\n  function percentEncode(c) {\n    let hex = c.toString(16).toUpperCase();\n    if (hex.length === 1) {\n      hex = \"0\" + hex;\n    }\n    return \"%\" + hex;\n  }\n  function percentDecode(input) {\n    const output = Buffer.alloc(input.byteLength);\n    let ptr = 0;\n    for (let i = 0; i < input.length; ++i) {\n      if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {\n        output[ptr++] = input[i];\n      } else {\n        output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);\n        i += 2;\n      }\n    }\n    return output.slice(0, ptr);\n  }\n  function parseUrlencoded(input) {\n    const sequences = strictlySplitByteSequence(input, 38);\n    const output = [];\n    for (const bytes of sequences) {\n      if (bytes.length === 0) {\n        continue;\n      }\n      let name;\n      let value;\n      const indexOfEqual = bytes.indexOf(61);\n      if (indexOfEqual >= 0) {\n        name = bytes.slice(0, indexOfEqual);\n        value = bytes.slice(indexOfEqual + 1);\n      } else {\n        name = bytes;\n        value = Buffer.alloc(0);\n      }\n      name = replaceByteInByteSequence(Buffer.from(name), 43, 32);\n      value = replaceByteInByteSequence(Buffer.from(value), 43, 32);\n      output.push([percentDecode(name).toString(), percentDecode(value).toString()]);\n    }\n    return output;\n  }\n  function serializeUrlencodedByte(input) {\n    let output = \"\";\n    for (const byte of input) {\n      if (byte === 32) {\n        output += \"+\";\n      } else if (byte === 42 || byte === 45 || byte === 46 || byte >= 48 && byte <= 57 || byte >= 65 && byte <= 90 || byte === 95 || byte >= 97 && byte <= 122) {\n        output += String.fromCodePoint(byte);\n      } else {\n        output += percentEncode(byte);\n      }\n    }\n    return output;\n  }\n  function serializeUrlencoded(tuples, encodingOverride = undefined) {\n    let encoding = \"utf-8\";\n    if (encodingOverride !== undefined) {\n      encoding = encodingOverride;\n    }\n    let output = \"\";\n    for (const [i, tuple] of tuples.entries()) {\n      // TODO: handle encoding override\n      const name = serializeUrlencodedByte(Buffer.from(tuple[0]));\n      let value = tuple[1];\n      if (tuple.length > 2 && tuple[2] !== undefined) {\n        if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n          value = encoding;\n        } else if (tuple[2] === \"file\") {\n          // value is a File object\n          value = value.name;\n        }\n      }\n      value = serializeUrlencodedByte(Buffer.from(value));\n      if (i !== 0) {\n        output += \"&\";\n      }\n      output += `${name}=${value}`;\n    }\n    return output;\n  }\n  module.exports = {\n    percentEncode,\n    percentDecode,\n    // application/x-www-form-urlencoded string parser\n    parseUrlencoded(input) {\n      return parseUrlencoded(Buffer.from(input));\n    },\n    // application/x-www-form-urlencoded serializer\n    serializeUrlencoded\n  };\n});","lineCount":124,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,8,2,6],[5,4,2,8,"Buffer"],[6,2,2,15],[6,3,2,16],[6,6,2,19,"require"],[6,13,2,26],[6,14,2,26,"_dependencyMap"],[6,28,2,26],[6,42,2,36],[6,43,2,37],[7,2,4,0],[7,8,4,6],[8,4,4,8,"isASCIIHex"],[9,2,4,19],[9,3,4,20],[9,6,4,23,"require"],[9,13,4,30],[9,14,4,30,"_dependencyMap"],[9,28,4,30],[9,42,4,40],[9,43,4,41],[10,2,6,0],[10,11,6,9,"strictlySplitByteSequence"],[10,36,6,34,"strictlySplitByteSequence"],[10,37,6,35,"buf"],[10,40,6,38],[10,42,6,40,"cp"],[10,44,6,42],[10,46,6,44],[11,4,7,2],[11,10,7,8,"list"],[11,14,7,12],[11,17,7,15],[11,19,7,17],[12,4,8,2],[12,8,8,6,"last"],[12,12,8,10],[12,15,8,13],[12,16,8,14],[13,4,9,2],[13,8,9,6,"i"],[13,9,9,7],[13,12,9,10,"buf"],[13,15,9,13],[13,16,9,14,"indexOf"],[13,23,9,21],[13,24,9,22,"cp"],[13,26,9,24],[13,27,9,25],[14,4,10,2],[14,11,10,9,"i"],[14,12,10,10],[14,16,10,14],[14,17,10,15],[14,19,10,17],[15,6,11,4,"list"],[15,10,11,8],[15,11,11,9,"push"],[15,15,11,13],[15,16,11,14,"buf"],[15,19,11,17],[15,20,11,18,"slice"],[15,25,11,23],[15,26,11,24,"last"],[15,30,11,28],[15,32,11,30,"i"],[15,33,11,31],[15,34,11,32],[15,35,11,33],[16,6,12,4,"last"],[16,10,12,8],[16,13,12,11,"i"],[16,14,12,12],[16,17,12,15],[16,18,12,16],[17,6,13,4,"i"],[17,7,13,5],[17,10,13,8,"buf"],[17,13,13,11],[17,14,13,12,"indexOf"],[17,21,13,19],[17,22,13,20,"cp"],[17,24,13,22],[17,26,13,24,"last"],[17,30,13,28],[17,31,13,29],[18,4,14,2],[19,4,15,2],[19,8,15,6,"last"],[19,12,15,10],[19,17,15,15,"buf"],[19,20,15,18],[19,21,15,19,"length"],[19,27,15,25],[19,29,15,27],[20,6,16,4,"list"],[20,10,16,8],[20,11,16,9,"push"],[20,15,16,13],[20,16,16,14,"buf"],[20,19,16,17],[20,20,16,18,"slice"],[20,25,16,23],[20,26,16,24,"last"],[20,30,16,28],[20,31,16,29],[20,32,16,30],[21,4,17,2],[22,4,18,2],[22,11,18,9,"list"],[22,15,18,13],[23,2,19,0],[24,2,21,0],[24,11,21,9,"replaceByteInByteSequence"],[24,36,21,34,"replaceByteInByteSequence"],[24,37,21,35,"buf"],[24,40,21,38],[24,42,21,40,"from"],[24,46,21,44],[24,48,21,46,"to"],[24,50,21,48],[24,52,21,50],[25,4,22,2],[25,8,22,6,"i"],[25,9,22,7],[25,12,22,10,"buf"],[25,15,22,13],[25,16,22,14,"indexOf"],[25,23,22,21],[25,24,22,22,"from"],[25,28,22,26],[25,29,22,27],[26,4,23,2],[26,11,23,9,"i"],[26,12,23,10],[26,16,23,14],[26,17,23,15],[26,19,23,17],[27,6,24,4,"buf"],[27,9,24,7],[27,10,24,8,"i"],[27,11,24,9],[27,12,24,10],[27,15,24,13,"to"],[27,17,24,15],[28,6,25,4,"i"],[28,7,25,5],[28,10,25,8,"buf"],[28,13,25,11],[28,14,25,12,"indexOf"],[28,21,25,19],[28,22,25,20,"from"],[28,26,25,24],[28,28,25,26,"i"],[28,29,25,27],[28,32,25,30],[28,33,25,31],[28,34,25,32],[29,4,26,2],[30,4,27,2],[30,11,27,9,"buf"],[30,14,27,12],[31,2,28,0],[32,2,30,0],[32,11,30,9,"percentEncode"],[32,24,30,22,"percentEncode"],[32,25,30,23,"c"],[32,26,30,24],[32,28,30,26],[33,4,31,2],[33,8,31,6,"hex"],[33,11,31,9],[33,14,31,12,"c"],[33,15,31,13],[33,16,31,14,"toString"],[33,24,31,22],[33,25,31,23],[33,27,31,25],[33,28,31,26],[33,29,31,27,"toUpperCase"],[33,40,31,38],[33,41,31,39],[33,42,31,40],[34,4,32,2],[34,8,32,6,"hex"],[34,11,32,9],[34,12,32,10,"length"],[34,18,32,16],[34,23,32,21],[34,24,32,22],[34,26,32,24],[35,6,33,4,"hex"],[35,9,33,7],[35,12,33,10],[35,15,33,13],[35,18,33,16,"hex"],[35,21,33,19],[36,4,34,2],[37,4,36,2],[37,11,36,9],[37,14,36,12],[37,17,36,15,"hex"],[37,20,36,18],[38,2,37,0],[39,2,39,0],[39,11,39,9,"percentDecode"],[39,24,39,22,"percentDecode"],[39,25,39,23,"input"],[39,30,39,28],[39,32,39,30],[40,4,40,2],[40,10,40,8,"output"],[40,16,40,14],[40,19,40,17,"Buffer"],[40,25,40,23],[40,26,40,24,"alloc"],[40,31,40,29],[40,32,40,30,"input"],[40,37,40,35],[40,38,40,36,"byteLength"],[40,48,40,46],[40,49,40,47],[41,4,41,2],[41,8,41,6,"ptr"],[41,11,41,9],[41,14,41,12],[41,15,41,13],[42,4,42,2],[42,9,42,7],[42,13,42,11,"i"],[42,14,42,12],[42,17,42,15],[42,18,42,16],[42,20,42,18,"i"],[42,21,42,19],[42,24,42,22,"input"],[42,29,42,27],[42,30,42,28,"length"],[42,36,42,34],[42,38,42,36],[42,40,42,38,"i"],[42,41,42,39],[42,43,42,41],[43,6,43,4],[43,10,43,8,"input"],[43,15,43,13],[43,16,43,14,"i"],[43,17,43,15],[43,18,43,16],[43,23,43,21],[43,25,43,23],[43,29,43,27],[43,30,43,28,"isASCIIHex"],[43,40,43,38],[43,41,43,39,"input"],[43,46,43,44],[43,47,43,45,"i"],[43,48,43,46],[43,51,43,49],[43,52,43,50],[43,53,43,51],[43,54,43,52],[43,58,43,56],[43,59,43,57,"isASCIIHex"],[43,69,43,67],[43,70,43,68,"input"],[43,75,43,73],[43,76,43,74,"i"],[43,77,43,75],[43,80,43,78],[43,81,43,79],[43,82,43,80],[43,83,43,81],[43,85,43,83],[44,8,44,6,"output"],[44,14,44,12],[44,15,44,13,"ptr"],[44,18,44,16],[44,20,44,18],[44,21,44,19],[44,24,44,22,"input"],[44,29,44,27],[44,30,44,28,"i"],[44,31,44,29],[44,32,44,30],[45,6,45,4],[45,7,45,5],[45,13,45,11],[46,8,46,6,"output"],[46,14,46,12],[46,15,46,13,"ptr"],[46,18,46,16],[46,20,46,18],[46,21,46,19],[46,24,46,22,"parseInt"],[46,32,46,30],[46,33,46,31,"input"],[46,38,46,36],[46,39,46,37,"slice"],[46,44,46,42],[46,45,46,43,"i"],[46,46,46,44],[46,49,46,47],[46,50,46,48],[46,52,46,50,"i"],[46,53,46,51],[46,56,46,54],[46,57,46,55],[46,58,46,56],[46,59,46,57,"toString"],[46,67,46,65],[46,68,46,66],[46,69,46,67],[46,71,46,69],[46,73,46,71],[46,74,46,72],[47,8,47,6,"i"],[47,9,47,7],[47,13,47,11],[47,14,47,12],[48,6,48,4],[49,4,49,2],[50,4,50,2],[50,11,50,9,"output"],[50,17,50,15],[50,18,50,16,"slice"],[50,23,50,21],[50,24,50,22],[50,25,50,23],[50,27,50,25,"ptr"],[50,30,50,28],[50,31,50,29],[51,2,51,0],[52,2,53,0],[52,11,53,9,"parseUrlencoded"],[52,26,53,24,"parseUrlencoded"],[52,27,53,25,"input"],[52,32,53,30],[52,34,53,32],[53,4,54,2],[53,10,54,8,"sequences"],[53,19,54,17],[53,22,54,20,"strictlySplitByteSequence"],[53,47,54,45],[53,48,54,46,"input"],[53,53,54,51],[53,55,54,53],[53,57,54,55],[53,58,54,56],[54,4,55,2],[54,10,55,8,"output"],[54,16,55,14],[54,19,55,17],[54,21,55,19],[55,4,56,2],[55,9,56,7],[55,15,56,13,"bytes"],[55,20,56,18],[55,24,56,22,"sequences"],[55,33,56,31],[55,35,56,33],[56,6,57,4],[56,10,57,8,"bytes"],[56,15,57,13],[56,16,57,14,"length"],[56,22,57,20],[56,27,57,25],[56,28,57,26],[56,30,57,28],[57,8,58,6],[58,6,59,4],[59,6,61,4],[59,10,61,8,"name"],[59,14,61,12],[60,6,62,4],[60,10,62,8,"value"],[60,15,62,13],[61,6,63,4],[61,12,63,10,"indexOfEqual"],[61,24,63,22],[61,27,63,25,"bytes"],[61,32,63,30],[61,33,63,31,"indexOf"],[61,40,63,38],[61,41,63,39],[61,43,63,41],[61,44,63,42],[62,6,65,4],[62,10,65,8,"indexOfEqual"],[62,22,65,20],[62,26,65,24],[62,27,65,25],[62,29,65,27],[63,8,66,6,"name"],[63,12,66,10],[63,15,66,13,"bytes"],[63,20,66,18],[63,21,66,19,"slice"],[63,26,66,24],[63,27,66,25],[63,28,66,26],[63,30,66,28,"indexOfEqual"],[63,42,66,40],[63,43,66,41],[64,8,67,6,"value"],[64,13,67,11],[64,16,67,14,"bytes"],[64,21,67,19],[64,22,67,20,"slice"],[64,27,67,25],[64,28,67,26,"indexOfEqual"],[64,40,67,38],[64,43,67,41],[64,44,67,42],[64,45,67,43],[65,6,68,4],[65,7,68,5],[65,13,68,11],[66,8,69,6,"name"],[66,12,69,10],[66,15,69,13,"bytes"],[66,20,69,18],[67,8,70,6,"value"],[67,13,70,11],[67,16,70,14,"Buffer"],[67,22,70,20],[67,23,70,21,"alloc"],[67,28,70,26],[67,29,70,27],[67,30,70,28],[67,31,70,29],[68,6,71,4],[69,6,73,4,"name"],[69,10,73,8],[69,13,73,11,"replaceByteInByteSequence"],[69,38,73,36],[69,39,73,37,"Buffer"],[69,45,73,43],[69,46,73,44,"from"],[69,50,73,48],[69,51,73,49,"name"],[69,55,73,53],[69,56,73,54],[69,58,73,56],[69,60,73,58],[69,62,73,60],[69,64,73,62],[69,65,73,63],[70,6,74,4,"value"],[70,11,74,9],[70,14,74,12,"replaceByteInByteSequence"],[70,39,74,37],[70,40,74,38,"Buffer"],[70,46,74,44],[70,47,74,45,"from"],[70,51,74,49],[70,52,74,50,"value"],[70,57,74,55],[70,58,74,56],[70,60,74,58],[70,62,74,60],[70,64,74,62],[70,66,74,64],[70,67,74,65],[71,6,76,4,"output"],[71,12,76,10],[71,13,76,11,"push"],[71,17,76,15],[71,18,76,16],[71,19,76,17,"percentDecode"],[71,32,76,30],[71,33,76,31,"name"],[71,37,76,35],[71,38,76,36],[71,39,76,37,"toString"],[71,47,76,45],[71,48,76,46],[71,49,76,47],[71,51,76,49,"percentDecode"],[71,64,76,62],[71,65,76,63,"value"],[71,70,76,68],[71,71,76,69],[71,72,76,70,"toString"],[71,80,76,78],[71,81,76,79],[71,82,76,80],[71,83,76,81],[71,84,76,82],[72,4,77,2],[73,4,78,2],[73,11,78,9,"output"],[73,17,78,15],[74,2,79,0],[75,2,81,0],[75,11,81,9,"serializeUrlencodedByte"],[75,34,81,32,"serializeUrlencodedByte"],[75,35,81,33,"input"],[75,40,81,38],[75,42,81,40],[76,4,82,2],[76,8,82,6,"output"],[76,14,82,12],[76,17,82,15],[76,19,82,17],[77,4,83,2],[77,9,83,7],[77,15,83,13,"byte"],[77,19,83,17],[77,23,83,21,"input"],[77,28,83,26],[77,30,83,28],[78,6,84,4],[78,10,84,8,"byte"],[78,14,84,12],[78,19,84,17],[78,21,84,19],[78,23,84,21],[79,8,85,6,"output"],[79,14,85,12],[79,18,85,16],[79,21,85,19],[80,6,86,4],[80,7,86,5],[80,13,86,11],[80,17,86,15,"byte"],[80,21,86,19],[80,26,86,24],[80,28,86,26],[80,32,87,15,"byte"],[80,36,87,19],[80,41,87,24],[80,43,87,26],[80,47,88,15,"byte"],[80,51,88,19],[80,56,88,24],[80,58,88,26],[80,62,89,16,"byte"],[80,66,89,20],[80,70,89,24],[80,72,89,26],[80,76,89,30,"byte"],[80,80,89,34],[80,84,89,38],[80,86,89,41],[80,90,90,16,"byte"],[80,94,90,20],[80,98,90,24],[80,100,90,26],[80,104,90,30,"byte"],[80,108,90,34],[80,112,90,38],[80,114,90,41],[80,118,91,15,"byte"],[80,122,91,19],[80,127,91,24],[80,129,91,26],[80,133,92,16,"byte"],[80,137,92,20],[80,141,92,24],[80,143,92,26],[80,147,92,30,"byte"],[80,151,92,34],[80,155,92,38],[80,158,92,42],[80,160,92,44],[81,8,93,6,"output"],[81,14,93,12],[81,18,93,16,"String"],[81,24,93,22],[81,25,93,23,"fromCodePoint"],[81,38,93,36],[81,39,93,37,"byte"],[81,43,93,41],[81,44,93,42],[82,6,94,4],[82,7,94,5],[82,13,94,11],[83,8,95,6,"output"],[83,14,95,12],[83,18,95,16,"percentEncode"],[83,31,95,29],[83,32,95,30,"byte"],[83,36,95,34],[83,37,95,35],[84,6,96,4],[85,4,97,2],[86,4,98,2],[86,11,98,9,"output"],[86,17,98,15],[87,2,99,0],[88,2,101,0],[88,11,101,9,"serializeUrlencoded"],[88,30,101,28,"serializeUrlencoded"],[88,31,101,29,"tuples"],[88,37,101,35],[88,39,101,37,"encodingOverride"],[88,55,101,53],[88,58,101,56,"undefined"],[88,67,101,65],[88,69,101,67],[89,4,102,2],[89,8,102,6,"encoding"],[89,16,102,14],[89,19,102,17],[89,26,102,24],[90,4,103,2],[90,8,103,6,"encodingOverride"],[90,24,103,22],[90,29,103,27,"undefined"],[90,38,103,36],[90,40,103,38],[91,6,104,4,"encoding"],[91,14,104,12],[91,17,104,15,"encodingOverride"],[91,33,104,31],[92,4,105,2],[93,4,107,2],[93,8,107,6,"output"],[93,14,107,12],[93,17,107,15],[93,19,107,17],[94,4,108,2],[94,9,108,7],[94,15,108,13],[94,16,108,14,"i"],[94,17,108,15],[94,19,108,17,"tuple"],[94,24,108,22],[94,25,108,23],[94,29,108,27,"tuples"],[94,35,108,33],[94,36,108,34,"entries"],[94,43,108,41],[94,44,108,42],[94,45,108,43],[94,47,108,45],[95,6,109,4],[96,6,110,4],[96,12,110,10,"name"],[96,16,110,14],[96,19,110,17,"serializeUrlencodedByte"],[96,42,110,40],[96,43,110,41,"Buffer"],[96,49,110,47],[96,50,110,48,"from"],[96,54,110,52],[96,55,110,53,"tuple"],[96,60,110,58],[96,61,110,59],[96,62,110,60],[96,63,110,61],[96,64,110,62],[96,65,110,63],[97,6,111,4],[97,10,111,8,"value"],[97,15,111,13],[97,18,111,16,"tuple"],[97,23,111,21],[97,24,111,22],[97,25,111,23],[97,26,111,24],[98,6,112,4],[98,10,112,8,"tuple"],[98,15,112,13],[98,16,112,14,"length"],[98,22,112,20],[98,25,112,23],[98,26,112,24],[98,30,112,28,"tuple"],[98,35,112,33],[98,36,112,34],[98,37,112,35],[98,38,112,36],[98,43,112,41,"undefined"],[98,52,112,50],[98,54,112,52],[99,8,113,6],[99,12,113,10,"tuple"],[99,17,113,15],[99,18,113,16],[99,19,113,17],[99,20,113,18],[99,25,113,23],[99,33,113,31],[99,37,113,35,"name"],[99,41,113,39],[99,46,113,44],[99,57,113,55],[99,59,113,57],[100,10,114,8,"value"],[100,15,114,13],[100,18,114,16,"encoding"],[100,26,114,24],[101,8,115,6],[101,9,115,7],[101,15,115,13],[101,19,115,17,"tuple"],[101,24,115,22],[101,25,115,23],[101,26,115,24],[101,27,115,25],[101,32,115,30],[101,38,115,36],[101,40,115,38],[102,10,116,8],[103,10,117,8,"value"],[103,15,117,13],[103,18,117,16,"value"],[103,23,117,21],[103,24,117,22,"name"],[103,28,117,26],[104,8,118,6],[105,6,119,4],[106,6,120,4,"value"],[106,11,120,9],[106,14,120,12,"serializeUrlencodedByte"],[106,37,120,35],[106,38,120,36,"Buffer"],[106,44,120,42],[106,45,120,43,"from"],[106,49,120,47],[106,50,120,48,"value"],[106,55,120,53],[106,56,120,54],[106,57,120,55],[107,6,121,4],[107,10,121,8,"i"],[107,11,121,9],[107,16,121,14],[107,17,121,15],[107,19,121,17],[108,8,122,6,"output"],[108,14,122,12],[108,18,122,16],[108,21,122,19],[109,6,123,4],[110,6,124,4,"output"],[110,12,124,10],[110,16,124,14],[110,19,124,17,"name"],[110,23,124,21],[110,27,124,25,"value"],[110,32,124,30],[110,34,124,32],[111,4,125,2],[112,4,126,2],[112,11,126,9,"output"],[112,17,126,15],[113,2,127,0],[114,2,129,0,"module"],[114,8,129,6],[114,9,129,7,"exports"],[114,16,129,14],[114,19,129,17],[115,4,130,2,"percentEncode"],[115,17,130,15],[116,4,131,2,"percentDecode"],[116,17,131,15],[117,4,133,2],[118,4,134,2,"parseUrlencoded"],[118,19,134,17,"parseUrlencoded"],[118,20,134,18,"input"],[118,25,134,23],[118,27,134,25],[119,6,135,4],[119,13,135,11,"parseUrlencoded"],[119,28,135,26],[119,29,135,27,"Buffer"],[119,35,135,33],[119,36,135,34,"from"],[119,40,135,38],[119,41,135,39,"input"],[119,46,135,44],[119,47,135,45],[119,48,135,46],[120,4,136,2],[120,5,136,3],[121,4,138,2],[122,4,139,2,"serializeUrlencoded"],[123,2,140,0],[123,3,140,1],[124,0,140,2],[124,3]],"functionMap":{"names":["<global>","strictlySplitByteSequence","replaceByteInByteSequence","percentEncode","percentDecode","parseUrlencoded","serializeUrlencodedByte","serializeUrlencoded","module.exports.parseUrlencoded"],"mappings":"AAA;ACK;CDa;AEE;CFO;AGE;CHO;AIE;CJY;AKE;CL0B;AME;CNkB;AOE;CP0B;EQO;GRE"},"hasCjsExports":true},"type":"js/module"}]}