{"dependencies":[{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":681},"end":{"line":10,"column":82,"index":763}}],"key":"tudpaQjH3OjVUtpmjZhVLT9U2eg=","exportNames":["*"],"imports":1}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":764},"end":{"line":11,"column":60,"index":824}}],"key":"/wMuRavEihVn+ROyUD1wSDV6K9s=","exportNames":["*"],"imports":1}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":825},"end":{"line":12,"column":64,"index":889}}],"key":"MBha6f1BCecZ/poT97RGOQKH7kw=","exportNames":["*"],"imports":1}},{"name":"./BlobDownloadBuilder","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":890},"end":{"line":13,"column":56,"index":946}}],"key":"FL3uovgOrEodM/aGLqdgupLXHQ4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return StorageFileApi;\n    }\n  });\n  var _libErrors = require(_dependencyMap[0], \"../lib/errors\");\n  var _libFetch = require(_dependencyMap[1], \"../lib/fetch\");\n  var _libHelpers = require(_dependencyMap[2], \"../lib/helpers\");\n  var _BlobDownloadBuilder = require(_dependencyMap[3], \"./BlobDownloadBuilder\");\n  var BlobDownloadBuilder = _interopDefault(_BlobDownloadBuilder);\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  const DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n      column: 'name',\n      order: 'asc'\n    }\n  };\n  const DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false\n  };\n  class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n      this.shouldThrowOnError = false;\n      this.url = url;\n      this.headers = headers;\n      this.bucketId = bucketId;\n      this.fetch = (0, _libHelpers.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let body;\n          const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n          let headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n            'x-upsert': String(options.upsert)\n          });\n          const metadata = options.metadata;\n          if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n            body = new FormData();\n            body.append('cacheControl', options.cacheControl);\n            if (metadata) {\n              body.append('metadata', this.encodeMetadata(metadata));\n            }\n            body.append('', fileBody);\n          } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n            body = fileBody;\n            body.append('cacheControl', options.cacheControl);\n            if (metadata) {\n              body.append('metadata', this.encodeMetadata(metadata));\n            }\n          } else {\n            body = fileBody;\n            headers['cache-control'] = `max-age=${options.cacheControl}`;\n            headers['content-type'] = options.contentType;\n            if (metadata) {\n              headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n            }\n          }\n          if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n            headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n          }\n          const cleanPath = this._removeEmptyFolders(path);\n          const _path = this._getFinalPath(cleanPath);\n          const data = yield (method == 'PUT' ? _libFetch.put : _libFetch.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n            headers\n          }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n            duplex: options.duplex\n          } : {}));\n          return {\n            data: {\n              path: cleanPath,\n              id: data.Id,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n      });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const url = new URL(this.url + `/object/upload/sign/${_path}`);\n        url.searchParams.set('token', token);\n        try {\n          let body;\n          const options = Object.assign({\n            upsert: DEFAULT_FILE_OPTIONS.upsert\n          }, fileOptions);\n          const headers = Object.assign(Object.assign({}, this.headers), {\n            'x-upsert': String(options.upsert)\n          });\n          if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n            body = new FormData();\n            body.append('cacheControl', options.cacheControl);\n            body.append('', fileBody);\n          } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n            body = fileBody;\n            body.append('cacheControl', options.cacheControl);\n          } else {\n            body = fileBody;\n            headers['cache-control'] = `max-age=${options.cacheControl}`;\n            headers['content-type'] = options.contentType;\n          }\n          const data = yield (0, _libFetch.put)(this.fetch, url.toString(), body, {\n            headers\n          });\n          return {\n            data: {\n              path: cleanPath,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let _path = this._getFinalPath(path);\n          const headers = Object.assign({}, this.headers);\n          if (options === null || options === void 0 ? void 0 : options.upsert) {\n            headers['x-upsert'] = 'true';\n          }\n          const data = yield (0, _libFetch.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n            headers\n          });\n          const url = new URL(this.url + data.url);\n          const token = url.searchParams.get('token');\n          if (!token) {\n            throw new _libErrors.StorageError('No token returned by API');\n          }\n          return {\n            data: {\n              signedUrl: url.toString(),\n              path,\n              token\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n      });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.post)(this.fetch, `${this.url}/object/move`, {\n            bucketId: this.bucketId,\n            sourceKey: fromPath,\n            destinationKey: toPath,\n            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.post)(this.fetch, `${this.url}/object/copy`, {\n            bucketId: this.bucketId,\n            sourceKey: fromPath,\n            destinationKey: toPath,\n            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n          }, {\n            headers: this.headers\n          });\n          return {\n            data: {\n              path: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let _path = this._getFinalPath(path);\n          let data = yield (0, _libFetch.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n            expiresIn\n          }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n            transform: options.transform\n          } : {}), {\n            headers: this.headers\n          });\n          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n          const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n          data = {\n            signedUrl\n          };\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n            expiresIn,\n            paths\n          }, {\n            headers: this.headers\n          });\n          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n          return {\n            data: data.map(datum => Object.assign(Object.assign({}, datum), {\n              signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n            })),\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n      const _path = this._getFinalPath(path);\n      const downloadFn = () => (0, _libFetch.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true\n      });\n      return new BlobDownloadBuilder.default(downloadFn, this.shouldThrowOnError);\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const _path = this._getFinalPath(path);\n        try {\n          const data = yield (0, _libFetch.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n            headers: this.headers\n          });\n          return {\n            data: (0, _libHelpers.recursiveToCamel)(data),\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const _path = this._getFinalPath(path);\n        try {\n          yield (0, _libFetch.head)(this.fetch, `${this.url}/object/${_path}`, {\n            headers: this.headers\n          });\n          return {\n            data: true,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error) && error instanceof _libErrors.StorageUnknownError) {\n            const originalError = error.originalError;\n            if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n              return {\n                data: false,\n                error\n              };\n            }\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n      const _path = this._getFinalPath(path);\n      const _queryString = [];\n      const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n      if (downloadQueryParam !== '') {\n        _queryString.push(downloadQueryParam);\n      }\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      if (transformationQuery !== '') {\n        _queryString.push(transformationQuery);\n      }\n      let queryString = _queryString.join('&');\n      if (queryString !== '') {\n        queryString = `?${queryString}`;\n      }\n      return {\n        data: {\n          publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n        }\n      };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, {\n            prefixes: paths\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files and folders within a path of the bucket.\n     * @param path The folder path.\n     * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n     */\n    list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n            prefix: path || ''\n          });\n          const data = yield (0, _libFetch.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n            headers: this.headers\n          }, parameters);\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * @experimental this method signature might change in the future\n     * @param options search options\n     * @param parameters\n     */\n    listV2(options, parameters) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const body = Object.assign({}, options);\n          const data = yield (0, _libFetch.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n            headers: this.headers\n          }, parameters);\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    encodeMetadata(metadata) {\n      return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.from(data).toString('base64');\n      }\n      return btoa(data);\n    }\n    _getFinalPath(path) {\n      return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n    }\n    _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n      const params = [];\n      if (transform.width) {\n        params.push(`width=${transform.width}`);\n      }\n      if (transform.height) {\n        params.push(`height=${transform.height}`);\n      }\n      if (transform.resize) {\n        params.push(`resize=${transform.resize}`);\n      }\n      if (transform.format) {\n        params.push(`format=${transform.format}`);\n      }\n      if (transform.quality) {\n        params.push(`quality=${transform.quality}`);\n      }\n      return params.join('&');\n    }\n  }\n});","lineCount":720,"map":[[12,2,27,15,"Object"],[12,8,27,15],[12,9,27,15,"defineProperty"],[12,23,27,15],[12,24,27,15,"exports"],[12,31,27,15],[13,4,27,15,"enumerable"],[13,14,27,15],[14,4,27,15,"get"],[14,7,27,15],[14,18,27,15,"get"],[14,19,27,15],[15,6,27,15],[15,13,27,15,"StorageFileApi"],[15,27,27,15],[16,4,27,15],[17,2,27,15],[18,2,10,0],[18,6,10,0,"_libErrors"],[18,16,10,0],[18,19,10,0,"require"],[18,26,10,0],[18,27,10,0,"_dependencyMap"],[18,41,10,0],[19,2,11,0],[19,6,11,0,"_libFetch"],[19,15,11,0],[19,18,11,0,"require"],[19,25,11,0],[19,26,11,0,"_dependencyMap"],[19,40,11,0],[20,2,12,0],[20,6,12,0,"_libHelpers"],[20,17,12,0],[20,20,12,0,"require"],[20,27,12,0],[20,28,12,0,"_dependencyMap"],[20,42,12,0],[21,2,13,0],[21,6,13,0,"_BlobDownloadBuilder"],[21,26,13,0],[21,29,13,0,"require"],[21,36,13,0],[21,37,13,0,"_dependencyMap"],[21,51,13,0],[22,2,13,0],[22,6,13,0,"BlobDownloadBuilder"],[22,25,13,0],[22,28,13,0,"_interopDefault"],[22,43,13,0],[22,44,13,0,"_BlobDownloadBuilder"],[22,64,13,0],[23,2,1,0],[23,6,1,4,"__awaiter"],[23,15,1,13],[23,18,1,17],[23,22,1,21],[23,26,1,25],[23,30,1,29],[23,31,1,30,"__awaiter"],[23,40,1,39],[23,44,1,44],[23,54,1,54,"thisArg"],[23,61,1,61],[23,63,1,63,"_arguments"],[23,73,1,73],[23,75,1,75,"P"],[23,76,1,76],[23,78,1,78,"generator"],[23,87,1,87],[23,89,1,89],[24,4,2,4],[24,13,2,13,"adopt"],[24,18,2,18,"adopt"],[24,19,2,19,"value"],[24,24,2,24],[24,26,2,26],[25,6,2,28],[25,13,2,35,"value"],[25,18,2,40],[25,30,2,52,"P"],[25,31,2,53],[25,34,2,56,"value"],[25,39,2,61],[25,42,2,64],[25,46,2,68,"P"],[25,47,2,69],[25,48,2,70],[25,58,2,80,"resolve"],[25,65,2,87],[25,67,2,89],[26,8,2,91,"resolve"],[26,15,2,98],[26,16,2,99,"value"],[26,21,2,104],[26,22,2,105],[27,6,2,107],[27,7,2,108],[27,8,2,109],[28,4,2,111],[29,4,3,4],[29,11,3,11],[29,16,3,16,"P"],[29,17,3,17],[29,22,3,22,"P"],[29,23,3,23],[29,26,3,26,"Promise"],[29,33,3,33],[29,34,3,34],[29,36,3,36],[29,46,3,46,"resolve"],[29,53,3,53],[29,55,3,55,"reject"],[29,61,3,61],[29,63,3,63],[30,6,4,8],[30,15,4,17,"fulfilled"],[30,24,4,26,"fulfilled"],[30,25,4,27,"value"],[30,30,4,32],[30,32,4,34],[31,8,4,36],[31,12,4,40],[32,10,4,42,"step"],[32,14,4,46],[32,15,4,47,"generator"],[32,24,4,56],[32,25,4,57,"next"],[32,29,4,61],[32,30,4,62,"value"],[32,35,4,67],[32,36,4,68],[32,37,4,69],[33,8,4,71],[33,9,4,72],[33,10,4,73],[33,17,4,80,"e"],[33,18,4,81],[33,20,4,83],[34,10,4,85,"reject"],[34,16,4,91],[34,17,4,92,"e"],[34,18,4,93],[34,19,4,94],[35,8,4,96],[36,6,4,98],[37,6,5,8],[37,15,5,17,"rejected"],[37,23,5,25,"rejected"],[37,24,5,26,"value"],[37,29,5,31],[37,31,5,33],[38,8,5,35],[38,12,5,39],[39,10,5,41,"step"],[39,14,5,45],[39,15,5,46,"generator"],[39,24,5,55],[39,25,5,56],[39,32,5,63],[39,33,5,64],[39,34,5,65,"value"],[39,39,5,70],[39,40,5,71],[39,41,5,72],[40,8,5,74],[40,9,5,75],[40,10,5,76],[40,17,5,83,"e"],[40,18,5,84],[40,20,5,86],[41,10,5,88,"reject"],[41,16,5,94],[41,17,5,95,"e"],[41,18,5,96],[41,19,5,97],[42,8,5,99],[43,6,5,101],[44,6,6,8],[44,15,6,17,"step"],[44,19,6,21,"step"],[44,20,6,22,"result"],[44,26,6,28],[44,28,6,30],[45,8,6,32,"result"],[45,14,6,38],[45,15,6,39,"done"],[45,19,6,43],[45,22,6,46,"resolve"],[45,29,6,53],[45,30,6,54,"result"],[45,36,6,60],[45,37,6,61,"value"],[45,42,6,66],[45,43,6,67],[45,46,6,70,"adopt"],[45,51,6,75],[45,52,6,76,"result"],[45,58,6,82],[45,59,6,83,"value"],[45,64,6,88],[45,65,6,89],[45,66,6,90,"then"],[45,70,6,94],[45,71,6,95,"fulfilled"],[45,80,6,104],[45,82,6,106,"rejected"],[45,90,6,114],[45,91,6,115],[46,6,6,117],[47,6,7,8,"step"],[47,10,7,12],[47,11,7,13],[47,12,7,14,"generator"],[47,21,7,23],[47,24,7,26,"generator"],[47,33,7,35],[47,34,7,36,"apply"],[47,39,7,41],[47,40,7,42,"thisArg"],[47,47,7,49],[47,49,7,51,"_arguments"],[47,59,7,61],[47,63,7,65],[47,65,7,67],[47,66,7,68],[47,68,7,70,"next"],[47,72,7,74],[47,73,7,75],[47,74,7,76],[47,75,7,77],[48,4,8,4],[48,5,8,5],[48,6,8,6],[49,2,9,0],[49,3,9,1],[50,2,14,0],[50,8,14,6,"DEFAULT_SEARCH_OPTIONS"],[50,30,14,28],[50,33,14,31],[51,4,15,4,"limit"],[51,9,15,9],[51,11,15,11],[51,14,15,14],[52,4,16,4,"offset"],[52,10,16,10],[52,12,16,12],[52,13,16,13],[53,4,17,4,"sortBy"],[53,10,17,10],[53,12,17,12],[54,6,18,8,"column"],[54,12,18,14],[54,14,18,16],[54,20,18,22],[55,6,19,8,"order"],[55,11,19,13],[55,13,19,15],[56,4,20,4],[57,2,21,0],[57,3,21,1],[58,2,22,0],[58,8,22,6,"DEFAULT_FILE_OPTIONS"],[58,28,22,26],[58,31,22,29],[59,4,23,4,"cacheControl"],[59,16,23,16],[59,18,23,18],[59,24,23,24],[60,4,24,4,"contentType"],[60,15,24,15],[60,17,24,17],[60,43,24,43],[61,4,25,4,"upsert"],[61,10,25,10],[61,12,25,12],[62,2,26,0],[62,3,26,1],[63,2,27,15],[63,8,27,21,"StorageFileApi"],[63,22,27,35],[63,23,27,36],[64,4,28,4,"constructor"],[64,15,28,15,"constructor"],[64,16,28,16,"url"],[64,19,28,19],[64,21,28,21,"headers"],[64,28,28,28],[64,31,28,31],[64,32,28,32],[64,33,28,33],[64,35,28,35,"bucketId"],[64,43,28,43],[64,45,28,45,"fetch"],[64,50,28,50],[64,52,28,52],[65,6,29,8],[65,10,29,12],[65,11,29,13,"shouldThrowOnError"],[65,29,29,31],[65,32,29,34],[65,37,29,39],[66,6,30,8],[66,10,30,12],[66,11,30,13,"url"],[66,14,30,16],[66,17,30,19,"url"],[66,20,30,22],[67,6,31,8],[67,10,31,12],[67,11,31,13,"headers"],[67,18,31,20],[67,21,31,23,"headers"],[67,28,31,30],[68,6,32,8],[68,10,32,12],[68,11,32,13,"bucketId"],[68,19,32,21],[68,22,32,24,"bucketId"],[68,30,32,32],[69,6,33,8],[69,10,33,12],[69,11,33,13,"fetch"],[69,16,33,18],[69,19,33,21],[69,23,33,21,"resolveFetch"],[69,34,33,33],[69,35,33,33,"resolveFetch"],[69,47,33,33],[69,49,33,34,"fetch"],[69,54,33,39],[69,55,33,40],[70,4,34,4],[71,4,35,4],[72,0,36,0],[73,0,37,0],[74,4,38,4,"throwOnError"],[74,16,38,16,"throwOnError"],[74,17,38,16],[74,19,38,19],[75,6,39,8],[75,10,39,12],[75,11,39,13,"shouldThrowOnError"],[75,29,39,31],[75,32,39,34],[75,36,39,38],[76,6,40,8],[76,13,40,15],[76,17,40,19],[77,4,41,4],[78,4,42,4],[79,0,43,0],[80,0,44,0],[81,0,45,0],[82,0,46,0],[83,0,47,0],[84,0,48,0],[85,4,49,4,"uploadOrUpdate"],[85,18,49,18,"uploadOrUpdate"],[85,19,49,19,"method"],[85,25,49,25],[85,27,49,27,"path"],[85,31,49,31],[85,33,49,33,"fileBody"],[85,41,49,41],[85,43,49,43,"fileOptions"],[85,54,49,54],[85,56,49,56],[86,6,50,8],[86,13,50,15,"__awaiter"],[86,22,50,24],[86,23,50,25],[86,27,50,29],[86,29,50,31],[86,34,50,36],[86,35,50,37],[86,37,50,39],[86,42,50,44],[86,43,50,45],[86,45,50,47],[86,58,50,60],[87,8,51,12],[87,12,51,16],[88,10,52,16],[88,14,52,20,"body"],[88,18,52,24],[89,10,53,16],[89,16,53,22,"options"],[89,23,53,29],[89,26,53,32,"Object"],[89,32,53,38],[89,33,53,39,"assign"],[89,39,53,45],[89,40,53,46,"Object"],[89,46,53,52],[89,47,53,53,"assign"],[89,53,53,59],[89,54,53,60],[89,55,53,61],[89,56,53,62],[89,58,53,64,"DEFAULT_FILE_OPTIONS"],[89,78,53,84],[89,79,53,85],[89,81,53,87,"fileOptions"],[89,92,53,98],[89,93,53,99],[90,10,54,16],[90,14,54,20,"headers"],[90,21,54,27],[90,24,54,30,"Object"],[90,30,54,36],[90,31,54,37,"assign"],[90,37,54,43],[90,38,54,44,"Object"],[90,44,54,50],[90,45,54,51,"assign"],[90,51,54,57],[90,52,54,58],[90,53,54,59],[90,54,54,60],[90,56,54,62],[90,60,54,66],[90,61,54,67,"headers"],[90,68,54,74],[90,69,54,75],[90,71,54,78,"method"],[90,77,54,84],[90,82,54,89],[90,88,54,95],[90,92,54,99],[91,12,54,101],[91,22,54,111],[91,24,54,113,"String"],[91,30,54,119],[91,31,54,120,"options"],[91,38,54,127],[91,39,54,128,"upsert"],[91,45,54,134],[92,10,54,136],[92,11,54,138],[92,12,54,139],[93,10,55,16],[93,16,55,22,"metadata"],[93,24,55,30],[93,27,55,33,"options"],[93,34,55,40],[93,35,55,41,"metadata"],[93,43,55,49],[94,10,56,16],[94,14,56,20],[94,21,56,27,"Blob"],[94,25,56,31],[94,30,56,36],[94,41,56,47],[94,45,56,51,"fileBody"],[94,53,56,59],[94,65,56,71,"Blob"],[94,69,56,75],[94,71,56,77],[95,12,57,20,"body"],[95,16,57,24],[95,19,57,27],[95,23,57,31,"FormData"],[95,31,57,39],[95,32,57,40],[95,33,57,41],[96,12,58,20,"body"],[96,16,58,24],[96,17,58,25,"append"],[96,23,58,31],[96,24,58,32],[96,38,58,46],[96,40,58,48,"options"],[96,47,58,55],[96,48,58,56,"cacheControl"],[96,60,58,68],[96,61,58,69],[97,12,59,20],[97,16,59,24,"metadata"],[97,24,59,32],[97,26,59,34],[98,14,60,24,"body"],[98,18,60,28],[98,19,60,29,"append"],[98,25,60,35],[98,26,60,36],[98,36,60,46],[98,38,60,48],[98,42,60,52],[98,43,60,53,"encodeMetadata"],[98,57,60,67],[98,58,60,68,"metadata"],[98,66,60,76],[98,67,60,77],[98,68,60,78],[99,12,61,20],[100,12,62,20,"body"],[100,16,62,24],[100,17,62,25,"append"],[100,23,62,31],[100,24,62,32],[100,26,62,34],[100,28,62,36,"fileBody"],[100,36,62,44],[100,37,62,45],[101,10,63,16],[101,11,63,17],[101,17,64,21],[101,21,64,25],[101,28,64,32,"FormData"],[101,36,64,40],[101,41,64,45],[101,52,64,56],[101,56,64,60,"fileBody"],[101,64,64,68],[101,76,64,80,"FormData"],[101,84,64,88],[101,86,64,90],[102,12,65,20,"body"],[102,16,65,24],[102,19,65,27,"fileBody"],[102,27,65,35],[103,12,66,20,"body"],[103,16,66,24],[103,17,66,25,"append"],[103,23,66,31],[103,24,66,32],[103,38,66,46],[103,40,66,48,"options"],[103,47,66,55],[103,48,66,56,"cacheControl"],[103,60,66,68],[103,61,66,69],[104,12,67,20],[104,16,67,24,"metadata"],[104,24,67,32],[104,26,67,34],[105,14,68,24,"body"],[105,18,68,28],[105,19,68,29,"append"],[105,25,68,35],[105,26,68,36],[105,36,68,46],[105,38,68,48],[105,42,68,52],[105,43,68,53,"encodeMetadata"],[105,57,68,67],[105,58,68,68,"metadata"],[105,66,68,76],[105,67,68,77],[105,68,68,78],[106,12,69,20],[107,10,70,16],[107,11,70,17],[107,17,71,21],[108,12,72,20,"body"],[108,16,72,24],[108,19,72,27,"fileBody"],[108,27,72,35],[109,12,73,20,"headers"],[109,19,73,27],[109,20,73,28],[109,35,73,43],[109,36,73,44],[109,39,73,47],[109,50,73,58,"options"],[109,57,73,65],[109,58,73,66,"cacheControl"],[109,70,73,78],[109,72,73,80],[110,12,74,20,"headers"],[110,19,74,27],[110,20,74,28],[110,34,74,42],[110,35,74,43],[110,38,74,46,"options"],[110,45,74,53],[110,46,74,54,"contentType"],[110,57,74,65],[111,12,75,20],[111,16,75,24,"metadata"],[111,24,75,32],[111,26,75,34],[112,14,76,24,"headers"],[112,21,76,31],[112,22,76,32],[112,34,76,44],[112,35,76,45],[112,38,76,48],[112,42,76,52],[112,43,76,53,"toBase64"],[112,51,76,61],[112,52,76,62],[112,56,76,66],[112,57,76,67,"encodeMetadata"],[112,71,76,81],[112,72,76,82,"metadata"],[112,80,76,90],[112,81,76,91],[112,82,76,92],[113,12,77,20],[114,10,78,16],[115,10,79,16],[115,14,79,20,"fileOptions"],[115,25,79,31],[115,30,79,36],[115,34,79,40],[115,38,79,44,"fileOptions"],[115,49,79,55],[115,54,79,60],[115,59,79,65],[115,60,79,66],[115,63,79,69],[115,68,79,74],[115,69,79,75],[115,72,79,78,"fileOptions"],[115,83,79,89],[115,84,79,90,"headers"],[115,91,79,97],[115,93,79,99],[116,12,80,20,"headers"],[116,19,80,27],[116,22,80,30,"Object"],[116,28,80,36],[116,29,80,37,"assign"],[116,35,80,43],[116,36,80,44,"Object"],[116,42,80,50],[116,43,80,51,"assign"],[116,49,80,57],[116,50,80,58],[116,51,80,59],[116,52,80,60],[116,54,80,62,"headers"],[116,61,80,69],[116,62,80,70],[116,64,80,72,"fileOptions"],[116,75,80,83],[116,76,80,84,"headers"],[116,83,80,91],[116,84,80,92],[117,10,81,16],[118,10,82,16],[118,16,82,22,"cleanPath"],[118,25,82,31],[118,28,82,34],[118,32,82,38],[118,33,82,39,"_removeEmptyFolders"],[118,52,82,58],[118,53,82,59,"path"],[118,57,82,63],[118,58,82,64],[119,10,83,16],[119,16,83,22,"_path"],[119,21,83,27],[119,24,83,30],[119,28,83,34],[119,29,83,35,"_getFinalPath"],[119,42,83,48],[119,43,83,49,"cleanPath"],[119,52,83,58],[119,53,83,59],[120,10,84,16],[120,16,84,22,"data"],[120,20,84,26],[120,23,84,29],[120,29,84,35],[120,30,84,36,"method"],[120,36,84,42],[120,40,84,46],[120,45,84,51],[120,48,84,54,"put"],[120,57,84,57],[120,58,84,57,"put"],[120,61,84,57],[120,64,84,60,"post"],[120,73,84,64],[120,74,84,64,"post"],[120,78,84,64],[120,80,84,66],[120,84,84,70],[120,85,84,71,"fetch"],[120,90,84,76],[120,92,84,78],[120,95,84,81],[120,99,84,85],[120,100,84,86,"url"],[120,103,84,89],[120,114,84,100,"_path"],[120,119,84,105],[120,121,84,107],[120,123,84,109,"body"],[120,127,84,113],[120,129,84,115,"Object"],[120,135,84,121],[120,136,84,122,"assign"],[120,142,84,128],[120,143,84,129],[121,12,84,131,"headers"],[122,10,84,139],[122,11,84,140],[122,13,84,143],[122,14,84,144,"options"],[122,21,84,151],[122,26,84,156],[122,30,84,160],[122,34,84,164,"options"],[122,41,84,171],[122,46,84,176],[122,51,84,181],[122,52,84,182],[122,55,84,185],[122,60,84,190],[122,61,84,191],[122,64,84,194,"options"],[122,71,84,201],[122,72,84,202,"duplex"],[122,78,84,208],[122,82,84,212],[123,12,84,214,"duplex"],[123,18,84,220],[123,20,84,222,"options"],[123,27,84,229],[123,28,84,230,"duplex"],[124,10,84,237],[124,11,84,238],[124,14,84,241],[124,15,84,242],[124,16,84,244],[124,17,84,245],[124,18,84,246],[125,10,85,16],[125,17,85,23],[126,12,86,20,"data"],[126,16,86,24],[126,18,86,26],[127,14,86,28,"path"],[127,18,86,32],[127,20,86,34,"cleanPath"],[127,29,86,43],[128,14,86,45,"id"],[128,16,86,47],[128,18,86,49,"data"],[128,22,86,53],[128,23,86,54,"Id"],[128,25,86,56],[129,14,86,58,"fullPath"],[129,22,86,66],[129,24,86,68,"data"],[129,28,86,72],[129,29,86,73,"Key"],[130,12,86,77],[130,13,86,78],[131,12,87,20,"error"],[131,17,87,25],[131,19,87,27],[132,10,88,16],[132,11,88,17],[133,8,89,12],[133,9,89,13],[133,10,90,12],[133,17,90,19,"error"],[133,22,90,24],[133,24,90,26],[134,10,91,16],[134,14,91,20],[134,18,91,24],[134,19,91,25,"shouldThrowOnError"],[134,37,91,43],[134,39,91,45],[135,12,92,20],[135,18,92,26,"error"],[135,23,92,31],[136,10,93,16],[137,10,94,16],[137,14,94,20],[137,18,94,20,"isStorageError"],[137,28,94,34],[137,29,94,34,"isStorageError"],[137,43,94,34],[137,45,94,35,"error"],[137,50,94,40],[137,51,94,41],[137,53,94,43],[138,12,95,20],[138,19,95,27],[139,14,95,29,"data"],[139,18,95,33],[139,20,95,35],[139,24,95,39],[140,14,95,41,"error"],[141,12,95,47],[141,13,95,48],[142,10,96,16],[143,10,97,16],[143,16,97,22,"error"],[143,21,97,27],[144,8,98,12],[145,6,99,8],[145,7,99,9],[145,8,99,10],[146,4,100,4],[147,4,101,4],[148,0,102,0],[149,0,103,0],[150,0,104,0],[151,0,105,0],[152,0,106,0],[153,4,107,4,"upload"],[153,10,107,10,"upload"],[153,11,107,11,"path"],[153,15,107,15],[153,17,107,17,"fileBody"],[153,25,107,25],[153,27,107,27,"fileOptions"],[153,38,107,38],[153,40,107,40],[154,6,108,8],[154,13,108,15,"__awaiter"],[154,22,108,24],[154,23,108,25],[154,27,108,29],[154,29,108,31],[154,34,108,36],[154,35,108,37],[154,37,108,39],[154,42,108,44],[154,43,108,45],[154,45,108,47],[154,58,108,60],[155,8,109,12],[155,15,109,19],[155,19,109,23],[155,20,109,24,"uploadOrUpdate"],[155,34,109,38],[155,35,109,39],[155,41,109,45],[155,43,109,47,"path"],[155,47,109,51],[155,49,109,53,"fileBody"],[155,57,109,61],[155,59,109,63,"fileOptions"],[155,70,109,74],[155,71,109,75],[156,6,110,8],[156,7,110,9],[156,8,110,10],[157,4,111,4],[158,4,112,4],[159,0,113,0],[160,0,114,0],[161,0,115,0],[162,0,116,0],[163,0,117,0],[164,4,118,4,"uploadToSignedUrl"],[164,21,118,21,"uploadToSignedUrl"],[164,22,118,22,"path"],[164,26,118,26],[164,28,118,28,"token"],[164,33,118,33],[164,35,118,35,"fileBody"],[164,43,118,43],[164,45,118,45,"fileOptions"],[164,56,118,56],[164,58,118,58],[165,6,119,8],[165,13,119,15,"__awaiter"],[165,22,119,24],[165,23,119,25],[165,27,119,29],[165,29,119,31],[165,34,119,36],[165,35,119,37],[165,37,119,39],[165,42,119,44],[165,43,119,45],[165,45,119,47],[165,58,119,60],[166,8,120,12],[166,14,120,18,"cleanPath"],[166,23,120,27],[166,26,120,30],[166,30,120,34],[166,31,120,35,"_removeEmptyFolders"],[166,50,120,54],[166,51,120,55,"path"],[166,55,120,59],[166,56,120,60],[167,8,121,12],[167,14,121,18,"_path"],[167,19,121,23],[167,22,121,26],[167,26,121,30],[167,27,121,31,"_getFinalPath"],[167,40,121,44],[167,41,121,45,"cleanPath"],[167,50,121,54],[167,51,121,55],[168,8,122,12],[168,14,122,18,"url"],[168,17,122,21],[168,20,122,24],[168,24,122,28,"URL"],[168,27,122,31],[168,28,122,32],[168,32,122,36],[168,33,122,37,"url"],[168,36,122,40],[168,39,122,43],[168,62,122,66,"_path"],[168,67,122,71],[168,69,122,73],[168,70,122,74],[169,8,123,12,"url"],[169,11,123,15],[169,12,123,16,"searchParams"],[169,24,123,28],[169,25,123,29,"set"],[169,28,123,32],[169,29,123,33],[169,36,123,40],[169,38,123,42,"token"],[169,43,123,47],[169,44,123,48],[170,8,124,12],[170,12,124,16],[171,10,125,16],[171,14,125,20,"body"],[171,18,125,24],[172,10,126,16],[172,16,126,22,"options"],[172,23,126,29],[172,26,126,32,"Object"],[172,32,126,38],[172,33,126,39,"assign"],[172,39,126,45],[172,40,126,46],[173,12,126,48,"upsert"],[173,18,126,54],[173,20,126,56,"DEFAULT_FILE_OPTIONS"],[173,40,126,76],[173,41,126,77,"upsert"],[174,10,126,84],[174,11,126,85],[174,13,126,87,"fileOptions"],[174,24,126,98],[174,25,126,99],[175,10,127,16],[175,16,127,22,"headers"],[175,23,127,29],[175,26,127,32,"Object"],[175,32,127,38],[175,33,127,39,"assign"],[175,39,127,45],[175,40,127,46,"Object"],[175,46,127,52],[175,47,127,53,"assign"],[175,53,127,59],[175,54,127,60],[175,55,127,61],[175,56,127,62],[175,58,127,64],[175,62,127,68],[175,63,127,69,"headers"],[175,70,127,76],[175,71,127,77],[175,73,127,79],[176,12,127,81],[176,22,127,91],[176,24,127,93,"String"],[176,30,127,99],[176,31,127,100,"options"],[176,38,127,107],[176,39,127,108,"upsert"],[176,45,127,114],[177,10,127,116],[177,11,127,117],[177,12,127,118],[178,10,128,16],[178,14,128,20],[178,21,128,27,"Blob"],[178,25,128,31],[178,30,128,36],[178,41,128,47],[178,45,128,51,"fileBody"],[178,53,128,59],[178,65,128,71,"Blob"],[178,69,128,75],[178,71,128,77],[179,12,129,20,"body"],[179,16,129,24],[179,19,129,27],[179,23,129,31,"FormData"],[179,31,129,39],[179,32,129,40],[179,33,129,41],[180,12,130,20,"body"],[180,16,130,24],[180,17,130,25,"append"],[180,23,130,31],[180,24,130,32],[180,38,130,46],[180,40,130,48,"options"],[180,47,130,55],[180,48,130,56,"cacheControl"],[180,60,130,68],[180,61,130,69],[181,12,131,20,"body"],[181,16,131,24],[181,17,131,25,"append"],[181,23,131,31],[181,24,131,32],[181,26,131,34],[181,28,131,36,"fileBody"],[181,36,131,44],[181,37,131,45],[182,10,132,16],[182,11,132,17],[182,17,133,21],[182,21,133,25],[182,28,133,32,"FormData"],[182,36,133,40],[182,41,133,45],[182,52,133,56],[182,56,133,60,"fileBody"],[182,64,133,68],[182,76,133,80,"FormData"],[182,84,133,88],[182,86,133,90],[183,12,134,20,"body"],[183,16,134,24],[183,19,134,27,"fileBody"],[183,27,134,35],[184,12,135,20,"body"],[184,16,135,24],[184,17,135,25,"append"],[184,23,135,31],[184,24,135,32],[184,38,135,46],[184,40,135,48,"options"],[184,47,135,55],[184,48,135,56,"cacheControl"],[184,60,135,68],[184,61,135,69],[185,10,136,16],[185,11,136,17],[185,17,137,21],[186,12,138,20,"body"],[186,16,138,24],[186,19,138,27,"fileBody"],[186,27,138,35],[187,12,139,20,"headers"],[187,19,139,27],[187,20,139,28],[187,35,139,43],[187,36,139,44],[187,39,139,47],[187,50,139,58,"options"],[187,57,139,65],[187,58,139,66,"cacheControl"],[187,70,139,78],[187,72,139,80],[188,12,140,20,"headers"],[188,19,140,27],[188,20,140,28],[188,34,140,42],[188,35,140,43],[188,38,140,46,"options"],[188,45,140,53],[188,46,140,54,"contentType"],[188,57,140,65],[189,10,141,16],[190,10,142,16],[190,16,142,22,"data"],[190,20,142,26],[190,23,142,29],[190,29,142,35],[190,33,142,35,"put"],[190,42,142,38],[190,43,142,38,"put"],[190,46,142,38],[190,48,142,39],[190,52,142,43],[190,53,142,44,"fetch"],[190,58,142,49],[190,60,142,51,"url"],[190,63,142,54],[190,64,142,55,"toString"],[190,72,142,63],[190,73,142,64],[190,74,142,65],[190,76,142,67,"body"],[190,80,142,71],[190,82,142,73],[191,12,142,75,"headers"],[192,10,142,83],[192,11,142,84],[192,12,142,85],[193,10,143,16],[193,17,143,23],[194,12,144,20,"data"],[194,16,144,24],[194,18,144,26],[195,14,144,28,"path"],[195,18,144,32],[195,20,144,34,"cleanPath"],[195,29,144,43],[196,14,144,45,"fullPath"],[196,22,144,53],[196,24,144,55,"data"],[196,28,144,59],[196,29,144,60,"Key"],[197,12,144,64],[197,13,144,65],[198,12,145,20,"error"],[198,17,145,25],[198,19,145,27],[199,10,146,16],[199,11,146,17],[200,8,147,12],[200,9,147,13],[200,10,148,12],[200,17,148,19,"error"],[200,22,148,24],[200,24,148,26],[201,10,149,16],[201,14,149,20],[201,18,149,24],[201,19,149,25,"shouldThrowOnError"],[201,37,149,43],[201,39,149,45],[202,12,150,20],[202,18,150,26,"error"],[202,23,150,31],[203,10,151,16],[204,10,152,16],[204,14,152,20],[204,18,152,20,"isStorageError"],[204,28,152,34],[204,29,152,34,"isStorageError"],[204,43,152,34],[204,45,152,35,"error"],[204,50,152,40],[204,51,152,41],[204,53,152,43],[205,12,153,20],[205,19,153,27],[206,14,153,29,"data"],[206,18,153,33],[206,20,153,35],[206,24,153,39],[207,14,153,41,"error"],[208,12,153,47],[208,13,153,48],[209,10,154,16],[210,10,155,16],[210,16,155,22,"error"],[210,21,155,27],[211,8,156,12],[212,6,157,8],[212,7,157,9],[212,8,157,10],[213,4,158,4],[214,4,159,4],[215,0,160,0],[216,0,161,0],[217,0,162,0],[218,0,163,0],[219,0,164,0],[220,0,165,0],[221,4,166,4,"createSignedUploadUrl"],[221,25,166,25,"createSignedUploadUrl"],[221,26,166,26,"path"],[221,30,166,30],[221,32,166,32,"options"],[221,39,166,39],[221,41,166,41],[222,6,167,8],[222,13,167,15,"__awaiter"],[222,22,167,24],[222,23,167,25],[222,27,167,29],[222,29,167,31],[222,34,167,36],[222,35,167,37],[222,37,167,39],[222,42,167,44],[222,43,167,45],[222,45,167,47],[222,58,167,60],[223,8,168,12],[223,12,168,16],[224,10,169,16],[224,14,169,20,"_path"],[224,19,169,25],[224,22,169,28],[224,26,169,32],[224,27,169,33,"_getFinalPath"],[224,40,169,46],[224,41,169,47,"path"],[224,45,169,51],[224,46,169,52],[225,10,170,16],[225,16,170,22,"headers"],[225,23,170,29],[225,26,170,32,"Object"],[225,32,170,38],[225,33,170,39,"assign"],[225,39,170,45],[225,40,170,46],[225,41,170,47],[225,42,170,48],[225,44,170,50],[225,48,170,54],[225,49,170,55,"headers"],[225,56,170,62],[225,57,170,63],[226,10,171,16],[226,14,171,20,"options"],[226,21,171,27],[226,26,171,32],[226,30,171,36],[226,34,171,40,"options"],[226,41,171,47],[226,46,171,52],[226,51,171,57],[226,52,171,58],[226,55,171,61],[226,60,171,66],[226,61,171,67],[226,64,171,70,"options"],[226,71,171,77],[226,72,171,78,"upsert"],[226,78,171,84],[226,80,171,86],[227,12,172,20,"headers"],[227,19,172,27],[227,20,172,28],[227,30,172,38],[227,31,172,39],[227,34,172,42],[227,40,172,48],[228,10,173,16],[229,10,174,16],[229,16,174,22,"data"],[229,20,174,26],[229,23,174,29],[229,29,174,35],[229,33,174,35,"post"],[229,42,174,39],[229,43,174,39,"post"],[229,47,174,39],[229,49,174,40],[229,53,174,44],[229,54,174,45,"fetch"],[229,59,174,50],[229,61,174,52],[229,64,174,55],[229,68,174,59],[229,69,174,60,"url"],[229,72,174,63],[229,95,174,86,"_path"],[229,100,174,91],[229,102,174,93],[229,104,174,95],[229,105,174,96],[229,106,174,97],[229,108,174,99],[230,12,174,101,"headers"],[231,10,174,109],[231,11,174,110],[231,12,174,111],[232,10,175,16],[232,16,175,22,"url"],[232,19,175,25],[232,22,175,28],[232,26,175,32,"URL"],[232,29,175,35],[232,30,175,36],[232,34,175,40],[232,35,175,41,"url"],[232,38,175,44],[232,41,175,47,"data"],[232,45,175,51],[232,46,175,52,"url"],[232,49,175,55],[232,50,175,56],[233,10,176,16],[233,16,176,22,"token"],[233,21,176,27],[233,24,176,30,"url"],[233,27,176,33],[233,28,176,34,"searchParams"],[233,40,176,46],[233,41,176,47,"get"],[233,44,176,50],[233,45,176,51],[233,52,176,58],[233,53,176,59],[234,10,177,16],[234,14,177,20],[234,15,177,21,"token"],[234,20,177,26],[234,22,177,28],[235,12,178,20],[235,18,178,26],[235,22,178,30,"StorageError"],[235,32,178,42],[235,33,178,42,"StorageError"],[235,45,178,42],[235,46,178,43],[235,72,178,69],[235,73,178,70],[236,10,179,16],[237,10,180,16],[237,17,180,23],[238,12,180,25,"data"],[238,16,180,29],[238,18,180,31],[239,14,180,33,"signedUrl"],[239,23,180,42],[239,25,180,44,"url"],[239,28,180,47],[239,29,180,48,"toString"],[239,37,180,56],[239,38,180,57],[239,39,180,58],[240,14,180,60,"path"],[240,18,180,64],[241,14,180,66,"token"],[242,12,180,72],[242,13,180,73],[243,12,180,75,"error"],[243,17,180,80],[243,19,180,82],[244,10,180,87],[244,11,180,88],[245,8,181,12],[245,9,181,13],[245,10,182,12],[245,17,182,19,"error"],[245,22,182,24],[245,24,182,26],[246,10,183,16],[246,14,183,20],[246,18,183,24],[246,19,183,25,"shouldThrowOnError"],[246,37,183,43],[246,39,183,45],[247,12,184,20],[247,18,184,26,"error"],[247,23,184,31],[248,10,185,16],[249,10,186,16],[249,14,186,20],[249,18,186,20,"isStorageError"],[249,28,186,34],[249,29,186,34,"isStorageError"],[249,43,186,34],[249,45,186,35,"error"],[249,50,186,40],[249,51,186,41],[249,53,186,43],[250,12,187,20],[250,19,187,27],[251,14,187,29,"data"],[251,18,187,33],[251,20,187,35],[251,24,187,39],[252,14,187,41,"error"],[253,12,187,47],[253,13,187,48],[254,10,188,16],[255,10,189,16],[255,16,189,22,"error"],[255,21,189,27],[256,8,190,12],[257,6,191,8],[257,7,191,9],[257,8,191,10],[258,4,192,4],[259,4,193,4],[260,0,194,0],[261,0,195,0],[262,0,196,0],[263,0,197,0],[264,0,198,0],[265,4,199,4,"update"],[265,10,199,10,"update"],[265,11,199,11,"path"],[265,15,199,15],[265,17,199,17,"fileBody"],[265,25,199,25],[265,27,199,27,"fileOptions"],[265,38,199,38],[265,40,199,40],[266,6,200,8],[266,13,200,15,"__awaiter"],[266,22,200,24],[266,23,200,25],[266,27,200,29],[266,29,200,31],[266,34,200,36],[266,35,200,37],[266,37,200,39],[266,42,200,44],[266,43,200,45],[266,45,200,47],[266,58,200,60],[267,8,201,12],[267,15,201,19],[267,19,201,23],[267,20,201,24,"uploadOrUpdate"],[267,34,201,38],[267,35,201,39],[267,40,201,44],[267,42,201,46,"path"],[267,46,201,50],[267,48,201,52,"fileBody"],[267,56,201,60],[267,58,201,62,"fileOptions"],[267,69,201,73],[267,70,201,74],[268,6,202,8],[268,7,202,9],[268,8,202,10],[269,4,203,4],[270,4,204,4],[271,0,205,0],[272,0,206,0],[273,0,207,0],[274,0,208,0],[275,0,209,0],[276,0,210,0],[277,4,211,4,"move"],[277,8,211,8,"move"],[277,9,211,9,"fromPath"],[277,17,211,17],[277,19,211,19,"toPath"],[277,25,211,25],[277,27,211,27,"options"],[277,34,211,34],[277,36,211,36],[278,6,212,8],[278,13,212,15,"__awaiter"],[278,22,212,24],[278,23,212,25],[278,27,212,29],[278,29,212,31],[278,34,212,36],[278,35,212,37],[278,37,212,39],[278,42,212,44],[278,43,212,45],[278,45,212,47],[278,58,212,60],[279,8,213,12],[279,12,213,16],[280,10,214,16],[280,16,214,22,"data"],[280,20,214,26],[280,23,214,29],[280,29,214,35],[280,33,214,35,"post"],[280,42,214,39],[280,43,214,39,"post"],[280,47,214,39],[280,49,214,40],[280,53,214,44],[280,54,214,45,"fetch"],[280,59,214,50],[280,61,214,52],[280,64,214,55],[280,68,214,59],[280,69,214,60,"url"],[280,72,214,63],[280,86,214,77],[280,88,214,79],[281,12,215,20,"bucketId"],[281,20,215,28],[281,22,215,30],[281,26,215,34],[281,27,215,35,"bucketId"],[281,35,215,43],[282,12,216,20,"sourceKey"],[282,21,216,29],[282,23,216,31,"fromPath"],[282,31,216,39],[283,12,217,20,"destinationKey"],[283,26,217,34],[283,28,217,36,"toPath"],[283,34,217,42],[284,12,218,20,"destinationBucket"],[284,29,218,37],[284,31,218,39,"options"],[284,38,218,46],[284,43,218,51],[284,47,218,55],[284,51,218,59,"options"],[284,58,218,66],[284,63,218,71],[284,68,218,76],[284,69,218,77],[284,72,218,80],[284,77,218,85],[284,78,218,86],[284,81,218,89,"options"],[284,88,218,96],[284,89,218,97,"destinationBucket"],[285,10,219,16],[285,11,219,17],[285,13,219,19],[286,12,219,21,"headers"],[286,19,219,28],[286,21,219,30],[286,25,219,34],[286,26,219,35,"headers"],[287,10,219,43],[287,11,219,44],[287,12,219,45],[288,10,220,16],[288,17,220,23],[289,12,220,25,"data"],[289,16,220,29],[290,12,220,31,"error"],[290,17,220,36],[290,19,220,38],[291,10,220,43],[291,11,220,44],[292,8,221,12],[292,9,221,13],[292,10,222,12],[292,17,222,19,"error"],[292,22,222,24],[292,24,222,26],[293,10,223,16],[293,14,223,20],[293,18,223,24],[293,19,223,25,"shouldThrowOnError"],[293,37,223,43],[293,39,223,45],[294,12,224,20],[294,18,224,26,"error"],[294,23,224,31],[295,10,225,16],[296,10,226,16],[296,14,226,20],[296,18,226,20,"isStorageError"],[296,28,226,34],[296,29,226,34,"isStorageError"],[296,43,226,34],[296,45,226,35,"error"],[296,50,226,40],[296,51,226,41],[296,53,226,43],[297,12,227,20],[297,19,227,27],[298,14,227,29,"data"],[298,18,227,33],[298,20,227,35],[298,24,227,39],[299,14,227,41,"error"],[300,12,227,47],[300,13,227,48],[301,10,228,16],[302,10,229,16],[302,16,229,22,"error"],[302,21,229,27],[303,8,230,12],[304,6,231,8],[304,7,231,9],[304,8,231,10],[305,4,232,4],[306,4,233,4],[307,0,234,0],[308,0,235,0],[309,0,236,0],[310,0,237,0],[311,0,238,0],[312,0,239,0],[313,4,240,4,"copy"],[313,8,240,8,"copy"],[313,9,240,9,"fromPath"],[313,17,240,17],[313,19,240,19,"toPath"],[313,25,240,25],[313,27,240,27,"options"],[313,34,240,34],[313,36,240,36],[314,6,241,8],[314,13,241,15,"__awaiter"],[314,22,241,24],[314,23,241,25],[314,27,241,29],[314,29,241,31],[314,34,241,36],[314,35,241,37],[314,37,241,39],[314,42,241,44],[314,43,241,45],[314,45,241,47],[314,58,241,60],[315,8,242,12],[315,12,242,16],[316,10,243,16],[316,16,243,22,"data"],[316,20,243,26],[316,23,243,29],[316,29,243,35],[316,33,243,35,"post"],[316,42,243,39],[316,43,243,39,"post"],[316,47,243,39],[316,49,243,40],[316,53,243,44],[316,54,243,45,"fetch"],[316,59,243,50],[316,61,243,52],[316,64,243,55],[316,68,243,59],[316,69,243,60,"url"],[316,72,243,63],[316,86,243,77],[316,88,243,79],[317,12,244,20,"bucketId"],[317,20,244,28],[317,22,244,30],[317,26,244,34],[317,27,244,35,"bucketId"],[317,35,244,43],[318,12,245,20,"sourceKey"],[318,21,245,29],[318,23,245,31,"fromPath"],[318,31,245,39],[319,12,246,20,"destinationKey"],[319,26,246,34],[319,28,246,36,"toPath"],[319,34,246,42],[320,12,247,20,"destinationBucket"],[320,29,247,37],[320,31,247,39,"options"],[320,38,247,46],[320,43,247,51],[320,47,247,55],[320,51,247,59,"options"],[320,58,247,66],[320,63,247,71],[320,68,247,76],[320,69,247,77],[320,72,247,80],[320,77,247,85],[320,78,247,86],[320,81,247,89,"options"],[320,88,247,96],[320,89,247,97,"destinationBucket"],[321,10,248,16],[321,11,248,17],[321,13,248,19],[322,12,248,21,"headers"],[322,19,248,28],[322,21,248,30],[322,25,248,34],[322,26,248,35,"headers"],[323,10,248,43],[323,11,248,44],[323,12,248,45],[324,10,249,16],[324,17,249,23],[325,12,249,25,"data"],[325,16,249,29],[325,18,249,31],[326,14,249,33,"path"],[326,18,249,37],[326,20,249,39,"data"],[326,24,249,43],[326,25,249,44,"Key"],[327,12,249,48],[327,13,249,49],[328,12,249,51,"error"],[328,17,249,56],[328,19,249,58],[329,10,249,63],[329,11,249,64],[330,8,250,12],[330,9,250,13],[330,10,251,12],[330,17,251,19,"error"],[330,22,251,24],[330,24,251,26],[331,10,252,16],[331,14,252,20],[331,18,252,24],[331,19,252,25,"shouldThrowOnError"],[331,37,252,43],[331,39,252,45],[332,12,253,20],[332,18,253,26,"error"],[332,23,253,31],[333,10,254,16],[334,10,255,16],[334,14,255,20],[334,18,255,20,"isStorageError"],[334,28,255,34],[334,29,255,34,"isStorageError"],[334,43,255,34],[334,45,255,35,"error"],[334,50,255,40],[334,51,255,41],[334,53,255,43],[335,12,256,20],[335,19,256,27],[336,14,256,29,"data"],[336,18,256,33],[336,20,256,35],[336,24,256,39],[337,14,256,41,"error"],[338,12,256,47],[338,13,256,48],[339,10,257,16],[340,10,258,16],[340,16,258,22,"error"],[340,21,258,27],[341,8,259,12],[342,6,260,8],[342,7,260,9],[342,8,260,10],[343,4,261,4],[344,4,262,4],[345,0,263,0],[346,0,264,0],[347,0,265,0],[348,0,266,0],[349,0,267,0],[350,0,268,0],[351,0,269,0],[352,4,270,4,"createSignedUrl"],[352,19,270,19,"createSignedUrl"],[352,20,270,20,"path"],[352,24,270,24],[352,26,270,26,"expiresIn"],[352,35,270,35],[352,37,270,37,"options"],[352,44,270,44],[352,46,270,46],[353,6,271,8],[353,13,271,15,"__awaiter"],[353,22,271,24],[353,23,271,25],[353,27,271,29],[353,29,271,31],[353,34,271,36],[353,35,271,37],[353,37,271,39],[353,42,271,44],[353,43,271,45],[353,45,271,47],[353,58,271,60],[354,8,272,12],[354,12,272,16],[355,10,273,16],[355,14,273,20,"_path"],[355,19,273,25],[355,22,273,28],[355,26,273,32],[355,27,273,33,"_getFinalPath"],[355,40,273,46],[355,41,273,47,"path"],[355,45,273,51],[355,46,273,52],[356,10,274,16],[356,14,274,20,"data"],[356,18,274,24],[356,21,274,27],[356,27,274,33],[356,31,274,33,"post"],[356,40,274,37],[356,41,274,37,"post"],[356,45,274,37],[356,47,274,38],[356,51,274,42],[356,52,274,43,"fetch"],[356,57,274,48],[356,59,274,50],[356,62,274,53],[356,66,274,57],[356,67,274,58,"url"],[356,70,274,61],[356,86,274,77,"_path"],[356,91,274,82],[356,93,274,84],[356,95,274,86,"Object"],[356,101,274,92],[356,102,274,93,"assign"],[356,108,274,99],[356,109,274,100],[357,12,274,102,"expiresIn"],[358,10,274,112],[358,11,274,113],[358,13,274,116],[358,14,274,117,"options"],[358,21,274,124],[358,26,274,129],[358,30,274,133],[358,34,274,137,"options"],[358,41,274,144],[358,46,274,149],[358,51,274,154],[358,52,274,155],[358,55,274,158],[358,60,274,163],[358,61,274,164],[358,64,274,167,"options"],[358,71,274,174],[358,72,274,175,"transform"],[358,81,274,184],[358,85,274,188],[359,12,274,190,"transform"],[359,21,274,199],[359,23,274,201,"options"],[359,30,274,208],[359,31,274,209,"transform"],[360,10,274,219],[360,11,274,220],[360,14,274,223],[360,15,274,224],[360,16,274,226],[360,17,274,227],[360,19,274,229],[361,12,274,231,"headers"],[361,19,274,238],[361,21,274,240],[361,25,274,244],[361,26,274,245,"headers"],[362,10,274,253],[362,11,274,254],[362,12,274,255],[363,10,275,16],[363,16,275,22,"downloadQueryParam"],[363,34,275,40],[363,37,275,43],[363,38,275,44,"options"],[363,45,275,51],[363,50,275,56],[363,54,275,60],[363,58,275,64,"options"],[363,65,275,71],[363,70,275,76],[363,75,275,81],[363,76,275,82],[363,79,275,85],[363,84,275,90],[363,85,275,91],[363,88,275,94,"options"],[363,95,275,101],[363,96,275,102,"download"],[363,104,275,110],[363,108,276,22],[363,121,276,35,"options"],[363,128,276,42],[363,129,276,43,"download"],[363,137,276,51],[363,142,276,56],[363,146,276,60],[363,149,276,63],[363,151,276,65],[363,154,276,68,"options"],[363,161,276,75],[363,162,276,76,"download"],[363,170,276,84],[363,172,276,86],[363,175,277,22],[363,177,277,24],[364,10,278,16],[364,16,278,22,"signedUrl"],[364,25,278,31],[364,28,278,34,"encodeURI"],[364,37,278,43],[364,38,278,44],[364,41,278,47],[364,45,278,51],[364,46,278,52,"url"],[364,49,278,55],[364,52,278,58,"data"],[364,56,278,62],[364,57,278,63,"signedURL"],[364,66,278,72],[364,69,278,75,"downloadQueryParam"],[364,87,278,93],[364,89,278,95],[364,90,278,96],[365,10,279,16,"data"],[365,14,279,20],[365,17,279,23],[366,12,279,25,"signedUrl"],[367,10,279,35],[367,11,279,36],[368,10,280,16],[368,17,280,23],[369,12,280,25,"data"],[369,16,280,29],[370,12,280,31,"error"],[370,17,280,36],[370,19,280,38],[371,10,280,43],[371,11,280,44],[372,8,281,12],[372,9,281,13],[372,10,282,12],[372,17,282,19,"error"],[372,22,282,24],[372,24,282,26],[373,10,283,16],[373,14,283,20],[373,18,283,24],[373,19,283,25,"shouldThrowOnError"],[373,37,283,43],[373,39,283,45],[374,12,284,20],[374,18,284,26,"error"],[374,23,284,31],[375,10,285,16],[376,10,286,16],[376,14,286,20],[376,18,286,20,"isStorageError"],[376,28,286,34],[376,29,286,34,"isStorageError"],[376,43,286,34],[376,45,286,35,"error"],[376,50,286,40],[376,51,286,41],[376,53,286,43],[377,12,287,20],[377,19,287,27],[378,14,287,29,"data"],[378,18,287,33],[378,20,287,35],[378,24,287,39],[379,14,287,41,"error"],[380,12,287,47],[380,13,287,48],[381,10,288,16],[382,10,289,16],[382,16,289,22,"error"],[382,21,289,27],[383,8,290,12],[384,6,291,8],[384,7,291,9],[384,8,291,10],[385,4,292,4],[386,4,293,4],[387,0,294,0],[388,0,295,0],[389,0,296,0],[390,0,297,0],[391,0,298,0],[392,0,299,0],[393,4,300,4,"createSignedUrls"],[393,20,300,20,"createSignedUrls"],[393,21,300,21,"paths"],[393,26,300,26],[393,28,300,28,"expiresIn"],[393,37,300,37],[393,39,300,39,"options"],[393,46,300,46],[393,48,300,48],[394,6,301,8],[394,13,301,15,"__awaiter"],[394,22,301,24],[394,23,301,25],[394,27,301,29],[394,29,301,31],[394,34,301,36],[394,35,301,37],[394,37,301,39],[394,42,301,44],[394,43,301,45],[394,45,301,47],[394,58,301,60],[395,8,302,12],[395,12,302,16],[396,10,303,16],[396,16,303,22,"data"],[396,20,303,26],[396,23,303,29],[396,29,303,35],[396,33,303,35,"post"],[396,42,303,39],[396,43,303,39,"post"],[396,47,303,39],[396,49,303,40],[396,53,303,44],[396,54,303,45,"fetch"],[396,59,303,50],[396,61,303,52],[396,64,303,55],[396,68,303,59],[396,69,303,60,"url"],[396,72,303,63],[396,88,303,79],[396,92,303,83],[396,93,303,84,"bucketId"],[396,101,303,92],[396,103,303,94],[396,105,303,96],[397,12,303,98,"expiresIn"],[397,21,303,107],[398,12,303,109,"paths"],[399,10,303,115],[399,11,303,116],[399,13,303,118],[400,12,303,120,"headers"],[400,19,303,127],[400,21,303,129],[400,25,303,133],[400,26,303,134,"headers"],[401,10,303,142],[401,11,303,143],[401,12,303,144],[402,10,304,16],[402,16,304,22,"downloadQueryParam"],[402,34,304,40],[402,37,304,43],[402,38,304,44,"options"],[402,45,304,51],[402,50,304,56],[402,54,304,60],[402,58,304,64,"options"],[402,65,304,71],[402,70,304,76],[402,75,304,81],[402,76,304,82],[402,79,304,85],[402,84,304,90],[402,85,304,91],[402,88,304,94,"options"],[402,95,304,101],[402,96,304,102,"download"],[402,104,304,110],[402,108,305,22],[402,121,305,35,"options"],[402,128,305,42],[402,129,305,43,"download"],[402,137,305,51],[402,142,305,56],[402,146,305,60],[402,149,305,63],[402,151,305,65],[402,154,305,68,"options"],[402,161,305,75],[402,162,305,76,"download"],[402,170,305,84],[402,172,305,86],[402,175,306,22],[402,177,306,24],[403,10,307,16],[403,17,307,23],[404,12,308,20,"data"],[404,16,308,24],[404,18,308,26,"data"],[404,22,308,30],[404,23,308,31,"map"],[404,26,308,34],[404,27,308,36,"datum"],[404,32,308,41],[404,36,308,47,"Object"],[404,42,308,53],[404,43,308,54,"assign"],[404,49,308,60],[404,50,308,61,"Object"],[404,56,308,67],[404,57,308,68,"assign"],[404,63,308,74],[404,64,308,75],[404,65,308,76],[404,66,308,77],[404,68,308,79,"datum"],[404,73,308,84],[404,74,308,85],[404,76,308,87],[405,14,308,89,"signedUrl"],[405,23,308,98],[405,25,308,100,"datum"],[405,30,308,105],[405,31,308,106,"signedURL"],[405,40,308,115],[405,43,309,30,"encodeURI"],[405,52,309,39],[405,53,309,40],[405,56,309,43],[405,60,309,47],[405,61,309,48,"url"],[405,64,309,51],[405,67,309,54,"datum"],[405,72,309,59],[405,73,309,60,"signedURL"],[405,82,309,69],[405,85,309,72,"downloadQueryParam"],[405,103,309,90],[405,105,309,92],[405,106,309,93],[405,109,310,30],[406,12,310,35],[406,13,310,36],[406,14,310,38],[406,15,310,39],[407,12,311,20,"error"],[407,17,311,25],[407,19,311,27],[408,10,312,16],[408,11,312,17],[409,8,313,12],[409,9,313,13],[409,10,314,12],[409,17,314,19,"error"],[409,22,314,24],[409,24,314,26],[410,10,315,16],[410,14,315,20],[410,18,315,24],[410,19,315,25,"shouldThrowOnError"],[410,37,315,43],[410,39,315,45],[411,12,316,20],[411,18,316,26,"error"],[411,23,316,31],[412,10,317,16],[413,10,318,16],[413,14,318,20],[413,18,318,20,"isStorageError"],[413,28,318,34],[413,29,318,34,"isStorageError"],[413,43,318,34],[413,45,318,35,"error"],[413,50,318,40],[413,51,318,41],[413,53,318,43],[414,12,319,20],[414,19,319,27],[415,14,319,29,"data"],[415,18,319,33],[415,20,319,35],[415,24,319,39],[416,14,319,41,"error"],[417,12,319,47],[417,13,319,48],[418,10,320,16],[419,10,321,16],[419,16,321,22,"error"],[419,21,321,27],[420,8,322,12],[421,6,323,8],[421,7,323,9],[421,8,323,10],[422,4,324,4],[423,4,325,4],[424,0,326,0],[425,0,327,0],[426,0,328,0],[427,0,329,0],[428,0,330,0],[429,4,331,4,"download"],[429,12,331,12,"download"],[429,13,331,13,"path"],[429,17,331,17],[429,19,331,19,"options"],[429,26,331,26],[429,28,331,28],[430,6,332,8],[430,12,332,14,"wantsTransformation"],[430,31,332,33],[430,34,332,36],[430,42,332,44,"options"],[430,49,332,51],[430,54,332,56],[430,58,332,60],[430,62,332,64,"options"],[430,69,332,71],[430,74,332,76],[430,79,332,81],[430,80,332,82],[430,83,332,85],[430,88,332,90],[430,89,332,91],[430,92,332,94,"options"],[430,99,332,101],[430,100,332,102,"transform"],[430,109,332,111],[430,110,332,112],[430,115,332,117],[430,126,332,128],[431,6,333,8],[431,12,333,14,"renderPath"],[431,22,333,24],[431,25,333,27,"wantsTransformation"],[431,44,333,46],[431,47,333,49],[431,75,333,77],[431,78,333,80],[431,86,333,88],[432,6,334,8],[432,12,334,14,"transformationQuery"],[432,31,334,33],[432,34,334,36],[432,38,334,40],[432,39,334,41,"transformOptsToQueryString"],[432,65,334,67],[432,66,334,68],[432,67,334,69,"options"],[432,74,334,76],[432,79,334,81],[432,83,334,85],[432,87,334,89,"options"],[432,94,334,96],[432,99,334,101],[432,104,334,106],[432,105,334,107],[432,108,334,110],[432,113,334,115],[432,114,334,116],[432,117,334,119,"options"],[432,124,334,126],[432,125,334,127,"transform"],[432,134,334,136],[432,139,334,141],[432,140,334,142],[432,141,334,143],[432,142,334,144],[433,6,335,8],[433,12,335,14,"queryString"],[433,23,335,25],[433,26,335,28,"transformationQuery"],[433,45,335,47],[433,48,335,50],[433,52,335,54,"transformationQuery"],[433,71,335,73],[433,73,335,75],[433,76,335,78],[433,78,335,80],[434,6,336,8],[434,12,336,14,"_path"],[434,17,336,19],[434,20,336,22],[434,24,336,26],[434,25,336,27,"_getFinalPath"],[434,38,336,40],[434,39,336,41,"path"],[434,43,336,45],[434,44,336,46],[435,6,337,8],[435,12,337,14,"downloadFn"],[435,22,337,24],[435,25,337,27,"downloadFn"],[435,26,337,27],[435,31,337,33],[435,35,337,33,"get"],[435,44,337,36],[435,45,337,36,"get"],[435,48,337,36],[435,50,337,37],[435,54,337,41],[435,55,337,42,"fetch"],[435,60,337,47],[435,62,337,49],[435,65,337,52],[435,69,337,56],[435,70,337,57,"url"],[435,73,337,60],[435,77,337,64,"renderPath"],[435,87,337,74],[435,91,337,78,"_path"],[435,96,337,83],[435,99,337,86,"queryString"],[435,110,337,97],[435,112,337,99],[435,114,337,101],[436,8,338,12,"headers"],[436,15,338,19],[436,17,338,21],[436,21,338,25],[436,22,338,26,"headers"],[436,29,338,33],[437,8,339,12,"noResolveJson"],[437,21,339,25],[437,23,339,27],[438,6,340,8],[438,7,340,9],[438,8,340,10],[439,6,341,8],[439,13,341,15],[439,17,341,19,"BlobDownloadBuilder"],[439,36,341,38],[439,37,341,38,"default"],[439,44,341,38],[439,45,341,39,"downloadFn"],[439,55,341,49],[439,57,341,51],[439,61,341,55],[439,62,341,56,"shouldThrowOnError"],[439,80,341,74],[439,81,341,75],[440,4,342,4],[441,4,343,4],[442,0,344,0],[443,0,345,0],[444,0,346,0],[445,4,347,4,"info"],[445,8,347,8,"info"],[445,9,347,9,"path"],[445,13,347,13],[445,15,347,15],[446,6,348,8],[446,13,348,15,"__awaiter"],[446,22,348,24],[446,23,348,25],[446,27,348,29],[446,29,348,31],[446,34,348,36],[446,35,348,37],[446,37,348,39],[446,42,348,44],[446,43,348,45],[446,45,348,47],[446,58,348,60],[447,8,349,12],[447,14,349,18,"_path"],[447,19,349,23],[447,22,349,26],[447,26,349,30],[447,27,349,31,"_getFinalPath"],[447,40,349,44],[447,41,349,45,"path"],[447,45,349,49],[447,46,349,50],[448,8,350,12],[448,12,350,16],[449,10,351,16],[449,16,351,22,"data"],[449,20,351,26],[449,23,351,29],[449,29,351,35],[449,33,351,35,"get"],[449,42,351,38],[449,43,351,38,"get"],[449,46,351,38],[449,48,351,39],[449,52,351,43],[449,53,351,44,"fetch"],[449,58,351,49],[449,60,351,51],[449,63,351,54],[449,67,351,58],[449,68,351,59,"url"],[449,71,351,62],[449,87,351,78,"_path"],[449,92,351,83],[449,94,351,85],[449,96,351,87],[450,12,352,20,"headers"],[450,19,352,27],[450,21,352,29],[450,25,352,33],[450,26,352,34,"headers"],[451,10,353,16],[451,11,353,17],[451,12,353,18],[452,10,354,16],[452,17,354,23],[453,12,354,25,"data"],[453,16,354,29],[453,18,354,31],[453,22,354,31,"recursiveToCamel"],[453,33,354,47],[453,34,354,47,"recursiveToCamel"],[453,50,354,47],[453,52,354,48,"data"],[453,56,354,52],[453,57,354,53],[454,12,354,55,"error"],[454,17,354,60],[454,19,354,62],[455,10,354,67],[455,11,354,68],[456,8,355,12],[456,9,355,13],[456,10,356,12],[456,17,356,19,"error"],[456,22,356,24],[456,24,356,26],[457,10,357,16],[457,14,357,20],[457,18,357,24],[457,19,357,25,"shouldThrowOnError"],[457,37,357,43],[457,39,357,45],[458,12,358,20],[458,18,358,26,"error"],[458,23,358,31],[459,10,359,16],[460,10,360,16],[460,14,360,20],[460,18,360,20,"isStorageError"],[460,28,360,34],[460,29,360,34,"isStorageError"],[460,43,360,34],[460,45,360,35,"error"],[460,50,360,40],[460,51,360,41],[460,53,360,43],[461,12,361,20],[461,19,361,27],[462,14,361,29,"data"],[462,18,361,33],[462,20,361,35],[462,24,361,39],[463,14,361,41,"error"],[464,12,361,47],[464,13,361,48],[465,10,362,16],[466,10,363,16],[466,16,363,22,"error"],[466,21,363,27],[467,8,364,12],[468,6,365,8],[468,7,365,9],[468,8,365,10],[469,4,366,4],[470,4,367,4],[471,0,368,0],[472,0,369,0],[473,0,370,0],[474,4,371,4,"exists"],[474,10,371,10,"exists"],[474,11,371,11,"path"],[474,15,371,15],[474,17,371,17],[475,6,372,8],[475,13,372,15,"__awaiter"],[475,22,372,24],[475,23,372,25],[475,27,372,29],[475,29,372,31],[475,34,372,36],[475,35,372,37],[475,37,372,39],[475,42,372,44],[475,43,372,45],[475,45,372,47],[475,58,372,60],[476,8,373,12],[476,14,373,18,"_path"],[476,19,373,23],[476,22,373,26],[476,26,373,30],[476,27,373,31,"_getFinalPath"],[476,40,373,44],[476,41,373,45,"path"],[476,45,373,49],[476,46,373,50],[477,8,374,12],[477,12,374,16],[478,10,375,16],[478,16,375,22],[478,20,375,22,"head"],[478,29,375,26],[478,30,375,26,"head"],[478,34,375,26],[478,36,375,27],[478,40,375,31],[478,41,375,32,"fetch"],[478,46,375,37],[478,48,375,39],[478,51,375,42],[478,55,375,46],[478,56,375,47,"url"],[478,59,375,50],[478,70,375,61,"_path"],[478,75,375,66],[478,77,375,68],[478,79,375,70],[479,12,376,20,"headers"],[479,19,376,27],[479,21,376,29],[479,25,376,33],[479,26,376,34,"headers"],[480,10,377,16],[480,11,377,17],[480,12,377,18],[481,10,378,16],[481,17,378,23],[482,12,378,25,"data"],[482,16,378,29],[482,18,378,31],[482,22,378,35],[483,12,378,37,"error"],[483,17,378,42],[483,19,378,44],[484,10,378,49],[484,11,378,50],[485,8,379,12],[485,9,379,13],[485,10,380,12],[485,17,380,19,"error"],[485,22,380,24],[485,24,380,26],[486,10,381,16],[486,14,381,20],[486,18,381,24],[486,19,381,25,"shouldThrowOnError"],[486,37,381,43],[486,39,381,45],[487,12,382,20],[487,18,382,26,"error"],[487,23,382,31],[488,10,383,16],[489,10,384,16],[489,14,384,20],[489,18,384,20,"isStorageError"],[489,28,384,34],[489,29,384,34,"isStorageError"],[489,43,384,34],[489,45,384,35,"error"],[489,50,384,40],[489,51,384,41],[489,55,384,45,"error"],[489,60,384,50],[489,72,384,62,"StorageUnknownError"],[489,82,384,81],[489,83,384,81,"StorageUnknownError"],[489,102,384,81],[489,104,384,83],[490,12,385,20],[490,18,385,26,"originalError"],[490,31,385,39],[490,34,385,42,"error"],[490,39,385,47],[490,40,385,48,"originalError"],[490,53,385,61],[491,12,386,20],[491,16,386,24],[491,17,386,25],[491,20,386,28],[491,22,386,30],[491,25,386,33],[491,26,386,34],[491,27,386,35,"includes"],[491,35,386,43],[491,36,386,44,"originalError"],[491,49,386,57],[491,54,386,62],[491,58,386,66],[491,62,386,70,"originalError"],[491,75,386,83],[491,80,386,88],[491,85,386,93],[491,86,386,94],[491,89,386,97],[491,94,386,102],[491,95,386,103],[491,98,386,106,"originalError"],[491,111,386,119],[491,112,386,120,"status"],[491,118,386,126],[491,119,386,127],[491,121,386,129],[492,14,387,24],[492,21,387,31],[493,16,387,33,"data"],[493,20,387,37],[493,22,387,39],[493,27,387,44],[494,16,387,46,"error"],[495,14,387,52],[495,15,387,53],[496,12,388,20],[497,10,389,16],[498,10,390,16],[498,16,390,22,"error"],[498,21,390,27],[499,8,391,12],[500,6,392,8],[500,7,392,9],[500,8,392,10],[501,4,393,4],[502,4,394,4],[503,0,395,0],[504,0,396,0],[505,0,397,0],[506,0,398,0],[507,0,399,0],[508,0,400,0],[509,0,401,0],[510,4,402,4,"getPublicUrl"],[510,16,402,16,"getPublicUrl"],[510,17,402,17,"path"],[510,21,402,21],[510,23,402,23,"options"],[510,30,402,30],[510,32,402,32],[511,6,403,8],[511,12,403,14,"_path"],[511,17,403,19],[511,20,403,22],[511,24,403,26],[511,25,403,27,"_getFinalPath"],[511,38,403,40],[511,39,403,41,"path"],[511,43,403,45],[511,44,403,46],[512,6,404,8],[512,12,404,14,"_queryString"],[512,24,404,26],[512,27,404,29],[512,29,404,31],[513,6,405,8],[513,12,405,14,"downloadQueryParam"],[513,30,405,32],[513,33,405,35],[513,34,405,36,"options"],[513,41,405,43],[513,46,405,48],[513,50,405,52],[513,54,405,56,"options"],[513,61,405,63],[513,66,405,68],[513,71,405,73],[513,72,405,74],[513,75,405,77],[513,80,405,82],[513,81,405,83],[513,84,405,86,"options"],[513,91,405,93],[513,92,405,94,"download"],[513,100,405,102],[513,104,406,14],[513,116,406,26,"options"],[513,123,406,33],[513,124,406,34,"download"],[513,132,406,42],[513,137,406,47],[513,141,406,51],[513,144,406,54],[513,146,406,56],[513,149,406,59,"options"],[513,156,406,66],[513,157,406,67,"download"],[513,165,406,75],[513,167,406,77],[513,170,407,14],[513,172,407,16],[514,6,408,8],[514,10,408,12,"downloadQueryParam"],[514,28,408,30],[514,33,408,35],[514,35,408,37],[514,37,408,39],[515,8,409,12,"_queryString"],[515,20,409,24],[515,21,409,25,"push"],[515,25,409,29],[515,26,409,30,"downloadQueryParam"],[515,44,409,48],[515,45,409,49],[516,6,410,8],[517,6,411,8],[517,12,411,14,"wantsTransformation"],[517,31,411,33],[517,34,411,36],[517,42,411,44,"options"],[517,49,411,51],[517,54,411,56],[517,58,411,60],[517,62,411,64,"options"],[517,69,411,71],[517,74,411,76],[517,79,411,81],[517,80,411,82],[517,83,411,85],[517,88,411,90],[517,89,411,91],[517,92,411,94,"options"],[517,99,411,101],[517,100,411,102,"transform"],[517,109,411,111],[517,110,411,112],[517,115,411,117],[517,126,411,128],[518,6,412,8],[518,12,412,14,"renderPath"],[518,22,412,24],[518,25,412,27,"wantsTransformation"],[518,44,412,46],[518,47,412,49],[518,61,412,63],[518,64,412,66],[518,72,412,74],[519,6,413,8],[519,12,413,14,"transformationQuery"],[519,31,413,33],[519,34,413,36],[519,38,413,40],[519,39,413,41,"transformOptsToQueryString"],[519,65,413,67],[519,66,413,68],[519,67,413,69,"options"],[519,74,413,76],[519,79,413,81],[519,83,413,85],[519,87,413,89,"options"],[519,94,413,96],[519,99,413,101],[519,104,413,106],[519,105,413,107],[519,108,413,110],[519,113,413,115],[519,114,413,116],[519,117,413,119,"options"],[519,124,413,126],[519,125,413,127,"transform"],[519,134,413,136],[519,139,413,141],[519,140,413,142],[519,141,413,143],[519,142,413,144],[520,6,414,8],[520,10,414,12,"transformationQuery"],[520,29,414,31],[520,34,414,36],[520,36,414,38],[520,38,414,40],[521,8,415,12,"_queryString"],[521,20,415,24],[521,21,415,25,"push"],[521,25,415,29],[521,26,415,30,"transformationQuery"],[521,45,415,49],[521,46,415,50],[522,6,416,8],[523,6,417,8],[523,10,417,12,"queryString"],[523,21,417,23],[523,24,417,26,"_queryString"],[523,36,417,38],[523,37,417,39,"join"],[523,41,417,43],[523,42,417,44],[523,45,417,47],[523,46,417,48],[524,6,418,8],[524,10,418,12,"queryString"],[524,21,418,23],[524,26,418,28],[524,28,418,30],[524,30,418,32],[525,8,419,12,"queryString"],[525,19,419,23],[525,22,419,26],[525,26,419,30,"queryString"],[525,37,419,41],[525,39,419,43],[526,6,420,8],[527,6,421,8],[527,13,421,15],[528,8,422,12,"data"],[528,12,422,16],[528,14,422,18],[529,10,422,20,"publicUrl"],[529,19,422,29],[529,21,422,31,"encodeURI"],[529,30,422,40],[529,31,422,41],[529,34,422,44],[529,38,422,48],[529,39,422,49,"url"],[529,42,422,52],[529,46,422,56,"renderPath"],[529,56,422,66],[529,67,422,77,"_path"],[529,72,422,82],[529,75,422,85,"queryString"],[529,86,422,96],[529,88,422,98],[530,8,422,100],[531,6,423,8],[531,7,423,9],[532,4,424,4],[533,4,425,4],[534,0,426,0],[535,0,427,0],[536,0,428,0],[537,0,429,0],[538,4,430,4,"remove"],[538,10,430,10,"remove"],[538,11,430,11,"paths"],[538,16,430,16],[538,18,430,18],[539,6,431,8],[539,13,431,15,"__awaiter"],[539,22,431,24],[539,23,431,25],[539,27,431,29],[539,29,431,31],[539,34,431,36],[539,35,431,37],[539,37,431,39],[539,42,431,44],[539,43,431,45],[539,45,431,47],[539,58,431,60],[540,8,432,12],[540,12,432,16],[541,10,433,16],[541,16,433,22,"data"],[541,20,433,26],[541,23,433,29],[541,29,433,35],[541,33,433,35,"remove"],[541,42,433,41],[541,43,433,41,"remove"],[541,49,433,41],[541,51,433,42],[541,55,433,46],[541,56,433,47,"fetch"],[541,61,433,52],[541,63,433,54],[541,66,433,57],[541,70,433,61],[541,71,433,62,"url"],[541,74,433,65],[541,85,433,76],[541,89,433,80],[541,90,433,81,"bucketId"],[541,98,433,89],[541,100,433,91],[541,102,433,93],[542,12,433,95,"prefixes"],[542,20,433,103],[542,22,433,105,"paths"],[543,10,433,111],[543,11,433,112],[543,13,433,114],[544,12,433,116,"headers"],[544,19,433,123],[544,21,433,125],[544,25,433,129],[544,26,433,130,"headers"],[545,10,433,138],[545,11,433,139],[545,12,433,140],[546,10,434,16],[546,17,434,23],[547,12,434,25,"data"],[547,16,434,29],[548,12,434,31,"error"],[548,17,434,36],[548,19,434,38],[549,10,434,43],[549,11,434,44],[550,8,435,12],[550,9,435,13],[550,10,436,12],[550,17,436,19,"error"],[550,22,436,24],[550,24,436,26],[551,10,437,16],[551,14,437,20],[551,18,437,24],[551,19,437,25,"shouldThrowOnError"],[551,37,437,43],[551,39,437,45],[552,12,438,20],[552,18,438,26,"error"],[552,23,438,31],[553,10,439,16],[554,10,440,16],[554,14,440,20],[554,18,440,20,"isStorageError"],[554,28,440,34],[554,29,440,34,"isStorageError"],[554,43,440,34],[554,45,440,35,"error"],[554,50,440,40],[554,51,440,41],[554,53,440,43],[555,12,441,20],[555,19,441,27],[556,14,441,29,"data"],[556,18,441,33],[556,20,441,35],[556,24,441,39],[557,14,441,41,"error"],[558,12,441,47],[558,13,441,48],[559,10,442,16],[560,10,443,16],[560,16,443,22,"error"],[560,21,443,27],[561,8,444,12],[562,6,445,8],[562,7,445,9],[562,8,445,10],[563,4,446,4],[564,4,447,4],[565,0,448,0],[566,0,449,0],[567,0,450,0],[568,4,451,4],[569,4,452,4],[570,4,453,4],[571,4,454,4],[572,4,455,4],[573,4,456,4],[574,4,457,4],[575,4,458,4],[576,4,459,4],[577,4,460,4],[578,4,461,4],[579,4,462,4],[580,4,463,4],[581,4,464,4],[582,4,465,4],[583,4,466,4],[584,4,467,4],[585,4,468,4],[586,4,469,4],[587,4,470,4],[588,4,471,4],[589,4,472,4],[590,4,473,4],[591,0,474,0],[592,0,475,0],[593,0,476,0],[594,0,477,0],[595,4,478,4],[596,4,479,4],[597,4,480,4],[598,4,481,4],[599,4,482,4],[600,4,483,4],[601,4,484,4],[602,4,485,4],[603,4,486,4],[604,4,487,4],[605,4,488,4],[606,4,489,4],[607,4,490,4],[608,4,491,4],[609,4,492,4],[610,4,493,4],[611,4,494,4],[612,4,495,4],[613,4,496,4],[614,4,497,4],[615,4,498,4],[616,4,499,4],[617,4,500,4],[618,4,501,4],[619,4,502,4],[620,4,503,4],[621,4,504,4],[622,4,505,4],[623,4,506,4],[624,0,507,0],[625,0,508,0],[626,0,509,0],[627,0,510,0],[628,4,511,4,"list"],[628,8,511,8,"list"],[628,9,511,9,"path"],[628,13,511,13],[628,15,511,15,"options"],[628,22,511,22],[628,24,511,24,"parameters"],[628,34,511,34],[628,36,511,36],[629,6,512,8],[629,13,512,15,"__awaiter"],[629,22,512,24],[629,23,512,25],[629,27,512,29],[629,29,512,31],[629,34,512,36],[629,35,512,37],[629,37,512,39],[629,42,512,44],[629,43,512,45],[629,45,512,47],[629,58,512,60],[630,8,513,12],[630,12,513,16],[631,10,514,16],[631,16,514,22,"body"],[631,20,514,26],[631,23,514,29,"Object"],[631,29,514,35],[631,30,514,36,"assign"],[631,36,514,42],[631,37,514,43,"Object"],[631,43,514,49],[631,44,514,50,"assign"],[631,50,514,56],[631,51,514,57,"Object"],[631,57,514,63],[631,58,514,64,"assign"],[631,64,514,70],[631,65,514,71],[631,66,514,72],[631,67,514,73],[631,69,514,75,"DEFAULT_SEARCH_OPTIONS"],[631,91,514,97],[631,92,514,98],[631,94,514,100,"options"],[631,101,514,107],[631,102,514,108],[631,104,514,110],[632,12,514,112,"prefix"],[632,18,514,118],[632,20,514,120,"path"],[632,24,514,124],[632,28,514,128],[633,10,514,131],[633,11,514,132],[633,12,514,133],[634,10,515,16],[634,16,515,22,"data"],[634,20,515,26],[634,23,515,29],[634,29,515,35],[634,33,515,35,"post"],[634,42,515,39],[634,43,515,39,"post"],[634,47,515,39],[634,49,515,40],[634,53,515,44],[634,54,515,45,"fetch"],[634,59,515,50],[634,61,515,52],[634,64,515,55],[634,68,515,59],[634,69,515,60,"url"],[634,72,515,63],[634,88,515,79],[634,92,515,83],[634,93,515,84,"bucketId"],[634,101,515,92],[634,103,515,94],[634,105,515,96,"body"],[634,109,515,100],[634,111,515,102],[635,12,515,104,"headers"],[635,19,515,111],[635,21,515,113],[635,25,515,117],[635,26,515,118,"headers"],[636,10,515,126],[636,11,515,127],[636,13,515,129,"parameters"],[636,23,515,139],[636,24,515,140],[637,10,516,16],[637,17,516,23],[638,12,516,25,"data"],[638,16,516,29],[639,12,516,31,"error"],[639,17,516,36],[639,19,516,38],[640,10,516,43],[640,11,516,44],[641,8,517,12],[641,9,517,13],[641,10,518,12],[641,17,518,19,"error"],[641,22,518,24],[641,24,518,26],[642,10,519,16],[642,14,519,20],[642,18,519,24],[642,19,519,25,"shouldThrowOnError"],[642,37,519,43],[642,39,519,45],[643,12,520,20],[643,18,520,26,"error"],[643,23,520,31],[644,10,521,16],[645,10,522,16],[645,14,522,20],[645,18,522,20,"isStorageError"],[645,28,522,34],[645,29,522,34,"isStorageError"],[645,43,522,34],[645,45,522,35,"error"],[645,50,522,40],[645,51,522,41],[645,53,522,43],[646,12,523,20],[646,19,523,27],[647,14,523,29,"data"],[647,18,523,33],[647,20,523,35],[647,24,523,39],[648,14,523,41,"error"],[649,12,523,47],[649,13,523,48],[650,10,524,16],[651,10,525,16],[651,16,525,22,"error"],[651,21,525,27],[652,8,526,12],[653,6,527,8],[653,7,527,9],[653,8,527,10],[654,4,528,4],[655,4,529,4],[656,0,530,0],[657,0,531,0],[658,0,532,0],[659,0,533,0],[660,4,534,4,"listV2"],[660,10,534,10,"listV2"],[660,11,534,11,"options"],[660,18,534,18],[660,20,534,20,"parameters"],[660,30,534,30],[660,32,534,32],[661,6,535,8],[661,13,535,15,"__awaiter"],[661,22,535,24],[661,23,535,25],[661,27,535,29],[661,29,535,31],[661,34,535,36],[661,35,535,37],[661,37,535,39],[661,42,535,44],[661,43,535,45],[661,45,535,47],[661,58,535,60],[662,8,536,12],[662,12,536,16],[663,10,537,16],[663,16,537,22,"body"],[663,20,537,26],[663,23,537,29,"Object"],[663,29,537,35],[663,30,537,36,"assign"],[663,36,537,42],[663,37,537,43],[663,38,537,44],[663,39,537,45],[663,41,537,47,"options"],[663,48,537,54],[663,49,537,55],[664,10,538,16],[664,16,538,22,"data"],[664,20,538,26],[664,23,538,29],[664,29,538,35],[664,33,538,35,"post"],[664,42,538,39],[664,43,538,39,"post"],[664,47,538,39],[664,49,538,40],[664,53,538,44],[664,54,538,45,"fetch"],[664,59,538,50],[664,61,538,52],[664,64,538,55],[664,68,538,59],[664,69,538,60,"url"],[664,72,538,63],[664,91,538,82],[664,95,538,86],[664,96,538,87,"bucketId"],[664,104,538,95],[664,106,538,97],[664,108,538,99,"body"],[664,112,538,103],[664,114,538,105],[665,12,538,107,"headers"],[665,19,538,114],[665,21,538,116],[665,25,538,120],[665,26,538,121,"headers"],[666,10,538,129],[666,11,538,130],[666,13,538,132,"parameters"],[666,23,538,142],[666,24,538,143],[667,10,539,16],[667,17,539,23],[668,12,539,25,"data"],[668,16,539,29],[669,12,539,31,"error"],[669,17,539,36],[669,19,539,38],[670,10,539,43],[670,11,539,44],[671,8,540,12],[671,9,540,13],[671,10,541,12],[671,17,541,19,"error"],[671,22,541,24],[671,24,541,26],[672,10,542,16],[672,14,542,20],[672,18,542,24],[672,19,542,25,"shouldThrowOnError"],[672,37,542,43],[672,39,542,45],[673,12,543,20],[673,18,543,26,"error"],[673,23,543,31],[674,10,544,16],[675,10,545,16],[675,14,545,20],[675,18,545,20,"isStorageError"],[675,28,545,34],[675,29,545,34,"isStorageError"],[675,43,545,34],[675,45,545,35,"error"],[675,50,545,40],[675,51,545,41],[675,53,545,43],[676,12,546,20],[676,19,546,27],[677,14,546,29,"data"],[677,18,546,33],[677,20,546,35],[677,24,546,39],[678,14,546,41,"error"],[679,12,546,47],[679,13,546,48],[680,10,547,16],[681,10,548,16],[681,16,548,22,"error"],[681,21,548,27],[682,8,549,12],[683,6,550,8],[683,7,550,9],[683,8,550,10],[684,4,551,4],[685,4,552,4,"encodeMetadata"],[685,18,552,18,"encodeMetadata"],[685,19,552,19,"metadata"],[685,27,552,27],[685,29,552,29],[686,6,553,8],[686,13,553,15,"JSON"],[686,17,553,19],[686,18,553,20,"stringify"],[686,27,553,29],[686,28,553,30,"metadata"],[686,36,553,38],[686,37,553,39],[687,4,554,4],[688,4,555,4,"toBase64"],[688,12,555,12,"toBase64"],[688,13,555,13,"data"],[688,17,555,17],[688,19,555,19],[689,6,556,8],[689,10,556,12],[689,17,556,19,"Buffer"],[689,23,556,25],[689,28,556,30],[689,39,556,41],[689,41,556,43],[690,8,557,12],[690,15,557,19,"Buffer"],[690,21,557,25],[690,22,557,26,"from"],[690,26,557,30],[690,27,557,31,"data"],[690,31,557,35],[690,32,557,36],[690,33,557,37,"toString"],[690,41,557,45],[690,42,557,46],[690,50,557,54],[690,51,557,55],[691,6,558,8],[692,6,559,8],[692,13,559,15,"btoa"],[692,17,559,19],[692,18,559,20,"data"],[692,22,559,24],[692,23,559,25],[693,4,560,4],[694,4,561,4,"_getFinalPath"],[694,17,561,17,"_getFinalPath"],[694,18,561,18,"path"],[694,22,561,22],[694,24,561,24],[695,6,562,8],[695,13,562,15],[695,16,562,18],[695,20,562,22],[695,21,562,23,"bucketId"],[695,29,562,31],[695,33,562,35,"path"],[695,37,562,39],[695,38,562,40,"replace"],[695,45,562,47],[695,46,562,48],[695,52,562,54],[695,54,562,56],[695,56,562,58],[695,57,562,59],[695,59,562,61],[696,4,563,4],[697,4,564,4,"_removeEmptyFolders"],[697,23,564,23,"_removeEmptyFolders"],[697,24,564,24,"path"],[697,28,564,28],[697,30,564,30],[698,6,565,8],[698,13,565,15,"path"],[698,17,565,19],[698,18,565,20,"replace"],[698,25,565,27],[698,26,565,28],[698,36,565,38],[698,38,565,40],[698,40,565,42],[698,41,565,43],[698,42,565,44,"replace"],[698,49,565,51],[698,50,565,52],[698,56,565,58],[698,58,565,60],[698,61,565,63],[698,62,565,64],[699,4,566,4],[700,4,567,4,"transformOptsToQueryString"],[700,30,567,30,"transformOptsToQueryString"],[700,31,567,31,"transform"],[700,40,567,40],[700,42,567,42],[701,6,568,8],[701,12,568,14,"params"],[701,18,568,20],[701,21,568,23],[701,23,568,25],[702,6,569,8],[702,10,569,12,"transform"],[702,19,569,21],[702,20,569,22,"width"],[702,25,569,27],[702,27,569,29],[703,8,570,12,"params"],[703,14,570,18],[703,15,570,19,"push"],[703,19,570,23],[703,20,570,24],[703,29,570,33,"transform"],[703,38,570,42],[703,39,570,43,"width"],[703,44,570,48],[703,46,570,50],[703,47,570,51],[704,6,571,8],[705,6,572,8],[705,10,572,12,"transform"],[705,19,572,21],[705,20,572,22,"height"],[705,26,572,28],[705,28,572,30],[706,8,573,12,"params"],[706,14,573,18],[706,15,573,19,"push"],[706,19,573,23],[706,20,573,24],[706,30,573,34,"transform"],[706,39,573,43],[706,40,573,44,"height"],[706,46,573,50],[706,48,573,52],[706,49,573,53],[707,6,574,8],[708,6,575,8],[708,10,575,12,"transform"],[708,19,575,21],[708,20,575,22,"resize"],[708,26,575,28],[708,28,575,30],[709,8,576,12,"params"],[709,14,576,18],[709,15,576,19,"push"],[709,19,576,23],[709,20,576,24],[709,30,576,34,"transform"],[709,39,576,43],[709,40,576,44,"resize"],[709,46,576,50],[709,48,576,52],[709,49,576,53],[710,6,577,8],[711,6,578,8],[711,10,578,12,"transform"],[711,19,578,21],[711,20,578,22,"format"],[711,26,578,28],[711,28,578,30],[712,8,579,12,"params"],[712,14,579,18],[712,15,579,19,"push"],[712,19,579,23],[712,20,579,24],[712,30,579,34,"transform"],[712,39,579,43],[712,40,579,44,"format"],[712,46,579,50],[712,48,579,52],[712,49,579,53],[713,6,580,8],[714,6,581,8],[714,10,581,12,"transform"],[714,19,581,21],[714,20,581,22,"quality"],[714,27,581,29],[714,29,581,31],[715,8,582,12,"params"],[715,14,582,18],[715,15,582,19,"push"],[715,19,582,23],[715,20,582,24],[715,31,582,35,"transform"],[715,40,582,44],[715,41,582,45,"quality"],[715,48,582,52],[715,50,582,54],[715,51,582,55],[716,6,583,8],[717,6,584,8],[717,13,584,15,"params"],[717,19,584,21],[717,20,584,22,"join"],[717,24,584,26],[717,25,584,27],[717,28,584,30],[717,29,584,31],[718,4,585,4],[719,2,586,0],[720,0,586,1],[720,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","StorageFileApi","constructor","throwOnError","uploadOrUpdate","__awaiter$argument_3","upload","uploadToSignedUrl","createSignedUploadUrl","update","move","copy","createSignedUrl","createSignedUrls","data.map$argument_0","download","downloadFn","info","exists","getPublicUrl","remove","list","listV2","encodeMetadata","toBase64","_getFinalPath","_removeEmptyFolders","transformOptsToQueryString"],"mappings":"AAA,4CC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;eOkB;ICC;KDM;IEI;KFG;IGQ;+CCC;SDiD;KHC;IKO;+CDC;SCE;KLC;IMO;+CFC;SEsC;KNC;IOQ;+CHC;SGwB;KPC;IQO;+CJC;SIE;KRC;ISQ;+CLC;SKmB;KTC;IUQ;+CNC;SMmB;KVC;IWS;+CPC;SOoB;KXC;IYQ;+CRC;mCSO;sCTE;SQa;KZC;IcO;2BCM;UDG;KdE;IgBK;+CZC;SYiB;KhBC;IiBK;+CbC;SaoB;KjBC;IkBS;KlBsB;ImBM;+CfC;Sec;KnBC;IoBiE;+ChBC;SgBe;KpBC;IqBM;+CjBC;SiBe;KrBC;IsBC;KtBE;IuBC;KvBK;IwBC;KxBE;IyBC;KzBE;I0BC;K1BkB;CPC"},"hasCjsExports":false},"type":"js/module"}]}