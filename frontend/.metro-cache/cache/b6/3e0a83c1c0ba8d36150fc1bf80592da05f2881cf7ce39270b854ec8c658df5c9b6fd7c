{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Helpers to convert the change Payload into native JS types.\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.httpEndpointURL = exports.toTimestampString = exports.toArray = exports.toJson = exports.toNumber = exports.toBoolean = exports.convertCell = exports.convertColumn = exports.convertChangeData = exports.PostgresTypes = void 0;\n  // Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n  // 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n  var PostgresTypes;\n  (function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n  })(PostgresTypes || (exports.PostgresTypes = PostgresTypes = {}));\n  /**\n   * Takes an array of columns and an object of string values then converts each string value\n   * to its mapped type.\n   *\n   * @param {{name: String, type: String}[]} columns\n   * @param {Object} record\n   * @param {Object} options The map of various options that can be applied to the mapper\n   * @param {Array} options.skipTypes The array of types that should not be converted\n   *\n   * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n   * //=>{ first_name: 'Paul', age: 33 }\n   */\n  const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n      acc[rec_key] = (0, exports.convertColumn)(rec_key, columns, record, skipTypes);\n      return acc;\n    }, {});\n  };\n  exports.convertChangeData = convertChangeData;\n  /**\n   * Converts the value of an individual column.\n   *\n   * @param {String} columnName The column that you want to convert\n   * @param {{name: String, type: String}[]} columns All of the columns\n   * @param {Object} record The map of string values\n   * @param {Array} skipTypes An array of types that should not be converted\n   * @return {object} Useless information\n   *\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n   * //=> 33\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n   * //=> \"33\"\n   */\n  const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find(x => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n      return (0, exports.convertCell)(colType, value);\n    }\n    return noop(value);\n  };\n  exports.convertColumn = convertColumn;\n  /**\n   * If the value of the cell is `null`, returns null.\n   * Otherwise converts the string value to the correct type.\n   * @param {String} type A postgres column type\n   * @param {String} value The cell value\n   *\n   * @example convertCell('bool', 't')\n   * //=> true\n   * @example convertCell('int8', '10')\n   * //=> 10\n   * @example convertCell('_int4', '{1,2,3,4}')\n   * //=> [1,2,3,4]\n   */\n  const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n      const dataType = type.slice(1, type.length);\n      return (0, exports.toArray)(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n      case PostgresTypes.bool:\n        return (0, exports.toBoolean)(value);\n      case PostgresTypes.float4:\n      case PostgresTypes.float8:\n      case PostgresTypes.int2:\n      case PostgresTypes.int4:\n      case PostgresTypes.int8:\n      case PostgresTypes.numeric:\n      case PostgresTypes.oid:\n        return (0, exports.toNumber)(value);\n      case PostgresTypes.json:\n      case PostgresTypes.jsonb:\n        return (0, exports.toJson)(value);\n      case PostgresTypes.timestamp:\n        return (0, exports.toTimestampString)(value);\n      // Format to be consistent with PostgREST\n      case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n      case PostgresTypes.date: // To allow users to cast it based on Timezone\n      case PostgresTypes.daterange:\n      case PostgresTypes.int4range:\n      case PostgresTypes.int8range:\n      case PostgresTypes.money:\n      case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n      case PostgresTypes.text:\n      case PostgresTypes.time: // To allow users to cast it based on Timezone\n      case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n      case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n      case PostgresTypes.tsrange:\n      case PostgresTypes.tstzrange:\n        return noop(value);\n      default:\n        // Return the value for remaining types\n        return noop(value);\n    }\n  };\n  exports.convertCell = convertCell;\n  const noop = value => {\n    return value;\n  };\n  const toBoolean = value => {\n    switch (value) {\n      case 't':\n        return true;\n      case 'f':\n        return false;\n      default:\n        return value;\n    }\n  };\n  exports.toBoolean = toBoolean;\n  const toNumber = value => {\n    if (typeof value === 'string') {\n      const parsedValue = parseFloat(value);\n      if (!Number.isNaN(parsedValue)) {\n        return parsedValue;\n      }\n    }\n    return value;\n  };\n  exports.toNumber = toNumber;\n  const toJson = value => {\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n        return value;\n      }\n    }\n    return value;\n  };\n  exports.toJson = toJson;\n  /**\n   * Converts a Postgres Array into a native JS array\n   *\n   * @example toArray('{}', 'int4')\n   * //=> []\n   * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n   * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n   * @example toArray([1,2,3,4], 'int4')\n   * //=> [1,2,3,4]\n   */\n  const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n      let arr;\n      const valTrim = value.slice(1, lastIdx);\n      // TODO: find a better solution to separate Postgres array data\n      try {\n        arr = JSON.parse('[' + valTrim + ']');\n      } catch (_) {\n        // WARNING: splitting on comma does not cover all edge cases\n        arr = valTrim ? valTrim.split(',') : [];\n      }\n      return arr.map(val => (0, exports.convertCell)(type, val));\n    }\n    return value;\n  };\n  exports.toArray = toArray;\n  /**\n   * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n   * See https://github.com/supabase/supabase/issues/18\n   *\n   * @example toTimestampString('2019-09-10 00:00:00')\n   * //=> '2019-09-10T00:00:00'\n   */\n  const toTimestampString = value => {\n    if (typeof value === 'string') {\n      return value.replace(' ', 'T');\n    }\n    return value;\n  };\n  exports.toTimestampString = toTimestampString;\n  const httpEndpointURL = socketUrl => {\n    let url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '') + '/api/broadcast';\n  };\n  exports.httpEndpointURL = httpEndpointURL;\n});","lineCount":232,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,2,5,0,"Object"],[7,8,5,6],[7,9,5,7,"defineProperty"],[7,23,5,21],[7,24,5,22,"exports"],[7,31,5,29],[7,33,5,31],[7,45,5,43],[7,47,5,45],[8,4,5,47,"value"],[8,9,5,52],[8,11,5,54],[9,2,5,59],[9,3,5,60],[9,4,5,61],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"httpEndpointURL"],[10,25,6,23],[10,28,6,26,"exports"],[10,35,6,33],[10,36,6,34,"toTimestampString"],[10,53,6,51],[10,56,6,54,"exports"],[10,63,6,61],[10,64,6,62,"toArray"],[10,71,6,69],[10,74,6,72,"exports"],[10,81,6,79],[10,82,6,80,"toJson"],[10,88,6,86],[10,91,6,89,"exports"],[10,98,6,96],[10,99,6,97,"toNumber"],[10,107,6,105],[10,110,6,108,"exports"],[10,117,6,115],[10,118,6,116,"toBoolean"],[10,127,6,125],[10,130,6,128,"exports"],[10,137,6,135],[10,138,6,136,"convertCell"],[10,149,6,147],[10,152,6,150,"exports"],[10,159,6,157],[10,160,6,158,"convertColumn"],[10,173,6,171],[10,176,6,174,"exports"],[10,183,6,181],[10,184,6,182,"convertChangeData"],[10,201,6,199],[10,204,6,202,"exports"],[10,211,6,209],[10,212,6,210,"PostgresTypes"],[10,225,6,223],[10,228,6,226],[10,233,6,231],[10,234,6,232],[11,2,7,0],[12,2,8,0],[13,2,9,0],[13,6,9,4,"PostgresTypes"],[13,19,9,17],[14,2,10,0],[14,3,10,1],[14,13,10,11,"PostgresTypes"],[14,26,10,24],[14,28,10,26],[15,4,11,4,"PostgresTypes"],[15,17,11,17],[15,18,11,18],[15,27,11,27],[15,28,11,28],[15,31,11,31],[15,40,11,40],[16,4,12,4,"PostgresTypes"],[16,17,12,17],[16,18,12,18],[16,24,12,24],[16,25,12,25],[16,28,12,28],[16,34,12,34],[17,4,13,4,"PostgresTypes"],[17,17,13,17],[17,18,13,18],[17,24,13,24],[17,25,13,25],[17,28,13,28],[17,34,13,34],[18,4,14,4,"PostgresTypes"],[18,17,14,17],[18,18,14,18],[18,29,14,29],[18,30,14,30],[18,33,14,33],[18,44,14,44],[19,4,15,4,"PostgresTypes"],[19,17,15,17],[19,18,15,18],[19,26,15,26],[19,27,15,27],[19,30,15,30],[19,38,15,38],[20,4,16,4,"PostgresTypes"],[20,17,16,17],[20,18,16,18],[20,26,16,26],[20,27,16,27],[20,30,16,30],[20,38,16,38],[21,4,17,4,"PostgresTypes"],[21,17,17,17],[21,18,17,18],[21,24,17,24],[21,25,17,25],[21,28,17,28],[21,34,17,34],[22,4,18,4,"PostgresTypes"],[22,17,18,17],[22,18,18,18],[22,24,18,24],[22,25,18,25],[22,28,18,28],[22,34,18,34],[23,4,19,4,"PostgresTypes"],[23,17,19,17],[23,18,19,18],[23,29,19,29],[23,30,19,30],[23,33,19,33],[23,44,19,44],[24,4,20,4,"PostgresTypes"],[24,17,20,17],[24,18,20,18],[24,24,20,24],[24,25,20,25],[24,28,20,28],[24,34,20,34],[25,4,21,4,"PostgresTypes"],[25,17,21,17],[25,18,21,18],[25,29,21,29],[25,30,21,30],[25,33,21,33],[25,44,21,44],[26,4,22,4,"PostgresTypes"],[26,17,22,17],[26,18,22,18],[26,24,22,24],[26,25,22,25],[26,28,22,28],[26,34,22,34],[27,4,23,4,"PostgresTypes"],[27,17,23,17],[27,18,23,18],[27,25,23,25],[27,26,23,26],[27,29,23,29],[27,36,23,36],[28,4,24,4,"PostgresTypes"],[28,17,24,17],[28,18,24,18],[28,25,24,25],[28,26,24,26],[28,29,24,29],[28,36,24,36],[29,4,25,4,"PostgresTypes"],[29,17,25,17],[29,18,25,18],[29,27,25,27],[29,28,25,28],[29,31,25,31],[29,40,25,40],[30,4,26,4,"PostgresTypes"],[30,17,26,17],[30,18,26,18],[30,23,26,23],[30,24,26,24],[30,27,26,27],[30,32,26,32],[31,4,27,4,"PostgresTypes"],[31,17,27,17],[31,18,27,18],[31,27,27,27],[31,28,27,28],[31,31,27,31],[31,40,27,40],[32,4,28,4,"PostgresTypes"],[32,17,28,17],[32,18,28,18],[32,24,28,24],[32,25,28,25],[32,28,28,28],[32,34,28,34],[33,4,29,4,"PostgresTypes"],[33,17,29,17],[33,18,29,18],[33,24,29,24],[33,25,29,25],[33,28,29,28],[33,34,29,34],[34,4,30,4,"PostgresTypes"],[34,17,30,17],[34,18,30,18],[34,29,30,29],[34,30,30,30],[34,33,30,33],[34,44,30,44],[35,4,31,4,"PostgresTypes"],[35,17,31,17],[35,18,31,18],[35,31,31,31],[35,32,31,32],[35,35,31,35],[35,48,31,48],[36,4,32,4,"PostgresTypes"],[36,17,32,17],[36,18,32,18],[36,26,32,26],[36,27,32,27],[36,30,32,30],[36,38,32,38],[37,4,33,4,"PostgresTypes"],[37,17,33,17],[37,18,33,18],[37,27,33,27],[37,28,33,28],[37,31,33,31],[37,40,33,40],[38,4,34,4,"PostgresTypes"],[38,17,34,17],[38,18,34,18],[38,29,34,29],[38,30,34,30],[38,33,34,33],[38,44,34,44],[39,2,35,0],[39,3,35,1],[39,5,35,3,"PostgresTypes"],[39,18,35,16],[39,23,35,21,"exports"],[39,30,35,28],[39,31,35,29,"PostgresTypes"],[39,44,35,42],[39,47,35,45,"PostgresTypes"],[39,60,35,58],[39,63,35,61],[39,64,35,62],[39,65,35,63],[39,66,35,64],[39,67,35,65],[40,2,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,2,48,0],[52,8,48,6,"convertChangeData"],[52,25,48,23],[52,28,48,26,"convertChangeData"],[52,29,48,27,"columns"],[52,36,48,34],[52,38,48,36,"record"],[52,44,48,42],[52,46,48,44,"options"],[52,53,48,51],[52,56,48,54],[52,57,48,55],[52,58,48,56],[52,63,48,61],[53,4,49,4],[53,8,49,8,"_a"],[53,10,49,10],[54,4,50,4],[54,10,50,10,"skipTypes"],[54,19,50,19],[54,22,50,22],[54,23,50,23,"_a"],[54,25,50,25],[54,28,50,28,"options"],[54,35,50,35],[54,36,50,36,"skipTypes"],[54,45,50,45],[54,51,50,51],[54,55,50,55],[54,59,50,59,"_a"],[54,61,50,61],[54,66,50,66],[54,71,50,71],[54,72,50,72],[54,75,50,75,"_a"],[54,77,50,77],[54,80,50,80],[54,82,50,82],[55,4,51,4],[55,11,51,11,"Object"],[55,17,51,17],[55,18,51,18,"keys"],[55,22,51,22],[55,23,51,23,"record"],[55,29,51,29],[55,30,51,30],[55,31,51,31,"reduce"],[55,37,51,37],[55,38,51,38],[55,39,51,39,"acc"],[55,42,51,42],[55,44,51,44,"rec_key"],[55,51,51,51],[55,56,51,56],[56,6,52,8,"acc"],[56,9,52,11],[56,10,52,12,"rec_key"],[56,17,52,19],[56,18,52,20],[56,21,52,23],[56,22,52,24],[56,23,52,25],[56,25,52,27,"exports"],[56,32,52,34],[56,33,52,35,"convertColumn"],[56,46,52,48],[56,48,52,50,"rec_key"],[56,55,52,57],[56,57,52,59,"columns"],[56,64,52,66],[56,66,52,68,"record"],[56,72,52,74],[56,74,52,76,"skipTypes"],[56,83,52,85],[56,84,52,86],[57,6,53,8],[57,13,53,15,"acc"],[57,16,53,18],[58,4,54,4],[58,5,54,5],[58,7,54,7],[58,8,54,8],[58,9,54,9],[58,10,54,10],[59,2,55,0],[59,3,55,1],[60,2,56,0,"exports"],[60,9,56,7],[60,10,56,8,"convertChangeData"],[60,27,56,25],[60,30,56,28,"convertChangeData"],[60,47,56,45],[61,2,57,0],[62,0,58,0],[63,0,59,0],[64,0,60,0],[65,0,61,0],[66,0,62,0],[67,0,63,0],[68,0,64,0],[69,0,65,0],[70,0,66,0],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,0,70,0],[75,2,71,0],[75,8,71,6,"convertColumn"],[75,21,71,19],[75,24,71,22,"convertColumn"],[75,25,71,23,"columnName"],[75,35,71,33],[75,37,71,35,"columns"],[75,44,71,42],[75,46,71,44,"record"],[75,52,71,50],[75,54,71,52,"skipTypes"],[75,63,71,61],[75,68,71,66],[76,4,72,4],[76,10,72,10,"column"],[76,16,72,16],[76,19,72,19,"columns"],[76,26,72,26],[76,27,72,27,"find"],[76,31,72,31],[76,32,72,33,"x"],[76,33,72,34],[76,37,72,39,"x"],[76,38,72,40],[76,39,72,41,"name"],[76,43,72,45],[76,48,72,50,"columnName"],[76,58,72,60],[76,59,72,61],[77,4,73,4],[77,10,73,10,"colType"],[77,17,73,17],[77,20,73,20,"column"],[77,26,73,26],[77,31,73,31],[77,35,73,35],[77,39,73,39,"column"],[77,45,73,45],[77,50,73,50],[77,55,73,55],[77,56,73,56],[77,59,73,59],[77,64,73,64],[77,65,73,65],[77,68,73,68,"column"],[77,74,73,74],[77,75,73,75,"type"],[77,79,73,79],[78,4,74,4],[78,10,74,10,"value"],[78,15,74,15],[78,18,74,18,"record"],[78,24,74,24],[78,25,74,25,"columnName"],[78,35,74,35],[78,36,74,36],[79,4,75,4],[79,8,75,8,"colType"],[79,15,75,15],[79,19,75,19],[79,20,75,20,"skipTypes"],[79,29,75,29],[79,30,75,30,"includes"],[79,38,75,38],[79,39,75,39,"colType"],[79,46,75,46],[79,47,75,47],[79,49,75,49],[80,6,76,8],[80,13,76,15],[80,14,76,16],[80,15,76,17],[80,17,76,19,"exports"],[80,24,76,26],[80,25,76,27,"convertCell"],[80,36,76,38],[80,38,76,40,"colType"],[80,45,76,47],[80,47,76,49,"value"],[80,52,76,54],[80,53,76,55],[81,4,77,4],[82,4,78,4],[82,11,78,11,"noop"],[82,15,78,15],[82,16,78,16,"value"],[82,21,78,21],[82,22,78,22],[83,2,79,0],[83,3,79,1],[84,2,80,0,"exports"],[84,9,80,7],[84,10,80,8,"convertColumn"],[84,23,80,21],[84,26,80,24,"convertColumn"],[84,39,80,37],[85,2,81,0],[86,0,82,0],[87,0,83,0],[88,0,84,0],[89,0,85,0],[90,0,86,0],[91,0,87,0],[92,0,88,0],[93,0,89,0],[94,0,90,0],[95,0,91,0],[96,0,92,0],[97,0,93,0],[98,2,94,0],[98,8,94,6,"convertCell"],[98,19,94,17],[98,22,94,20,"convertCell"],[98,23,94,21,"type"],[98,27,94,25],[98,29,94,27,"value"],[98,34,94,32],[98,39,94,37],[99,4,95,4],[100,4,96,4],[100,8,96,8,"type"],[100,12,96,12],[100,13,96,13,"charAt"],[100,19,96,19],[100,20,96,20],[100,21,96,21],[100,22,96,22],[100,27,96,27],[100,30,96,30],[100,32,96,32],[101,6,97,8],[101,12,97,14,"dataType"],[101,20,97,22],[101,23,97,25,"type"],[101,27,97,29],[101,28,97,30,"slice"],[101,33,97,35],[101,34,97,36],[101,35,97,37],[101,37,97,39,"type"],[101,41,97,43],[101,42,97,44,"length"],[101,48,97,50],[101,49,97,51],[102,6,98,8],[102,13,98,15],[102,14,98,16],[102,15,98,17],[102,17,98,19,"exports"],[102,24,98,26],[102,25,98,27,"toArray"],[102,32,98,34],[102,34,98,36,"value"],[102,39,98,41],[102,41,98,43,"dataType"],[102,49,98,51],[102,50,98,52],[103,4,99,4],[104,4,100,4],[105,4,101,4],[105,12,101,12,"type"],[105,16,101,16],[106,6,102,8],[106,11,102,13,"PostgresTypes"],[106,24,102,26],[106,25,102,27,"bool"],[106,29,102,31],[107,8,103,12],[107,15,103,19],[107,16,103,20],[107,17,103,21],[107,19,103,23,"exports"],[107,26,103,30],[107,27,103,31,"toBoolean"],[107,36,103,40],[107,38,103,42,"value"],[107,43,103,47],[107,44,103,48],[108,6,104,8],[108,11,104,13,"PostgresTypes"],[108,24,104,26],[108,25,104,27,"float4"],[108,31,104,33],[109,6,105,8],[109,11,105,13,"PostgresTypes"],[109,24,105,26],[109,25,105,27,"float8"],[109,31,105,33],[110,6,106,8],[110,11,106,13,"PostgresTypes"],[110,24,106,26],[110,25,106,27,"int2"],[110,29,106,31],[111,6,107,8],[111,11,107,13,"PostgresTypes"],[111,24,107,26],[111,25,107,27,"int4"],[111,29,107,31],[112,6,108,8],[112,11,108,13,"PostgresTypes"],[112,24,108,26],[112,25,108,27,"int8"],[112,29,108,31],[113,6,109,8],[113,11,109,13,"PostgresTypes"],[113,24,109,26],[113,25,109,27,"numeric"],[113,32,109,34],[114,6,110,8],[114,11,110,13,"PostgresTypes"],[114,24,110,26],[114,25,110,27,"oid"],[114,28,110,30],[115,8,111,12],[115,15,111,19],[115,16,111,20],[115,17,111,21],[115,19,111,23,"exports"],[115,26,111,30],[115,27,111,31,"toNumber"],[115,35,111,39],[115,37,111,41,"value"],[115,42,111,46],[115,43,111,47],[116,6,112,8],[116,11,112,13,"PostgresTypes"],[116,24,112,26],[116,25,112,27,"json"],[116,29,112,31],[117,6,113,8],[117,11,113,13,"PostgresTypes"],[117,24,113,26],[117,25,113,27,"jsonb"],[117,30,113,32],[118,8,114,12],[118,15,114,19],[118,16,114,20],[118,17,114,21],[118,19,114,23,"exports"],[118,26,114,30],[118,27,114,31,"toJson"],[118,33,114,37],[118,35,114,39,"value"],[118,40,114,44],[118,41,114,45],[119,6,115,8],[119,11,115,13,"PostgresTypes"],[119,24,115,26],[119,25,115,27,"timestamp"],[119,34,115,36],[120,8,116,12],[120,15,116,19],[120,16,116,20],[120,17,116,21],[120,19,116,23,"exports"],[120,26,116,30],[120,27,116,31,"toTimestampString"],[120,44,116,48],[120,46,116,50,"value"],[120,51,116,55],[120,52,116,56],[121,6,116,58],[122,6,117,8],[122,11,117,13,"PostgresTypes"],[122,24,117,26],[122,25,117,27,"abstime"],[122,32,117,34],[122,33,117,35],[122,34,117,36],[123,6,118,8],[123,11,118,13,"PostgresTypes"],[123,24,118,26],[123,25,118,27,"date"],[123,29,118,31],[123,30,118,32],[123,31,118,33],[124,6,119,8],[124,11,119,13,"PostgresTypes"],[124,24,119,26],[124,25,119,27,"daterange"],[124,34,119,36],[125,6,120,8],[125,11,120,13,"PostgresTypes"],[125,24,120,26],[125,25,120,27,"int4range"],[125,34,120,36],[126,6,121,8],[126,11,121,13,"PostgresTypes"],[126,24,121,26],[126,25,121,27,"int8range"],[126,34,121,36],[127,6,122,8],[127,11,122,13,"PostgresTypes"],[127,24,122,26],[127,25,122,27,"money"],[127,30,122,32],[128,6,123,8],[128,11,123,13,"PostgresTypes"],[128,24,123,26],[128,25,123,27,"reltime"],[128,32,123,34],[128,33,123,35],[128,34,123,36],[129,6,124,8],[129,11,124,13,"PostgresTypes"],[129,24,124,26],[129,25,124,27,"text"],[129,29,124,31],[130,6,125,8],[130,11,125,13,"PostgresTypes"],[130,24,125,26],[130,25,125,27,"time"],[130,29,125,31],[130,30,125,32],[130,31,125,33],[131,6,126,8],[131,11,126,13,"PostgresTypes"],[131,24,126,26],[131,25,126,27,"timestamptz"],[131,36,126,38],[131,37,126,39],[131,38,126,40],[132,6,127,8],[132,11,127,13,"PostgresTypes"],[132,24,127,26],[132,25,127,27,"timetz"],[132,31,127,33],[132,32,127,34],[132,33,127,35],[133,6,128,8],[133,11,128,13,"PostgresTypes"],[133,24,128,26],[133,25,128,27,"tsrange"],[133,32,128,34],[134,6,129,8],[134,11,129,13,"PostgresTypes"],[134,24,129,26],[134,25,129,27,"tstzrange"],[134,34,129,36],[135,8,130,12],[135,15,130,19,"noop"],[135,19,130,23],[135,20,130,24,"value"],[135,25,130,29],[135,26,130,30],[136,6,131,8],[137,8,132,12],[138,8,133,12],[138,15,133,19,"noop"],[138,19,133,23],[138,20,133,24,"value"],[138,25,133,29],[138,26,133,30],[139,4,134,4],[140,2,135,0],[140,3,135,1],[141,2,136,0,"exports"],[141,9,136,7],[141,10,136,8,"convertCell"],[141,21,136,19],[141,24,136,22,"convertCell"],[141,35,136,33],[142,2,137,0],[142,8,137,6,"noop"],[142,12,137,10],[142,15,137,14,"value"],[142,20,137,19],[142,24,137,24],[143,4,138,4],[143,11,138,11,"value"],[143,16,138,16],[144,2,139,0],[144,3,139,1],[145,2,140,0],[145,8,140,6,"toBoolean"],[145,17,140,15],[145,20,140,19,"value"],[145,25,140,24],[145,29,140,29],[146,4,141,4],[146,12,141,12,"value"],[146,17,141,17],[147,6,142,8],[147,11,142,13],[147,14,142,16],[148,8,143,12],[148,15,143,19],[148,19,143,23],[149,6,144,8],[149,11,144,13],[149,14,144,16],[150,8,145,12],[150,15,145,19],[150,20,145,24],[151,6,146,8],[152,8,147,12],[152,15,147,19,"value"],[152,20,147,24],[153,4,148,4],[154,2,149,0],[154,3,149,1],[155,2,150,0,"exports"],[155,9,150,7],[155,10,150,8,"toBoolean"],[155,19,150,17],[155,22,150,20,"toBoolean"],[155,31,150,29],[156,2,151,0],[156,8,151,6,"toNumber"],[156,16,151,14],[156,19,151,18,"value"],[156,24,151,23],[156,28,151,28],[157,4,152,4],[157,8,152,8],[157,15,152,15,"value"],[157,20,152,20],[157,25,152,25],[157,33,152,33],[157,35,152,35],[158,6,153,8],[158,12,153,14,"parsedValue"],[158,23,153,25],[158,26,153,28,"parseFloat"],[158,36,153,38],[158,37,153,39,"value"],[158,42,153,44],[158,43,153,45],[159,6,154,8],[159,10,154,12],[159,11,154,13,"Number"],[159,17,154,19],[159,18,154,20,"isNaN"],[159,23,154,25],[159,24,154,26,"parsedValue"],[159,35,154,37],[159,36,154,38],[159,38,154,40],[160,8,155,12],[160,15,155,19,"parsedValue"],[160,26,155,30],[161,6,156,8],[162,4,157,4],[163,4,158,4],[163,11,158,11,"value"],[163,16,158,16],[164,2,159,0],[164,3,159,1],[165,2,160,0,"exports"],[165,9,160,7],[165,10,160,8,"toNumber"],[165,18,160,16],[165,21,160,19,"toNumber"],[165,29,160,27],[166,2,161,0],[166,8,161,6,"toJson"],[166,14,161,12],[166,17,161,16,"value"],[166,22,161,21],[166,26,161,26],[167,4,162,4],[167,8,162,8],[167,15,162,15,"value"],[167,20,162,20],[167,25,162,25],[167,33,162,33],[167,35,162,35],[168,6,163,8],[168,10,163,12],[169,8,164,12],[169,15,164,19,"JSON"],[169,19,164,23],[169,20,164,24,"parse"],[169,25,164,29],[169,26,164,30,"value"],[169,31,164,35],[169,32,164,36],[170,6,165,8],[170,7,165,9],[170,8,166,8],[170,15,166,15,"error"],[170,20,166,20],[170,22,166,22],[171,8,167,12,"console"],[171,15,167,19],[171,16,167,20,"log"],[171,19,167,23],[171,20,167,24],[171,41,167,45,"error"],[171,46,167,50],[171,48,167,52],[171,49,167,53],[172,8,168,12],[172,15,168,19,"value"],[172,20,168,24],[173,6,169,8],[174,4,170,4],[175,4,171,4],[175,11,171,11,"value"],[175,16,171,16],[176,2,172,0],[176,3,172,1],[177,2,173,0,"exports"],[177,9,173,7],[177,10,173,8,"toJson"],[177,16,173,14],[177,19,173,17,"toJson"],[177,25,173,23],[178,2,174,0],[179,0,175,0],[180,0,176,0],[181,0,177,0],[182,0,178,0],[183,0,179,0],[184,0,180,0],[185,0,181,0],[186,0,182,0],[187,0,183,0],[188,2,184,0],[188,8,184,6,"toArray"],[188,15,184,13],[188,18,184,16,"toArray"],[188,19,184,17,"value"],[188,24,184,22],[188,26,184,24,"type"],[188,30,184,28],[188,35,184,33],[189,4,185,4],[189,8,185,8],[189,15,185,15,"value"],[189,20,185,20],[189,25,185,25],[189,33,185,33],[189,35,185,35],[190,6,186,8],[190,13,186,15,"value"],[190,18,186,20],[191,4,187,4],[192,4,188,4],[192,10,188,10,"lastIdx"],[192,17,188,17],[192,20,188,20,"value"],[192,25,188,25],[192,26,188,26,"length"],[192,32,188,32],[192,35,188,35],[192,36,188,36],[193,4,189,4],[193,10,189,10,"closeBrace"],[193,20,189,20],[193,23,189,23,"value"],[193,28,189,28],[193,29,189,29,"lastIdx"],[193,36,189,36],[193,37,189,37],[194,4,190,4],[194,10,190,10,"openBrace"],[194,19,190,19],[194,22,190,22,"value"],[194,27,190,27],[194,28,190,28],[194,29,190,29],[194,30,190,30],[195,4,191,4],[196,4,192,4],[196,8,192,8,"openBrace"],[196,17,192,17],[196,22,192,22],[196,25,192,25],[196,29,192,29,"closeBrace"],[196,39,192,39],[196,44,192,44],[196,47,192,47],[196,49,192,49],[197,6,193,8],[197,10,193,12,"arr"],[197,13,193,15],[198,6,194,8],[198,12,194,14,"valTrim"],[198,19,194,21],[198,22,194,24,"value"],[198,27,194,29],[198,28,194,30,"slice"],[198,33,194,35],[198,34,194,36],[198,35,194,37],[198,37,194,39,"lastIdx"],[198,44,194,46],[198,45,194,47],[199,6,195,8],[200,6,196,8],[200,10,196,12],[201,8,197,12,"arr"],[201,11,197,15],[201,14,197,18,"JSON"],[201,18,197,22],[201,19,197,23,"parse"],[201,24,197,28],[201,25,197,29],[201,28,197,32],[201,31,197,35,"valTrim"],[201,38,197,42],[201,41,197,45],[201,44,197,48],[201,45,197,49],[202,6,198,8],[202,7,198,9],[202,8,199,8],[202,15,199,15,"_"],[202,16,199,16],[202,18,199,18],[203,8,200,12],[204,8,201,12,"arr"],[204,11,201,15],[204,14,201,18,"valTrim"],[204,21,201,25],[204,24,201,28,"valTrim"],[204,31,201,35],[204,32,201,36,"split"],[204,37,201,41],[204,38,201,42],[204,41,201,45],[204,42,201,46],[204,45,201,49],[204,47,201,51],[205,6,202,8],[206,6,203,8],[206,13,203,15,"arr"],[206,16,203,18],[206,17,203,19,"map"],[206,20,203,22],[206,21,203,24,"val"],[206,24,203,27],[206,28,203,32],[206,29,203,33],[206,30,203,34],[206,32,203,36,"exports"],[206,39,203,43],[206,40,203,44,"convertCell"],[206,51,203,55],[206,53,203,57,"type"],[206,57,203,61],[206,59,203,63,"val"],[206,62,203,66],[206,63,203,67],[206,64,203,68],[207,4,204,4],[208,4,205,4],[208,11,205,11,"value"],[208,16,205,16],[209,2,206,0],[209,3,206,1],[210,2,207,0,"exports"],[210,9,207,7],[210,10,207,8,"toArray"],[210,17,207,15],[210,20,207,18,"toArray"],[210,27,207,25],[211,2,208,0],[212,0,209,0],[213,0,210,0],[214,0,211,0],[215,0,212,0],[216,0,213,0],[217,0,214,0],[218,2,215,0],[218,8,215,6,"toTimestampString"],[218,25,215,23],[218,28,215,27,"value"],[218,33,215,32],[218,37,215,37],[219,4,216,4],[219,8,216,8],[219,15,216,15,"value"],[219,20,216,20],[219,25,216,25],[219,33,216,33],[219,35,216,35],[220,6,217,8],[220,13,217,15,"value"],[220,18,217,20],[220,19,217,21,"replace"],[220,26,217,28],[220,27,217,29],[220,30,217,32],[220,32,217,34],[220,35,217,37],[220,36,217,38],[221,4,218,4],[222,4,219,4],[222,11,219,11,"value"],[222,16,219,16],[223,2,220,0],[223,3,220,1],[224,2,221,0,"exports"],[224,9,221,7],[224,10,221,8,"toTimestampString"],[224,27,221,25],[224,30,221,28,"toTimestampString"],[224,47,221,45],[225,2,222,0],[225,8,222,6,"httpEndpointURL"],[225,23,222,21],[225,26,222,25,"socketUrl"],[225,35,222,34],[225,39,222,39],[226,4,223,4],[226,8,223,8,"url"],[226,11,223,11],[226,14,223,14,"socketUrl"],[226,23,223,23],[227,4,224,4,"url"],[227,7,224,7],[227,10,224,10,"url"],[227,13,224,13],[227,14,224,14,"replace"],[227,21,224,21],[227,22,224,22],[227,28,224,28],[227,30,224,30],[227,36,224,36],[227,37,224,37],[228,4,225,4,"url"],[228,7,225,7],[228,10,225,10,"url"],[228,13,225,13],[228,14,225,14,"replace"],[228,21,225,21],[228,22,225,22],[228,71,225,71],[228,73,225,73],[228,75,225,75],[228,76,225,76],[229,4,226,4],[229,11,226,11,"url"],[229,14,226,14],[229,15,226,15,"replace"],[229,22,226,22],[229,23,226,23],[229,29,226,29],[229,31,226,31],[229,33,226,33],[229,34,226,34],[229,37,226,37],[229,53,226,53],[230,2,227,0],[230,3,227,1],[231,2,228,0,"exports"],[231,9,228,7],[231,10,228,8,"httpEndpointURL"],[231,25,228,23],[231,28,228,26,"httpEndpointURL"],[231,43,228,41],[232,0,228,42],[232,3]],"functionMap":{"names":["<global>","<anonymous>","convertChangeData","Object.keys.reduce$argument_0","convertColumn","columns.find$argument_0","convertCell","noop","toBoolean","toNumber","toJson","toArray","arr.map$argument_0","toTimestampString","httpEndpointURL"],"mappings":"AAA;CCS;CDyB;0BEa;sCCG;KDG;CFC;sBIgB;gCCC,4BD;CJO;oBMe;CNyC;aOE;CPE;kBQC;CRS;iBSE;CTQ;eUE;CVW;gBWY;uBCmB,4CD;CXG;0BaS;CbK;wBcE;CdK"},"hasCjsExports":true},"type":"js/module"}]}