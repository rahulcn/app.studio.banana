{"dependencies":[{"name":"./lib/websocket-factory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"hLh8BE6O0y4t1j6IitD7s/VHa1Y=","exportNames":["*"],"imports":1}},{"name":"./lib/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":151,"index":207}}],"key":"heoF0ph3MRKcRke4Rxium863E4Y=","exportNames":["*"],"imports":1}},{"name":"./lib/serializer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":208},"end":{"line":3,"column":42,"index":250}}],"key":"hxcMt5ZBdMARPzV4VHW/VneJ+L8=","exportNames":["*"],"imports":1}},{"name":"./lib/timer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":251},"end":{"line":4,"column":32,"index":283}}],"key":"435u4om/oqs8CqOGWsJ0fqMEdn0=","exportNames":["*"],"imports":1}},{"name":"./lib/transformers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":284},"end":{"line":5,"column":53,"index":337}}],"key":"TR0X6tpqyHHq48C0oqR9cUPe83w=","exportNames":["*"],"imports":1}},{"name":"./RealtimeChannel","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":338},"end":{"line":6,"column":48,"index":386}}],"key":"oYwJNm/lQ0jE2IWCp+KmycNymLs=","exportNames":["*"],"imports":1}},{"name":"@supabase/node-fetch","data":{"asyncType":"async","isESMImport":true,"locs":[{"start":{"line":86,"column":38,"index":4218},"end":{"line":86,"column":68,"index":4248}}],"key":"7Fx+cnrTZuhuI1XE65tJyFLDBO8=","exportNames":["*"],"imports":1}},{"name":"/app/frontend/node_modules/@expo/metro-config/build/async-require.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":86,"column":38,"index":4218},"end":{"line":87,"column":25,"index":4274}}],"key":"daau5xiLR32xskYL0mG55FO6bjk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return RealtimeClient;\n    }\n  });\n  var _libWebsocketFactory = require(_dependencyMap[0], \"./lib/websocket-factory\");\n  var WebSocketFactory = _interopDefault(_libWebsocketFactory);\n  var _libConstants = require(_dependencyMap[1], \"./lib/constants\");\n  var _libSerializer = require(_dependencyMap[2], \"./lib/serializer\");\n  var Serializer = _interopDefault(_libSerializer);\n  var _libTimer = require(_dependencyMap[3], \"./lib/timer\");\n  var Timer = _interopDefault(_libTimer);\n  var _libTransformers = require(_dependencyMap[4], \"./lib/transformers\");\n  var _RealtimeChannel = require(_dependencyMap[5], \"./RealtimeChannel\");\n  var RealtimeChannel = _interopDefault(_RealtimeChannel);\n  const noop = () => {};\n  // Connection-related constants\n  const CONNECTION_TIMEOUTS = {\n    HEARTBEAT_INTERVAL: 25000,\n    RECONNECT_DELAY: 10,\n    HEARTBEAT_TIMEOUT_FALLBACK: 100\n  };\n  const RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\n  const DEFAULT_RECONNECT_FALLBACK = 10000;\n  const WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\n  class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.heartbeatCallback The optional function to handle heartbeat status.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.logLevel Sets the log level for Realtime\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    constructor(endPoint, options) {\n      var _a;\n      this.accessTokenValue = null;\n      this.apiKey = null;\n      this.channels = new Array();\n      this.endPoint = '';\n      this.httpEndpoint = '';\n      /** @deprecated headers cannot be set on websocket connections */\n      this.headers = {};\n      this.params = {};\n      this.timeout = _libConstants.DEFAULT_TIMEOUT;\n      this.transport = null;\n      this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n      this.heartbeatTimer = undefined;\n      this.pendingHeartbeatRef = null;\n      this.heartbeatCallback = noop;\n      this.ref = 0;\n      this.reconnectTimer = null;\n      this.logger = noop;\n      this.conn = null;\n      this.sendBuffer = [];\n      this.serializer = new Serializer.default();\n      this.stateChangeCallbacks = {\n        open: [],\n        close: [],\n        error: [],\n        message: []\n      };\n      this.accessToken = null;\n      this._connectionState = 'disconnected';\n      this._wasManualDisconnect = false;\n      this._authPromise = null;\n      /**\n       * Use either custom fetch, if provided, or default fetch to make HTTP requests\n       *\n       * @internal\n       */\n      this._resolveFetch = customFetch => {\n        let _fetch;\n        if (customFetch) {\n          _fetch = customFetch;\n        } else if (typeof fetch === 'undefined') {\n          // Node.js environment without native fetch\n          _fetch = (...args) => require(_dependencyMap[7], \"/app/frontend/node_modules/@expo/metro-config/build/async-require.js\")(_dependencyMap[6], _dependencyMap.paths, \"@supabase/node-fetch\").then(({\n            default: fetch\n          }) => fetch(...args)).catch(error => {\n            throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` + `This is required for HTTP requests in Node.js environments without native fetch.`);\n          });\n        } else {\n          _fetch = fetch;\n        }\n        return (...args) => _fetch(...args);\n      };\n      // Validate required parameters\n      if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {\n        throw new Error('API key is required to connect to Realtime');\n      }\n      this.apiKey = options.params.apikey;\n      // Initialize endpoint URLs\n      this.endPoint = `${endPoint}/${_libConstants.TRANSPORTS.websocket}`;\n      this.httpEndpoint = (0, _libTransformers.httpEndpointURL)(endPoint);\n      this._initializeOptions(options);\n      this._setupReconnectionTimer();\n      this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n      // Skip if already connecting, disconnecting, or connected\n      if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {\n        return;\n      }\n      this._setConnectionState('connecting');\n      this._setAuthSafely('connect');\n      // Establish WebSocket connection\n      if (this.transport) {\n        // Use custom transport if provided\n        this.conn = new this.transport(this.endpointURL());\n      } else {\n        // Try to use native WebSocket\n        try {\n          this.conn = WebSocketFactory.default.createWebSocket(this.endpointURL());\n        } catch (error) {\n          this._setConnectionState('disconnected');\n          const errorMessage = error.message;\n          // Provide helpful error message based on environment\n          if (errorMessage.includes('Node.js')) {\n            throw new Error(`${errorMessage}\\n\\n` + 'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' + 'Option 1: Use Node.js 22+ which has native WebSocket support\\n' + 'Option 2: Install and provide the \"ws\" package:\\n\\n' + '  npm install ws\\n\\n' + '  import ws from \"ws\"\\n' + '  const client = new RealtimeClient(url, {\\n' + '    ...options,\\n' + '    transport: ws\\n' + '  })');\n          }\n          throw new Error(`WebSocket not available: ${errorMessage}`);\n        }\n      }\n      this._setupConnectionHandlers();\n    }\n    /**\n     * Returns the URL of the websocket.\n     * @returns string The URL of the websocket.\n     */\n    endpointURL() {\n      return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n        vsn: _libConstants.VSN\n      }));\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n      if (this.isDisconnecting()) {\n        return;\n      }\n      this._setConnectionState('disconnecting', true);\n      if (this.conn) {\n        // Setup fallback timer to prevent hanging in disconnecting state\n        const fallbackTimer = setTimeout(() => {\n          this._setConnectionState('disconnected');\n        }, 100);\n        this.conn.onclose = () => {\n          clearTimeout(fallbackTimer);\n          this._setConnectionState('disconnected');\n        };\n        // Close the WebSocket connection\n        if (code) {\n          this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n        } else {\n          this.conn.close();\n        }\n        this._teardownConnection();\n      } else {\n        this._setConnectionState('disconnected');\n      }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n      return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n      const status = await channel.unsubscribe();\n      if (this.channels.length === 0) {\n        this.disconnect();\n      }\n      return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n      const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n      this.channels = [];\n      this.disconnect();\n      return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n      this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n      switch (this.conn && this.conn.readyState) {\n        case _libConstants.SOCKET_STATES.connecting:\n          return _libConstants.CONNECTION_STATE.Connecting;\n        case _libConstants.SOCKET_STATES.open:\n          return _libConstants.CONNECTION_STATE.Open;\n        case _libConstants.SOCKET_STATES.closing:\n          return _libConstants.CONNECTION_STATE.Closing;\n        default:\n          return _libConstants.CONNECTION_STATE.Closed;\n      }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n      return this.connectionState() === _libConstants.CONNECTION_STATE.Open;\n    }\n    /**\n     * Returns `true` if the connection is currently connecting.\n     */\n    isConnecting() {\n      return this._connectionState === 'connecting';\n    }\n    /**\n     * Returns `true` if the connection is currently disconnecting.\n     */\n    isDisconnecting() {\n      return this._connectionState === 'disconnecting';\n    }\n    channel(topic, params = {\n      config: {}\n    }) {\n      const realtimeTopic = `realtime:${topic}`;\n      const exists = this.getChannels().find(c => c.topic === realtimeTopic);\n      if (!exists) {\n        const chan = new RealtimeChannel.default(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n      } else {\n        return exists;\n      }\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n      const {\n        topic,\n        event,\n        payload,\n        ref\n      } = data;\n      const callback = () => {\n        this.encode(data, result => {\n          var _a;\n          (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n        });\n      };\n      this.log('push', `${topic} ${event} (${ref})`, payload);\n      if (this.isConnected()) {\n        callback();\n      } else {\n        this.sendBuffer.push(callback);\n      }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\n     *\n     * On callback used, it will set the value of the token internal to the client.\n     *\n     * @param token A JWT string to override the token set on the client.\n     */\n    async setAuth(token = null) {\n      this._authPromise = this._performAuth(token);\n      try {\n        await this._authPromise;\n      } finally {\n        this._authPromise = null;\n      }\n    }\n    /**\n     * Sends a heartbeat message if the socket is connected.\n     */\n    async sendHeartbeat() {\n      var _a;\n      if (!this.isConnected()) {\n        try {\n          this.heartbeatCallback('disconnected');\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e);\n        }\n        return;\n      }\n      // Handle heartbeat timeout and force reconnection if needed\n      if (this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n        this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n        try {\n          this.heartbeatCallback('timeout');\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e);\n        }\n        // Force reconnection after heartbeat timeout\n        this._wasManualDisconnect = false;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(_libConstants.WS_CLOSE_NORMAL, 'heartbeat timeout');\n        setTimeout(() => {\n          var _a;\n          if (!this.isConnected()) {\n            (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n          }\n        }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\n        return;\n      }\n      // Send heartbeat message to server\n      this.pendingHeartbeatRef = this._makeRef();\n      this.push({\n        topic: 'phoenix',\n        event: 'heartbeat',\n        payload: {},\n        ref: this.pendingHeartbeatRef\n      });\n      try {\n        this.heartbeatCallback('sent');\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e);\n      }\n      this._setAuthSafely('heartbeat');\n    }\n    onHeartbeat(callback) {\n      this.heartbeatCallback = callback;\n    }\n    /**\n     * Flushes send buffer\n     */\n    flushSendBuffer() {\n      if (this.isConnected() && this.sendBuffer.length > 0) {\n        this.sendBuffer.forEach(callback => callback());\n        this.sendBuffer = [];\n      }\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n      let newRef = this.ref + 1;\n      if (newRef === this.ref) {\n        this.ref = 0;\n      } else {\n        this.ref = newRef;\n      }\n      return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n      let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n      if (dupChannel) {\n        this.log('transport', `leaving duplicate topic \"${topic}\"`);\n        dupChannel.unsubscribe();\n      }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n      this.channels = this.channels.filter(c => c.topic !== channel.topic);\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n      this.decode(rawMessage.data, msg => {\n        // Handle heartbeat responses\n        if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n          try {\n            this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\n          } catch (e) {\n            this.log('error', 'error in heartbeat callback', e);\n          }\n        }\n        // Handle pending heartbeat reference cleanup\n        if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n          this.pendingHeartbeatRef = null;\n        }\n        // Log incoming message\n        const {\n          topic,\n          event,\n          payload,\n          ref\n        } = msg;\n        const refString = ref ? `(${ref})` : '';\n        const status = payload.status || '';\n        this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\n        // Route message to appropriate channels\n        this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n        this._triggerStateCallbacks('message', msg);\n      });\n    }\n    /**\n     * Clear specific timer\n     * @internal\n     */\n    _clearTimer(timer) {\n      var _a;\n      if (timer === 'heartbeat' && this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = undefined;\n      } else if (timer === 'reconnect') {\n        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();\n      }\n    }\n    /**\n     * Clear all timers\n     * @internal\n     */\n    _clearAllTimers() {\n      this._clearTimer('heartbeat');\n      this._clearTimer('reconnect');\n    }\n    /**\n     * Setup connection handlers for WebSocket events\n     * @internal\n     */\n    _setupConnectionHandlers() {\n      if (!this.conn) return;\n      // Set binary type if supported (browsers and most WebSocket implementations)\n      if ('binaryType' in this.conn) {\n        ;\n        this.conn.binaryType = 'arraybuffer';\n      }\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n    /**\n     * Teardown connection and cleanup resources\n     * @internal\n     */\n    _teardownConnection() {\n      if (this.conn) {\n        this.conn.onopen = null;\n        this.conn.onerror = null;\n        this.conn.onmessage = null;\n        this.conn.onclose = null;\n        this.conn = null;\n      }\n      this._clearAllTimers();\n      this.channels.forEach(channel => channel.teardown());\n    }\n    /** @internal */\n    _onConnOpen() {\n      this._setConnectionState('connected');\n      this.log('transport', `connected to ${this.endpointURL()}`);\n      this.flushSendBuffer();\n      this._clearTimer('reconnect');\n      if (!this.worker) {\n        this._startHeartbeat();\n      } else {\n        if (!this.workerRef) {\n          this._startWorkerHeartbeat();\n        }\n      }\n      this._triggerStateCallbacks('open');\n    }\n    /** @internal */\n    _startHeartbeat() {\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n    }\n    /** @internal */\n    _startWorkerHeartbeat() {\n      if (this.workerUrl) {\n        this.log('worker', `starting worker for from ${this.workerUrl}`);\n      } else {\n        this.log('worker', `starting default worker`);\n      }\n      const objectUrl = this._workerObjectUrl(this.workerUrl);\n      this.workerRef = new Worker(objectUrl);\n      this.workerRef.onerror = error => {\n        this.log('worker', 'worker error', error.message);\n        this.workerRef.terminate();\n      };\n      this.workerRef.onmessage = event => {\n        if (event.data.event === 'keepAlive') {\n          this.sendHeartbeat();\n        }\n      };\n      this.workerRef.postMessage({\n        event: 'start',\n        interval: this.heartbeatIntervalMs\n      });\n    }\n    /** @internal */\n    _onConnClose(event) {\n      var _a;\n      this._setConnectionState('disconnected');\n      this.log('transport', 'close', event);\n      this._triggerChanError();\n      this._clearTimer('heartbeat');\n      // Only schedule reconnection if it wasn't a manual disconnect\n      if (!this._wasManualDisconnect) {\n        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n      }\n      this._triggerStateCallbacks('close', event);\n    }\n    /** @internal */\n    _onConnError(error) {\n      this._setConnectionState('disconnected');\n      this.log('transport', `${error}`);\n      this._triggerChanError();\n      this._triggerStateCallbacks('error', error);\n    }\n    /** @internal */\n    _triggerChanError() {\n      this.channels.forEach(channel => channel._trigger(_libConstants.CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n      if (Object.keys(params).length === 0) {\n        return url;\n      }\n      const prefix = url.match(/\\?/) ? '&' : '?';\n      const query = new URLSearchParams(params);\n      return `${url}${prefix}${query}`;\n    }\n    _workerObjectUrl(url) {\n      let result_url;\n      if (url) {\n        result_url = url;\n      } else {\n        const blob = new Blob([WORKER_SCRIPT], {\n          type: 'application/javascript'\n        });\n        result_url = URL.createObjectURL(blob);\n      }\n      return result_url;\n    }\n    /**\n     * Set connection state with proper state management\n     * @internal\n     */\n    _setConnectionState(state, manual = false) {\n      this._connectionState = state;\n      if (state === 'connecting') {\n        this._wasManualDisconnect = false;\n      } else if (state === 'disconnecting') {\n        this._wasManualDisconnect = manual;\n      }\n    }\n    /**\n     * Perform the actual auth operation\n     * @internal\n     */\n    async _performAuth(token = null) {\n      let tokenToSend;\n      if (token) {\n        tokenToSend = token;\n      } else if (this.accessToken) {\n        // Always call the accessToken callback to get fresh token\n        tokenToSend = await this.accessToken();\n      } else {\n        tokenToSend = this.accessTokenValue;\n      }\n      if (this.accessTokenValue != tokenToSend) {\n        this.accessTokenValue = tokenToSend;\n        this.channels.forEach(channel => {\n          const payload = {\n            access_token: tokenToSend,\n            version: _libConstants.DEFAULT_VERSION\n          };\n          tokenToSend && channel.updateJoinPayload(payload);\n          if (channel.joinedOnce && channel._isJoined()) {\n            channel._push(_libConstants.CHANNEL_EVENTS.access_token, {\n              access_token: tokenToSend\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Wait for any in-flight auth operations to complete\n     * @internal\n     */\n    async _waitForAuthIfNeeded() {\n      if (this._authPromise) {\n        await this._authPromise;\n      }\n    }\n    /**\n     * Safely call setAuth with standardized error handling\n     * @internal\n     */\n    _setAuthSafely(context = 'general') {\n      this.setAuth().catch(e => {\n        this.log('error', `error setting auth in ${context}`, e);\n      });\n    }\n    /**\n     * Trigger state change callbacks with proper error handling\n     * @internal\n     */\n    _triggerStateCallbacks(event, data) {\n      try {\n        this.stateChangeCallbacks[event].forEach(callback => {\n          try {\n            callback(data);\n          } catch (e) {\n            this.log('error', `error in ${event} callback`, e);\n          }\n        });\n      } catch (e) {\n        this.log('error', `error triggering ${event} callbacks`, e);\n      }\n    }\n    /**\n     * Setup reconnection timer with proper configuration\n     * @internal\n     */\n    _setupReconnectionTimer() {\n      this.reconnectTimer = new Timer.default(async () => {\n        setTimeout(async () => {\n          await this._waitForAuthIfNeeded();\n          if (!this.isConnected()) {\n            this.connect();\n          }\n        }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);\n      }, this.reconnectAfterMs);\n    }\n    /**\n     * Initialize client options with defaults\n     * @internal\n     */\n    _initializeOptions(options) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      // Set defaults\n      this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;\n      this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : _libConstants.DEFAULT_TIMEOUT;\n      this.heartbeatIntervalMs = (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n      this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;\n      this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;\n      this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop;\n      // Handle special cases\n      if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n      if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n      if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n        this.logLevel = options.logLevel || options.log_level;\n        this.params = Object.assign(Object.assign({}, this.params), {\n          log_level: this.logLevel\n        });\n      }\n      // Set up functions with defaults\n      this.reconnectAfterMs = (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : tries => {\n        return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\n      };\n      this.encode = (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : (payload, callback) => {\n        return callback(JSON.stringify(payload));\n      };\n      this.decode = (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);\n      // Handle worker setup\n      if (this.worker) {\n        if (typeof window !== 'undefined' && !window.Worker) {\n          throw new Error('Web Worker is not supported');\n        }\n        this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n      }\n    }\n  }\n});","lineCount":716,"map":[[12,2,22,15,"Object"],[12,8,22,15],[12,9,22,15,"defineProperty"],[12,23,22,15],[12,24,22,15,"exports"],[12,31,22,15],[13,4,22,15,"enumerable"],[13,14,22,15],[14,4,22,15,"get"],[14,7,22,15],[14,18,22,15,"get"],[14,19,22,15],[15,6,22,15],[15,13,22,15,"RealtimeClient"],[15,27,22,15],[16,4,22,15],[17,2,22,15],[18,2,1,0],[18,6,1,0,"_libWebsocketFactory"],[18,26,1,0],[18,29,1,0,"require"],[18,36,1,0],[18,37,1,0,"_dependencyMap"],[18,51,1,0],[19,2,1,0],[19,6,1,0,"WebSocketFactory"],[19,22,1,0],[19,25,1,0,"_interopDefault"],[19,40,1,0],[19,41,1,0,"_libWebsocketFactory"],[19,61,1,0],[20,2,2,0],[20,6,2,0,"_libConstants"],[20,19,2,0],[20,22,2,0,"require"],[20,29,2,0],[20,30,2,0,"_dependencyMap"],[20,44,2,0],[21,2,3,0],[21,6,3,0,"_libSerializer"],[21,20,3,0],[21,23,3,0,"require"],[21,30,3,0],[21,31,3,0,"_dependencyMap"],[21,45,3,0],[22,2,3,0],[22,6,3,0,"Serializer"],[22,16,3,0],[22,19,3,0,"_interopDefault"],[22,34,3,0],[22,35,3,0,"_libSerializer"],[22,49,3,0],[23,2,4,0],[23,6,4,0,"_libTimer"],[23,15,4,0],[23,18,4,0,"require"],[23,25,4,0],[23,26,4,0,"_dependencyMap"],[23,40,4,0],[24,2,4,0],[24,6,4,0,"Timer"],[24,11,4,0],[24,14,4,0,"_interopDefault"],[24,29,4,0],[24,30,4,0,"_libTimer"],[24,39,4,0],[25,2,5,0],[25,6,5,0,"_libTransformers"],[25,22,5,0],[25,25,5,0,"require"],[25,32,5,0],[25,33,5,0,"_dependencyMap"],[25,47,5,0],[26,2,6,0],[26,6,6,0,"_RealtimeChannel"],[26,22,6,0],[26,25,6,0,"require"],[26,32,6,0],[26,33,6,0,"_dependencyMap"],[26,47,6,0],[27,2,6,0],[27,6,6,0,"RealtimeChannel"],[27,21,6,0],[27,24,6,0,"_interopDefault"],[27,39,6,0],[27,40,6,0,"_RealtimeChannel"],[27,56,6,0],[28,2,7,0],[28,8,7,6,"noop"],[28,12,7,10],[28,15,7,13,"noop"],[28,16,7,13],[28,21,7,19],[28,22,7,21],[28,23,7,22],[29,2,8,0],[30,2,9,0],[30,8,9,6,"CONNECTION_TIMEOUTS"],[30,27,9,25],[30,30,9,28],[31,4,10,4,"HEARTBEAT_INTERVAL"],[31,22,10,22],[31,24,10,24],[31,29,10,29],[32,4,11,4,"RECONNECT_DELAY"],[32,19,11,19],[32,21,11,21],[32,23,11,23],[33,4,12,4,"HEARTBEAT_TIMEOUT_FALLBACK"],[33,30,12,30],[33,32,12,32],[34,2,13,0],[34,3,13,1],[35,2,14,0],[35,8,14,6,"RECONNECT_INTERVALS"],[35,27,14,25],[35,30,14,28],[35,31,14,29],[35,35,14,33],[35,37,14,35],[35,41,14,39],[35,43,14,41],[35,47,14,45],[35,49,14,47],[35,54,14,52],[35,55,14,53],[36,2,15,0],[36,8,15,6,"DEFAULT_RECONNECT_FALLBACK"],[36,34,15,32],[36,37,15,35],[36,42,15,40],[37,2,16,0],[37,8,16,6,"WORKER_SCRIPT"],[37,21,16,19],[37,24,16,22],[38,0,17,0],[39,0,18,0],[40,0,19,0],[41,0,20,0],[42,0,21,0],[42,6,21,6],[43,2,22,15],[43,8,22,21,"RealtimeClient"],[43,22,22,35],[43,23,22,36],[44,4,23,4],[45,0,24,0],[46,0,25,0],[47,0,26,0],[48,0,27,0],[49,0,28,0],[50,0,29,0],[51,0,30,0],[52,0,31,0],[53,0,32,0],[54,0,33,0],[55,0,34,0],[56,0,35,0],[57,0,36,0],[58,0,37,0],[59,0,38,0],[60,0,39,0],[61,0,40,0],[62,0,41,0],[63,4,42,4,"constructor"],[63,15,42,15,"constructor"],[63,16,42,16,"endPoint"],[63,24,42,24],[63,26,42,26,"options"],[63,33,42,33],[63,35,42,35],[64,6,43,8],[64,10,43,12,"_a"],[64,12,43,14],[65,6,44,8],[65,10,44,12],[65,11,44,13,"accessTokenValue"],[65,27,44,29],[65,30,44,32],[65,34,44,36],[66,6,45,8],[66,10,45,12],[66,11,45,13,"apiKey"],[66,17,45,19],[66,20,45,22],[66,24,45,26],[67,6,46,8],[67,10,46,12],[67,11,46,13,"channels"],[67,19,46,21],[67,22,46,24],[67,26,46,28,"Array"],[67,31,46,33],[67,32,46,34],[67,33,46,35],[68,6,47,8],[68,10,47,12],[68,11,47,13,"endPoint"],[68,19,47,21],[68,22,47,24],[68,24,47,26],[69,6,48,8],[69,10,48,12],[69,11,48,13,"httpEndpoint"],[69,23,48,25],[69,26,48,28],[69,28,48,30],[70,6,49,8],[71,6,50,8],[71,10,50,12],[71,11,50,13,"headers"],[71,18,50,20],[71,21,50,23],[71,22,50,24],[71,23,50,25],[72,6,51,8],[72,10,51,12],[72,11,51,13,"params"],[72,17,51,19],[72,20,51,22],[72,21,51,23],[72,22,51,24],[73,6,52,8],[73,10,52,12],[73,11,52,13,"timeout"],[73,18,52,20],[73,21,52,23,"DEFAULT_TIMEOUT"],[73,34,52,38],[73,35,52,38,"DEFAULT_TIMEOUT"],[73,50,52,38],[74,6,53,8],[74,10,53,12],[74,11,53,13,"transport"],[74,20,53,22],[74,23,53,25],[74,27,53,29],[75,6,54,8],[75,10,54,12],[75,11,54,13,"heartbeatIntervalMs"],[75,30,54,32],[75,33,54,35,"CONNECTION_TIMEOUTS"],[75,52,54,54],[75,53,54,55,"HEARTBEAT_INTERVAL"],[75,71,54,73],[76,6,55,8],[76,10,55,12],[76,11,55,13,"heartbeatTimer"],[76,25,55,27],[76,28,55,30,"undefined"],[76,37,55,39],[77,6,56,8],[77,10,56,12],[77,11,56,13,"pendingHeartbeatRef"],[77,30,56,32],[77,33,56,35],[77,37,56,39],[78,6,57,8],[78,10,57,12],[78,11,57,13,"heartbeatCallback"],[78,28,57,30],[78,31,57,33,"noop"],[78,35,57,37],[79,6,58,8],[79,10,58,12],[79,11,58,13,"ref"],[79,14,58,16],[79,17,58,19],[79,18,58,20],[80,6,59,8],[80,10,59,12],[80,11,59,13,"reconnectTimer"],[80,25,59,27],[80,28,59,30],[80,32,59,34],[81,6,60,8],[81,10,60,12],[81,11,60,13,"logger"],[81,17,60,19],[81,20,60,22,"noop"],[81,24,60,26],[82,6,61,8],[82,10,61,12],[82,11,61,13,"conn"],[82,15,61,17],[82,18,61,20],[82,22,61,24],[83,6,62,8],[83,10,62,12],[83,11,62,13,"sendBuffer"],[83,21,62,23],[83,24,62,26],[83,26,62,28],[84,6,63,8],[84,10,63,12],[84,11,63,13,"serializer"],[84,21,63,23],[84,24,63,26],[84,28,63,30,"Serializer"],[84,38,63,40],[84,39,63,40,"default"],[84,46,63,40],[84,47,63,41],[84,48,63,42],[85,6,64,8],[85,10,64,12],[85,11,64,13,"stateChangeCallbacks"],[85,31,64,33],[85,34,64,36],[86,8,65,12,"open"],[86,12,65,16],[86,14,65,18],[86,16,65,20],[87,8,66,12,"close"],[87,13,66,17],[87,15,66,19],[87,17,66,21],[88,8,67,12,"error"],[88,13,67,17],[88,15,67,19],[88,17,67,21],[89,8,68,12,"message"],[89,15,68,19],[89,17,68,21],[90,6,69,8],[90,7,69,9],[91,6,70,8],[91,10,70,12],[91,11,70,13,"accessToken"],[91,22,70,24],[91,25,70,27],[91,29,70,31],[92,6,71,8],[92,10,71,12],[92,11,71,13,"_connectionState"],[92,27,71,29],[92,30,71,32],[92,44,71,46],[93,6,72,8],[93,10,72,12],[93,11,72,13,"_wasManualDisconnect"],[93,31,72,33],[93,34,72,36],[93,39,72,41],[94,6,73,8],[94,10,73,12],[94,11,73,13,"_authPromise"],[94,23,73,25],[94,26,73,28],[94,30,73,32],[95,6,74,8],[96,0,75,0],[97,0,76,0],[98,0,77,0],[99,0,78,0],[100,6,79,8],[100,10,79,12],[100,11,79,13,"_resolveFetch"],[100,24,79,26],[100,27,79,30,"customFetch"],[100,38,79,41],[100,42,79,46],[101,8,80,12],[101,12,80,16,"_fetch"],[101,18,80,22],[102,8,81,12],[102,12,81,16,"customFetch"],[102,23,81,27],[102,25,81,29],[103,10,82,16,"_fetch"],[103,16,82,22],[103,19,82,25,"customFetch"],[103,30,82,36],[104,8,83,12],[104,9,83,13],[104,15,84,17],[104,19,84,21],[104,26,84,28,"fetch"],[104,31,84,33],[104,36,84,38],[104,47,84,49],[104,49,84,51],[105,10,85,16],[106,10,86,16,"_fetch"],[106,16,86,22],[106,19,86,25,"_fetch"],[106,20,86,26],[106,23,86,29,"args"],[106,27,86,33],[106,32,86,38,"require"],[106,39,86,38],[106,40,86,38,"_dependencyMap"],[106,54,86,38],[106,131,86,38,"_dependencyMap"],[106,145,86,38],[106,150,86,38,"_dependencyMap"],[106,164,86,38],[106,165,86,38,"paths"],[106,170,86,38],[106,196,87,21,"then"],[106,200,87,25],[106,201,87,26],[106,202,87,27],[107,12,87,29,"default"],[107,19,87,36],[107,21,87,38,"fetch"],[108,10,87,44],[108,11,87,45],[108,16,87,50,"fetch"],[108,21,87,55],[108,22,87,56],[108,25,87,59,"args"],[108,29,87,63],[108,30,87,64],[108,31,87,65],[108,32,88,21,"catch"],[108,37,88,26],[108,38,88,28,"error"],[108,43,88,33],[108,47,88,38],[109,12,89,20],[109,18,89,26],[109,22,89,30,"Error"],[109,27,89,35],[109,28,89,36],[109,68,89,76,"error"],[109,73,89,81],[109,74,89,82,"message"],[109,81,89,89],[109,85,89,93],[109,88,90,24],[109,170,90,106],[109,171,90,107],[110,10,91,16],[110,11,91,17],[110,12,91,18],[111,8,92,12],[111,9,92,13],[111,15,93,17],[112,10,94,16,"_fetch"],[112,16,94,22],[112,19,94,25,"fetch"],[112,24,94,30],[113,8,95,12],[114,8,96,12],[114,15,96,19],[114,16,96,20],[114,19,96,23,"args"],[114,23,96,27],[114,28,96,32,"_fetch"],[114,34,96,38],[114,35,96,39],[114,38,96,42,"args"],[114,42,96,46],[114,43,96,47],[115,6,97,8],[115,7,97,9],[116,6,98,8],[117,6,99,8],[117,10,99,12],[117,12,99,14],[117,13,99,15,"_a"],[117,15,99,17],[117,18,99,20,"options"],[117,25,99,27],[117,30,99,32],[117,34,99,36],[117,38,99,40,"options"],[117,45,99,47],[117,50,99,52],[117,55,99,57],[117,56,99,58],[117,59,99,61],[117,64,99,66],[117,65,99,67],[117,68,99,70,"options"],[117,75,99,77],[117,76,99,78,"params"],[117,82,99,84],[117,88,99,90],[117,92,99,94],[117,96,99,98,"_a"],[117,98,99,100],[117,103,99,105],[117,108,99,110],[117,109,99,111],[117,112,99,114],[117,117,99,119],[117,118,99,120],[117,121,99,123,"_a"],[117,123,99,125],[117,124,99,126,"apikey"],[117,130,99,132],[117,131,99,133],[117,133,99,135],[118,8,100,12],[118,14,100,18],[118,18,100,22,"Error"],[118,23,100,27],[118,24,100,28],[118,68,100,72],[118,69,100,73],[119,6,101,8],[120,6,102,8],[120,10,102,12],[120,11,102,13,"apiKey"],[120,17,102,19],[120,20,102,22,"options"],[120,27,102,29],[120,28,102,30,"params"],[120,34,102,36],[120,35,102,37,"apikey"],[120,41,102,43],[121,6,103,8],[122,6,104,8],[122,10,104,12],[122,11,104,13,"endPoint"],[122,19,104,21],[122,22,104,24],[122,25,104,27,"endPoint"],[122,33,104,35],[122,37,104,39,"TRANSPORTS"],[122,50,104,49],[122,51,104,49,"TRANSPORTS"],[122,61,104,49],[122,62,104,50,"websocket"],[122,71,104,59],[122,73,104,61],[123,6,105,8],[123,10,105,12],[123,11,105,13,"httpEndpoint"],[123,23,105,25],[123,26,105,28],[123,30,105,28,"httpEndpointURL"],[123,46,105,43],[123,47,105,43,"httpEndpointURL"],[123,62,105,43],[123,64,105,44,"endPoint"],[123,72,105,52],[123,73,105,53],[124,6,106,8],[124,10,106,12],[124,11,106,13,"_initializeOptions"],[124,29,106,31],[124,30,106,32,"options"],[124,37,106,39],[124,38,106,40],[125,6,107,8],[125,10,107,12],[125,11,107,13,"_setupReconnectionTimer"],[125,34,107,36],[125,35,107,37],[125,36,107,38],[126,6,108,8],[126,10,108,12],[126,11,108,13,"fetch"],[126,16,108,18],[126,19,108,21],[126,23,108,25],[126,24,108,26,"_resolveFetch"],[126,37,108,39],[126,38,108,40,"options"],[126,45,108,47],[126,50,108,52],[126,54,108,56],[126,58,108,60,"options"],[126,65,108,67],[126,70,108,72],[126,75,108,77],[126,76,108,78],[126,79,108,81],[126,84,108,86],[126,85,108,87],[126,88,108,90,"options"],[126,95,108,97],[126,96,108,98,"fetch"],[126,101,108,103],[126,102,108,104],[127,4,109,4],[128,4,110,4],[129,0,111,0],[130,0,112,0],[131,4,113,4,"connect"],[131,11,113,11,"connect"],[131,12,113,11],[131,14,113,14],[132,6,114,8],[133,6,115,8],[133,10,115,12],[133,14,115,16],[133,15,115,17,"isConnecting"],[133,27,115,29],[133,28,115,30],[133,29,115,31],[133,33,116,12],[133,37,116,16],[133,38,116,17,"isDisconnecting"],[133,53,116,32],[133,54,116,33],[133,55,116,34],[133,59,117,13],[133,63,117,17],[133,64,117,18,"conn"],[133,68,117,22],[133,73,117,27],[133,77,117,31],[133,81,117,35],[133,85,117,39],[133,86,117,40,"isConnected"],[133,97,117,51],[133,98,117,52],[133,99,117,54],[133,101,117,56],[134,8,118,12],[135,6,119,8],[136,6,120,8],[136,10,120,12],[136,11,120,13,"_setConnectionState"],[136,30,120,32],[136,31,120,33],[136,43,120,45],[136,44,120,46],[137,6,121,8],[137,10,121,12],[137,11,121,13,"_setAuthSafely"],[137,25,121,27],[137,26,121,28],[137,35,121,37],[137,36,121,38],[138,6,122,8],[139,6,123,8],[139,10,123,12],[139,14,123,16],[139,15,123,17,"transport"],[139,24,123,26],[139,26,123,28],[140,8,124,12],[141,8,125,12],[141,12,125,16],[141,13,125,17,"conn"],[141,17,125,21],[141,20,125,24],[141,24,125,28],[141,28,125,32],[141,29,125,33,"transport"],[141,38,125,42],[141,39,125,43],[141,43,125,47],[141,44,125,48,"endpointURL"],[141,55,125,59],[141,56,125,60],[141,57,125,61],[141,58,125,62],[142,6,126,8],[142,7,126,9],[142,13,127,13],[143,8,128,12],[144,8,129,12],[144,12,129,16],[145,10,130,16],[145,14,130,20],[145,15,130,21,"conn"],[145,19,130,25],[145,22,130,28,"WebSocketFactory"],[145,38,130,44],[145,39,130,44,"default"],[145,46,130,44],[145,47,130,45,"createWebSocket"],[145,62,130,60],[145,63,130,61],[145,67,130,65],[145,68,130,66,"endpointURL"],[145,79,130,77],[145,80,130,78],[145,81,130,79],[145,82,130,80],[146,8,131,12],[146,9,131,13],[146,10,132,12],[146,17,132,19,"error"],[146,22,132,24],[146,24,132,26],[147,10,133,16],[147,14,133,20],[147,15,133,21,"_setConnectionState"],[147,34,133,40],[147,35,133,41],[147,49,133,55],[147,50,133,56],[148,10,134,16],[148,16,134,22,"errorMessage"],[148,28,134,34],[148,31,134,37,"error"],[148,36,134,42],[148,37,134,43,"message"],[148,44,134,50],[149,10,135,16],[150,10,136,16],[150,14,136,20,"errorMessage"],[150,26,136,32],[150,27,136,33,"includes"],[150,35,136,41],[150,36,136,42],[150,45,136,51],[150,46,136,52],[150,48,136,54],[151,12,137,20],[151,18,137,26],[151,22,137,30,"Error"],[151,27,137,35],[151,28,137,36],[151,31,137,39,"errorMessage"],[151,43,137,51],[151,49,137,57],[151,52,138,24],[151,133,138,105],[151,136,139,24],[151,200,139,88],[151,203,140,24],[151,256,140,77],[151,259,141,24],[151,281,141,46],[151,284,142,24],[151,309,142,49],[151,312,143,24],[151,358,143,70],[151,361,144,24],[151,380,144,43],[151,383,145,24],[151,404,145,45],[151,407,146,24],[151,413,146,30],[151,414,146,31],[152,10,147,16],[153,10,148,16],[153,16,148,22],[153,20,148,26,"Error"],[153,25,148,31],[153,26,148,32],[153,54,148,60,"errorMessage"],[153,66,148,72],[153,68,148,74],[153,69,148,75],[154,8,149,12],[155,6,150,8],[156,6,151,8],[156,10,151,12],[156,11,151,13,"_setupConnectionHandlers"],[156,35,151,37],[156,36,151,38],[156,37,151,39],[157,4,152,4],[158,4,153,4],[159,0,154,0],[160,0,155,0],[161,0,156,0],[162,4,157,4,"endpointURL"],[162,15,157,15,"endpointURL"],[162,16,157,15],[162,18,157,18],[163,6,158,8],[163,13,158,15],[163,17,158,19],[163,18,158,20,"_appendParams"],[163,31,158,33],[163,32,158,34],[163,36,158,38],[163,37,158,39,"endPoint"],[163,45,158,47],[163,47,158,49,"Object"],[163,53,158,55],[163,54,158,56,"assign"],[163,60,158,62],[163,61,158,63],[163,62,158,64],[163,63,158,65],[163,65,158,67],[163,69,158,71],[163,70,158,72,"params"],[163,76,158,78],[163,78,158,80],[164,8,158,82,"vsn"],[164,11,158,85],[164,13,158,87,"VSN"],[164,26,158,90],[164,27,158,90,"VSN"],[165,6,158,91],[165,7,158,92],[165,8,158,93],[165,9,158,94],[166,4,159,4],[167,4,160,4],[168,0,161,0],[169,0,162,0],[170,0,163,0],[171,0,164,0],[172,0,165,0],[173,4,166,4,"disconnect"],[173,14,166,14,"disconnect"],[173,15,166,15,"code"],[173,19,166,19],[173,21,166,21,"reason"],[173,27,166,27],[173,29,166,29],[174,6,167,8],[174,10,167,12],[174,14,167,16],[174,15,167,17,"isDisconnecting"],[174,30,167,32],[174,31,167,33],[174,32,167,34],[174,34,167,36],[175,8,168,12],[176,6,169,8],[177,6,170,8],[177,10,170,12],[177,11,170,13,"_setConnectionState"],[177,30,170,32],[177,31,170,33],[177,46,170,48],[177,48,170,50],[177,52,170,54],[177,53,170,55],[178,6,171,8],[178,10,171,12],[178,14,171,16],[178,15,171,17,"conn"],[178,19,171,21],[178,21,171,23],[179,8,172,12],[180,8,173,12],[180,14,173,18,"fallbackTimer"],[180,27,173,31],[180,30,173,34,"setTimeout"],[180,40,173,44],[180,41,173,45],[180,47,173,51],[181,10,174,16],[181,14,174,20],[181,15,174,21,"_setConnectionState"],[181,34,174,40],[181,35,174,41],[181,49,174,55],[181,50,174,56],[182,8,175,12],[182,9,175,13],[182,11,175,15],[182,14,175,18],[182,15,175,19],[183,8,176,12],[183,12,176,16],[183,13,176,17,"conn"],[183,17,176,21],[183,18,176,22,"onclose"],[183,25,176,29],[183,28,176,32],[183,34,176,38],[184,10,177,16,"clearTimeout"],[184,22,177,28],[184,23,177,29,"fallbackTimer"],[184,36,177,42],[184,37,177,43],[185,10,178,16],[185,14,178,20],[185,15,178,21,"_setConnectionState"],[185,34,178,40],[185,35,178,41],[185,49,178,55],[185,50,178,56],[186,8,179,12],[186,9,179,13],[187,8,180,12],[188,8,181,12],[188,12,181,16,"code"],[188,16,181,20],[188,18,181,22],[189,10,182,16],[189,14,182,20],[189,15,182,21,"conn"],[189,19,182,25],[189,20,182,26,"close"],[189,25,182,31],[189,26,182,32,"code"],[189,30,182,36],[189,32,182,38,"reason"],[189,38,182,44],[189,43,182,49],[189,47,182,53],[189,51,182,57,"reason"],[189,57,182,63],[189,62,182,68],[189,67,182,73],[189,68,182,74],[189,71,182,77,"reason"],[189,77,182,83],[189,80,182,86],[189,82,182,88],[189,83,182,89],[190,8,183,12],[190,9,183,13],[190,15,184,17],[191,10,185,16],[191,14,185,20],[191,15,185,21,"conn"],[191,19,185,25],[191,20,185,26,"close"],[191,25,185,31],[191,26,185,32],[191,27,185,33],[192,8,186,12],[193,8,187,12],[193,12,187,16],[193,13,187,17,"_teardownConnection"],[193,32,187,36],[193,33,187,37],[193,34,187,38],[194,6,188,8],[194,7,188,9],[194,13,189,13],[195,8,190,12],[195,12,190,16],[195,13,190,17,"_setConnectionState"],[195,32,190,36],[195,33,190,37],[195,47,190,51],[195,48,190,52],[196,6,191,8],[197,4,192,4],[198,4,193,4],[199,0,194,0],[200,0,195,0],[201,4,196,4,"getChannels"],[201,15,196,15,"getChannels"],[201,16,196,15],[201,18,196,18],[202,6,197,8],[202,13,197,15],[202,17,197,19],[202,18,197,20,"channels"],[202,26,197,28],[203,4,198,4],[204,4,199,4],[205,0,200,0],[206,0,201,0],[207,0,202,0],[208,4,203,4],[208,10,203,10,"removeChannel"],[208,23,203,23,"removeChannel"],[208,24,203,24,"channel"],[208,31,203,31],[208,33,203,33],[209,6,204,8],[209,12,204,14,"status"],[209,18,204,20],[209,21,204,23],[209,27,204,29,"channel"],[209,34,204,36],[209,35,204,37,"unsubscribe"],[209,46,204,48],[209,47,204,49],[209,48,204,50],[210,6,205,8],[210,10,205,12],[210,14,205,16],[210,15,205,17,"channels"],[210,23,205,25],[210,24,205,26,"length"],[210,30,205,32],[210,35,205,37],[210,36,205,38],[210,38,205,40],[211,8,206,12],[211,12,206,16],[211,13,206,17,"disconnect"],[211,23,206,27],[211,24,206,28],[211,25,206,29],[212,6,207,8],[213,6,208,8],[213,13,208,15,"status"],[213,19,208,21],[214,4,209,4],[215,4,210,4],[216,0,211,0],[217,0,212,0],[218,4,213,4],[218,10,213,10,"removeAllChannels"],[218,27,213,27,"removeAllChannels"],[218,28,213,27],[218,30,213,30],[219,6,214,8],[219,12,214,14,"values_1"],[219,20,214,22],[219,23,214,25],[219,29,214,31,"Promise"],[219,36,214,38],[219,37,214,39,"all"],[219,40,214,42],[219,41,214,43],[219,45,214,47],[219,46,214,48,"channels"],[219,54,214,56],[219,55,214,57,"map"],[219,58,214,60],[219,59,214,62,"channel"],[219,66,214,69],[219,70,214,74,"channel"],[219,77,214,81],[219,78,214,82,"unsubscribe"],[219,89,214,93],[219,90,214,94],[219,91,214,95],[219,92,214,96],[219,93,214,97],[220,6,215,8],[220,10,215,12],[220,11,215,13,"channels"],[220,19,215,21],[220,22,215,24],[220,24,215,26],[221,6,216,8],[221,10,216,12],[221,11,216,13,"disconnect"],[221,21,216,23],[221,22,216,24],[221,23,216,25],[222,6,217,8],[222,13,217,15,"values_1"],[222,21,217,23],[223,4,218,4],[224,4,219,4],[225,0,220,0],[226,0,221,0],[227,0,222,0],[228,0,223,0],[229,4,224,4,"log"],[229,7,224,7,"log"],[229,8,224,8,"kind"],[229,12,224,12],[229,14,224,14,"msg"],[229,17,224,17],[229,19,224,19,"data"],[229,23,224,23],[229,25,224,25],[230,6,225,8],[230,10,225,12],[230,11,225,13,"logger"],[230,17,225,19],[230,18,225,20,"kind"],[230,22,225,24],[230,24,225,26,"msg"],[230,27,225,29],[230,29,225,31,"data"],[230,33,225,35],[230,34,225,36],[231,4,226,4],[232,4,227,4],[233,0,228,0],[234,0,229,0],[235,4,230,4,"connectionState"],[235,19,230,19,"connectionState"],[235,20,230,19],[235,22,230,22],[236,6,231,8],[236,14,231,16],[236,18,231,20],[236,19,231,21,"conn"],[236,23,231,25],[236,27,231,29],[236,31,231,33],[236,32,231,34,"conn"],[236,36,231,38],[236,37,231,39,"readyState"],[236,47,231,49],[237,8,232,12],[237,13,232,17,"SOCKET_STATES"],[237,26,232,30],[237,27,232,30,"SOCKET_STATES"],[237,40,232,30],[237,41,232,31,"connecting"],[237,51,232,41],[238,10,233,16],[238,17,233,23,"CONNECTION_STATE"],[238,30,233,39],[238,31,233,39,"CONNECTION_STATE"],[238,47,233,39],[238,48,233,40,"Connecting"],[238,58,233,50],[239,8,234,12],[239,13,234,17,"SOCKET_STATES"],[239,26,234,30],[239,27,234,30,"SOCKET_STATES"],[239,40,234,30],[239,41,234,31,"open"],[239,45,234,35],[240,10,235,16],[240,17,235,23,"CONNECTION_STATE"],[240,30,235,39],[240,31,235,39,"CONNECTION_STATE"],[240,47,235,39],[240,48,235,40,"Open"],[240,52,235,44],[241,8,236,12],[241,13,236,17,"SOCKET_STATES"],[241,26,236,30],[241,27,236,30,"SOCKET_STATES"],[241,40,236,30],[241,41,236,31,"closing"],[241,48,236,38],[242,10,237,16],[242,17,237,23,"CONNECTION_STATE"],[242,30,237,39],[242,31,237,39,"CONNECTION_STATE"],[242,47,237,39],[242,48,237,40,"Closing"],[242,55,237,47],[243,8,238,12],[244,10,239,16],[244,17,239,23,"CONNECTION_STATE"],[244,30,239,39],[244,31,239,39,"CONNECTION_STATE"],[244,47,239,39],[244,48,239,40,"Closed"],[244,54,239,46],[245,6,240,8],[246,4,241,4],[247,4,242,4],[248,0,243,0],[249,0,244,0],[250,4,245,4,"isConnected"],[250,15,245,15,"isConnected"],[250,16,245,15],[250,18,245,18],[251,6,246,8],[251,13,246,15],[251,17,246,19],[251,18,246,20,"connectionState"],[251,33,246,35],[251,34,246,36],[251,35,246,37],[251,40,246,42,"CONNECTION_STATE"],[251,53,246,58],[251,54,246,58,"CONNECTION_STATE"],[251,70,246,58],[251,71,246,59,"Open"],[251,75,246,63],[252,4,247,4],[253,4,248,4],[254,0,249,0],[255,0,250,0],[256,4,251,4,"isConnecting"],[256,16,251,16,"isConnecting"],[256,17,251,16],[256,19,251,19],[257,6,252,8],[257,13,252,15],[257,17,252,19],[257,18,252,20,"_connectionState"],[257,34,252,36],[257,39,252,41],[257,51,252,53],[258,4,253,4],[259,4,254,4],[260,0,255,0],[261,0,256,0],[262,4,257,4,"isDisconnecting"],[262,19,257,19,"isDisconnecting"],[262,20,257,19],[262,22,257,22],[263,6,258,8],[263,13,258,15],[263,17,258,19],[263,18,258,20,"_connectionState"],[263,34,258,36],[263,39,258,41],[263,54,258,56],[264,4,259,4],[265,4,260,4,"channel"],[265,11,260,11,"channel"],[265,12,260,12,"topic"],[265,17,260,17],[265,19,260,19,"params"],[265,25,260,25],[265,28,260,28],[266,6,260,30,"config"],[266,12,260,36],[266,14,260,38],[266,15,260,39],[267,4,260,41],[267,5,260,42],[267,7,260,44],[268,6,261,8],[268,12,261,14,"realtimeTopic"],[268,25,261,27],[268,28,261,30],[268,40,261,42,"topic"],[268,45,261,47],[268,47,261,49],[269,6,262,8],[269,12,262,14,"exists"],[269,18,262,20],[269,21,262,23],[269,25,262,27],[269,26,262,28,"getChannels"],[269,37,262,39],[269,38,262,40],[269,39,262,41],[269,40,262,42,"find"],[269,44,262,46],[269,45,262,48,"c"],[269,46,262,49],[269,50,262,54,"c"],[269,51,262,55],[269,52,262,56,"topic"],[269,57,262,61],[269,62,262,66,"realtimeTopic"],[269,75,262,79],[269,76,262,80],[270,6,263,8],[270,10,263,12],[270,11,263,13,"exists"],[270,17,263,19],[270,19,263,21],[271,8,264,12],[271,14,264,18,"chan"],[271,18,264,22],[271,21,264,25],[271,25,264,29,"RealtimeChannel"],[271,40,264,44],[271,41,264,44,"default"],[271,48,264,44],[271,49,264,45],[271,61,264,57,"topic"],[271,66,264,62],[271,68,264,64],[271,70,264,66,"params"],[271,76,264,72],[271,78,264,74],[271,82,264,78],[271,83,264,79],[272,8,265,12],[272,12,265,16],[272,13,265,17,"channels"],[272,21,265,25],[272,22,265,26,"push"],[272,26,265,30],[272,27,265,31,"chan"],[272,31,265,35],[272,32,265,36],[273,8,266,12],[273,15,266,19,"chan"],[273,19,266,23],[274,6,267,8],[274,7,267,9],[274,13,268,13],[275,8,269,12],[275,15,269,19,"exists"],[275,21,269,25],[276,6,270,8],[277,4,271,4],[278,4,272,4],[279,0,273,0],[280,0,274,0],[281,0,275,0],[282,0,276,0],[283,4,277,4,"push"],[283,8,277,8,"push"],[283,9,277,9,"data"],[283,13,277,13],[283,15,277,15],[284,6,278,8],[284,12,278,14],[285,8,278,16,"topic"],[285,13,278,21],[286,8,278,23,"event"],[286,13,278,28],[287,8,278,30,"payload"],[287,15,278,37],[288,8,278,39,"ref"],[289,6,278,43],[289,7,278,44],[289,10,278,47,"data"],[289,14,278,51],[290,6,279,8],[290,12,279,14,"callback"],[290,20,279,22],[290,23,279,25,"callback"],[290,24,279,25],[290,29,279,31],[291,8,280,12],[291,12,280,16],[291,13,280,17,"encode"],[291,19,280,23],[291,20,280,24,"data"],[291,24,280,28],[291,26,280,31,"result"],[291,32,280,37],[291,36,280,42],[292,10,281,16],[292,14,281,20,"_a"],[292,16,281,22],[293,10,282,16],[293,11,282,17,"_a"],[293,13,282,19],[293,16,282,22],[293,20,282,26],[293,21,282,27,"conn"],[293,25,282,31],[293,31,282,37],[293,35,282,41],[293,39,282,45,"_a"],[293,41,282,47],[293,46,282,52],[293,51,282,57],[293,52,282,58],[293,55,282,61],[293,60,282,66],[293,61,282,67],[293,64,282,70,"_a"],[293,66,282,72],[293,67,282,73,"send"],[293,71,282,77],[293,72,282,78,"result"],[293,78,282,84],[293,79,282,85],[294,8,283,12],[294,9,283,13],[294,10,283,14],[295,6,284,8],[295,7,284,9],[296,6,285,8],[296,10,285,12],[296,11,285,13,"log"],[296,14,285,16],[296,15,285,17],[296,21,285,23],[296,23,285,25],[296,26,285,28,"topic"],[296,31,285,33],[296,35,285,37,"event"],[296,40,285,42],[296,45,285,47,"ref"],[296,48,285,50],[296,51,285,53],[296,53,285,55,"payload"],[296,60,285,62],[296,61,285,63],[297,6,286,8],[297,10,286,12],[297,14,286,16],[297,15,286,17,"isConnected"],[297,26,286,28],[297,27,286,29],[297,28,286,30],[297,30,286,32],[298,8,287,12,"callback"],[298,16,287,20],[298,17,287,21],[298,18,287,22],[299,6,288,8],[299,7,288,9],[299,13,289,13],[300,8,290,12],[300,12,290,16],[300,13,290,17,"sendBuffer"],[300,23,290,27],[300,24,290,28,"push"],[300,28,290,32],[300,29,290,33,"callback"],[300,37,290,41],[300,38,290,42],[301,6,291,8],[302,4,292,4],[303,4,293,4],[304,0,294,0],[305,0,295,0],[306,0,296,0],[307,0,297,0],[308,0,298,0],[309,0,299,0],[310,0,300,0],[311,0,301,0],[312,4,302,4],[312,10,302,10,"setAuth"],[312,17,302,17,"setAuth"],[312,18,302,18,"token"],[312,23,302,23],[312,26,302,26],[312,30,302,30],[312,32,302,32],[313,6,303,8],[313,10,303,12],[313,11,303,13,"_authPromise"],[313,23,303,25],[313,26,303,28],[313,30,303,32],[313,31,303,33,"_performAuth"],[313,43,303,45],[313,44,303,46,"token"],[313,49,303,51],[313,50,303,52],[314,6,304,8],[314,10,304,12],[315,8,305,12],[315,14,305,18],[315,18,305,22],[315,19,305,23,"_authPromise"],[315,31,305,35],[316,6,306,8],[316,7,306,9],[316,16,307,16],[317,8,308,12],[317,12,308,16],[317,13,308,17,"_authPromise"],[317,25,308,29],[317,28,308,32],[317,32,308,36],[318,6,309,8],[319,4,310,4],[320,4,311,4],[321,0,312,0],[322,0,313,0],[323,4,314,4],[323,10,314,10,"sendHeartbeat"],[323,23,314,23,"sendHeartbeat"],[323,24,314,23],[323,26,314,26],[324,6,315,8],[324,10,315,12,"_a"],[324,12,315,14],[325,6,316,8],[325,10,316,12],[325,11,316,13],[325,15,316,17],[325,16,316,18,"isConnected"],[325,27,316,29],[325,28,316,30],[325,29,316,31],[325,31,316,33],[326,8,317,12],[326,12,317,16],[327,10,318,16],[327,14,318,20],[327,15,318,21,"heartbeatCallback"],[327,32,318,38],[327,33,318,39],[327,47,318,53],[327,48,318,54],[328,8,319,12],[328,9,319,13],[328,10,320,12],[328,17,320,19,"e"],[328,18,320,20],[328,20,320,22],[329,10,321,16],[329,14,321,20],[329,15,321,21,"log"],[329,18,321,24],[329,19,321,25],[329,26,321,32],[329,28,321,34],[329,57,321,63],[329,59,321,65,"e"],[329,60,321,66],[329,61,321,67],[330,8,322,12],[331,8,323,12],[332,6,324,8],[333,6,325,8],[334,6,326,8],[334,10,326,12],[334,14,326,16],[334,15,326,17,"pendingHeartbeatRef"],[334,34,326,36],[334,36,326,38],[335,8,327,12],[335,12,327,16],[335,13,327,17,"pendingHeartbeatRef"],[335,32,327,36],[335,35,327,39],[335,39,327,43],[336,8,328,12],[336,12,328,16],[336,13,328,17,"log"],[336,16,328,20],[336,17,328,21],[336,28,328,32],[336,30,328,34],[336,88,328,92],[336,89,328,93],[337,8,329,12],[337,12,329,16],[338,10,330,16],[338,14,330,20],[338,15,330,21,"heartbeatCallback"],[338,32,330,38],[338,33,330,39],[338,42,330,48],[338,43,330,49],[339,8,331,12],[339,9,331,13],[339,10,332,12],[339,17,332,19,"e"],[339,18,332,20],[339,20,332,22],[340,10,333,16],[340,14,333,20],[340,15,333,21,"log"],[340,18,333,24],[340,19,333,25],[340,26,333,32],[340,28,333,34],[340,57,333,63],[340,59,333,65,"e"],[340,60,333,66],[340,61,333,67],[341,8,334,12],[342,8,335,12],[343,8,336,12],[343,12,336,16],[343,13,336,17,"_wasManualDisconnect"],[343,33,336,37],[343,36,336,40],[343,41,336,45],[344,8,337,12],[344,9,337,13,"_a"],[344,11,337,15],[344,14,337,18],[344,18,337,22],[344,19,337,23,"conn"],[344,23,337,27],[344,29,337,33],[344,33,337,37],[344,37,337,41,"_a"],[344,39,337,43],[344,44,337,48],[344,49,337,53],[344,50,337,54],[344,53,337,57],[344,58,337,62],[344,59,337,63],[344,62,337,66,"_a"],[344,64,337,68],[344,65,337,69,"close"],[344,70,337,74],[344,71,337,75,"WS_CLOSE_NORMAL"],[344,84,337,90],[344,85,337,90,"WS_CLOSE_NORMAL"],[344,100,337,90],[344,102,337,92],[344,121,337,111],[344,122,337,112],[345,8,338,12,"setTimeout"],[345,18,338,22],[345,19,338,23],[345,25,338,29],[346,10,339,16],[346,14,339,20,"_a"],[346,16,339,22],[347,10,340,16],[347,14,340,20],[347,15,340,21],[347,19,340,25],[347,20,340,26,"isConnected"],[347,31,340,37],[347,32,340,38],[347,33,340,39],[347,35,340,41],[348,12,341,20],[348,13,341,21,"_a"],[348,15,341,23],[348,18,341,26],[348,22,341,30],[348,23,341,31,"reconnectTimer"],[348,37,341,45],[348,43,341,51],[348,47,341,55],[348,51,341,59,"_a"],[348,53,341,61],[348,58,341,66],[348,63,341,71],[348,64,341,72],[348,67,341,75],[348,72,341,80],[348,73,341,81],[348,76,341,84,"_a"],[348,78,341,86],[348,79,341,87,"scheduleTimeout"],[348,94,341,102],[348,95,341,103],[348,96,341,104],[349,10,342,16],[350,8,343,12],[350,9,343,13],[350,11,343,15,"CONNECTION_TIMEOUTS"],[350,30,343,34],[350,31,343,35,"HEARTBEAT_TIMEOUT_FALLBACK"],[350,57,343,61],[350,58,343,62],[351,8,344,12],[352,6,345,8],[353,6,346,8],[354,6,347,8],[354,10,347,12],[354,11,347,13,"pendingHeartbeatRef"],[354,30,347,32],[354,33,347,35],[354,37,347,39],[354,38,347,40,"_makeRef"],[354,46,347,48],[354,47,347,49],[354,48,347,50],[355,6,348,8],[355,10,348,12],[355,11,348,13,"push"],[355,15,348,17],[355,16,348,18],[356,8,349,12,"topic"],[356,13,349,17],[356,15,349,19],[356,24,349,28],[357,8,350,12,"event"],[357,13,350,17],[357,15,350,19],[357,26,350,30],[358,8,351,12,"payload"],[358,15,351,19],[358,17,351,21],[358,18,351,22],[358,19,351,23],[359,8,352,12,"ref"],[359,11,352,15],[359,13,352,17],[359,17,352,21],[359,18,352,22,"pendingHeartbeatRef"],[360,6,353,8],[360,7,353,9],[360,8,353,10],[361,6,354,8],[361,10,354,12],[362,8,355,12],[362,12,355,16],[362,13,355,17,"heartbeatCallback"],[362,30,355,34],[362,31,355,35],[362,37,355,41],[362,38,355,42],[363,6,356,8],[363,7,356,9],[363,8,357,8],[363,15,357,15,"e"],[363,16,357,16],[363,18,357,18],[364,8,358,12],[364,12,358,16],[364,13,358,17,"log"],[364,16,358,20],[364,17,358,21],[364,24,358,28],[364,26,358,30],[364,55,358,59],[364,57,358,61,"e"],[364,58,358,62],[364,59,358,63],[365,6,359,8],[366,6,360,8],[366,10,360,12],[366,11,360,13,"_setAuthSafely"],[366,25,360,27],[366,26,360,28],[366,37,360,39],[366,38,360,40],[367,4,361,4],[368,4,362,4,"onHeartbeat"],[368,15,362,15,"onHeartbeat"],[368,16,362,16,"callback"],[368,24,362,24],[368,26,362,26],[369,6,363,8],[369,10,363,12],[369,11,363,13,"heartbeatCallback"],[369,28,363,30],[369,31,363,33,"callback"],[369,39,363,41],[370,4,364,4],[371,4,365,4],[372,0,366,0],[373,0,367,0],[374,4,368,4,"flushSendBuffer"],[374,19,368,19,"flushSendBuffer"],[374,20,368,19],[374,22,368,22],[375,6,369,8],[375,10,369,12],[375,14,369,16],[375,15,369,17,"isConnected"],[375,26,369,28],[375,27,369,29],[375,28,369,30],[375,32,369,34],[375,36,369,38],[375,37,369,39,"sendBuffer"],[375,47,369,49],[375,48,369,50,"length"],[375,54,369,56],[375,57,369,59],[375,58,369,60],[375,60,369,62],[376,8,370,12],[376,12,370,16],[376,13,370,17,"sendBuffer"],[376,23,370,27],[376,24,370,28,"forEach"],[376,31,370,35],[376,32,370,37,"callback"],[376,40,370,45],[376,44,370,50,"callback"],[376,52,370,58],[376,53,370,59],[376,54,370,60],[376,55,370,61],[377,8,371,12],[377,12,371,16],[377,13,371,17,"sendBuffer"],[377,23,371,27],[377,26,371,30],[377,28,371,32],[378,6,372,8],[379,4,373,4],[380,4,374,4],[381,0,375,0],[382,0,376,0],[383,0,377,0],[384,0,378,0],[385,4,379,4,"_makeRef"],[385,12,379,12,"_makeRef"],[385,13,379,12],[385,15,379,15],[386,6,380,8],[386,10,380,12,"newRef"],[386,16,380,18],[386,19,380,21],[386,23,380,25],[386,24,380,26,"ref"],[386,27,380,29],[386,30,380,32],[386,31,380,33],[387,6,381,8],[387,10,381,12,"newRef"],[387,16,381,18],[387,21,381,23],[387,25,381,27],[387,26,381,28,"ref"],[387,29,381,31],[387,31,381,33],[388,8,382,12],[388,12,382,16],[388,13,382,17,"ref"],[388,16,382,20],[388,19,382,23],[388,20,382,24],[389,6,383,8],[389,7,383,9],[389,13,384,13],[390,8,385,12],[390,12,385,16],[390,13,385,17,"ref"],[390,16,385,20],[390,19,385,23,"newRef"],[390,25,385,29],[391,6,386,8],[392,6,387,8],[392,13,387,15],[392,17,387,19],[392,18,387,20,"ref"],[392,21,387,23],[392,22,387,24,"toString"],[392,30,387,32],[392,31,387,33],[392,32,387,34],[393,4,388,4],[394,4,389,4],[395,0,390,0],[396,0,391,0],[397,0,392,0],[398,0,393,0],[399,4,394,4,"_leaveOpenTopic"],[399,19,394,19,"_leaveOpenTopic"],[399,20,394,20,"topic"],[399,25,394,25],[399,27,394,27],[400,6,395,8],[400,10,395,12,"dupChannel"],[400,20,395,22],[400,23,395,25],[400,27,395,29],[400,28,395,30,"channels"],[400,36,395,38],[400,37,395,39,"find"],[400,41,395,43],[400,42,395,45,"c"],[400,43,395,46],[400,47,395,51,"c"],[400,48,395,52],[400,49,395,53,"topic"],[400,54,395,58],[400,59,395,63,"topic"],[400,64,395,68],[400,69,395,73,"c"],[400,70,395,74],[400,71,395,75,"_isJoined"],[400,80,395,84],[400,81,395,85],[400,82,395,86],[400,86,395,90,"c"],[400,87,395,91],[400,88,395,92,"_isJoining"],[400,98,395,102],[400,99,395,103],[400,100,395,104],[400,101,395,105],[400,102,395,106],[401,6,396,8],[401,10,396,12,"dupChannel"],[401,20,396,22],[401,22,396,24],[402,8,397,12],[402,12,397,16],[402,13,397,17,"log"],[402,16,397,20],[402,17,397,21],[402,28,397,32],[402,30,397,34],[402,58,397,62,"topic"],[402,63,397,67],[402,66,397,70],[402,67,397,71],[403,8,398,12,"dupChannel"],[403,18,398,22],[403,19,398,23,"unsubscribe"],[403,30,398,34],[403,31,398,35],[403,32,398,36],[404,6,399,8],[405,4,400,4],[406,4,401,4],[407,0,402,0],[408,0,403,0],[409,0,404,0],[410,0,405,0],[411,0,406,0],[412,0,407,0],[413,4,408,4,"_remove"],[413,11,408,11,"_remove"],[413,12,408,12,"channel"],[413,19,408,19],[413,21,408,21],[414,6,409,8],[414,10,409,12],[414,11,409,13,"channels"],[414,19,409,21],[414,22,409,24],[414,26,409,28],[414,27,409,29,"channels"],[414,35,409,37],[414,36,409,38,"filter"],[414,42,409,44],[414,43,409,46,"c"],[414,44,409,47],[414,48,409,52,"c"],[414,49,409,53],[414,50,409,54,"topic"],[414,55,409,59],[414,60,409,64,"channel"],[414,67,409,71],[414,68,409,72,"topic"],[414,73,409,77],[414,74,409,78],[415,4,410,4],[416,4,411,4],[417,4,412,4,"_onConnMessage"],[417,18,412,18,"_onConnMessage"],[417,19,412,19,"rawMessage"],[417,29,412,29],[417,31,412,31],[418,6,413,8],[418,10,413,12],[418,11,413,13,"decode"],[418,17,413,19],[418,18,413,20,"rawMessage"],[418,28,413,30],[418,29,413,31,"data"],[418,33,413,35],[418,35,413,38,"msg"],[418,38,413,41],[418,42,413,46],[419,8,414,12],[420,8,415,12],[420,12,415,16,"msg"],[420,15,415,19],[420,16,415,20,"topic"],[420,21,415,25],[420,26,415,30],[420,35,415,39],[420,39,415,43,"msg"],[420,42,415,46],[420,43,415,47,"event"],[420,48,415,52],[420,53,415,57],[420,64,415,68],[420,66,415,70],[421,10,416,16],[421,14,416,20],[422,12,417,20],[422,16,417,24],[422,17,417,25,"heartbeatCallback"],[422,34,417,42],[422,35,417,43,"msg"],[422,38,417,46],[422,39,417,47,"payload"],[422,46,417,54],[422,47,417,55,"status"],[422,53,417,61],[422,58,417,66],[422,62,417,70],[422,65,417,73],[422,69,417,77],[422,72,417,80],[422,79,417,87],[422,80,417,88],[423,10,418,16],[423,11,418,17],[423,12,419,16],[423,19,419,23,"e"],[423,20,419,24],[423,22,419,26],[424,12,420,20],[424,16,420,24],[424,17,420,25,"log"],[424,20,420,28],[424,21,420,29],[424,28,420,36],[424,30,420,38],[424,59,420,67],[424,61,420,69,"e"],[424,62,420,70],[424,63,420,71],[425,10,421,16],[426,8,422,12],[427,8,423,12],[428,8,424,12],[428,12,424,16,"msg"],[428,15,424,19],[428,16,424,20,"ref"],[428,19,424,23],[428,23,424,27,"msg"],[428,26,424,30],[428,27,424,31,"ref"],[428,30,424,34],[428,35,424,39],[428,39,424,43],[428,40,424,44,"pendingHeartbeatRef"],[428,59,424,63],[428,61,424,65],[429,10,425,16],[429,14,425,20],[429,15,425,21,"pendingHeartbeatRef"],[429,34,425,40],[429,37,425,43],[429,41,425,47],[430,8,426,12],[431,8,427,12],[432,8,428,12],[432,14,428,18],[433,10,428,20,"topic"],[433,15,428,25],[434,10,428,27,"event"],[434,15,428,32],[435,10,428,34,"payload"],[435,17,428,41],[436,10,428,43,"ref"],[437,8,428,47],[437,9,428,48],[437,12,428,51,"msg"],[437,15,428,54],[438,8,429,12],[438,14,429,18,"refString"],[438,23,429,27],[438,26,429,30,"ref"],[438,29,429,33],[438,32,429,36],[438,36,429,40,"ref"],[438,39,429,43],[438,42,429,46],[438,45,429,49],[438,47,429,51],[439,8,430,12],[439,14,430,18,"status"],[439,20,430,24],[439,23,430,27,"payload"],[439,30,430,34],[439,31,430,35,"status"],[439,37,430,41],[439,41,430,45],[439,43,430,47],[440,8,431,12],[440,12,431,16],[440,13,431,17,"log"],[440,16,431,20],[440,17,431,21],[440,26,431,30],[440,28,431,32],[440,31,431,35,"status"],[440,37,431,41],[440,41,431,45,"topic"],[440,46,431,50],[440,50,431,54,"event"],[440,55,431,59],[440,59,431,63,"refString"],[440,68,431,72],[440,70,431,74],[440,71,431,75,"trim"],[440,75,431,79],[440,76,431,80],[440,77,431,81],[440,79,431,83,"payload"],[440,86,431,90],[440,87,431,91],[441,8,432,12],[442,8,433,12],[442,12,433,16],[442,13,433,17,"channels"],[442,21,433,25],[442,22,434,17,"filter"],[442,28,434,23],[442,29,434,25,"channel"],[442,36,434,32],[442,40,434,37,"channel"],[442,47,434,44],[442,48,434,45,"_isMember"],[442,57,434,54],[442,58,434,55,"topic"],[442,63,434,60],[442,64,434,61],[442,65,434,62],[442,66,435,17,"forEach"],[442,73,435,24],[442,74,435,26,"channel"],[442,81,435,33],[442,85,435,38,"channel"],[442,92,435,45],[442,93,435,46,"_trigger"],[442,101,435,54],[442,102,435,55,"event"],[442,107,435,60],[442,109,435,62,"payload"],[442,116,435,69],[442,118,435,71,"ref"],[442,121,435,74],[442,122,435,75],[442,123,435,76],[443,8,436,12],[443,12,436,16],[443,13,436,17,"_triggerStateCallbacks"],[443,35,436,39],[443,36,436,40],[443,45,436,49],[443,47,436,51,"msg"],[443,50,436,54],[443,51,436,55],[444,6,437,8],[444,7,437,9],[444,8,437,10],[445,4,438,4],[446,4,439,4],[447,0,440,0],[448,0,441,0],[449,0,442,0],[450,4,443,4,"_clearTimer"],[450,15,443,15,"_clearTimer"],[450,16,443,16,"timer"],[450,21,443,21],[450,23,443,23],[451,6,444,8],[451,10,444,12,"_a"],[451,12,444,14],[452,6,445,8],[452,10,445,12,"timer"],[452,15,445,17],[452,20,445,22],[452,31,445,33],[452,35,445,37],[452,39,445,41],[452,40,445,42,"heartbeatTimer"],[452,54,445,56],[452,56,445,58],[453,8,446,12,"clearInterval"],[453,21,446,25],[453,22,446,26],[453,26,446,30],[453,27,446,31,"heartbeatTimer"],[453,41,446,45],[453,42,446,46],[454,8,447,12],[454,12,447,16],[454,13,447,17,"heartbeatTimer"],[454,27,447,31],[454,30,447,34,"undefined"],[454,39,447,43],[455,6,448,8],[455,7,448,9],[455,13,449,13],[455,17,449,17,"timer"],[455,22,449,22],[455,27,449,27],[455,38,449,38],[455,40,449,40],[456,8,450,12],[456,9,450,13,"_a"],[456,11,450,15],[456,14,450,18],[456,18,450,22],[456,19,450,23,"reconnectTimer"],[456,33,450,37],[456,39,450,43],[456,43,450,47],[456,47,450,51,"_a"],[456,49,450,53],[456,54,450,58],[456,59,450,63],[456,60,450,64],[456,63,450,67],[456,68,450,72],[456,69,450,73],[456,72,450,76,"_a"],[456,74,450,78],[456,75,450,79,"reset"],[456,80,450,84],[456,81,450,85],[456,82,450,86],[457,6,451,8],[458,4,452,4],[459,4,453,4],[460,0,454,0],[461,0,455,0],[462,0,456,0],[463,4,457,4,"_clearAllTimers"],[463,19,457,19,"_clearAllTimers"],[463,20,457,19],[463,22,457,22],[464,6,458,8],[464,10,458,12],[464,11,458,13,"_clearTimer"],[464,22,458,24],[464,23,458,25],[464,34,458,36],[464,35,458,37],[465,6,459,8],[465,10,459,12],[465,11,459,13,"_clearTimer"],[465,22,459,24],[465,23,459,25],[465,34,459,36],[465,35,459,37],[466,4,460,4],[467,4,461,4],[468,0,462,0],[469,0,463,0],[470,0,464,0],[471,4,465,4,"_setupConnectionHandlers"],[471,28,465,28,"_setupConnectionHandlers"],[471,29,465,28],[471,31,465,31],[472,6,466,8],[472,10,466,12],[472,11,466,13],[472,15,466,17],[472,16,466,18,"conn"],[472,20,466,22],[472,22,467,12],[473,6,468,8],[474,6,469,8],[474,10,469,12],[474,22,469,24],[474,26,469,28],[474,30,469,32],[474,31,469,33,"conn"],[474,35,469,37],[474,37,469,39],[475,8,470,12],[476,8,471,12],[476,12,471,16],[476,13,471,17,"conn"],[476,17,471,21],[476,18,471,22,"binaryType"],[476,28,471,32],[476,31,471,35],[476,44,471,48],[477,6,472,8],[478,6,473,8],[478,10,473,12],[478,11,473,13,"conn"],[478,15,473,17],[478,16,473,18,"onopen"],[478,22,473,24],[478,25,473,27],[478,31,473,33],[478,35,473,37],[478,36,473,38,"_onConnOpen"],[478,47,473,49],[478,48,473,50],[478,49,473,51],[479,6,474,8],[479,10,474,12],[479,11,474,13,"conn"],[479,15,474,17],[479,16,474,18,"onerror"],[479,23,474,25],[479,26,474,29,"error"],[479,31,474,34],[479,35,474,39],[479,39,474,43],[479,40,474,44,"_onConnError"],[479,52,474,56],[479,53,474,57,"error"],[479,58,474,62],[479,59,474,63],[480,6,475,8],[480,10,475,12],[480,11,475,13,"conn"],[480,15,475,17],[480,16,475,18,"onmessage"],[480,25,475,27],[480,28,475,31,"event"],[480,33,475,36],[480,37,475,41],[480,41,475,45],[480,42,475,46,"_onConnMessage"],[480,56,475,60],[480,57,475,61,"event"],[480,62,475,66],[480,63,475,67],[481,6,476,8],[481,10,476,12],[481,11,476,13,"conn"],[481,15,476,17],[481,16,476,18,"onclose"],[481,23,476,25],[481,26,476,29,"event"],[481,31,476,34],[481,35,476,39],[481,39,476,43],[481,40,476,44,"_onConnClose"],[481,52,476,56],[481,53,476,57,"event"],[481,58,476,62],[481,59,476,63],[482,4,477,4],[483,4,478,4],[484,0,479,0],[485,0,480,0],[486,0,481,0],[487,4,482,4,"_teardownConnection"],[487,23,482,23,"_teardownConnection"],[487,24,482,23],[487,26,482,26],[488,6,483,8],[488,10,483,12],[488,14,483,16],[488,15,483,17,"conn"],[488,19,483,21],[488,21,483,23],[489,8,484,12],[489,12,484,16],[489,13,484,17,"conn"],[489,17,484,21],[489,18,484,22,"onopen"],[489,24,484,28],[489,27,484,31],[489,31,484,35],[490,8,485,12],[490,12,485,16],[490,13,485,17,"conn"],[490,17,485,21],[490,18,485,22,"onerror"],[490,25,485,29],[490,28,485,32],[490,32,485,36],[491,8,486,12],[491,12,486,16],[491,13,486,17,"conn"],[491,17,486,21],[491,18,486,22,"onmessage"],[491,27,486,31],[491,30,486,34],[491,34,486,38],[492,8,487,12],[492,12,487,16],[492,13,487,17,"conn"],[492,17,487,21],[492,18,487,22,"onclose"],[492,25,487,29],[492,28,487,32],[492,32,487,36],[493,8,488,12],[493,12,488,16],[493,13,488,17,"conn"],[493,17,488,21],[493,20,488,24],[493,24,488,28],[494,6,489,8],[495,6,490,8],[495,10,490,12],[495,11,490,13,"_clearAllTimers"],[495,26,490,28],[495,27,490,29],[495,28,490,30],[496,6,491,8],[496,10,491,12],[496,11,491,13,"channels"],[496,19,491,21],[496,20,491,22,"forEach"],[496,27,491,29],[496,28,491,31,"channel"],[496,35,491,38],[496,39,491,43,"channel"],[496,46,491,50],[496,47,491,51,"teardown"],[496,55,491,59],[496,56,491,60],[496,57,491,61],[496,58,491,62],[497,4,492,4],[498,4,493,4],[499,4,494,4,"_onConnOpen"],[499,15,494,15,"_onConnOpen"],[499,16,494,15],[499,18,494,18],[500,6,495,8],[500,10,495,12],[500,11,495,13,"_setConnectionState"],[500,30,495,32],[500,31,495,33],[500,42,495,44],[500,43,495,45],[501,6,496,8],[501,10,496,12],[501,11,496,13,"log"],[501,14,496,16],[501,15,496,17],[501,26,496,28],[501,28,496,30],[501,44,496,46],[501,48,496,50],[501,49,496,51,"endpointURL"],[501,60,496,62],[501,61,496,63],[501,62,496,64],[501,64,496,66],[501,65,496,67],[502,6,497,8],[502,10,497,12],[502,11,497,13,"flushSendBuffer"],[502,26,497,28],[502,27,497,29],[502,28,497,30],[503,6,498,8],[503,10,498,12],[503,11,498,13,"_clearTimer"],[503,22,498,24],[503,23,498,25],[503,34,498,36],[503,35,498,37],[504,6,499,8],[504,10,499,12],[504,11,499,13],[504,15,499,17],[504,16,499,18,"worker"],[504,22,499,24],[504,24,499,26],[505,8,500,12],[505,12,500,16],[505,13,500,17,"_startHeartbeat"],[505,28,500,32],[505,29,500,33],[505,30,500,34],[506,6,501,8],[506,7,501,9],[506,13,502,13],[507,8,503,12],[507,12,503,16],[507,13,503,17],[507,17,503,21],[507,18,503,22,"workerRef"],[507,27,503,31],[507,29,503,33],[508,10,504,16],[508,14,504,20],[508,15,504,21,"_startWorkerHeartbeat"],[508,36,504,42],[508,37,504,43],[508,38,504,44],[509,8,505,12],[510,6,506,8],[511,6,507,8],[511,10,507,12],[511,11,507,13,"_triggerStateCallbacks"],[511,33,507,35],[511,34,507,36],[511,40,507,42],[511,41,507,43],[512,4,508,4],[513,4,509,4],[514,4,510,4,"_startHeartbeat"],[514,19,510,19,"_startHeartbeat"],[514,20,510,19],[514,22,510,22],[515,6,511,8],[515,10,511,12],[515,11,511,13,"heartbeatTimer"],[515,25,511,27],[515,29,511,31,"clearInterval"],[515,42,511,44],[515,43,511,45],[515,47,511,49],[515,48,511,50,"heartbeatTimer"],[515,62,511,64],[515,63,511,65],[516,6,512,8],[516,10,512,12],[516,11,512,13,"heartbeatTimer"],[516,25,512,27],[516,28,512,30,"setInterval"],[516,39,512,41],[516,40,512,42],[516,46,512,48],[516,50,512,52],[516,51,512,53,"sendHeartbeat"],[516,64,512,66],[516,65,512,67],[516,66,512,68],[516,68,512,70],[516,72,512,74],[516,73,512,75,"heartbeatIntervalMs"],[516,92,512,94],[516,93,512,95],[517,4,513,4],[518,4,514,4],[519,4,515,4,"_startWorkerHeartbeat"],[519,25,515,25,"_startWorkerHeartbeat"],[519,26,515,25],[519,28,515,28],[520,6,516,8],[520,10,516,12],[520,14,516,16],[520,15,516,17,"workerUrl"],[520,24,516,26],[520,26,516,28],[521,8,517,12],[521,12,517,16],[521,13,517,17,"log"],[521,16,517,20],[521,17,517,21],[521,25,517,29],[521,27,517,31],[521,55,517,59],[521,59,517,63],[521,60,517,64,"workerUrl"],[521,69,517,73],[521,71,517,75],[521,72,517,76],[522,6,518,8],[522,7,518,9],[522,13,519,13],[523,8,520,12],[523,12,520,16],[523,13,520,17,"log"],[523,16,520,20],[523,17,520,21],[523,25,520,29],[523,27,520,31],[523,52,520,56],[523,53,520,57],[524,6,521,8],[525,6,522,8],[525,12,522,14,"objectUrl"],[525,21,522,23],[525,24,522,26],[525,28,522,30],[525,29,522,31,"_workerObjectUrl"],[525,45,522,47],[525,46,522,48],[525,50,522,52],[525,51,522,53,"workerUrl"],[525,60,522,62],[525,61,522,63],[526,6,523,8],[526,10,523,12],[526,11,523,13,"workerRef"],[526,20,523,22],[526,23,523,25],[526,27,523,29,"Worker"],[526,33,523,35],[526,34,523,36,"objectUrl"],[526,43,523,45],[526,44,523,46],[527,6,524,8],[527,10,524,12],[527,11,524,13,"workerRef"],[527,20,524,22],[527,21,524,23,"onerror"],[527,28,524,30],[527,31,524,34,"error"],[527,36,524,39],[527,40,524,44],[528,8,525,12],[528,12,525,16],[528,13,525,17,"log"],[528,16,525,20],[528,17,525,21],[528,25,525,29],[528,27,525,31],[528,41,525,45],[528,43,525,47,"error"],[528,48,525,52],[528,49,525,53,"message"],[528,56,525,60],[528,57,525,61],[529,8,526,12],[529,12,526,16],[529,13,526,17,"workerRef"],[529,22,526,26],[529,23,526,27,"terminate"],[529,32,526,36],[529,33,526,37],[529,34,526,38],[530,6,527,8],[530,7,527,9],[531,6,528,8],[531,10,528,12],[531,11,528,13,"workerRef"],[531,20,528,22],[531,21,528,23,"onmessage"],[531,30,528,32],[531,33,528,36,"event"],[531,38,528,41],[531,42,528,46],[532,8,529,12],[532,12,529,16,"event"],[532,17,529,21],[532,18,529,22,"data"],[532,22,529,26],[532,23,529,27,"event"],[532,28,529,32],[532,33,529,37],[532,44,529,48],[532,46,529,50],[533,10,530,16],[533,14,530,20],[533,15,530,21,"sendHeartbeat"],[533,28,530,34],[533,29,530,35],[533,30,530,36],[534,8,531,12],[535,6,532,8],[535,7,532,9],[536,6,533,8],[536,10,533,12],[536,11,533,13,"workerRef"],[536,20,533,22],[536,21,533,23,"postMessage"],[536,32,533,34],[536,33,533,35],[537,8,534,12,"event"],[537,13,534,17],[537,15,534,19],[537,22,534,26],[538,8,535,12,"interval"],[538,16,535,20],[538,18,535,22],[538,22,535,26],[538,23,535,27,"heartbeatIntervalMs"],[539,6,536,8],[539,7,536,9],[539,8,536,10],[540,4,537,4],[541,4,538,4],[542,4,539,4,"_onConnClose"],[542,16,539,16,"_onConnClose"],[542,17,539,17,"event"],[542,22,539,22],[542,24,539,24],[543,6,540,8],[543,10,540,12,"_a"],[543,12,540,14],[544,6,541,8],[544,10,541,12],[544,11,541,13,"_setConnectionState"],[544,30,541,32],[544,31,541,33],[544,45,541,47],[544,46,541,48],[545,6,542,8],[545,10,542,12],[545,11,542,13,"log"],[545,14,542,16],[545,15,542,17],[545,26,542,28],[545,28,542,30],[545,35,542,37],[545,37,542,39,"event"],[545,42,542,44],[545,43,542,45],[546,6,543,8],[546,10,543,12],[546,11,543,13,"_triggerChanError"],[546,28,543,30],[546,29,543,31],[546,30,543,32],[547,6,544,8],[547,10,544,12],[547,11,544,13,"_clearTimer"],[547,22,544,24],[547,23,544,25],[547,34,544,36],[547,35,544,37],[548,6,545,8],[549,6,546,8],[549,10,546,12],[549,11,546,13],[549,15,546,17],[549,16,546,18,"_wasManualDisconnect"],[549,36,546,38],[549,38,546,40],[550,8,547,12],[550,9,547,13,"_a"],[550,11,547,15],[550,14,547,18],[550,18,547,22],[550,19,547,23,"reconnectTimer"],[550,33,547,37],[550,39,547,43],[550,43,547,47],[550,47,547,51,"_a"],[550,49,547,53],[550,54,547,58],[550,59,547,63],[550,60,547,64],[550,63,547,67],[550,68,547,72],[550,69,547,73],[550,72,547,76,"_a"],[550,74,547,78],[550,75,547,79,"scheduleTimeout"],[550,90,547,94],[550,91,547,95],[550,92,547,96],[551,6,548,8],[552,6,549,8],[552,10,549,12],[552,11,549,13,"_triggerStateCallbacks"],[552,33,549,35],[552,34,549,36],[552,41,549,43],[552,43,549,45,"event"],[552,48,549,50],[552,49,549,51],[553,4,550,4],[554,4,551,4],[555,4,552,4,"_onConnError"],[555,16,552,16,"_onConnError"],[555,17,552,17,"error"],[555,22,552,22],[555,24,552,24],[556,6,553,8],[556,10,553,12],[556,11,553,13,"_setConnectionState"],[556,30,553,32],[556,31,553,33],[556,45,553,47],[556,46,553,48],[557,6,554,8],[557,10,554,12],[557,11,554,13,"log"],[557,14,554,16],[557,15,554,17],[557,26,554,28],[557,28,554,30],[557,31,554,33,"error"],[557,36,554,38],[557,38,554,40],[557,39,554,41],[558,6,555,8],[558,10,555,12],[558,11,555,13,"_triggerChanError"],[558,28,555,30],[558,29,555,31],[558,30,555,32],[559,6,556,8],[559,10,556,12],[559,11,556,13,"_triggerStateCallbacks"],[559,33,556,35],[559,34,556,36],[559,41,556,43],[559,43,556,45,"error"],[559,48,556,50],[559,49,556,51],[560,4,557,4],[561,4,558,4],[562,4,559,4,"_triggerChanError"],[562,21,559,21,"_triggerChanError"],[562,22,559,21],[562,24,559,24],[563,6,560,8],[563,10,560,12],[563,11,560,13,"channels"],[563,19,560,21],[563,20,560,22,"forEach"],[563,27,560,29],[563,28,560,31,"channel"],[563,35,560,38],[563,39,560,43,"channel"],[563,46,560,50],[563,47,560,51,"_trigger"],[563,55,560,59],[563,56,560,60,"CHANNEL_EVENTS"],[563,69,560,74],[563,70,560,74,"CHANNEL_EVENTS"],[563,84,560,74],[563,85,560,75,"error"],[563,90,560,80],[563,91,560,81],[563,92,560,82],[564,4,561,4],[565,4,562,4],[566,4,563,4,"_appendParams"],[566,17,563,17,"_appendParams"],[566,18,563,18,"url"],[566,21,563,21],[566,23,563,23,"params"],[566,29,563,29],[566,31,563,31],[567,6,564,8],[567,10,564,12,"Object"],[567,16,564,18],[567,17,564,19,"keys"],[567,21,564,23],[567,22,564,24,"params"],[567,28,564,30],[567,29,564,31],[567,30,564,32,"length"],[567,36,564,38],[567,41,564,43],[567,42,564,44],[567,44,564,46],[568,8,565,12],[568,15,565,19,"url"],[568,18,565,22],[569,6,566,8],[570,6,567,8],[570,12,567,14,"prefix"],[570,18,567,20],[570,21,567,23,"url"],[570,24,567,26],[570,25,567,27,"match"],[570,30,567,32],[570,31,567,33],[570,35,567,37],[570,36,567,38],[570,39,567,41],[570,42,567,44],[570,45,567,47],[570,48,567,50],[571,6,568,8],[571,12,568,14,"query"],[571,17,568,19],[571,20,568,22],[571,24,568,26,"URLSearchParams"],[571,39,568,41],[571,40,568,42,"params"],[571,46,568,48],[571,47,568,49],[572,6,569,8],[572,13,569,15],[572,16,569,18,"url"],[572,19,569,21],[572,22,569,24,"prefix"],[572,28,569,30],[572,31,569,33,"query"],[572,36,569,38],[572,38,569,40],[573,4,570,4],[574,4,571,4,"_workerObjectUrl"],[574,20,571,20,"_workerObjectUrl"],[574,21,571,21,"url"],[574,24,571,24],[574,26,571,26],[575,6,572,8],[575,10,572,12,"result_url"],[575,20,572,22],[576,6,573,8],[576,10,573,12,"url"],[576,13,573,15],[576,15,573,17],[577,8,574,12,"result_url"],[577,18,574,22],[577,21,574,25,"url"],[577,24,574,28],[578,6,575,8],[578,7,575,9],[578,13,576,13],[579,8,577,12],[579,14,577,18,"blob"],[579,18,577,22],[579,21,577,25],[579,25,577,29,"Blob"],[579,29,577,33],[579,30,577,34],[579,31,577,35,"WORKER_SCRIPT"],[579,44,577,48],[579,45,577,49],[579,47,577,51],[580,10,577,53,"type"],[580,14,577,57],[580,16,577,59],[581,8,577,84],[581,9,577,85],[581,10,577,86],[582,8,578,12,"result_url"],[582,18,578,22],[582,21,578,25,"URL"],[582,24,578,28],[582,25,578,29,"createObjectURL"],[582,40,578,44],[582,41,578,45,"blob"],[582,45,578,49],[582,46,578,50],[583,6,579,8],[584,6,580,8],[584,13,580,15,"result_url"],[584,23,580,25],[585,4,581,4],[586,4,582,4],[587,0,583,0],[588,0,584,0],[589,0,585,0],[590,4,586,4,"_setConnectionState"],[590,23,586,23,"_setConnectionState"],[590,24,586,24,"state"],[590,29,586,29],[590,31,586,31,"manual"],[590,37,586,37],[590,40,586,40],[590,45,586,45],[590,47,586,47],[591,6,587,8],[591,10,587,12],[591,11,587,13,"_connectionState"],[591,27,587,29],[591,30,587,32,"state"],[591,35,587,37],[592,6,588,8],[592,10,588,12,"state"],[592,15,588,17],[592,20,588,22],[592,32,588,34],[592,34,588,36],[593,8,589,12],[593,12,589,16],[593,13,589,17,"_wasManualDisconnect"],[593,33,589,37],[593,36,589,40],[593,41,589,45],[594,6,590,8],[594,7,590,9],[594,13,591,13],[594,17,591,17,"state"],[594,22,591,22],[594,27,591,27],[594,42,591,42],[594,44,591,44],[595,8,592,12],[595,12,592,16],[595,13,592,17,"_wasManualDisconnect"],[595,33,592,37],[595,36,592,40,"manual"],[595,42,592,46],[596,6,593,8],[597,4,594,4],[598,4,595,4],[599,0,596,0],[600,0,597,0],[601,0,598,0],[602,4,599,4],[602,10,599,10,"_performAuth"],[602,22,599,22,"_performAuth"],[602,23,599,23,"token"],[602,28,599,28],[602,31,599,31],[602,35,599,35],[602,37,599,37],[603,6,600,8],[603,10,600,12,"tokenToSend"],[603,21,600,23],[604,6,601,8],[604,10,601,12,"token"],[604,15,601,17],[604,17,601,19],[605,8,602,12,"tokenToSend"],[605,19,602,23],[605,22,602,26,"token"],[605,27,602,31],[606,6,603,8],[606,7,603,9],[606,13,604,13],[606,17,604,17],[606,21,604,21],[606,22,604,22,"accessToken"],[606,33,604,33],[606,35,604,35],[607,8,605,12],[608,8,606,12,"tokenToSend"],[608,19,606,23],[608,22,606,26],[608,28,606,32],[608,32,606,36],[608,33,606,37,"accessToken"],[608,44,606,48],[608,45,606,49],[608,46,606,50],[609,6,607,8],[609,7,607,9],[609,13,608,13],[610,8,609,12,"tokenToSend"],[610,19,609,23],[610,22,609,26],[610,26,609,30],[610,27,609,31,"accessTokenValue"],[610,43,609,47],[611,6,610,8],[612,6,611,8],[612,10,611,12],[612,14,611,16],[612,15,611,17,"accessTokenValue"],[612,31,611,33],[612,35,611,37,"tokenToSend"],[612,46,611,48],[612,48,611,50],[613,8,612,12],[613,12,612,16],[613,13,612,17,"accessTokenValue"],[613,29,612,33],[613,32,612,36,"tokenToSend"],[613,43,612,47],[614,8,613,12],[614,12,613,16],[614,13,613,17,"channels"],[614,21,613,25],[614,22,613,26,"forEach"],[614,29,613,33],[614,30,613,35,"channel"],[614,37,613,42],[614,41,613,47],[615,10,614,16],[615,16,614,22,"payload"],[615,23,614,29],[615,26,614,32],[616,12,615,20,"access_token"],[616,24,615,32],[616,26,615,34,"tokenToSend"],[616,37,615,45],[617,12,616,20,"version"],[617,19,616,27],[617,21,616,29,"DEFAULT_VERSION"],[617,34,616,44],[617,35,616,44,"DEFAULT_VERSION"],[618,10,617,16],[618,11,617,17],[619,10,618,16,"tokenToSend"],[619,21,618,27],[619,25,618,31,"channel"],[619,32,618,38],[619,33,618,39,"updateJoinPayload"],[619,50,618,56],[619,51,618,57,"payload"],[619,58,618,64],[619,59,618,65],[620,10,619,16],[620,14,619,20,"channel"],[620,21,619,27],[620,22,619,28,"joinedOnce"],[620,32,619,38],[620,36,619,42,"channel"],[620,43,619,49],[620,44,619,50,"_isJoined"],[620,53,619,59],[620,54,619,60],[620,55,619,61],[620,57,619,63],[621,12,620,20,"channel"],[621,19,620,27],[621,20,620,28,"_push"],[621,25,620,33],[621,26,620,34,"CHANNEL_EVENTS"],[621,39,620,48],[621,40,620,48,"CHANNEL_EVENTS"],[621,54,620,48],[621,55,620,49,"access_token"],[621,67,620,61],[621,69,620,63],[622,14,621,24,"access_token"],[622,26,621,36],[622,28,621,38,"tokenToSend"],[623,12,622,20],[623,13,622,21],[623,14,622,22],[624,10,623,16],[625,8,624,12],[625,9,624,13],[625,10,624,14],[626,6,625,8],[627,4,626,4],[628,4,627,4],[629,0,628,0],[630,0,629,0],[631,0,630,0],[632,4,631,4],[632,10,631,10,"_waitForAuthIfNeeded"],[632,30,631,30,"_waitForAuthIfNeeded"],[632,31,631,30],[632,33,631,33],[633,6,632,8],[633,10,632,12],[633,14,632,16],[633,15,632,17,"_authPromise"],[633,27,632,29],[633,29,632,31],[634,8,633,12],[634,14,633,18],[634,18,633,22],[634,19,633,23,"_authPromise"],[634,31,633,35],[635,6,634,8],[636,4,635,4],[637,4,636,4],[638,0,637,0],[639,0,638,0],[640,0,639,0],[641,4,640,4,"_setAuthSafely"],[641,18,640,18,"_setAuthSafely"],[641,19,640,19,"context"],[641,26,640,26],[641,29,640,29],[641,38,640,38],[641,40,640,40],[642,6,641,8],[642,10,641,12],[642,11,641,13,"setAuth"],[642,18,641,20],[642,19,641,21],[642,20,641,22],[642,21,641,23,"catch"],[642,26,641,28],[642,27,641,30,"e"],[642,28,641,31],[642,32,641,36],[643,8,642,12],[643,12,642,16],[643,13,642,17,"log"],[643,16,642,20],[643,17,642,21],[643,24,642,28],[643,26,642,30],[643,51,642,55,"context"],[643,58,642,62],[643,60,642,64],[643,62,642,66,"e"],[643,63,642,67],[643,64,642,68],[644,6,643,8],[644,7,643,9],[644,8,643,10],[645,4,644,4],[646,4,645,4],[647,0,646,0],[648,0,647,0],[649,0,648,0],[650,4,649,4,"_triggerStateCallbacks"],[650,26,649,26,"_triggerStateCallbacks"],[650,27,649,27,"event"],[650,32,649,32],[650,34,649,34,"data"],[650,38,649,38],[650,40,649,40],[651,6,650,8],[651,10,650,12],[652,8,651,12],[652,12,651,16],[652,13,651,17,"stateChangeCallbacks"],[652,33,651,37],[652,34,651,38,"event"],[652,39,651,43],[652,40,651,44],[652,41,651,45,"forEach"],[652,48,651,52],[652,49,651,54,"callback"],[652,57,651,62],[652,61,651,67],[653,10,652,16],[653,14,652,20],[654,12,653,20,"callback"],[654,20,653,28],[654,21,653,29,"data"],[654,25,653,33],[654,26,653,34],[655,10,654,16],[655,11,654,17],[655,12,655,16],[655,19,655,23,"e"],[655,20,655,24],[655,22,655,26],[656,12,656,20],[656,16,656,24],[656,17,656,25,"log"],[656,20,656,28],[656,21,656,29],[656,28,656,36],[656,30,656,38],[656,42,656,50,"event"],[656,47,656,55],[656,58,656,66],[656,60,656,68,"e"],[656,61,656,69],[656,62,656,70],[657,10,657,16],[658,8,658,12],[658,9,658,13],[658,10,658,14],[659,6,659,8],[659,7,659,9],[659,8,660,8],[659,15,660,15,"e"],[659,16,660,16],[659,18,660,18],[660,8,661,12],[660,12,661,16],[660,13,661,17,"log"],[660,16,661,20],[660,17,661,21],[660,24,661,28],[660,26,661,30],[660,46,661,50,"event"],[660,51,661,55],[660,63,661,67],[660,65,661,69,"e"],[660,66,661,70],[660,67,661,71],[661,6,662,8],[662,4,663,4],[663,4,664,4],[664,0,665,0],[665,0,666,0],[666,0,667,0],[667,4,668,4,"_setupReconnectionTimer"],[667,27,668,27,"_setupReconnectionTimer"],[667,28,668,27],[667,30,668,30],[668,6,669,8],[668,10,669,12],[668,11,669,13,"reconnectTimer"],[668,25,669,27],[668,28,669,30],[668,32,669,34,"Timer"],[668,37,669,39],[668,38,669,39,"default"],[668,45,669,39],[668,46,669,40],[668,58,669,52],[669,8,670,12,"setTimeout"],[669,18,670,22],[669,19,670,23],[669,31,670,35],[670,10,671,16],[670,16,671,22],[670,20,671,26],[670,21,671,27,"_waitForAuthIfNeeded"],[670,41,671,47],[670,42,671,48],[670,43,671,49],[671,10,672,16],[671,14,672,20],[671,15,672,21],[671,19,672,25],[671,20,672,26,"isConnected"],[671,31,672,37],[671,32,672,38],[671,33,672,39],[671,35,672,41],[672,12,673,20],[672,16,673,24],[672,17,673,25,"connect"],[672,24,673,32],[672,25,673,33],[672,26,673,34],[673,10,674,16],[674,8,675,12],[674,9,675,13],[674,11,675,15,"CONNECTION_TIMEOUTS"],[674,30,675,34],[674,31,675,35,"RECONNECT_DELAY"],[674,46,675,50],[674,47,675,51],[675,6,676,8],[675,7,676,9],[675,9,676,11],[675,13,676,15],[675,14,676,16,"reconnectAfterMs"],[675,30,676,32],[675,31,676,33],[676,4,677,4],[677,4,678,4],[678,0,679,0],[679,0,680,0],[680,0,681,0],[681,4,682,4,"_initializeOptions"],[681,22,682,22,"_initializeOptions"],[681,23,682,23,"options"],[681,30,682,30],[681,32,682,32],[682,6,683,8],[682,10,683,12,"_a"],[682,12,683,14],[682,14,683,16,"_b"],[682,16,683,18],[682,18,683,20,"_c"],[682,20,683,22],[682,22,683,24,"_d"],[682,24,683,26],[682,26,683,28,"_e"],[682,28,683,30],[682,30,683,32,"_f"],[682,32,683,34],[682,34,683,36,"_g"],[682,36,683,38],[682,38,683,40,"_h"],[682,40,683,42],[682,42,683,44,"_j"],[682,44,683,46],[683,6,684,8],[684,6,685,8],[684,10,685,12],[684,11,685,13,"transport"],[684,20,685,22],[684,23,685,25],[684,24,685,26,"_a"],[684,26,685,28],[684,29,685,31,"options"],[684,36,685,38],[684,41,685,43],[684,45,685,47],[684,49,685,51,"options"],[684,56,685,58],[684,61,685,63],[684,66,685,68],[684,67,685,69],[684,70,685,72],[684,75,685,77],[684,76,685,78],[684,79,685,81,"options"],[684,86,685,88],[684,87,685,89,"transport"],[684,96,685,98],[684,102,685,104],[684,106,685,108],[684,110,685,112,"_a"],[684,112,685,114],[684,117,685,119],[684,122,685,124],[684,123,685,125],[684,126,685,128,"_a"],[684,128,685,130],[684,131,685,133],[684,135,685,137],[685,6,686,8],[685,10,686,12],[685,11,686,13,"timeout"],[685,18,686,20],[685,21,686,23],[685,22,686,24,"_b"],[685,24,686,26],[685,27,686,29,"options"],[685,34,686,36],[685,39,686,41],[685,43,686,45],[685,47,686,49,"options"],[685,54,686,56],[685,59,686,61],[685,64,686,66],[685,65,686,67],[685,68,686,70],[685,73,686,75],[685,74,686,76],[685,77,686,79,"options"],[685,84,686,86],[685,85,686,87,"timeout"],[685,92,686,94],[685,98,686,100],[685,102,686,104],[685,106,686,108,"_b"],[685,108,686,110],[685,113,686,115],[685,118,686,120],[685,119,686,121],[685,122,686,124,"_b"],[685,124,686,126],[685,127,686,129,"DEFAULT_TIMEOUT"],[685,140,686,144],[685,141,686,144,"DEFAULT_TIMEOUT"],[685,156,686,144],[686,6,687,8],[686,10,687,12],[686,11,687,13,"heartbeatIntervalMs"],[686,30,687,32],[686,33,688,12],[686,34,688,13,"_c"],[686,36,688,15],[686,39,688,18,"options"],[686,46,688,25],[686,51,688,30],[686,55,688,34],[686,59,688,38,"options"],[686,66,688,45],[686,71,688,50],[686,76,688,55],[686,77,688,56],[686,80,688,59],[686,85,688,64],[686,86,688,65],[686,89,688,68,"options"],[686,96,688,75],[686,97,688,76,"heartbeatIntervalMs"],[686,116,688,95],[686,122,688,101],[686,126,688,105],[686,130,688,109,"_c"],[686,132,688,111],[686,137,688,116],[686,142,688,121],[686,143,688,122],[686,146,688,125,"_c"],[686,148,688,127],[686,151,688,130,"CONNECTION_TIMEOUTS"],[686,170,688,149],[686,171,688,150,"HEARTBEAT_INTERVAL"],[686,189,688,168],[687,6,689,8],[687,10,689,12],[687,11,689,13,"worker"],[687,17,689,19],[687,20,689,22],[687,21,689,23,"_d"],[687,23,689,25],[687,26,689,28,"options"],[687,33,689,35],[687,38,689,40],[687,42,689,44],[687,46,689,48,"options"],[687,53,689,55],[687,58,689,60],[687,63,689,65],[687,64,689,66],[687,67,689,69],[687,72,689,74],[687,73,689,75],[687,76,689,78,"options"],[687,83,689,85],[687,84,689,86,"worker"],[687,90,689,92],[687,96,689,98],[687,100,689,102],[687,104,689,106,"_d"],[687,106,689,108],[687,111,689,113],[687,116,689,118],[687,117,689,119],[687,120,689,122,"_d"],[687,122,689,124],[687,125,689,127],[687,130,689,132],[688,6,690,8],[688,10,690,12],[688,11,690,13,"accessToken"],[688,22,690,24],[688,25,690,27],[688,26,690,28,"_e"],[688,28,690,30],[688,31,690,33,"options"],[688,38,690,40],[688,43,690,45],[688,47,690,49],[688,51,690,53,"options"],[688,58,690,60],[688,63,690,65],[688,68,690,70],[688,69,690,71],[688,72,690,74],[688,77,690,79],[688,78,690,80],[688,81,690,83,"options"],[688,88,690,90],[688,89,690,91,"accessToken"],[688,100,690,102],[688,106,690,108],[688,110,690,112],[688,114,690,116,"_e"],[688,116,690,118],[688,121,690,123],[688,126,690,128],[688,127,690,129],[688,130,690,132,"_e"],[688,132,690,134],[688,135,690,137],[688,139,690,141],[689,6,691,8],[689,10,691,12],[689,11,691,13,"heartbeatCallback"],[689,28,691,30],[689,31,691,33],[689,32,691,34,"_f"],[689,34,691,36],[689,37,691,39,"options"],[689,44,691,46],[689,49,691,51],[689,53,691,55],[689,57,691,59,"options"],[689,64,691,66],[689,69,691,71],[689,74,691,76],[689,75,691,77],[689,78,691,80],[689,83,691,85],[689,84,691,86],[689,87,691,89,"options"],[689,94,691,96],[689,95,691,97,"heartbeatCallback"],[689,112,691,114],[689,118,691,120],[689,122,691,124],[689,126,691,128,"_f"],[689,128,691,130],[689,133,691,135],[689,138,691,140],[689,139,691,141],[689,142,691,144,"_f"],[689,144,691,146],[689,147,691,149,"noop"],[689,151,691,153],[690,6,692,8],[691,6,693,8],[691,10,693,12,"options"],[691,17,693,19],[691,22,693,24],[691,26,693,28],[691,30,693,32,"options"],[691,37,693,39],[691,42,693,44],[691,47,693,49],[691,48,693,50],[691,51,693,53],[691,56,693,58],[691,57,693,59],[691,60,693,62,"options"],[691,67,693,69],[691,68,693,70,"params"],[691,74,693,76],[691,76,694,12],[691,80,694,16],[691,81,694,17,"params"],[691,87,694,23],[691,90,694,26,"options"],[691,97,694,33],[691,98,694,34,"params"],[691,104,694,40],[692,6,695,8],[692,10,695,12,"options"],[692,17,695,19],[692,22,695,24],[692,26,695,28],[692,30,695,32,"options"],[692,37,695,39],[692,42,695,44],[692,47,695,49],[692,48,695,50],[692,51,695,53],[692,56,695,58],[692,57,695,59],[692,60,695,62,"options"],[692,67,695,69],[692,68,695,70,"logger"],[692,74,695,76],[692,76,696,12],[692,80,696,16],[692,81,696,17,"logger"],[692,87,696,23],[692,90,696,26,"options"],[692,97,696,33],[692,98,696,34,"logger"],[692,104,696,40],[693,6,697,8],[693,10,697,12],[693,11,697,13,"options"],[693,18,697,20],[693,23,697,25],[693,27,697,29],[693,31,697,33,"options"],[693,38,697,40],[693,43,697,45],[693,48,697,50],[693,49,697,51],[693,52,697,54],[693,57,697,59],[693,58,697,60],[693,61,697,63,"options"],[693,68,697,70],[693,69,697,71,"logLevel"],[693,77,697,79],[693,83,697,85,"options"],[693,90,697,92],[693,95,697,97],[693,99,697,101],[693,103,697,105,"options"],[693,110,697,112],[693,115,697,117],[693,120,697,122],[693,121,697,123],[693,124,697,126],[693,129,697,131],[693,130,697,132],[693,133,697,135,"options"],[693,140,697,142],[693,141,697,143,"log_level"],[693,150,697,152],[693,151,697,153],[693,153,697,155],[694,8,698,12],[694,12,698,16],[694,13,698,17,"logLevel"],[694,21,698,25],[694,24,698,28,"options"],[694,31,698,35],[694,32,698,36,"logLevel"],[694,40,698,44],[694,44,698,48,"options"],[694,51,698,55],[694,52,698,56,"log_level"],[694,61,698,65],[695,8,699,12],[695,12,699,16],[695,13,699,17,"params"],[695,19,699,23],[695,22,699,26,"Object"],[695,28,699,32],[695,29,699,33,"assign"],[695,35,699,39],[695,36,699,40,"Object"],[695,42,699,46],[695,43,699,47,"assign"],[695,49,699,53],[695,50,699,54],[695,51,699,55],[695,52,699,56],[695,54,699,58],[695,58,699,62],[695,59,699,63,"params"],[695,65,699,69],[695,66,699,70],[695,68,699,72],[696,10,699,74,"log_level"],[696,19,699,83],[696,21,699,85],[696,25,699,89],[696,26,699,90,"logLevel"],[697,8,699,99],[697,9,699,100],[697,10,699,101],[698,6,700,8],[699,6,701,8],[700,6,702,8],[700,10,702,12],[700,11,702,13,"reconnectAfterMs"],[700,27,702,29],[700,30,703,12],[700,31,703,13,"_g"],[700,33,703,15],[700,36,703,18,"options"],[700,43,703,25],[700,48,703,30],[700,52,703,34],[700,56,703,38,"options"],[700,63,703,45],[700,68,703,50],[700,73,703,55],[700,74,703,56],[700,77,703,59],[700,82,703,64],[700,83,703,65],[700,86,703,68,"options"],[700,93,703,75],[700,94,703,76,"reconnectAfterMs"],[700,110,703,92],[700,116,703,98],[700,120,703,102],[700,124,703,106,"_g"],[700,126,703,108],[700,131,703,113],[700,136,703,118],[700,137,703,119],[700,140,703,122,"_g"],[700,142,703,124],[700,145,703,129,"tries"],[700,150,703,134],[700,154,703,139],[701,8,704,16],[701,15,704,23,"RECONNECT_INTERVALS"],[701,34,704,42],[701,35,704,43,"tries"],[701,40,704,48],[701,43,704,51],[701,44,704,52],[701,45,704,53],[701,49,704,57,"DEFAULT_RECONNECT_FALLBACK"],[701,75,704,83],[702,6,705,12],[702,7,705,14],[703,6,706,8],[703,10,706,12],[703,11,706,13,"encode"],[703,17,706,19],[703,20,707,12],[703,21,707,13,"_h"],[703,23,707,15],[703,26,707,18,"options"],[703,33,707,25],[703,38,707,30],[703,42,707,34],[703,46,707,38,"options"],[703,53,707,45],[703,58,707,50],[703,63,707,55],[703,64,707,56],[703,67,707,59],[703,72,707,64],[703,73,707,65],[703,76,707,68,"options"],[703,83,707,75],[703,84,707,76,"encode"],[703,90,707,82],[703,96,707,88],[703,100,707,92],[703,104,707,96,"_h"],[703,106,707,98],[703,111,707,103],[703,116,707,108],[703,117,707,109],[703,120,707,112,"_h"],[703,122,707,114],[703,125,707,118],[703,126,707,119,"payload"],[703,133,707,126],[703,135,707,128,"callback"],[703,143,707,136],[703,148,707,141],[704,8,708,16],[704,15,708,23,"callback"],[704,23,708,31],[704,24,708,32,"JSON"],[704,28,708,36],[704,29,708,37,"stringify"],[704,38,708,46],[704,39,708,47,"payload"],[704,46,708,54],[704,47,708,55],[704,48,708,56],[705,6,709,12],[705,7,709,14],[706,6,710,8],[706,10,710,12],[706,11,710,13,"decode"],[706,17,710,19],[706,20,711,12],[706,21,711,13,"_j"],[706,23,711,15],[706,26,711,18,"options"],[706,33,711,25],[706,38,711,30],[706,42,711,34],[706,46,711,38,"options"],[706,53,711,45],[706,58,711,50],[706,63,711,55],[706,64,711,56],[706,67,711,59],[706,72,711,64],[706,73,711,65],[706,76,711,68,"options"],[706,83,711,75],[706,84,711,76,"decode"],[706,90,711,82],[706,96,711,88],[706,100,711,92],[706,104,711,96,"_j"],[706,106,711,98],[706,111,711,103],[706,116,711,108],[706,117,711,109],[706,120,711,112,"_j"],[706,122,711,114],[706,125,711,117],[706,129,711,121],[706,130,711,122,"serializer"],[706,140,711,132],[706,141,711,133,"decode"],[706,147,711,139],[706,148,711,140,"bind"],[706,152,711,144],[706,153,711,145],[706,157,711,149],[706,158,711,150,"serializer"],[706,168,711,160],[706,169,711,161],[707,6,712,8],[708,6,713,8],[708,10,713,12],[708,14,713,16],[708,15,713,17,"worker"],[708,21,713,23],[708,23,713,25],[709,8,714,12],[709,12,714,16],[709,19,714,23,"window"],[709,25,714,29],[709,30,714,34],[709,41,714,45],[709,45,714,49],[709,46,714,50,"window"],[709,52,714,56],[709,53,714,57,"Worker"],[709,59,714,63],[709,61,714,65],[710,10,715,16],[710,16,715,22],[710,20,715,26,"Error"],[710,25,715,31],[710,26,715,32],[710,55,715,61],[710,56,715,62],[711,8,716,12],[712,8,717,12],[712,12,717,16],[712,13,717,17,"workerUrl"],[712,22,717,26],[712,25,717,29,"options"],[712,32,717,36],[712,37,717,41],[712,41,717,45],[712,45,717,49,"options"],[712,52,717,56],[712,57,717,61],[712,62,717,66],[712,63,717,67],[712,66,717,70],[712,71,717,75],[712,72,717,76],[712,75,717,79,"options"],[712,82,717,86],[712,83,717,87,"workerUrl"],[712,92,717,96],[713,6,718,8],[714,4,719,4],[715,2,720,0],[716,0,720,1],[716,3]],"functionMap":{"names":["<global>","noop","RealtimeClient","constructor","_resolveFetch","_fetch","import.then$argument_0","import.then._catch$argument_0","<anonymous>","connect","endpointURL","disconnect","setTimeout$argument_0","conn.onclose","getChannels","removeChannel","removeAllChannels","channels.map$argument_0","log","connectionState","isConnected","isConnecting","isDisconnecting","channel","getChannels.find$argument_0","push","callback","encode$argument_1","setAuth","sendHeartbeat","onHeartbeat","flushSendBuffer","sendBuffer.forEach$argument_0","_makeRef","_leaveOpenTopic","channels.find$argument_0","_remove","channels.filter$argument_0","_onConnMessage","decode$argument_1","channels.filter.forEach$argument_0","_clearTimer","_clearAllTimers","_setupConnectionHandlers","conn.onopen","conn.onerror","conn.onmessage","_teardownConnection","channels.forEach$argument_0","_onConnOpen","_startHeartbeat","setInterval$argument_0","_startWorkerHeartbeat","workerRef.onerror","workerRef.onmessage","_onConnClose","_onConnError","_triggerChanError","_appendParams","_workerObjectUrl","_setConnectionState","_performAuth","_waitForAuthIfNeeded","_setAuthSafely","setAuth._catch$argument_0","_triggerStateCallbacks","stateChangeCallbacks.event.forEach$argument_0","_setupReconnectionTimer","Timer$argument_0","_initializeOptions"],"mappings":"AAA;aCM,SD;eEe;ICoB;6BCqC;yBCO;0BCC,sCD;2BEC;iBFG,CD;mBIK,4BJ;SDC;KDY;IOI;KPuC;IQK;KRE;ISO;6CCO;aDE;gCEC;aFG;KTa;IYI;KZE;IaK;KbM;IcI;6DCC,kCD;KdI;IgBM;KhBE;IiBI;KjBW;IkBI;KlBE;ImBI;KnBE;IoBI;KpBE;IqBC;+CCE,gCD;KrBS;IuBM;yBCE;8BCC;aDG;SDC;KvBQ;I0BU;K1BQ;I2BI;uBjBwB;aiBK;K3BkB;I4BC;K5BE;I6BI;oCCE,wBD;K7BG;I+BM;K/BS;IgCM;4CCC,6DD;KhCK;IkCQ;6CCC,gCD;KlCC;IoCE;qCCC;wBFqB,qCE;yBCC,kDD;SDE;KpCC;IuCK;KvCS;IwCK;KxCG;IyCK;2BCQ,wBD;4BEC,mCF;8BGC,qCH;4B9BC,mC8B;KzCC;I6CK;8BCS,+BD;K7CC;I+CE;K/Cc;IgDE;0CCE,0BD;KhDC;IkDE;iCCS;SDG;mCEC;SFI;KlDK;IqDE;KrDW;IsDE;KtDK;IuDE;8BTC,mDS;KvDC;IwDE;KxDO;IyDC;KzDU;I0DK;K1DQ;I2DK;kCbc;aaW;K3DE;I4DK;K5DI;I6DK;6BCC;SDE;K7DC;I+DK;qDCE;aDO;K/DK;IiEK;wCCC;uBxDC;awDK;SDC;KjEC;ImEK;gI7DqB;a6DE;sH7DE;a6DE;KnEU;CFC"},"hasCjsExports":false},"type":"js/module"}]}