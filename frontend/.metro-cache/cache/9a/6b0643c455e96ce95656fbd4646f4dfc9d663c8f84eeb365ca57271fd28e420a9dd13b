{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.byteToBase64URL = byteToBase64URL;\n  exports.byteFromBase64URL = byteFromBase64URL;\n  exports.stringToBase64URL = stringToBase64URL;\n  exports.stringFromBase64URL = stringFromBase64URL;\n  exports.codepointToUTF8 = codepointToUTF8;\n  exports.stringToUTF8 = stringToUTF8;\n  exports.stringFromUTF8 = stringFromUTF8;\n  exports.base64UrlToUint8Array = base64UrlToUint8Array;\n  exports.stringToUint8Array = stringToUint8Array;\n  exports.bytesToBase64URL = bytesToBase64URL;\n  /**\n   * Avoid modifying this file. It's part of\n   * https://github.com/supabase-community/base64url-js.  Submit all fixes on\n   * that repo!\n   */\n  /**\n   * An array of characters that encode 6 bits into a Base64-URL alphabet\n   * character.\n   */\n  const TO_BASE64URL = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split('');\n  /**\n   * An array of characters that can appear in a Base64-URL encoded string but\n   * should be ignored.\n   */\n  const IGNORE_BASE64URL = ' \\t\\n\\r='.split('');\n  /**\n   * An array of 128 numbers that map a Base64-URL character to 6 bits, or if -2\n   * used to skip the character, or if -1 used to error out.\n   */\n  const FROM_BASE64URL = (() => {\n    const charMap = new Array(128);\n    for (let i = 0; i < charMap.length; i += 1) {\n      charMap[i] = -1;\n    }\n    for (let i = 0; i < IGNORE_BASE64URL.length; i += 1) {\n      charMap[IGNORE_BASE64URL[i].charCodeAt(0)] = -2;\n    }\n    for (let i = 0; i < TO_BASE64URL.length; i += 1) {\n      charMap[TO_BASE64URL[i].charCodeAt(0)] = i;\n    }\n    return charMap;\n  })();\n  /**\n   * Converts a byte to a Base64-URL string.\n   *\n   * @param byte The byte to convert, or null to flush at the end of the byte sequence.\n   * @param state The Base64 conversion state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n   * @param emit A function called with the next Base64 character when ready.\n   */\n  function byteToBase64URL(byte, state, emit) {\n    if (byte !== null) {\n      state.queue = state.queue << 8 | byte;\n      state.queuedBits += 8;\n      while (state.queuedBits >= 6) {\n        const pos = state.queue >> state.queuedBits - 6 & 63;\n        emit(TO_BASE64URL[pos]);\n        state.queuedBits -= 6;\n      }\n    } else if (state.queuedBits > 0) {\n      state.queue = state.queue << 6 - state.queuedBits;\n      state.queuedBits = 6;\n      while (state.queuedBits >= 6) {\n        const pos = state.queue >> state.queuedBits - 6 & 63;\n        emit(TO_BASE64URL[pos]);\n        state.queuedBits -= 6;\n      }\n    }\n  }\n  /**\n   * Converts a String char code (extracted using `string.charCodeAt(position)`) to a sequence of Base64-URL characters.\n   *\n   * @param charCode The char code of the JavaScript string.\n   * @param state The Base64 state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n   * @param emit A function called with the next byte.\n   */\n  function byteFromBase64URL(charCode, state, emit) {\n    const bits = FROM_BASE64URL[charCode];\n    if (bits > -1) {\n      // valid Base64-URL character\n      state.queue = state.queue << 6 | bits;\n      state.queuedBits += 6;\n      while (state.queuedBits >= 8) {\n        emit(state.queue >> state.queuedBits - 8 & 0xff);\n        state.queuedBits -= 8;\n      }\n    } else if (bits === -2) {\n      // ignore spaces, tabs, newlines, =\n      return;\n    } else {\n      throw new Error(`Invalid Base64-URL character \"${String.fromCharCode(charCode)}\"`);\n    }\n  }\n  /**\n   * Converts a JavaScript string (which may include any valid character) into a\n   * Base64-URL encoded string. The string is first encoded in UTF-8 which is\n   * then encoded as Base64-URL.\n   *\n   * @param str The string to convert.\n   */\n  function stringToBase64URL(str) {\n    const base64 = [];\n    const emitter = char => {\n      base64.push(char);\n    };\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    stringToUTF8(str, byte => {\n      byteToBase64URL(byte, state, emitter);\n    });\n    byteToBase64URL(null, state, emitter);\n    return base64.join('');\n  }\n  /**\n   * Converts a Base64-URL encoded string into a JavaScript string. It is assumed\n   * that the underlying string has been encoded as UTF-8.\n   *\n   * @param str The Base64-URL encoded string.\n   */\n  function stringFromBase64URL(str) {\n    const conv = [];\n    const utf8Emit = codepoint => {\n      conv.push(String.fromCodePoint(codepoint));\n    };\n    const utf8State = {\n      utf8seq: 0,\n      codepoint: 0\n    };\n    const b64State = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const byteEmit = byte => {\n      stringFromUTF8(byte, utf8State, utf8Emit);\n    };\n    for (let i = 0; i < str.length; i += 1) {\n      byteFromBase64URL(str.charCodeAt(i), b64State, byteEmit);\n    }\n    return conv.join('');\n  }\n  /**\n   * Converts a Unicode codepoint to a multi-byte UTF-8 sequence.\n   *\n   * @param codepoint The Unicode codepoint.\n   * @param emit      Function which will be called for each UTF-8 byte that represents the codepoint.\n   */\n  function codepointToUTF8(codepoint, emit) {\n    if (codepoint <= 0x7f) {\n      emit(codepoint);\n      return;\n    } else if (codepoint <= 0x7ff) {\n      emit(0xc0 | codepoint >> 6);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    } else if (codepoint <= 0xffff) {\n      emit(0xe0 | codepoint >> 12);\n      emit(0x80 | codepoint >> 6 & 0x3f);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    } else if (codepoint <= 0x10ffff) {\n      emit(0xf0 | codepoint >> 18);\n      emit(0x80 | codepoint >> 12 & 0x3f);\n      emit(0x80 | codepoint >> 6 & 0x3f);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    }\n    throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);\n  }\n  /**\n   * Converts a JavaScript string to a sequence of UTF-8 bytes.\n   *\n   * @param str  The string to convert to UTF-8.\n   * @param emit Function which will be called for each UTF-8 byte of the string.\n   */\n  function stringToUTF8(str, emit) {\n    for (let i = 0; i < str.length; i += 1) {\n      let codepoint = str.charCodeAt(i);\n      if (codepoint > 0xd7ff && codepoint <= 0xdbff) {\n        // most UTF-16 codepoints are Unicode codepoints, except values in this\n        // range where the next UTF-16 codepoint needs to be combined with the\n        // current one to get the Unicode codepoint\n        const highSurrogate = (codepoint - 0xd800) * 0x400 & 0xffff;\n        const lowSurrogate = str.charCodeAt(i + 1) - 0xdc00 & 0xffff;\n        codepoint = (lowSurrogate | highSurrogate) + 0x10000;\n        i += 1;\n      }\n      codepointToUTF8(codepoint, emit);\n    }\n  }\n  /**\n   * Converts a UTF-8 byte to a Unicode codepoint.\n   *\n   * @param byte  The UTF-8 byte next in the sequence.\n   * @param state The shared state between consecutive UTF-8 bytes in the\n   *              sequence, an object with the shape `{ utf8seq: 0, codepoint: 0 }`.\n   * @param emit  Function which will be called for each codepoint.\n   */\n  function stringFromUTF8(byte, state, emit) {\n    if (state.utf8seq === 0) {\n      if (byte <= 0x7f) {\n        emit(byte);\n        return;\n      }\n      // count the number of 1 leading bits until you reach 0\n      for (let leadingBit = 1; leadingBit < 6; leadingBit += 1) {\n        if ((byte >> 7 - leadingBit & 1) === 0) {\n          state.utf8seq = leadingBit;\n          break;\n        }\n      }\n      if (state.utf8seq === 2) {\n        state.codepoint = byte & 31;\n      } else if (state.utf8seq === 3) {\n        state.codepoint = byte & 15;\n      } else if (state.utf8seq === 4) {\n        state.codepoint = byte & 7;\n      } else {\n        throw new Error('Invalid UTF-8 sequence');\n      }\n      state.utf8seq -= 1;\n    } else if (state.utf8seq > 0) {\n      if (byte <= 0x7f) {\n        throw new Error('Invalid UTF-8 sequence');\n      }\n      state.codepoint = state.codepoint << 6 | byte & 63;\n      state.utf8seq -= 1;\n      if (state.utf8seq === 0) {\n        emit(state.codepoint);\n      }\n    }\n  }\n  /**\n   * Helper functions to convert different types of strings to Uint8Array\n   */\n  function base64UrlToUint8Array(str) {\n    const result = [];\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const onByte = byte => {\n      result.push(byte);\n    };\n    for (let i = 0; i < str.length; i += 1) {\n      byteFromBase64URL(str.charCodeAt(i), state, onByte);\n    }\n    return new Uint8Array(result);\n  }\n  function stringToUint8Array(str) {\n    const result = [];\n    stringToUTF8(str, byte => result.push(byte));\n    return new Uint8Array(result);\n  }\n  function bytesToBase64URL(bytes) {\n    const result = [];\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const onChar = char => {\n      result.push(char);\n    };\n    bytes.forEach(byte => byteToBase64URL(byte, state, onChar));\n    // always call with `null` after processing all bytes\n    byteToBase64URL(null, state, onChar);\n    return result.join('');\n  }\n});","lineCount":275,"map":[[7,2,40,0,"exports"],[7,9,40,0],[7,10,40,0,"byteToBase64URL"],[7,25,40,0],[7,28,40,0,"byteToBase64URL"],[7,43,40,0],[8,2,67,0,"exports"],[8,9,67,0],[8,10,67,0,"byteFromBase64URL"],[8,27,67,0],[8,30,67,0,"byteFromBase64URL"],[8,47,67,0],[9,2,93,0,"exports"],[9,9,93,0],[9,10,93,0,"stringToBase64URL"],[9,27,93,0],[9,30,93,0,"stringToBase64URL"],[9,47,93,0],[10,2,111,0,"exports"],[10,9,111,0],[10,10,111,0,"stringFromBase64URL"],[10,29,111,0],[10,32,111,0,"stringFromBase64URL"],[10,51,111,0],[11,2,135,0,"exports"],[11,9,135,0],[11,10,135,0,"codepointToUTF8"],[11,25,135,0],[11,28,135,0,"codepointToUTF8"],[11,43,135,0],[12,2,166,0,"exports"],[12,9,166,0],[12,10,166,0,"stringToUTF8"],[12,22,166,0],[12,25,166,0,"stringToUTF8"],[12,37,166,0],[13,2,189,0,"exports"],[13,9,189,0],[13,10,189,0,"stringFromUTF8"],[13,24,189,0],[13,27,189,0,"stringFromUTF8"],[13,41,189,0],[14,2,230,0,"exports"],[14,9,230,0],[14,10,230,0,"base64UrlToUint8Array"],[14,31,230,0],[14,34,230,0,"base64UrlToUint8Array"],[14,55,230,0],[15,2,241,0,"exports"],[15,9,241,0],[15,10,241,0,"stringToUint8Array"],[15,28,241,0],[15,31,241,0,"stringToUint8Array"],[15,49,241,0],[16,2,246,0,"exports"],[16,9,246,0],[16,10,246,0,"bytesToBase64URL"],[16,26,246,0],[16,29,246,0,"bytesToBase64URL"],[16,45,246,0],[17,2,1,0],[18,0,2,0],[19,0,3,0],[20,0,4,0],[21,0,5,0],[22,2,6,0],[23,0,7,0],[24,0,8,0],[25,0,9,0],[26,2,10,0],[26,8,10,6,"TO_BASE64URL"],[26,20,10,18],[26,23,10,21],[26,89,10,87],[26,90,10,88,"split"],[26,95,10,93],[26,96,10,94],[26,98,10,96],[26,99,10,97],[27,2,11,0],[28,0,12,0],[29,0,13,0],[30,0,14,0],[31,2,15,0],[31,8,15,6,"IGNORE_BASE64URL"],[31,24,15,22],[31,27,15,25],[31,37,15,35],[31,38,15,36,"split"],[31,43,15,41],[31,44,15,42],[31,46,15,44],[31,47,15,45],[32,2,16,0],[33,0,17,0],[34,0,18,0],[35,0,19,0],[36,2,20,0],[36,8,20,6,"FROM_BASE64URL"],[36,22,20,20],[36,25,20,23],[36,26,20,24],[36,32,20,30],[37,4,21,4],[37,10,21,10,"charMap"],[37,17,21,17],[37,20,21,20],[37,24,21,24,"Array"],[37,29,21,29],[37,30,21,30],[37,33,21,33],[37,34,21,34],[38,4,22,4],[38,9,22,9],[38,13,22,13,"i"],[38,14,22,14],[38,17,22,17],[38,18,22,18],[38,20,22,20,"i"],[38,21,22,21],[38,24,22,24,"charMap"],[38,31,22,31],[38,32,22,32,"length"],[38,38,22,38],[38,40,22,40,"i"],[38,41,22,41],[38,45,22,45],[38,46,22,46],[38,48,22,48],[39,6,23,8,"charMap"],[39,13,23,15],[39,14,23,16,"i"],[39,15,23,17],[39,16,23,18],[39,19,23,21],[39,20,23,22],[39,21,23,23],[40,4,24,4],[41,4,25,4],[41,9,25,9],[41,13,25,13,"i"],[41,14,25,14],[41,17,25,17],[41,18,25,18],[41,20,25,20,"i"],[41,21,25,21],[41,24,25,24,"IGNORE_BASE64URL"],[41,40,25,40],[41,41,25,41,"length"],[41,47,25,47],[41,49,25,49,"i"],[41,50,25,50],[41,54,25,54],[41,55,25,55],[41,57,25,57],[42,6,26,8,"charMap"],[42,13,26,15],[42,14,26,16,"IGNORE_BASE64URL"],[42,30,26,32],[42,31,26,33,"i"],[42,32,26,34],[42,33,26,35],[42,34,26,36,"charCodeAt"],[42,44,26,46],[42,45,26,47],[42,46,26,48],[42,47,26,49],[42,48,26,50],[42,51,26,53],[42,52,26,54],[42,53,26,55],[43,4,27,4],[44,4,28,4],[44,9,28,9],[44,13,28,13,"i"],[44,14,28,14],[44,17,28,17],[44,18,28,18],[44,20,28,20,"i"],[44,21,28,21],[44,24,28,24,"TO_BASE64URL"],[44,36,28,36],[44,37,28,37,"length"],[44,43,28,43],[44,45,28,45,"i"],[44,46,28,46],[44,50,28,50],[44,51,28,51],[44,53,28,53],[45,6,29,8,"charMap"],[45,13,29,15],[45,14,29,16,"TO_BASE64URL"],[45,26,29,28],[45,27,29,29,"i"],[45,28,29,30],[45,29,29,31],[45,30,29,32,"charCodeAt"],[45,40,29,42],[45,41,29,43],[45,42,29,44],[45,43,29,45],[45,44,29,46],[45,47,29,49,"i"],[45,48,29,50],[46,4,30,4],[47,4,31,4],[47,11,31,11,"charMap"],[47,18,31,18],[48,2,32,0],[48,3,32,1],[48,5,32,3],[48,6,32,4],[49,2,33,0],[50,0,34,0],[51,0,35,0],[52,0,36,0],[53,0,37,0],[54,0,38,0],[55,0,39,0],[56,2,40,7],[56,11,40,16,"byteToBase64URL"],[56,26,40,31,"byteToBase64URL"],[56,27,40,32,"byte"],[56,31,40,36],[56,33,40,38,"state"],[56,38,40,43],[56,40,40,45,"emit"],[56,44,40,49],[56,46,40,51],[57,4,41,4],[57,8,41,8,"byte"],[57,12,41,12],[57,17,41,17],[57,21,41,21],[57,23,41,23],[58,6,42,8,"state"],[58,11,42,13],[58,12,42,14,"queue"],[58,17,42,19],[58,20,42,23,"state"],[58,25,42,28],[58,26,42,29,"queue"],[58,31,42,34],[58,35,42,38],[58,36,42,39],[58,39,42,43,"byte"],[58,43,42,47],[59,6,43,8,"state"],[59,11,43,13],[59,12,43,14,"queuedBits"],[59,22,43,24],[59,26,43,28],[59,27,43,29],[60,6,44,8],[60,13,44,15,"state"],[60,18,44,20],[60,19,44,21,"queuedBits"],[60,29,44,31],[60,33,44,35],[60,34,44,36],[60,36,44,38],[61,8,45,12],[61,14,45,18,"pos"],[61,17,45,21],[61,20,45,25,"state"],[61,25,45,30],[61,26,45,31,"queue"],[61,31,45,36],[61,35,45,41,"state"],[61,40,45,46],[61,41,45,47,"queuedBits"],[61,51,45,57],[61,54,45,60],[61,55,45,62],[61,58,45,66],[61,60,45,68],[62,8,46,12,"emit"],[62,12,46,16],[62,13,46,17,"TO_BASE64URL"],[62,25,46,29],[62,26,46,30,"pos"],[62,29,46,33],[62,30,46,34],[62,31,46,35],[63,8,47,12,"state"],[63,13,47,17],[63,14,47,18,"queuedBits"],[63,24,47,28],[63,28,47,32],[63,29,47,33],[64,6,48,8],[65,4,49,4],[65,5,49,5],[65,11,50,9],[65,15,50,13,"state"],[65,20,50,18],[65,21,50,19,"queuedBits"],[65,31,50,29],[65,34,50,32],[65,35,50,33],[65,37,50,35],[66,6,51,8,"state"],[66,11,51,13],[66,12,51,14,"queue"],[66,17,51,19],[66,20,51,22,"state"],[66,25,51,27],[66,26,51,28,"queue"],[66,31,51,33],[66,35,51,38],[66,36,51,39],[66,39,51,42,"state"],[66,44,51,47],[66,45,51,48,"queuedBits"],[66,55,51,59],[67,6,52,8,"state"],[67,11,52,13],[67,12,52,14,"queuedBits"],[67,22,52,24],[67,25,52,27],[67,26,52,28],[68,6,53,8],[68,13,53,15,"state"],[68,18,53,20],[68,19,53,21,"queuedBits"],[68,29,53,31],[68,33,53,35],[68,34,53,36],[68,36,53,38],[69,8,54,12],[69,14,54,18,"pos"],[69,17,54,21],[69,20,54,25,"state"],[69,25,54,30],[69,26,54,31,"queue"],[69,31,54,36],[69,35,54,41,"state"],[69,40,54,46],[69,41,54,47,"queuedBits"],[69,51,54,57],[69,54,54,60],[69,55,54,62],[69,58,54,66],[69,60,54,68],[70,8,55,12,"emit"],[70,12,55,16],[70,13,55,17,"TO_BASE64URL"],[70,25,55,29],[70,26,55,30,"pos"],[70,29,55,33],[70,30,55,34],[70,31,55,35],[71,8,56,12,"state"],[71,13,56,17],[71,14,56,18,"queuedBits"],[71,24,56,28],[71,28,56,32],[71,29,56,33],[72,6,57,8],[73,4,58,4],[74,2,59,0],[75,2,60,0],[76,0,61,0],[77,0,62,0],[78,0,63,0],[79,0,64,0],[80,0,65,0],[81,0,66,0],[82,2,67,7],[82,11,67,16,"byteFromBase64URL"],[82,28,67,33,"byteFromBase64URL"],[82,29,67,34,"charCode"],[82,37,67,42],[82,39,67,44,"state"],[82,44,67,49],[82,46,67,51,"emit"],[82,50,67,55],[82,52,67,57],[83,4,68,4],[83,10,68,10,"bits"],[83,14,68,14],[83,17,68,17,"FROM_BASE64URL"],[83,31,68,31],[83,32,68,32,"charCode"],[83,40,68,40],[83,41,68,41],[84,4,69,4],[84,8,69,8,"bits"],[84,12,69,12],[84,15,69,15],[84,16,69,16],[84,17,69,17],[84,19,69,19],[85,6,70,8],[86,6,71,8,"state"],[86,11,71,13],[86,12,71,14,"queue"],[86,17,71,19],[86,20,71,23,"state"],[86,25,71,28],[86,26,71,29,"queue"],[86,31,71,34],[86,35,71,38],[86,36,71,39],[86,39,71,43,"bits"],[86,43,71,47],[87,6,72,8,"state"],[87,11,72,13],[87,12,72,14,"queuedBits"],[87,22,72,24],[87,26,72,28],[87,27,72,29],[88,6,73,8],[88,13,73,15,"state"],[88,18,73,20],[88,19,73,21,"queuedBits"],[88,29,73,31],[88,33,73,35],[88,34,73,36],[88,36,73,38],[89,8,74,12,"emit"],[89,12,74,16],[89,13,74,18,"state"],[89,18,74,23],[89,19,74,24,"queue"],[89,24,74,29],[89,28,74,34,"state"],[89,33,74,39],[89,34,74,40,"queuedBits"],[89,44,74,50],[89,47,74,53],[89,48,74,55],[89,51,74,59],[89,55,74,63],[89,56,74,64],[90,8,75,12,"state"],[90,13,75,17],[90,14,75,18,"queuedBits"],[90,24,75,28],[90,28,75,32],[90,29,75,33],[91,6,76,8],[92,4,77,4],[92,5,77,5],[92,11,78,9],[92,15,78,13,"bits"],[92,19,78,17],[92,24,78,22],[92,25,78,23],[92,26,78,24],[92,28,78,26],[93,6,79,8],[94,6,80,8],[95,4,81,4],[95,5,81,5],[95,11,82,9],[96,6,83,8],[96,12,83,14],[96,16,83,18,"Error"],[96,21,83,23],[96,22,83,24],[96,55,83,57,"String"],[96,61,83,63],[96,62,83,64,"fromCharCode"],[96,74,83,76],[96,75,83,77,"charCode"],[96,83,83,85],[96,84,83,86],[96,87,83,89],[96,88,83,90],[97,4,84,4],[98,2,85,0],[99,2,86,0],[100,0,87,0],[101,0,88,0],[102,0,89,0],[103,0,90,0],[104,0,91,0],[105,0,92,0],[106,2,93,7],[106,11,93,16,"stringToBase64URL"],[106,28,93,33,"stringToBase64URL"],[106,29,93,34,"str"],[106,32,93,37],[106,34,93,39],[107,4,94,4],[107,10,94,10,"base64"],[107,16,94,16],[107,19,94,19],[107,21,94,21],[108,4,95,4],[108,10,95,10,"emitter"],[108,17,95,17],[108,20,95,21,"char"],[108,24,95,25],[108,28,95,30],[109,6,96,8,"base64"],[109,12,96,14],[109,13,96,15,"push"],[109,17,96,19],[109,18,96,20,"char"],[109,22,96,24],[109,23,96,25],[110,4,97,4],[110,5,97,5],[111,4,98,4],[111,10,98,10,"state"],[111,15,98,15],[111,18,98,18],[112,6,98,20,"queue"],[112,11,98,25],[112,13,98,27],[112,14,98,28],[113,6,98,30,"queuedBits"],[113,16,98,40],[113,18,98,42],[114,4,98,44],[114,5,98,45],[115,4,99,4,"stringToUTF8"],[115,16,99,16],[115,17,99,17,"str"],[115,20,99,20],[115,22,99,23,"byte"],[115,26,99,27],[115,30,99,32],[116,6,100,8,"byteToBase64URL"],[116,21,100,23],[116,22,100,24,"byte"],[116,26,100,28],[116,28,100,30,"state"],[116,33,100,35],[116,35,100,37,"emitter"],[116,42,100,44],[116,43,100,45],[117,4,101,4],[117,5,101,5],[117,6,101,6],[118,4,102,4,"byteToBase64URL"],[118,19,102,19],[118,20,102,20],[118,24,102,24],[118,26,102,26,"state"],[118,31,102,31],[118,33,102,33,"emitter"],[118,40,102,40],[118,41,102,41],[119,4,103,4],[119,11,103,11,"base64"],[119,17,103,17],[119,18,103,18,"join"],[119,22,103,22],[119,23,103,23],[119,25,103,25],[119,26,103,26],[120,2,104,0],[121,2,105,0],[122,0,106,0],[123,0,107,0],[124,0,108,0],[125,0,109,0],[126,0,110,0],[127,2,111,7],[127,11,111,16,"stringFromBase64URL"],[127,30,111,35,"stringFromBase64URL"],[127,31,111,36,"str"],[127,34,111,39],[127,36,111,41],[128,4,112,4],[128,10,112,10,"conv"],[128,14,112,14],[128,17,112,17],[128,19,112,19],[129,4,113,4],[129,10,113,10,"utf8Emit"],[129,18,113,18],[129,21,113,22,"codepoint"],[129,30,113,31],[129,34,113,36],[130,6,114,8,"conv"],[130,10,114,12],[130,11,114,13,"push"],[130,15,114,17],[130,16,114,18,"String"],[130,22,114,24],[130,23,114,25,"fromCodePoint"],[130,36,114,38],[130,37,114,39,"codepoint"],[130,46,114,48],[130,47,114,49],[130,48,114,50],[131,4,115,4],[131,5,115,5],[132,4,116,4],[132,10,116,10,"utf8State"],[132,19,116,19],[132,22,116,22],[133,6,117,8,"utf8seq"],[133,13,117,15],[133,15,117,17],[133,16,117,18],[134,6,118,8,"codepoint"],[134,15,118,17],[134,17,118,19],[135,4,119,4],[135,5,119,5],[136,4,120,4],[136,10,120,10,"b64State"],[136,18,120,18],[136,21,120,21],[137,6,120,23,"queue"],[137,11,120,28],[137,13,120,30],[137,14,120,31],[138,6,120,33,"queuedBits"],[138,16,120,43],[138,18,120,45],[139,4,120,47],[139,5,120,48],[140,4,121,4],[140,10,121,10,"byteEmit"],[140,18,121,18],[140,21,121,22,"byte"],[140,25,121,26],[140,29,121,31],[141,6,122,8,"stringFromUTF8"],[141,20,122,22],[141,21,122,23,"byte"],[141,25,122,27],[141,27,122,29,"utf8State"],[141,36,122,38],[141,38,122,40,"utf8Emit"],[141,46,122,48],[141,47,122,49],[142,4,123,4],[142,5,123,5],[143,4,124,4],[143,9,124,9],[143,13,124,13,"i"],[143,14,124,14],[143,17,124,17],[143,18,124,18],[143,20,124,20,"i"],[143,21,124,21],[143,24,124,24,"str"],[143,27,124,27],[143,28,124,28,"length"],[143,34,124,34],[143,36,124,36,"i"],[143,37,124,37],[143,41,124,41],[143,42,124,42],[143,44,124,44],[144,6,125,8,"byteFromBase64URL"],[144,23,125,25],[144,24,125,26,"str"],[144,27,125,29],[144,28,125,30,"charCodeAt"],[144,38,125,40],[144,39,125,41,"i"],[144,40,125,42],[144,41,125,43],[144,43,125,45,"b64State"],[144,51,125,53],[144,53,125,55,"byteEmit"],[144,61,125,63],[144,62,125,64],[145,4,126,4],[146,4,127,4],[146,11,127,11,"conv"],[146,15,127,15],[146,16,127,16,"join"],[146,20,127,20],[146,21,127,21],[146,23,127,23],[146,24,127,24],[147,2,128,0],[148,2,129,0],[149,0,130,0],[150,0,131,0],[151,0,132,0],[152,0,133,0],[153,0,134,0],[154,2,135,7],[154,11,135,16,"codepointToUTF8"],[154,26,135,31,"codepointToUTF8"],[154,27,135,32,"codepoint"],[154,36,135,41],[154,38,135,43,"emit"],[154,42,135,47],[154,44,135,49],[155,4,136,4],[155,8,136,8,"codepoint"],[155,17,136,17],[155,21,136,21],[155,25,136,25],[155,27,136,27],[156,6,137,8,"emit"],[156,10,137,12],[156,11,137,13,"codepoint"],[156,20,137,22],[156,21,137,23],[157,6,138,8],[158,4,139,4],[158,5,139,5],[158,11,140,9],[158,15,140,13,"codepoint"],[158,24,140,22],[158,28,140,26],[158,33,140,31],[158,35,140,33],[159,6,141,8,"emit"],[159,10,141,12],[159,11,141,13],[159,15,141,17],[159,18,141,21,"codepoint"],[159,27,141,30],[159,31,141,34],[159,32,141,36],[159,33,141,37],[160,6,142,8,"emit"],[160,10,142,12],[160,11,142,13],[160,15,142,17],[160,18,142,21,"codepoint"],[160,27,142,30],[160,30,142,33],[160,34,142,38],[160,35,142,39],[161,6,143,8],[162,4,144,4],[162,5,144,5],[162,11,145,9],[162,15,145,13,"codepoint"],[162,24,145,22],[162,28,145,26],[162,34,145,32],[162,36,145,34],[163,6,146,8,"emit"],[163,10,146,12],[163,11,146,13],[163,15,146,17],[163,18,146,21,"codepoint"],[163,27,146,30],[163,31,146,34],[163,33,146,37],[163,34,146,38],[164,6,147,8,"emit"],[164,10,147,12],[164,11,147,13],[164,15,147,17],[164,18,147,22,"codepoint"],[164,27,147,31],[164,31,147,35],[164,32,147,36],[164,35,147,40],[164,39,147,45],[164,40,147,46],[165,6,148,8,"emit"],[165,10,148,12],[165,11,148,13],[165,15,148,17],[165,18,148,21,"codepoint"],[165,27,148,30],[165,30,148,33],[165,34,148,38],[165,35,148,39],[166,6,149,8],[167,4,150,4],[167,5,150,5],[167,11,151,9],[167,15,151,13,"codepoint"],[167,24,151,22],[167,28,151,26],[167,36,151,34],[167,38,151,36],[168,6,152,8,"emit"],[168,10,152,12],[168,11,152,13],[168,15,152,17],[168,18,152,21,"codepoint"],[168,27,152,30],[168,31,152,34],[168,33,152,37],[168,34,152,38],[169,6,153,8,"emit"],[169,10,153,12],[169,11,153,13],[169,15,153,17],[169,18,153,22,"codepoint"],[169,27,153,31],[169,31,153,35],[169,33,153,37],[169,36,153,41],[169,40,153,46],[169,41,153,47],[170,6,154,8,"emit"],[170,10,154,12],[170,11,154,13],[170,15,154,17],[170,18,154,22,"codepoint"],[170,27,154,31],[170,31,154,35],[170,32,154,36],[170,35,154,40],[170,39,154,45],[170,40,154,46],[171,6,155,8,"emit"],[171,10,155,12],[171,11,155,13],[171,15,155,17],[171,18,155,21,"codepoint"],[171,27,155,30],[171,30,155,33],[171,34,155,38],[171,35,155,39],[172,6,156,8],[173,4,157,4],[174,4,158,4],[174,10,158,10],[174,14,158,14,"Error"],[174,19,158,19],[174,20,158,20],[174,55,158,55,"codepoint"],[174,64,158,64],[174,65,158,65,"toString"],[174,73,158,73],[174,74,158,74],[174,76,158,76],[174,77,158,77],[174,79,158,79],[174,80,158,80],[175,2,159,0],[176,2,160,0],[177,0,161,0],[178,0,162,0],[179,0,163,0],[180,0,164,0],[181,0,165,0],[182,2,166,7],[182,11,166,16,"stringToUTF8"],[182,23,166,28,"stringToUTF8"],[182,24,166,29,"str"],[182,27,166,32],[182,29,166,34,"emit"],[182,33,166,38],[182,35,166,40],[183,4,167,4],[183,9,167,9],[183,13,167,13,"i"],[183,14,167,14],[183,17,167,17],[183,18,167,18],[183,20,167,20,"i"],[183,21,167,21],[183,24,167,24,"str"],[183,27,167,27],[183,28,167,28,"length"],[183,34,167,34],[183,36,167,36,"i"],[183,37,167,37],[183,41,167,41],[183,42,167,42],[183,44,167,44],[184,6,168,8],[184,10,168,12,"codepoint"],[184,19,168,21],[184,22,168,24,"str"],[184,25,168,27],[184,26,168,28,"charCodeAt"],[184,36,168,38],[184,37,168,39,"i"],[184,38,168,40],[184,39,168,41],[185,6,169,8],[185,10,169,12,"codepoint"],[185,19,169,21],[185,22,169,24],[185,28,169,30],[185,32,169,34,"codepoint"],[185,41,169,43],[185,45,169,47],[185,51,169,53],[185,53,169,55],[186,8,170,12],[187,8,171,12],[188,8,172,12],[189,8,173,12],[189,14,173,18,"highSurrogate"],[189,27,173,31],[189,30,173,35],[189,31,173,36,"codepoint"],[189,40,173,45],[189,43,173,48],[189,49,173,54],[189,53,173,58],[189,58,173,63],[189,61,173,67],[189,67,173,73],[190,8,174,12],[190,14,174,18,"lowSurrogate"],[190,26,174,30],[190,29,174,34,"str"],[190,32,174,37],[190,33,174,38,"charCodeAt"],[190,43,174,48],[190,44,174,49,"i"],[190,45,174,50],[190,48,174,53],[190,49,174,54],[190,50,174,55],[190,53,174,58],[190,59,174,64],[190,62,174,68],[190,68,174,74],[191,8,175,12,"codepoint"],[191,17,175,21],[191,20,175,24],[191,21,175,25,"lowSurrogate"],[191,33,175,37],[191,36,175,40,"highSurrogate"],[191,49,175,53],[191,53,175,57],[191,60,175,64],[192,8,176,12,"i"],[192,9,176,13],[192,13,176,17],[192,14,176,18],[193,6,177,8],[194,6,178,8,"codepointToUTF8"],[194,21,178,23],[194,22,178,24,"codepoint"],[194,31,178,33],[194,33,178,35,"emit"],[194,37,178,39],[194,38,178,40],[195,4,179,4],[196,2,180,0],[197,2,181,0],[198,0,182,0],[199,0,183,0],[200,0,184,0],[201,0,185,0],[202,0,186,0],[203,0,187,0],[204,0,188,0],[205,2,189,7],[205,11,189,16,"stringFromUTF8"],[205,25,189,30,"stringFromUTF8"],[205,26,189,31,"byte"],[205,30,189,35],[205,32,189,37,"state"],[205,37,189,42],[205,39,189,44,"emit"],[205,43,189,48],[205,45,189,50],[206,4,190,4],[206,8,190,8,"state"],[206,13,190,13],[206,14,190,14,"utf8seq"],[206,21,190,21],[206,26,190,26],[206,27,190,27],[206,29,190,29],[207,6,191,8],[207,10,191,12,"byte"],[207,14,191,16],[207,18,191,20],[207,22,191,24],[207,24,191,26],[208,8,192,12,"emit"],[208,12,192,16],[208,13,192,17,"byte"],[208,17,192,21],[208,18,192,22],[209,8,193,12],[210,6,194,8],[211,6,195,8],[212,6,196,8],[212,11,196,13],[212,15,196,17,"leadingBit"],[212,25,196,27],[212,28,196,30],[212,29,196,31],[212,31,196,33,"leadingBit"],[212,41,196,43],[212,44,196,46],[212,45,196,47],[212,47,196,49,"leadingBit"],[212,57,196,59],[212,61,196,63],[212,62,196,64],[212,64,196,66],[213,8,197,12],[213,12,197,16],[213,13,197,18,"byte"],[213,17,197,22],[213,21,197,27],[213,22,197,28],[213,25,197,31,"leadingBit"],[213,35,197,42],[213,38,197,46],[213,39,197,47],[213,45,197,53],[213,46,197,54],[213,48,197,56],[214,10,198,16,"state"],[214,15,198,21],[214,16,198,22,"utf8seq"],[214,23,198,29],[214,26,198,32,"leadingBit"],[214,36,198,42],[215,10,199,16],[216,8,200,12],[217,6,201,8],[218,6,202,8],[218,10,202,12,"state"],[218,15,202,17],[218,16,202,18,"utf8seq"],[218,23,202,25],[218,28,202,30],[218,29,202,31],[218,31,202,33],[219,8,203,12,"state"],[219,13,203,17],[219,14,203,18,"codepoint"],[219,23,203,27],[219,26,203,30,"byte"],[219,30,203,34],[219,33,203,37],[219,35,203,39],[220,6,204,8],[220,7,204,9],[220,13,205,13],[220,17,205,17,"state"],[220,22,205,22],[220,23,205,23,"utf8seq"],[220,30,205,30],[220,35,205,35],[220,36,205,36],[220,38,205,38],[221,8,206,12,"state"],[221,13,206,17],[221,14,206,18,"codepoint"],[221,23,206,27],[221,26,206,30,"byte"],[221,30,206,34],[221,33,206,37],[221,35,206,39],[222,6,207,8],[222,7,207,9],[222,13,208,13],[222,17,208,17,"state"],[222,22,208,22],[222,23,208,23,"utf8seq"],[222,30,208,30],[222,35,208,35],[222,36,208,36],[222,38,208,38],[223,8,209,12,"state"],[223,13,209,17],[223,14,209,18,"codepoint"],[223,23,209,27],[223,26,209,30,"byte"],[223,30,209,34],[223,33,209,37],[223,34,209,38],[224,6,210,8],[224,7,210,9],[224,13,211,13],[225,8,212,12],[225,14,212,18],[225,18,212,22,"Error"],[225,23,212,27],[225,24,212,28],[225,48,212,52],[225,49,212,53],[226,6,213,8],[227,6,214,8,"state"],[227,11,214,13],[227,12,214,14,"utf8seq"],[227,19,214,21],[227,23,214,25],[227,24,214,26],[228,4,215,4],[228,5,215,5],[228,11,216,9],[228,15,216,13,"state"],[228,20,216,18],[228,21,216,19,"utf8seq"],[228,28,216,26],[228,31,216,29],[228,32,216,30],[228,34,216,32],[229,6,217,8],[229,10,217,12,"byte"],[229,14,217,16],[229,18,217,20],[229,22,217,24],[229,24,217,26],[230,8,218,12],[230,14,218,18],[230,18,218,22,"Error"],[230,23,218,27],[230,24,218,28],[230,48,218,52],[230,49,218,53],[231,6,219,8],[232,6,220,8,"state"],[232,11,220,13],[232,12,220,14,"codepoint"],[232,21,220,23],[232,24,220,27,"state"],[232,29,220,32],[232,30,220,33,"codepoint"],[232,39,220,42],[232,43,220,46],[232,44,220,47],[232,47,220,52,"byte"],[232,51,220,56],[232,54,220,59],[232,56,220,62],[233,6,221,8,"state"],[233,11,221,13],[233,12,221,14,"utf8seq"],[233,19,221,21],[233,23,221,25],[233,24,221,26],[234,6,222,8],[234,10,222,12,"state"],[234,15,222,17],[234,16,222,18,"utf8seq"],[234,23,222,25],[234,28,222,30],[234,29,222,31],[234,31,222,33],[235,8,223,12,"emit"],[235,12,223,16],[235,13,223,17,"state"],[235,18,223,22],[235,19,223,23,"codepoint"],[235,28,223,32],[235,29,223,33],[236,6,224,8],[237,4,225,4],[238,2,226,0],[239,2,227,0],[240,0,228,0],[241,0,229,0],[242,2,230,7],[242,11,230,16,"base64UrlToUint8Array"],[242,32,230,37,"base64UrlToUint8Array"],[242,33,230,38,"str"],[242,36,230,41],[242,38,230,43],[243,4,231,4],[243,10,231,10,"result"],[243,16,231,16],[243,19,231,19],[243,21,231,21],[244,4,232,4],[244,10,232,10,"state"],[244,15,232,15],[244,18,232,18],[245,6,232,20,"queue"],[245,11,232,25],[245,13,232,27],[245,14,232,28],[246,6,232,30,"queuedBits"],[246,16,232,40],[246,18,232,42],[247,4,232,44],[247,5,232,45],[248,4,233,4],[248,10,233,10,"onByte"],[248,16,233,16],[248,19,233,20,"byte"],[248,23,233,24],[248,27,233,29],[249,6,234,8,"result"],[249,12,234,14],[249,13,234,15,"push"],[249,17,234,19],[249,18,234,20,"byte"],[249,22,234,24],[249,23,234,25],[250,4,235,4],[250,5,235,5],[251,4,236,4],[251,9,236,9],[251,13,236,13,"i"],[251,14,236,14],[251,17,236,17],[251,18,236,18],[251,20,236,20,"i"],[251,21,236,21],[251,24,236,24,"str"],[251,27,236,27],[251,28,236,28,"length"],[251,34,236,34],[251,36,236,36,"i"],[251,37,236,37],[251,41,236,41],[251,42,236,42],[251,44,236,44],[252,6,237,8,"byteFromBase64URL"],[252,23,237,25],[252,24,237,26,"str"],[252,27,237,29],[252,28,237,30,"charCodeAt"],[252,38,237,40],[252,39,237,41,"i"],[252,40,237,42],[252,41,237,43],[252,43,237,45,"state"],[252,48,237,50],[252,50,237,52,"onByte"],[252,56,237,58],[252,57,237,59],[253,4,238,4],[254,4,239,4],[254,11,239,11],[254,15,239,15,"Uint8Array"],[254,25,239,25],[254,26,239,26,"result"],[254,32,239,32],[254,33,239,33],[255,2,240,0],[256,2,241,7],[256,11,241,16,"stringToUint8Array"],[256,29,241,34,"stringToUint8Array"],[256,30,241,35,"str"],[256,33,241,38],[256,35,241,40],[257,4,242,4],[257,10,242,10,"result"],[257,16,242,16],[257,19,242,19],[257,21,242,21],[258,4,243,4,"stringToUTF8"],[258,16,243,16],[258,17,243,17,"str"],[258,20,243,20],[258,22,243,23,"byte"],[258,26,243,27],[258,30,243,32,"result"],[258,36,243,38],[258,37,243,39,"push"],[258,41,243,43],[258,42,243,44,"byte"],[258,46,243,48],[258,47,243,49],[258,48,243,50],[259,4,244,4],[259,11,244,11],[259,15,244,15,"Uint8Array"],[259,25,244,25],[259,26,244,26,"result"],[259,32,244,32],[259,33,244,33],[260,2,245,0],[261,2,246,7],[261,11,246,16,"bytesToBase64URL"],[261,27,246,32,"bytesToBase64URL"],[261,28,246,33,"bytes"],[261,33,246,38],[261,35,246,40],[262,4,247,4],[262,10,247,10,"result"],[262,16,247,16],[262,19,247,19],[262,21,247,21],[263,4,248,4],[263,10,248,10,"state"],[263,15,248,15],[263,18,248,18],[264,6,248,20,"queue"],[264,11,248,25],[264,13,248,27],[264,14,248,28],[265,6,248,30,"queuedBits"],[265,16,248,40],[265,18,248,42],[266,4,248,44],[266,5,248,45],[267,4,249,4],[267,10,249,10,"onChar"],[267,16,249,16],[267,19,249,20,"char"],[267,23,249,24],[267,27,249,29],[268,6,250,8,"result"],[268,12,250,14],[268,13,250,15,"push"],[268,17,250,19],[268,18,250,20,"char"],[268,22,250,24],[268,23,250,25],[269,4,251,4],[269,5,251,5],[270,4,252,4,"bytes"],[270,9,252,9],[270,10,252,10,"forEach"],[270,17,252,17],[270,18,252,19,"byte"],[270,22,252,23],[270,26,252,28,"byteToBase64URL"],[270,41,252,43],[270,42,252,44,"byte"],[270,46,252,48],[270,48,252,50,"state"],[270,53,252,55],[270,55,252,57,"onChar"],[270,61,252,63],[270,62,252,64],[270,63,252,65],[271,4,253,4],[272,4,254,4,"byteToBase64URL"],[272,19,254,19],[272,20,254,20],[272,24,254,24],[272,26,254,26,"state"],[272,31,254,31],[272,33,254,33,"onChar"],[272,39,254,39],[272,40,254,40],[273,4,255,4],[273,11,255,11,"result"],[273,17,255,17],[273,18,255,18,"join"],[273,22,255,22],[273,23,255,23],[273,25,255,25],[273,26,255,26],[274,2,256,0],[275,0,256,1],[275,3]],"functionMap":{"names":["<global>","<anonymous>","byteToBase64URL","byteFromBase64URL","stringToBase64URL","emitter","stringToUTF8$argument_1","stringFromBase64URL","utf8Emit","byteEmit","codepointToUTF8","stringToUTF8","stringFromUTF8","base64UrlToUint8Array","onByte","stringToUint8Array","bytesToBase64URL","onChar","bytes.forEach$argument_0"],"mappings":"AAA;wBCmB;CDY;OEQ;CFmB;OGQ;CHkB;OIQ;oBCE;KDE;sBEE;KFE;CJG;OOO;qBCE;KDE;qBEM;KFE;CPK;OUO;CVwB;OWO;CXc;OYS;CZqC;OaI;mBCG;KDE;CbK;OeC;sBTE,2BS;CfE;OgBC;mBCG;KDE;kBEC,8CF;ChBI"},"hasCjsExports":false},"type":"js/module"}]}