{"dependencies":[{"name":"../lib/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":681},"end":{"line":10,"column":51,"index":732}}],"key":"waQwSI03ELOcvO96++KD0MVyAp4=","exportNames":["*"],"imports":1}},{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":733},"end":{"line":11,"column":47,"index":780}}],"key":"tudpaQjH3OjVUtpmjZhVLT9U2eg=","exportNames":["*"],"imports":1}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":781},"end":{"line":12,"column":54,"index":835}}],"key":"/wMuRavEihVn+ROyUD1wSDV6K9s=","exportNames":["*"],"imports":1}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":836},"end":{"line":13,"column":46,"index":882}}],"key":"MBha6f1BCecZ/poT97RGOQKH7kw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return StorageBucketApi;\n    }\n  });\n  var _libConstants = require(_dependencyMap[0], \"../lib/constants\");\n  var _libErrors = require(_dependencyMap[1], \"../lib/errors\");\n  var _libFetch = require(_dependencyMap[2], \"../lib/fetch\");\n  var _libHelpers = require(_dependencyMap[3], \"../lib/helpers\");\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  class StorageBucketApi {\n    constructor(url, headers = {}, fetch, opts) {\n      this.shouldThrowOnError = false;\n      const baseUrl = new URL(url);\n      // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\n      // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\n      if (opts === null || opts === void 0 ? void 0 : opts.useNewHostname) {\n        const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname);\n        if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\n          baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.');\n        }\n      }\n      this.url = baseUrl.href;\n      this.headers = Object.assign(Object.assign({}, _libConstants.DEFAULT_HEADERS), headers);\n      this.fetch = (0, _libHelpers.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.get)(this.fetch, `${this.url}/bucket`, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.get)(this.fetch, `${this.url}/bucket/${id}`, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\n     *   - default bucket type is `STANDARD`\n     */\n    createBucket(id, options = {\n      public: false\n    }) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.post)(this.fetch, `${this.url}/bucket`, {\n            id,\n            name: id,\n            type: options.type,\n            public: options.public,\n            file_size_limit: options.fileSizeLimit,\n            allowed_mime_types: options.allowedMimeTypes\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n    updateBucket(id, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.put)(this.fetch, `${this.url}/bucket/${id}`, {\n            id,\n            name: id,\n            public: options.public,\n            file_size_limit: options.fileSizeLimit,\n            allowed_mime_types: options.allowedMimeTypes\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.post)(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, _libFetch.remove)(this.fetch, `${this.url}/bucket/${id}`, {}, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, _libErrors.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n  }\n});","lineCount":273,"map":[[7,2,14,15,"Object"],[7,8,14,15],[7,9,14,15,"defineProperty"],[7,23,14,15],[7,24,14,15,"exports"],[7,31,14,15],[8,4,14,15,"enumerable"],[8,14,14,15],[9,4,14,15,"get"],[9,7,14,15],[9,18,14,15,"get"],[9,19,14,15],[10,6,14,15],[10,13,14,15,"StorageBucketApi"],[10,29,14,15],[11,4,14,15],[12,2,14,15],[13,2,10,0],[13,6,10,0,"_libConstants"],[13,19,10,0],[13,22,10,0,"require"],[13,29,10,0],[13,30,10,0,"_dependencyMap"],[13,44,10,0],[14,2,11,0],[14,6,11,0,"_libErrors"],[14,16,11,0],[14,19,11,0,"require"],[14,26,11,0],[14,27,11,0,"_dependencyMap"],[14,41,11,0],[15,2,12,0],[15,6,12,0,"_libFetch"],[15,15,12,0],[15,18,12,0,"require"],[15,25,12,0],[15,26,12,0,"_dependencyMap"],[15,40,12,0],[16,2,13,0],[16,6,13,0,"_libHelpers"],[16,17,13,0],[16,20,13,0,"require"],[16,27,13,0],[16,28,13,0,"_dependencyMap"],[16,42,13,0],[17,2,1,0],[17,6,1,4,"__awaiter"],[17,15,1,13],[17,18,1,17],[17,22,1,21],[17,26,1,25],[17,30,1,29],[17,31,1,30,"__awaiter"],[17,40,1,39],[17,44,1,44],[17,54,1,54,"thisArg"],[17,61,1,61],[17,63,1,63,"_arguments"],[17,73,1,73],[17,75,1,75,"P"],[17,76,1,76],[17,78,1,78,"generator"],[17,87,1,87],[17,89,1,89],[18,4,2,4],[18,13,2,13,"adopt"],[18,18,2,18,"adopt"],[18,19,2,19,"value"],[18,24,2,24],[18,26,2,26],[19,6,2,28],[19,13,2,35,"value"],[19,18,2,40],[19,30,2,52,"P"],[19,31,2,53],[19,34,2,56,"value"],[19,39,2,61],[19,42,2,64],[19,46,2,68,"P"],[19,47,2,69],[19,48,2,70],[19,58,2,80,"resolve"],[19,65,2,87],[19,67,2,89],[20,8,2,91,"resolve"],[20,15,2,98],[20,16,2,99,"value"],[20,21,2,104],[20,22,2,105],[21,6,2,107],[21,7,2,108],[21,8,2,109],[22,4,2,111],[23,4,3,4],[23,11,3,11],[23,16,3,16,"P"],[23,17,3,17],[23,22,3,22,"P"],[23,23,3,23],[23,26,3,26,"Promise"],[23,33,3,33],[23,34,3,34],[23,36,3,36],[23,46,3,46,"resolve"],[23,53,3,53],[23,55,3,55,"reject"],[23,61,3,61],[23,63,3,63],[24,6,4,8],[24,15,4,17,"fulfilled"],[24,24,4,26,"fulfilled"],[24,25,4,27,"value"],[24,30,4,32],[24,32,4,34],[25,8,4,36],[25,12,4,40],[26,10,4,42,"step"],[26,14,4,46],[26,15,4,47,"generator"],[26,24,4,56],[26,25,4,57,"next"],[26,29,4,61],[26,30,4,62,"value"],[26,35,4,67],[26,36,4,68],[26,37,4,69],[27,8,4,71],[27,9,4,72],[27,10,4,73],[27,17,4,80,"e"],[27,18,4,81],[27,20,4,83],[28,10,4,85,"reject"],[28,16,4,91],[28,17,4,92,"e"],[28,18,4,93],[28,19,4,94],[29,8,4,96],[30,6,4,98],[31,6,5,8],[31,15,5,17,"rejected"],[31,23,5,25,"rejected"],[31,24,5,26,"value"],[31,29,5,31],[31,31,5,33],[32,8,5,35],[32,12,5,39],[33,10,5,41,"step"],[33,14,5,45],[33,15,5,46,"generator"],[33,24,5,55],[33,25,5,56],[33,32,5,63],[33,33,5,64],[33,34,5,65,"value"],[33,39,5,70],[33,40,5,71],[33,41,5,72],[34,8,5,74],[34,9,5,75],[34,10,5,76],[34,17,5,83,"e"],[34,18,5,84],[34,20,5,86],[35,10,5,88,"reject"],[35,16,5,94],[35,17,5,95,"e"],[35,18,5,96],[35,19,5,97],[36,8,5,99],[37,6,5,101],[38,6,6,8],[38,15,6,17,"step"],[38,19,6,21,"step"],[38,20,6,22,"result"],[38,26,6,28],[38,28,6,30],[39,8,6,32,"result"],[39,14,6,38],[39,15,6,39,"done"],[39,19,6,43],[39,22,6,46,"resolve"],[39,29,6,53],[39,30,6,54,"result"],[39,36,6,60],[39,37,6,61,"value"],[39,42,6,66],[39,43,6,67],[39,46,6,70,"adopt"],[39,51,6,75],[39,52,6,76,"result"],[39,58,6,82],[39,59,6,83,"value"],[39,64,6,88],[39,65,6,89],[39,66,6,90,"then"],[39,70,6,94],[39,71,6,95,"fulfilled"],[39,80,6,104],[39,82,6,106,"rejected"],[39,90,6,114],[39,91,6,115],[40,6,6,117],[41,6,7,8,"step"],[41,10,7,12],[41,11,7,13],[41,12,7,14,"generator"],[41,21,7,23],[41,24,7,26,"generator"],[41,33,7,35],[41,34,7,36,"apply"],[41,39,7,41],[41,40,7,42,"thisArg"],[41,47,7,49],[41,49,7,51,"_arguments"],[41,59,7,61],[41,63,7,65],[41,65,7,67],[41,66,7,68],[41,68,7,70,"next"],[41,72,7,74],[41,73,7,75],[41,74,7,76],[41,75,7,77],[42,4,8,4],[42,5,8,5],[42,6,8,6],[43,2,9,0],[43,3,9,1],[44,2,14,15],[44,8,14,21,"StorageBucketApi"],[44,24,14,37],[44,25,14,38],[45,4,15,4,"constructor"],[45,15,15,15,"constructor"],[45,16,15,16,"url"],[45,19,15,19],[45,21,15,21,"headers"],[45,28,15,28],[45,31,15,31],[45,32,15,32],[45,33,15,33],[45,35,15,35,"fetch"],[45,40,15,40],[45,42,15,42,"opts"],[45,46,15,46],[45,48,15,48],[46,6,16,8],[46,10,16,12],[46,11,16,13,"shouldThrowOnError"],[46,29,16,31],[46,32,16,34],[46,37,16,39],[47,6,17,8],[47,12,17,14,"baseUrl"],[47,19,17,21],[47,22,17,24],[47,26,17,28,"URL"],[47,29,17,31],[47,30,17,32,"url"],[47,33,17,35],[47,34,17,36],[48,6,18,8],[49,6,19,8],[50,6,20,8],[50,10,20,12,"opts"],[50,14,20,16],[50,19,20,21],[50,23,20,25],[50,27,20,29,"opts"],[50,31,20,33],[50,36,20,38],[50,41,20,43],[50,42,20,44],[50,45,20,47],[50,50,20,52],[50,51,20,53],[50,54,20,56,"opts"],[50,58,20,60],[50,59,20,61,"useNewHostname"],[50,73,20,75],[50,75,20,77],[51,8,21,12],[51,14,21,18,"isSupabaseHost"],[51,28,21,32],[51,31,21,35],[51,55,21,59],[51,56,21,60,"test"],[51,60,21,64],[51,61,21,65,"baseUrl"],[51,68,21,72],[51,69,21,73,"hostname"],[51,77,21,81],[51,78,21,82],[52,8,22,12],[52,12,22,16,"isSupabaseHost"],[52,26,22,30],[52,30,22,34],[52,31,22,35,"baseUrl"],[52,38,22,42],[52,39,22,43,"hostname"],[52,47,22,51],[52,48,22,52,"includes"],[52,56,22,60],[52,57,22,61],[52,76,22,80],[52,77,22,81],[52,79,22,83],[53,10,23,16,"baseUrl"],[53,17,23,23],[53,18,23,24,"hostname"],[53,26,23,32],[53,29,23,35,"baseUrl"],[53,36,23,42],[53,37,23,43,"hostname"],[53,45,23,51],[53,46,23,52,"replace"],[53,53,23,59],[53,54,23,60],[53,65,23,71],[53,67,23,73],[53,86,23,92],[53,87,23,93],[54,8,24,12],[55,6,25,8],[56,6,26,8],[56,10,26,12],[56,11,26,13,"url"],[56,14,26,16],[56,17,26,19,"baseUrl"],[56,24,26,26],[56,25,26,27,"href"],[56,29,26,31],[57,6,27,8],[57,10,27,12],[57,11,27,13,"headers"],[57,18,27,20],[57,21,27,23,"Object"],[57,27,27,29],[57,28,27,30,"assign"],[57,34,27,36],[57,35,27,37,"Object"],[57,41,27,43],[57,42,27,44,"assign"],[57,48,27,50],[57,49,27,51],[57,50,27,52],[57,51,27,53],[57,53,27,55,"DEFAULT_HEADERS"],[57,66,27,70],[57,67,27,70,"DEFAULT_HEADERS"],[57,82,27,70],[57,83,27,71],[57,85,27,73,"headers"],[57,92,27,80],[57,93,27,81],[58,6,28,8],[58,10,28,12],[58,11,28,13,"fetch"],[58,16,28,18],[58,19,28,21],[58,23,28,21,"resolveFetch"],[58,34,28,33],[58,35,28,33,"resolveFetch"],[58,47,28,33],[58,49,28,34,"fetch"],[58,54,28,39],[58,55,28,40],[59,4,29,4],[60,4,30,4],[61,0,31,0],[62,0,32,0],[63,4,33,4,"throwOnError"],[63,16,33,16,"throwOnError"],[63,17,33,16],[63,19,33,19],[64,6,34,8],[64,10,34,12],[64,11,34,13,"shouldThrowOnError"],[64,29,34,31],[64,32,34,34],[64,36,34,38],[65,6,35,8],[65,13,35,15],[65,17,35,19],[66,4,36,4],[67,4,37,4],[68,0,38,0],[69,0,39,0],[70,4,40,4,"listBuckets"],[70,15,40,15,"listBuckets"],[70,16,40,15],[70,18,40,18],[71,6,41,8],[71,13,41,15,"__awaiter"],[71,22,41,24],[71,23,41,25],[71,27,41,29],[71,29,41,31],[71,34,41,36],[71,35,41,37],[71,37,41,39],[71,42,41,44],[71,43,41,45],[71,45,41,47],[71,58,41,60],[72,8,42,12],[72,12,42,16],[73,10,43,16],[73,16,43,22,"data"],[73,20,43,26],[73,23,43,29],[73,29,43,35],[73,33,43,35,"get"],[73,42,43,38],[73,43,43,38,"get"],[73,46,43,38],[73,48,43,39],[73,52,43,43],[73,53,43,44,"fetch"],[73,58,43,49],[73,60,43,51],[73,63,43,54],[73,67,43,58],[73,68,43,59,"url"],[73,71,43,62],[73,80,43,71],[73,82,43,73],[74,12,43,75,"headers"],[74,19,43,82],[74,21,43,84],[74,25,43,88],[74,26,43,89,"headers"],[75,10,43,97],[75,11,43,98],[75,12,43,99],[76,10,44,16],[76,17,44,23],[77,12,44,25,"data"],[77,16,44,29],[78,12,44,31,"error"],[78,17,44,36],[78,19,44,38],[79,10,44,43],[79,11,44,44],[80,8,45,12],[80,9,45,13],[80,10,46,12],[80,17,46,19,"error"],[80,22,46,24],[80,24,46,26],[81,10,47,16],[81,14,47,20],[81,18,47,24],[81,19,47,25,"shouldThrowOnError"],[81,37,47,43],[81,39,47,45],[82,12,48,20],[82,18,48,26,"error"],[82,23,48,31],[83,10,49,16],[84,10,50,16],[84,14,50,20],[84,18,50,20,"isStorageError"],[84,28,50,34],[84,29,50,34,"isStorageError"],[84,43,50,34],[84,45,50,35,"error"],[84,50,50,40],[84,51,50,41],[84,53,50,43],[85,12,51,20],[85,19,51,27],[86,14,51,29,"data"],[86,18,51,33],[86,20,51,35],[86,24,51,39],[87,14,51,41,"error"],[88,12,51,47],[88,13,51,48],[89,10,52,16],[90,10,53,16],[90,16,53,22,"error"],[90,21,53,27],[91,8,54,12],[92,6,55,8],[92,7,55,9],[92,8,55,10],[93,4,56,4],[94,4,57,4],[95,0,58,0],[96,0,59,0],[97,0,60,0],[98,0,61,0],[99,4,62,4,"getBucket"],[99,13,62,13,"getBucket"],[99,14,62,14,"id"],[99,16,62,16],[99,18,62,18],[100,6,63,8],[100,13,63,15,"__awaiter"],[100,22,63,24],[100,23,63,25],[100,27,63,29],[100,29,63,31],[100,34,63,36],[100,35,63,37],[100,37,63,39],[100,42,63,44],[100,43,63,45],[100,45,63,47],[100,58,63,60],[101,8,64,12],[101,12,64,16],[102,10,65,16],[102,16,65,22,"data"],[102,20,65,26],[102,23,65,29],[102,29,65,35],[102,33,65,35,"get"],[102,42,65,38],[102,43,65,38,"get"],[102,46,65,38],[102,48,65,39],[102,52,65,43],[102,53,65,44,"fetch"],[102,58,65,49],[102,60,65,51],[102,63,65,54],[102,67,65,58],[102,68,65,59,"url"],[102,71,65,62],[102,82,65,73,"id"],[102,84,65,75],[102,86,65,77],[102,88,65,79],[103,12,65,81,"headers"],[103,19,65,88],[103,21,65,90],[103,25,65,94],[103,26,65,95,"headers"],[104,10,65,103],[104,11,65,104],[104,12,65,105],[105,10,66,16],[105,17,66,23],[106,12,66,25,"data"],[106,16,66,29],[107,12,66,31,"error"],[107,17,66,36],[107,19,66,38],[108,10,66,43],[108,11,66,44],[109,8,67,12],[109,9,67,13],[109,10,68,12],[109,17,68,19,"error"],[109,22,68,24],[109,24,68,26],[110,10,69,16],[110,14,69,20],[110,18,69,24],[110,19,69,25,"shouldThrowOnError"],[110,37,69,43],[110,39,69,45],[111,12,70,20],[111,18,70,26,"error"],[111,23,70,31],[112,10,71,16],[113,10,72,16],[113,14,72,20],[113,18,72,20,"isStorageError"],[113,28,72,34],[113,29,72,34,"isStorageError"],[113,43,72,34],[113,45,72,35,"error"],[113,50,72,40],[113,51,72,41],[113,53,72,43],[114,12,73,20],[114,19,73,27],[115,14,73,29,"data"],[115,18,73,33],[115,20,73,35],[115,24,73,39],[116,14,73,41,"error"],[117,12,73,47],[117,13,73,48],[118,10,74,16],[119,10,75,16],[119,16,75,22,"error"],[119,21,75,27],[120,8,76,12],[121,6,77,8],[121,7,77,9],[121,8,77,10],[122,4,78,4],[123,4,79,4],[124,0,80,0],[125,0,81,0],[126,0,82,0],[127,0,83,0],[128,0,84,0],[129,0,85,0],[130,0,86,0],[131,0,87,0],[132,0,88,0],[133,0,89,0],[134,0,90,0],[135,0,91,0],[136,0,92,0],[137,0,93,0],[138,4,94,4,"createBucket"],[138,16,94,16,"createBucket"],[138,17,94,17,"id"],[138,19,94,19],[138,21,94,21,"options"],[138,28,94,28],[138,31,94,31],[139,6,95,8,"public"],[139,12,95,14],[139,14,95,16],[140,4,96,4],[140,5,96,5],[140,7,96,7],[141,6,97,8],[141,13,97,15,"__awaiter"],[141,22,97,24],[141,23,97,25],[141,27,97,29],[141,29,97,31],[141,34,97,36],[141,35,97,37],[141,37,97,39],[141,42,97,44],[141,43,97,45],[141,45,97,47],[141,58,97,60],[142,8,98,12],[142,12,98,16],[143,10,99,16],[143,16,99,22,"data"],[143,20,99,26],[143,23,99,29],[143,29,99,35],[143,33,99,35,"post"],[143,42,99,39],[143,43,99,39,"post"],[143,47,99,39],[143,49,99,40],[143,53,99,44],[143,54,99,45,"fetch"],[143,59,99,50],[143,61,99,52],[143,64,99,55],[143,68,99,59],[143,69,99,60,"url"],[143,72,99,63],[143,81,99,72],[143,83,99,74],[144,12,100,20,"id"],[144,14,100,22],[145,12,101,20,"name"],[145,16,101,24],[145,18,101,26,"id"],[145,20,101,28],[146,12,102,20,"type"],[146,16,102,24],[146,18,102,26,"options"],[146,25,102,33],[146,26,102,34,"type"],[146,30,102,38],[147,12,103,20,"public"],[147,18,103,26],[147,20,103,28,"options"],[147,27,103,35],[147,28,103,36,"public"],[147,34,103,42],[148,12,104,20,"file_size_limit"],[148,27,104,35],[148,29,104,37,"options"],[148,36,104,44],[148,37,104,45,"fileSizeLimit"],[148,50,104,58],[149,12,105,20,"allowed_mime_types"],[149,30,105,38],[149,32,105,40,"options"],[149,39,105,47],[149,40,105,48,"allowedMimeTypes"],[150,10,106,16],[150,11,106,17],[150,13,106,19],[151,12,106,21,"headers"],[151,19,106,28],[151,21,106,30],[151,25,106,34],[151,26,106,35,"headers"],[152,10,106,43],[152,11,106,44],[152,12,106,45],[153,10,107,16],[153,17,107,23],[154,12,107,25,"data"],[154,16,107,29],[155,12,107,31,"error"],[155,17,107,36],[155,19,107,38],[156,10,107,43],[156,11,107,44],[157,8,108,12],[157,9,108,13],[157,10,109,12],[157,17,109,19,"error"],[157,22,109,24],[157,24,109,26],[158,10,110,16],[158,14,110,20],[158,18,110,24],[158,19,110,25,"shouldThrowOnError"],[158,37,110,43],[158,39,110,45],[159,12,111,20],[159,18,111,26,"error"],[159,23,111,31],[160,10,112,16],[161,10,113,16],[161,14,113,20],[161,18,113,20,"isStorageError"],[161,28,113,34],[161,29,113,34,"isStorageError"],[161,43,113,34],[161,45,113,35,"error"],[161,50,113,40],[161,51,113,41],[161,53,113,43],[162,12,114,20],[162,19,114,27],[163,14,114,29,"data"],[163,18,114,33],[163,20,114,35],[163,24,114,39],[164,14,114,41,"error"],[165,12,114,47],[165,13,114,48],[166,10,115,16],[167,10,116,16],[167,16,116,22,"error"],[167,21,116,27],[168,8,117,12],[169,6,118,8],[169,7,118,9],[169,8,118,10],[170,4,119,4],[171,4,120,4],[172,0,121,0],[173,0,122,0],[174,0,123,0],[175,0,124,0],[176,0,125,0],[177,0,126,0],[178,0,127,0],[179,0,128,0],[180,0,129,0],[181,0,130,0],[182,0,131,0],[183,4,132,4,"updateBucket"],[183,16,132,16,"updateBucket"],[183,17,132,17,"id"],[183,19,132,19],[183,21,132,21,"options"],[183,28,132,28],[183,30,132,30],[184,6,133,8],[184,13,133,15,"__awaiter"],[184,22,133,24],[184,23,133,25],[184,27,133,29],[184,29,133,31],[184,34,133,36],[184,35,133,37],[184,37,133,39],[184,42,133,44],[184,43,133,45],[184,45,133,47],[184,58,133,60],[185,8,134,12],[185,12,134,16],[186,10,135,16],[186,16,135,22,"data"],[186,20,135,26],[186,23,135,29],[186,29,135,35],[186,33,135,35,"put"],[186,42,135,38],[186,43,135,38,"put"],[186,46,135,38],[186,48,135,39],[186,52,135,43],[186,53,135,44,"fetch"],[186,58,135,49],[186,60,135,51],[186,63,135,54],[186,67,135,58],[186,68,135,59,"url"],[186,71,135,62],[186,82,135,73,"id"],[186,84,135,75],[186,86,135,77],[186,88,135,79],[187,12,136,20,"id"],[187,14,136,22],[188,12,137,20,"name"],[188,16,137,24],[188,18,137,26,"id"],[188,20,137,28],[189,12,138,20,"public"],[189,18,138,26],[189,20,138,28,"options"],[189,27,138,35],[189,28,138,36,"public"],[189,34,138,42],[190,12,139,20,"file_size_limit"],[190,27,139,35],[190,29,139,37,"options"],[190,36,139,44],[190,37,139,45,"fileSizeLimit"],[190,50,139,58],[191,12,140,20,"allowed_mime_types"],[191,30,140,38],[191,32,140,40,"options"],[191,39,140,47],[191,40,140,48,"allowedMimeTypes"],[192,10,141,16],[192,11,141,17],[192,13,141,19],[193,12,141,21,"headers"],[193,19,141,28],[193,21,141,30],[193,25,141,34],[193,26,141,35,"headers"],[194,10,141,43],[194,11,141,44],[194,12,141,45],[195,10,142,16],[195,17,142,23],[196,12,142,25,"data"],[196,16,142,29],[197,12,142,31,"error"],[197,17,142,36],[197,19,142,38],[198,10,142,43],[198,11,142,44],[199,8,143,12],[199,9,143,13],[199,10,144,12],[199,17,144,19,"error"],[199,22,144,24],[199,24,144,26],[200,10,145,16],[200,14,145,20],[200,18,145,24],[200,19,145,25,"shouldThrowOnError"],[200,37,145,43],[200,39,145,45],[201,12,146,20],[201,18,146,26,"error"],[201,23,146,31],[202,10,147,16],[203,10,148,16],[203,14,148,20],[203,18,148,20,"isStorageError"],[203,28,148,34],[203,29,148,34,"isStorageError"],[203,43,148,34],[203,45,148,35,"error"],[203,50,148,40],[203,51,148,41],[203,53,148,43],[204,12,149,20],[204,19,149,27],[205,14,149,29,"data"],[205,18,149,33],[205,20,149,35],[205,24,149,39],[206,14,149,41,"error"],[207,12,149,47],[207,13,149,48],[208,10,150,16],[209,10,151,16],[209,16,151,22,"error"],[209,21,151,27],[210,8,152,12],[211,6,153,8],[211,7,153,9],[211,8,153,10],[212,4,154,4],[213,4,155,4],[214,0,156,0],[215,0,157,0],[216,0,158,0],[217,0,159,0],[218,4,160,4,"emptyBucket"],[218,15,160,15,"emptyBucket"],[218,16,160,16,"id"],[218,18,160,18],[218,20,160,20],[219,6,161,8],[219,13,161,15,"__awaiter"],[219,22,161,24],[219,23,161,25],[219,27,161,29],[219,29,161,31],[219,34,161,36],[219,35,161,37],[219,37,161,39],[219,42,161,44],[219,43,161,45],[219,45,161,47],[219,58,161,60],[220,8,162,12],[220,12,162,16],[221,10,163,16],[221,16,163,22,"data"],[221,20,163,26],[221,23,163,29],[221,29,163,35],[221,33,163,35,"post"],[221,42,163,39],[221,43,163,39,"post"],[221,47,163,39],[221,49,163,40],[221,53,163,44],[221,54,163,45,"fetch"],[221,59,163,50],[221,61,163,52],[221,64,163,55],[221,68,163,59],[221,69,163,60,"url"],[221,72,163,63],[221,83,163,74,"id"],[221,85,163,76],[221,93,163,84],[221,95,163,86],[221,96,163,87],[221,97,163,88],[221,99,163,90],[222,12,163,92,"headers"],[222,19,163,99],[222,21,163,101],[222,25,163,105],[222,26,163,106,"headers"],[223,10,163,114],[223,11,163,115],[223,12,163,116],[224,10,164,16],[224,17,164,23],[225,12,164,25,"data"],[225,16,164,29],[226,12,164,31,"error"],[226,17,164,36],[226,19,164,38],[227,10,164,43],[227,11,164,44],[228,8,165,12],[228,9,165,13],[228,10,166,12],[228,17,166,19,"error"],[228,22,166,24],[228,24,166,26],[229,10,167,16],[229,14,167,20],[229,18,167,24],[229,19,167,25,"shouldThrowOnError"],[229,37,167,43],[229,39,167,45],[230,12,168,20],[230,18,168,26,"error"],[230,23,168,31],[231,10,169,16],[232,10,170,16],[232,14,170,20],[232,18,170,20,"isStorageError"],[232,28,170,34],[232,29,170,34,"isStorageError"],[232,43,170,34],[232,45,170,35,"error"],[232,50,170,40],[232,51,170,41],[232,53,170,43],[233,12,171,20],[233,19,171,27],[234,14,171,29,"data"],[234,18,171,33],[234,20,171,35],[234,24,171,39],[235,14,171,41,"error"],[236,12,171,47],[236,13,171,48],[237,10,172,16],[238,10,173,16],[238,16,173,22,"error"],[238,21,173,27],[239,8,174,12],[240,6,175,8],[240,7,175,9],[240,8,175,10],[241,4,176,4],[242,4,177,4],[243,0,178,0],[244,0,179,0],[245,0,180,0],[246,0,181,0],[247,0,182,0],[248,4,183,4,"deleteBucket"],[248,16,183,16,"deleteBucket"],[248,17,183,17,"id"],[248,19,183,19],[248,21,183,21],[249,6,184,8],[249,13,184,15,"__awaiter"],[249,22,184,24],[249,23,184,25],[249,27,184,29],[249,29,184,31],[249,34,184,36],[249,35,184,37],[249,37,184,39],[249,42,184,44],[249,43,184,45],[249,45,184,47],[249,58,184,60],[250,8,185,12],[250,12,185,16],[251,10,186,16],[251,16,186,22,"data"],[251,20,186,26],[251,23,186,29],[251,29,186,35],[251,33,186,35,"remove"],[251,42,186,41],[251,43,186,41,"remove"],[251,49,186,41],[251,51,186,42],[251,55,186,46],[251,56,186,47,"fetch"],[251,61,186,52],[251,63,186,54],[251,66,186,57],[251,70,186,61],[251,71,186,62,"url"],[251,74,186,65],[251,85,186,76,"id"],[251,87,186,78],[251,89,186,80],[251,91,186,82],[251,92,186,83],[251,93,186,84],[251,95,186,86],[252,12,186,88,"headers"],[252,19,186,95],[252,21,186,97],[252,25,186,101],[252,26,186,102,"headers"],[253,10,186,110],[253,11,186,111],[253,12,186,112],[254,10,187,16],[254,17,187,23],[255,12,187,25,"data"],[255,16,187,29],[256,12,187,31,"error"],[256,17,187,36],[256,19,187,38],[257,10,187,43],[257,11,187,44],[258,8,188,12],[258,9,188,13],[258,10,189,12],[258,17,189,19,"error"],[258,22,189,24],[258,24,189,26],[259,10,190,16],[259,14,190,20],[259,18,190,24],[259,19,190,25,"shouldThrowOnError"],[259,37,190,43],[259,39,190,45],[260,12,191,20],[260,18,191,26,"error"],[260,23,191,31],[261,10,192,16],[262,10,193,16],[262,14,193,20],[262,18,193,20,"isStorageError"],[262,28,193,34],[262,29,193,34,"isStorageError"],[262,43,193,34],[262,45,193,35,"error"],[262,50,193,40],[262,51,193,41],[262,53,193,43],[263,12,194,20],[263,19,194,27],[264,14,194,29,"data"],[264,18,194,33],[264,20,194,35],[264,24,194,39],[265,14,194,41,"error"],[266,12,194,47],[266,13,194,48],[267,10,195,16],[268,10,196,16],[268,16,196,22,"error"],[268,21,196,27],[269,8,197,12],[270,6,198,8],[270,7,198,9],[270,8,198,10],[271,4,199,4],[272,2,200,0],[273,0,200,1],[273,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","StorageBucketApi","constructor","throwOnError","listBuckets","__awaiter$argument_3","getBucket","createBucket","updateBucket","emptyBucket","deleteBucket"],"mappings":"AAA,4CC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;eOK;ICC;KDc;IEI;KFG;IGI;+CCC;SDc;KHC;IKM;+CDC;SCc;KLC;IMgB;+CFG;SEqB;KNC;IOa;+CHC;SGoB;KPC;IQM;+CJC;SIc;KRC;ISO;+CLC;SKc;KTC;CPC"},"hasCjsExports":false},"type":"js/module"}]}