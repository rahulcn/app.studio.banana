{"dependencies":[{"name":"./lib/websocket-factory","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":44,"index":1619},"end":{"line":39,"column":78,"index":1653}}],"key":"lRz+66J0Lcsacu60DEtZ56ZNEzw=","exportNames":["*"],"imports":1}},{"name":"./lib/constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":20,"index":1676},"end":{"line":40,"column":46,"index":1702}}],"key":"Tozkr70n9lVAcLLAJew2JSVOK9Y=","exportNames":["*"],"imports":1}},{"name":"./lib/serializer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":37,"index":1741},"end":{"line":41,"column":64,"index":1768}}],"key":"w6PS/DWxGJvYtDNZkOtbDcmG8Nw=","exportNames":["*"],"imports":1}},{"name":"./lib/timer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":42,"column":32,"index":1803},"end":{"line":42,"column":54,"index":1825}}],"key":"w0qAHA9+ZFUiKikDuQKxEElN35A=","exportNames":["*"],"imports":1}},{"name":"./lib/transformers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":43,"column":23,"index":1851},"end":{"line":43,"column":52,"index":1880}}],"key":"WvmsZDe1rMnc+jBORnBzUNvCIm8=","exportNames":["*"],"imports":1}},{"name":"./RealtimeChannel","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":42,"index":1924},"end":{"line":44,"column":70,"index":1952}}],"key":"XSu+A4jXCyp4V+QR2OkNPazTe3s=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const websocket_factory_1 = __importDefault(require(_dependencyMap[0], \"./lib/websocket-factory\"));\n  const constants_1 = require(_dependencyMap[1], \"./lib/constants\");\n  const serializer_1 = __importDefault(require(_dependencyMap[2], \"./lib/serializer\"));\n  const timer_1 = __importDefault(require(_dependencyMap[3], \"./lib/timer\"));\n  const transformers_1 = require(_dependencyMap[4], \"./lib/transformers\");\n  const RealtimeChannel_1 = __importDefault(require(_dependencyMap[5], \"./RealtimeChannel\"));\n  const noop = () => {};\n  // Connection-related constants\n  const CONNECTION_TIMEOUTS = {\n    HEARTBEAT_INTERVAL: 25000,\n    RECONNECT_DELAY: 10,\n    HEARTBEAT_TIMEOUT_FALLBACK: 100\n  };\n  const RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\n  const DEFAULT_RECONNECT_FALLBACK = 10000;\n  const WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\n  class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.heartbeatCallback The optional function to handle heartbeat status.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.logLevel Sets the log level for Realtime\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    constructor(endPoint, options) {\n      var _a;\n      this.accessTokenValue = null;\n      this.apiKey = null;\n      this.channels = new Array();\n      this.endPoint = '';\n      this.httpEndpoint = '';\n      /** @deprecated headers cannot be set on websocket connections */\n      this.headers = {};\n      this.params = {};\n      this.timeout = constants_1.DEFAULT_TIMEOUT;\n      this.transport = null;\n      this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n      this.heartbeatTimer = undefined;\n      this.pendingHeartbeatRef = null;\n      this.heartbeatCallback = noop;\n      this.ref = 0;\n      this.reconnectTimer = null;\n      this.logger = noop;\n      this.conn = null;\n      this.sendBuffer = [];\n      this.serializer = new serializer_1.default();\n      this.stateChangeCallbacks = {\n        open: [],\n        close: [],\n        error: [],\n        message: []\n      };\n      this.accessToken = null;\n      this._connectionState = 'disconnected';\n      this._wasManualDisconnect = false;\n      this._authPromise = null;\n      /**\n       * Use either custom fetch, if provided, or default fetch to make HTTP requests\n       *\n       * @internal\n       */\n      this._resolveFetch = customFetch => {\n        let _fetch;\n        if (customFetch) {\n          _fetch = customFetch;\n        } else if (typeof fetch === 'undefined') {\n          // Node.js environment without native fetch\n          _fetch = (...args) => Promise.resolve(`${'@supabase/node-fetch'}`).then(s => __importStar(require(s))).then(({\n            default: fetch\n          }) => fetch(...args)).catch(error => {\n            throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` + `This is required for HTTP requests in Node.js environments without native fetch.`);\n          });\n        } else {\n          _fetch = fetch;\n        }\n        return (...args) => _fetch(...args);\n      };\n      // Validate required parameters\n      if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {\n        throw new Error('API key is required to connect to Realtime');\n      }\n      this.apiKey = options.params.apikey;\n      // Initialize endpoint URLs\n      this.endPoint = `${endPoint}/${constants_1.TRANSPORTS.websocket}`;\n      this.httpEndpoint = (0, transformers_1.httpEndpointURL)(endPoint);\n      this._initializeOptions(options);\n      this._setupReconnectionTimer();\n      this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n      // Skip if already connecting, disconnecting, or connected\n      if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {\n        return;\n      }\n      this._setConnectionState('connecting');\n      this._setAuthSafely('connect');\n      // Establish WebSocket connection\n      if (this.transport) {\n        // Use custom transport if provided\n        this.conn = new this.transport(this.endpointURL());\n      } else {\n        // Try to use native WebSocket\n        try {\n          this.conn = websocket_factory_1.default.createWebSocket(this.endpointURL());\n        } catch (error) {\n          this._setConnectionState('disconnected');\n          const errorMessage = error.message;\n          // Provide helpful error message based on environment\n          if (errorMessage.includes('Node.js')) {\n            throw new Error(`${errorMessage}\\n\\n` + 'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' + 'Option 1: Use Node.js 22+ which has native WebSocket support\\n' + 'Option 2: Install and provide the \"ws\" package:\\n\\n' + '  npm install ws\\n\\n' + '  import ws from \"ws\"\\n' + '  const client = new RealtimeClient(url, {\\n' + '    ...options,\\n' + '    transport: ws\\n' + '  })');\n          }\n          throw new Error(`WebSocket not available: ${errorMessage}`);\n        }\n      }\n      this._setupConnectionHandlers();\n    }\n    /**\n     * Returns the URL of the websocket.\n     * @returns string The URL of the websocket.\n     */\n    endpointURL() {\n      return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n        vsn: constants_1.VSN\n      }));\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n      if (this.isDisconnecting()) {\n        return;\n      }\n      this._setConnectionState('disconnecting', true);\n      if (this.conn) {\n        // Setup fallback timer to prevent hanging in disconnecting state\n        const fallbackTimer = setTimeout(() => {\n          this._setConnectionState('disconnected');\n        }, 100);\n        this.conn.onclose = () => {\n          clearTimeout(fallbackTimer);\n          this._setConnectionState('disconnected');\n        };\n        // Close the WebSocket connection\n        if (code) {\n          this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n        } else {\n          this.conn.close();\n        }\n        this._teardownConnection();\n      } else {\n        this._setConnectionState('disconnected');\n      }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n      return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n      const status = await channel.unsubscribe();\n      if (this.channels.length === 0) {\n        this.disconnect();\n      }\n      return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n      const values_1 = await Promise.all(this.channels.map(channel => channel.unsubscribe()));\n      this.channels = [];\n      this.disconnect();\n      return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n      this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n      switch (this.conn && this.conn.readyState) {\n        case constants_1.SOCKET_STATES.connecting:\n          return constants_1.CONNECTION_STATE.Connecting;\n        case constants_1.SOCKET_STATES.open:\n          return constants_1.CONNECTION_STATE.Open;\n        case constants_1.SOCKET_STATES.closing:\n          return constants_1.CONNECTION_STATE.Closing;\n        default:\n          return constants_1.CONNECTION_STATE.Closed;\n      }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n      return this.connectionState() === constants_1.CONNECTION_STATE.Open;\n    }\n    /**\n     * Returns `true` if the connection is currently connecting.\n     */\n    isConnecting() {\n      return this._connectionState === 'connecting';\n    }\n    /**\n     * Returns `true` if the connection is currently disconnecting.\n     */\n    isDisconnecting() {\n      return this._connectionState === 'disconnecting';\n    }\n    channel(topic, params = {\n      config: {}\n    }) {\n      const realtimeTopic = `realtime:${topic}`;\n      const exists = this.getChannels().find(c => c.topic === realtimeTopic);\n      if (!exists) {\n        const chan = new RealtimeChannel_1.default(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n      } else {\n        return exists;\n      }\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n      const {\n        topic,\n        event,\n        payload,\n        ref\n      } = data;\n      const callback = () => {\n        this.encode(data, result => {\n          var _a;\n          (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n        });\n      };\n      this.log('push', `${topic} ${event} (${ref})`, payload);\n      if (this.isConnected()) {\n        callback();\n      } else {\n        this.sendBuffer.push(callback);\n      }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\n     *\n     * On callback used, it will set the value of the token internal to the client.\n     *\n     * @param token A JWT string to override the token set on the client.\n     */\n    async setAuth(token = null) {\n      this._authPromise = this._performAuth(token);\n      try {\n        await this._authPromise;\n      } finally {\n        this._authPromise = null;\n      }\n    }\n    /**\n     * Sends a heartbeat message if the socket is connected.\n     */\n    async sendHeartbeat() {\n      var _a;\n      if (!this.isConnected()) {\n        try {\n          this.heartbeatCallback('disconnected');\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e);\n        }\n        return;\n      }\n      // Handle heartbeat timeout and force reconnection if needed\n      if (this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n        this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n        try {\n          this.heartbeatCallback('timeout');\n        } catch (e) {\n          this.log('error', 'error in heartbeat callback', e);\n        }\n        // Force reconnection after heartbeat timeout\n        this._wasManualDisconnect = false;\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(constants_1.WS_CLOSE_NORMAL, 'heartbeat timeout');\n        setTimeout(() => {\n          var _a;\n          if (!this.isConnected()) {\n            (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n          }\n        }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\n        return;\n      }\n      // Send heartbeat message to server\n      this.pendingHeartbeatRef = this._makeRef();\n      this.push({\n        topic: 'phoenix',\n        event: 'heartbeat',\n        payload: {},\n        ref: this.pendingHeartbeatRef\n      });\n      try {\n        this.heartbeatCallback('sent');\n      } catch (e) {\n        this.log('error', 'error in heartbeat callback', e);\n      }\n      this._setAuthSafely('heartbeat');\n    }\n    onHeartbeat(callback) {\n      this.heartbeatCallback = callback;\n    }\n    /**\n     * Flushes send buffer\n     */\n    flushSendBuffer() {\n      if (this.isConnected() && this.sendBuffer.length > 0) {\n        this.sendBuffer.forEach(callback => callback());\n        this.sendBuffer = [];\n      }\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n      let newRef = this.ref + 1;\n      if (newRef === this.ref) {\n        this.ref = 0;\n      } else {\n        this.ref = newRef;\n      }\n      return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n      let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n      if (dupChannel) {\n        this.log('transport', `leaving duplicate topic \"${topic}\"`);\n        dupChannel.unsubscribe();\n      }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n      this.channels = this.channels.filter(c => c.topic !== channel.topic);\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n      this.decode(rawMessage.data, msg => {\n        // Handle heartbeat responses\n        if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\n          try {\n            this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\n          } catch (e) {\n            this.log('error', 'error in heartbeat callback', e);\n          }\n        }\n        // Handle pending heartbeat reference cleanup\n        if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\n          this.pendingHeartbeatRef = null;\n        }\n        // Log incoming message\n        const {\n          topic,\n          event,\n          payload,\n          ref\n        } = msg;\n        const refString = ref ? `(${ref})` : '';\n        const status = payload.status || '';\n        this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\n        // Route message to appropriate channels\n        this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n        this._triggerStateCallbacks('message', msg);\n      });\n    }\n    /**\n     * Clear specific timer\n     * @internal\n     */\n    _clearTimer(timer) {\n      var _a;\n      if (timer === 'heartbeat' && this.heartbeatTimer) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = undefined;\n      } else if (timer === 'reconnect') {\n        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();\n      }\n    }\n    /**\n     * Clear all timers\n     * @internal\n     */\n    _clearAllTimers() {\n      this._clearTimer('heartbeat');\n      this._clearTimer('reconnect');\n    }\n    /**\n     * Setup connection handlers for WebSocket events\n     * @internal\n     */\n    _setupConnectionHandlers() {\n      if (!this.conn) return;\n      // Set binary type if supported (browsers and most WebSocket implementations)\n      if ('binaryType' in this.conn) {\n        ;\n        this.conn.binaryType = 'arraybuffer';\n      }\n      this.conn.onopen = () => this._onConnOpen();\n      this.conn.onerror = error => this._onConnError(error);\n      this.conn.onmessage = event => this._onConnMessage(event);\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n    /**\n     * Teardown connection and cleanup resources\n     * @internal\n     */\n    _teardownConnection() {\n      if (this.conn) {\n        this.conn.onopen = null;\n        this.conn.onerror = null;\n        this.conn.onmessage = null;\n        this.conn.onclose = null;\n        this.conn = null;\n      }\n      this._clearAllTimers();\n      this.channels.forEach(channel => channel.teardown());\n    }\n    /** @internal */\n    _onConnOpen() {\n      this._setConnectionState('connected');\n      this.log('transport', `connected to ${this.endpointURL()}`);\n      this.flushSendBuffer();\n      this._clearTimer('reconnect');\n      if (!this.worker) {\n        this._startHeartbeat();\n      } else {\n        if (!this.workerRef) {\n          this._startWorkerHeartbeat();\n        }\n      }\n      this._triggerStateCallbacks('open');\n    }\n    /** @internal */\n    _startHeartbeat() {\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n    }\n    /** @internal */\n    _startWorkerHeartbeat() {\n      if (this.workerUrl) {\n        this.log('worker', `starting worker for from ${this.workerUrl}`);\n      } else {\n        this.log('worker', `starting default worker`);\n      }\n      const objectUrl = this._workerObjectUrl(this.workerUrl);\n      this.workerRef = new Worker(objectUrl);\n      this.workerRef.onerror = error => {\n        this.log('worker', 'worker error', error.message);\n        this.workerRef.terminate();\n      };\n      this.workerRef.onmessage = event => {\n        if (event.data.event === 'keepAlive') {\n          this.sendHeartbeat();\n        }\n      };\n      this.workerRef.postMessage({\n        event: 'start',\n        interval: this.heartbeatIntervalMs\n      });\n    }\n    /** @internal */\n    _onConnClose(event) {\n      var _a;\n      this._setConnectionState('disconnected');\n      this.log('transport', 'close', event);\n      this._triggerChanError();\n      this._clearTimer('heartbeat');\n      // Only schedule reconnection if it wasn't a manual disconnect\n      if (!this._wasManualDisconnect) {\n        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\n      }\n      this._triggerStateCallbacks('close', event);\n    }\n    /** @internal */\n    _onConnError(error) {\n      this._setConnectionState('disconnected');\n      this.log('transport', `${error}`);\n      this._triggerChanError();\n      this._triggerStateCallbacks('error', error);\n    }\n    /** @internal */\n    _triggerChanError() {\n      this.channels.forEach(channel => channel._trigger(constants_1.CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n      if (Object.keys(params).length === 0) {\n        return url;\n      }\n      const prefix = url.match(/\\?/) ? '&' : '?';\n      const query = new URLSearchParams(params);\n      return `${url}${prefix}${query}`;\n    }\n    _workerObjectUrl(url) {\n      let result_url;\n      if (url) {\n        result_url = url;\n      } else {\n        const blob = new Blob([WORKER_SCRIPT], {\n          type: 'application/javascript'\n        });\n        result_url = URL.createObjectURL(blob);\n      }\n      return result_url;\n    }\n    /**\n     * Set connection state with proper state management\n     * @internal\n     */\n    _setConnectionState(state, manual = false) {\n      this._connectionState = state;\n      if (state === 'connecting') {\n        this._wasManualDisconnect = false;\n      } else if (state === 'disconnecting') {\n        this._wasManualDisconnect = manual;\n      }\n    }\n    /**\n     * Perform the actual auth operation\n     * @internal\n     */\n    async _performAuth(token = null) {\n      let tokenToSend;\n      if (token) {\n        tokenToSend = token;\n      } else if (this.accessToken) {\n        // Always call the accessToken callback to get fresh token\n        tokenToSend = await this.accessToken();\n      } else {\n        tokenToSend = this.accessTokenValue;\n      }\n      if (this.accessTokenValue != tokenToSend) {\n        this.accessTokenValue = tokenToSend;\n        this.channels.forEach(channel => {\n          const payload = {\n            access_token: tokenToSend,\n            version: constants_1.DEFAULT_VERSION\n          };\n          tokenToSend && channel.updateJoinPayload(payload);\n          if (channel.joinedOnce && channel._isJoined()) {\n            channel._push(constants_1.CHANNEL_EVENTS.access_token, {\n              access_token: tokenToSend\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Wait for any in-flight auth operations to complete\n     * @internal\n     */\n    async _waitForAuthIfNeeded() {\n      if (this._authPromise) {\n        await this._authPromise;\n      }\n    }\n    /**\n     * Safely call setAuth with standardized error handling\n     * @internal\n     */\n    _setAuthSafely(context = 'general') {\n      this.setAuth().catch(e => {\n        this.log('error', `error setting auth in ${context}`, e);\n      });\n    }\n    /**\n     * Trigger state change callbacks with proper error handling\n     * @internal\n     */\n    _triggerStateCallbacks(event, data) {\n      try {\n        this.stateChangeCallbacks[event].forEach(callback => {\n          try {\n            callback(data);\n          } catch (e) {\n            this.log('error', `error in ${event} callback`, e);\n          }\n        });\n      } catch (e) {\n        this.log('error', `error triggering ${event} callbacks`, e);\n      }\n    }\n    /**\n     * Setup reconnection timer with proper configuration\n     * @internal\n     */\n    _setupReconnectionTimer() {\n      this.reconnectTimer = new timer_1.default(async () => {\n        setTimeout(async () => {\n          await this._waitForAuthIfNeeded();\n          if (!this.isConnected()) {\n            this.connect();\n          }\n        }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);\n      }, this.reconnectAfterMs);\n    }\n    /**\n     * Initialize client options with defaults\n     * @internal\n     */\n    _initializeOptions(options) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      // Set defaults\n      this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;\n      this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_TIMEOUT;\n      this.heartbeatIntervalMs = (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\n      this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;\n      this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;\n      this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop;\n      // Handle special cases\n      if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n      if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n      if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n        this.logLevel = options.logLevel || options.log_level;\n        this.params = Object.assign(Object.assign({}, this.params), {\n          log_level: this.logLevel\n        });\n      }\n      // Set up functions with defaults\n      this.reconnectAfterMs = (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : tries => {\n        return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\n      };\n      this.encode = (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : (payload, callback) => {\n        return callback(JSON.stringify(payload));\n      };\n      this.decode = (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);\n      // Handle worker setup\n      if (this.worker) {\n        if (false && !window.Worker) {\n          throw new Error('Web Worker is not supported');\n        }\n        this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n      }\n    }\n  }\n  exports.default = RealtimeClient;\n});","lineCount":748,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__createBinding"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__createBinding"],[4,52,2,51],[4,57,2,57,"Object"],[4,63,2,63],[4,64,2,64,"create"],[4,70,2,70],[4,73,2,74],[4,83,2,83,"o"],[4,84,2,84],[4,86,2,86,"m"],[4,87,2,87],[4,89,2,89,"k"],[4,90,2,90],[4,92,2,92,"k2"],[4,94,2,94],[4,96,2,96],[5,4,3,4],[5,8,3,8,"k2"],[5,10,3,10],[5,15,3,15,"undefined"],[5,24,3,24],[5,26,3,26,"k2"],[5,28,3,28],[5,31,3,31,"k"],[5,32,3,32],[6,4,4,4],[6,8,4,8,"desc"],[6,12,4,12],[6,15,4,15,"Object"],[6,21,4,21],[6,22,4,22,"getOwnPropertyDescriptor"],[6,46,4,46],[6,47,4,47,"m"],[6,48,4,48],[6,50,4,50,"k"],[6,51,4,51],[6,52,4,52],[7,4,5,4],[7,8,5,8],[7,9,5,9,"desc"],[7,13,5,13],[7,18,5,18],[7,23,5,23],[7,27,5,27,"desc"],[7,31,5,31],[7,34,5,34],[7,35,5,35,"m"],[7,36,5,36],[7,37,5,37,"__esModule"],[7,47,5,47],[7,50,5,50,"desc"],[7,54,5,54],[7,55,5,55,"writable"],[7,63,5,63],[7,67,5,67,"desc"],[7,71,5,71],[7,72,5,72,"configurable"],[7,84,5,84],[7,85,5,85],[7,87,5,87],[8,6,6,6,"desc"],[8,10,6,10],[8,13,6,13],[9,8,6,15,"enumerable"],[9,18,6,25],[9,20,6,27],[9,24,6,31],[10,8,6,33,"get"],[10,11,6,36],[10,13,6,38],[10,22,6,38,"get"],[10,23,6,38],[10,25,6,49],[11,10,6,51],[11,17,6,58,"m"],[11,18,6,59],[11,19,6,60,"k"],[11,20,6,61],[11,21,6,62],[12,8,6,64],[13,6,6,66],[13,7,6,67],[14,4,7,4],[15,4,8,4,"Object"],[15,10,8,10],[15,11,8,11,"defineProperty"],[15,25,8,25],[15,26,8,26,"o"],[15,27,8,27],[15,29,8,29,"k2"],[15,31,8,31],[15,33,8,33,"desc"],[15,37,8,37],[15,38,8,38],[16,2,9,0],[16,3,9,1],[16,6,9,6],[16,16,9,15,"o"],[16,17,9,16],[16,19,9,18,"m"],[16,20,9,19],[16,22,9,21,"k"],[16,23,9,22],[16,25,9,24,"k2"],[16,27,9,26],[16,29,9,28],[17,4,10,4],[17,8,10,8,"k2"],[17,10,10,10],[17,15,10,15,"undefined"],[17,24,10,24],[17,26,10,26,"k2"],[17,28,10,28],[17,31,10,31,"k"],[17,32,10,32],[18,4,11,4,"o"],[18,5,11,5],[18,6,11,6,"k2"],[18,8,11,8],[18,9,11,9],[18,12,11,12,"m"],[18,13,11,13],[18,14,11,14,"k"],[18,15,11,15],[18,16,11,16],[19,2,12,0],[19,3,12,2],[19,4,12,3],[20,2,13,0],[20,6,13,4,"__setModuleDefault"],[20,24,13,22],[20,27,13,26],[20,31,13,30],[20,35,13,34],[20,39,13,38],[20,40,13,39,"__setModuleDefault"],[20,58,13,57],[20,63,13,63,"Object"],[20,69,13,69],[20,70,13,70,"create"],[20,76,13,76],[20,79,13,80],[20,89,13,89,"o"],[20,90,13,90],[20,92,13,92,"v"],[20,93,13,93],[20,95,13,95],[21,4,14,4,"Object"],[21,10,14,10],[21,11,14,11,"defineProperty"],[21,25,14,25],[21,26,14,26,"o"],[21,27,14,27],[21,29,14,29],[21,38,14,38],[21,40,14,40],[22,6,14,42,"enumerable"],[22,16,14,52],[22,18,14,54],[22,22,14,58],[23,6,14,60,"value"],[23,11,14,65],[23,13,14,67,"v"],[24,4,14,69],[24,5,14,70],[24,6,14,71],[25,2,15,0],[25,3,15,1],[25,6,15,5],[25,16,15,14,"o"],[25,17,15,15],[25,19,15,17,"v"],[25,20,15,18],[25,22,15,20],[26,4,16,4,"o"],[26,5,16,5],[26,6,16,6],[26,15,16,15],[26,16,16,16],[26,19,16,19,"v"],[26,20,16,20],[27,2,17,0],[27,3,17,1],[27,4,17,2],[28,2,18,0],[28,6,18,4,"__importStar"],[28,18,18,16],[28,21,18,20],[28,25,18,24],[28,29,18,28],[28,33,18,32],[28,34,18,33,"__importStar"],[28,46,18,45],[28,50,18,51],[28,62,18,63],[29,4,19,4],[29,8,19,8,"ownKeys"],[29,15,19,15],[29,18,19,18],[29,27,19,18,"ownKeys"],[29,28,19,27,"o"],[29,29,19,28],[29,31,19,30],[30,6,20,8,"ownKeys"],[30,13,20,15],[30,16,20,18,"Object"],[30,22,20,24],[30,23,20,25,"getOwnPropertyNames"],[30,42,20,44],[30,46,20,48],[30,56,20,58,"o"],[30,57,20,59],[30,59,20,61],[31,8,21,12],[31,12,21,16,"ar"],[31,14,21,18],[31,17,21,21],[31,19,21,23],[32,8,22,12],[32,13,22,17],[32,17,22,21,"k"],[32,18,22,22],[32,22,22,26,"o"],[32,23,22,27],[32,25,22,29],[32,29,22,33,"Object"],[32,35,22,39],[32,36,22,40,"prototype"],[32,45,22,49],[32,46,22,50,"hasOwnProperty"],[32,60,22,64],[32,61,22,65,"call"],[32,65,22,69],[32,66,22,70,"o"],[32,67,22,71],[32,69,22,73,"k"],[32,70,22,74],[32,71,22,75],[32,73,22,77,"ar"],[32,75,22,79],[32,76,22,80,"ar"],[32,78,22,82],[32,79,22,83,"length"],[32,85,22,89],[32,86,22,90],[32,89,22,93,"k"],[32,90,22,94],[33,8,23,12],[33,15,23,19,"ar"],[33,17,23,21],[34,6,24,8],[34,7,24,9],[35,6,25,8],[35,13,25,15,"ownKeys"],[35,20,25,22],[35,21,25,23,"o"],[35,22,25,24],[35,23,25,25],[36,4,26,4],[36,5,26,5],[37,4,27,4],[37,11,27,11],[37,21,27,21,"mod"],[37,24,27,24],[37,26,27,26],[38,6,28,8],[38,10,28,12,"mod"],[38,13,28,15],[38,17,28,19,"mod"],[38,20,28,22],[38,21,28,23,"__esModule"],[38,31,28,33],[38,33,28,35],[38,40,28,42,"mod"],[38,43,28,45],[39,6,29,8],[39,10,29,12,"result"],[39,16,29,18],[39,19,29,21],[39,20,29,22],[39,21,29,23],[40,6,30,8],[40,10,30,12,"mod"],[40,13,30,15],[40,17,30,19],[40,21,30,23],[40,23,30,25],[40,28,30,30],[40,32,30,34,"k"],[40,33,30,35],[40,36,30,38,"ownKeys"],[40,43,30,45],[40,44,30,46,"mod"],[40,47,30,49],[40,48,30,50],[40,50,30,52,"i"],[40,51,30,53],[40,54,30,56],[40,55,30,57],[40,57,30,59,"i"],[40,58,30,60],[40,61,30,63,"k"],[40,62,30,64],[40,63,30,65,"length"],[40,69,30,71],[40,71,30,73,"i"],[40,72,30,74],[40,74,30,76],[40,76,30,78],[40,80,30,82,"k"],[40,81,30,83],[40,82,30,84,"i"],[40,83,30,85],[40,84,30,86],[40,89,30,91],[40,98,30,100],[40,100,30,102,"__createBinding"],[40,115,30,117],[40,116,30,118,"result"],[40,122,30,124],[40,124,30,126,"mod"],[40,127,30,129],[40,129,30,131,"k"],[40,130,30,132],[40,131,30,133,"i"],[40,132,30,134],[40,133,30,135],[40,134,30,136],[41,6,31,8,"__setModuleDefault"],[41,24,31,26],[41,25,31,27,"result"],[41,31,31,33],[41,33,31,35,"mod"],[41,36,31,38],[41,37,31,39],[42,6,32,8],[42,13,32,15,"result"],[42,19,32,21],[43,4,33,4],[43,5,33,5],[44,2,34,0],[44,3,34,1],[44,4,34,3],[44,5,34,4],[45,2,35,0],[45,6,35,4,"__importDefault"],[45,21,35,19],[45,24,35,23],[45,28,35,27],[45,32,35,31],[45,36,35,35],[45,37,35,36,"__importDefault"],[45,52,35,51],[45,56,35,56],[45,66,35,66,"mod"],[45,69,35,69],[45,71,35,71],[46,4,36,4],[46,11,36,12,"mod"],[46,14,36,15],[46,18,36,19,"mod"],[46,21,36,22],[46,22,36,23,"__esModule"],[46,32,36,33],[46,35,36,37,"mod"],[46,38,36,40],[46,41,36,43],[47,6,36,45],[47,15,36,54],[47,17,36,56,"mod"],[48,4,36,60],[48,5,36,61],[49,2,37,0],[49,3,37,1],[50,2,38,0,"Object"],[50,8,38,6],[50,9,38,7,"defineProperty"],[50,23,38,21],[50,24,38,22,"exports"],[50,31,38,29],[50,33,38,31],[50,45,38,43],[50,47,38,45],[51,4,38,47,"value"],[51,9,38,52],[51,11,38,54],[52,2,38,59],[52,3,38,60],[52,4,38,61],[53,2,39,0],[53,8,39,6,"websocket_factory_1"],[53,27,39,25],[53,30,39,28,"__importDefault"],[53,45,39,43],[53,46,39,44,"require"],[53,53,39,51],[53,54,39,51,"_dependencyMap"],[53,68,39,51],[53,98,39,77],[53,99,39,78],[53,100,39,79],[54,2,40,0],[54,8,40,6,"constants_1"],[54,19,40,17],[54,22,40,20,"require"],[54,29,40,27],[54,30,40,27,"_dependencyMap"],[54,44,40,27],[54,66,40,45],[54,67,40,46],[55,2,41,0],[55,8,41,6,"serializer_1"],[55,20,41,18],[55,23,41,21,"__importDefault"],[55,38,41,36],[55,39,41,37,"require"],[55,46,41,44],[55,47,41,44,"_dependencyMap"],[55,61,41,44],[55,84,41,63],[55,85,41,64],[55,86,41,65],[56,2,42,0],[56,8,42,6,"timer_1"],[56,15,42,13],[56,18,42,16,"__importDefault"],[56,33,42,31],[56,34,42,32,"require"],[56,41,42,39],[56,42,42,39,"_dependencyMap"],[56,56,42,39],[56,74,42,53],[56,75,42,54],[56,76,42,55],[57,2,43,0],[57,8,43,6,"transformers_1"],[57,22,43,20],[57,25,43,23,"require"],[57,32,43,30],[57,33,43,30,"_dependencyMap"],[57,47,43,30],[57,72,43,51],[57,73,43,52],[58,2,44,0],[58,8,44,6,"RealtimeChannel_1"],[58,25,44,23],[58,28,44,26,"__importDefault"],[58,43,44,41],[58,44,44,42,"require"],[58,51,44,49],[58,52,44,49,"_dependencyMap"],[58,66,44,49],[58,90,44,69],[58,91,44,70],[58,92,44,71],[59,2,45,0],[59,8,45,6,"noop"],[59,12,45,10],[59,15,45,13,"noop"],[59,16,45,13],[59,21,45,19],[59,22,45,21],[59,23,45,22],[60,2,46,0],[61,2,47,0],[61,8,47,6,"CONNECTION_TIMEOUTS"],[61,27,47,25],[61,30,47,28],[62,4,48,4,"HEARTBEAT_INTERVAL"],[62,22,48,22],[62,24,48,24],[62,29,48,29],[63,4,49,4,"RECONNECT_DELAY"],[63,19,49,19],[63,21,49,21],[63,23,49,23],[64,4,50,4,"HEARTBEAT_TIMEOUT_FALLBACK"],[64,30,50,30],[64,32,50,32],[65,2,51,0],[65,3,51,1],[66,2,52,0],[66,8,52,6,"RECONNECT_INTERVALS"],[66,27,52,25],[66,30,52,28],[66,31,52,29],[66,35,52,33],[66,37,52,35],[66,41,52,39],[66,43,52,41],[66,47,52,45],[66,49,52,47],[66,54,52,52],[66,55,52,53],[67,2,53,0],[67,8,53,6,"DEFAULT_RECONNECT_FALLBACK"],[67,34,53,32],[67,37,53,35],[67,42,53,40],[68,2,54,0],[68,8,54,6,"WORKER_SCRIPT"],[68,21,54,19],[68,24,54,22],[69,0,55,0],[70,0,56,0],[71,0,57,0],[72,0,58,0],[73,0,59,0],[73,6,59,6],[74,2,60,0],[74,8,60,6,"RealtimeClient"],[74,22,60,20],[74,23,60,21],[75,4,61,4],[76,0,62,0],[77,0,63,0],[78,0,64,0],[79,0,65,0],[80,0,66,0],[81,0,67,0],[82,0,68,0],[83,0,69,0],[84,0,70,0],[85,0,71,0],[86,0,72,0],[87,0,73,0],[88,0,74,0],[89,0,75,0],[90,0,76,0],[91,0,77,0],[92,0,78,0],[93,0,79,0],[94,4,80,4,"constructor"],[94,15,80,15,"constructor"],[94,16,80,16,"endPoint"],[94,24,80,24],[94,26,80,26,"options"],[94,33,80,33],[94,35,80,35],[95,6,81,8],[95,10,81,12,"_a"],[95,12,81,14],[96,6,82,8],[96,10,82,12],[96,11,82,13,"accessTokenValue"],[96,27,82,29],[96,30,82,32],[96,34,82,36],[97,6,83,8],[97,10,83,12],[97,11,83,13,"apiKey"],[97,17,83,19],[97,20,83,22],[97,24,83,26],[98,6,84,8],[98,10,84,12],[98,11,84,13,"channels"],[98,19,84,21],[98,22,84,24],[98,26,84,28,"Array"],[98,31,84,33],[98,32,84,34],[98,33,84,35],[99,6,85,8],[99,10,85,12],[99,11,85,13,"endPoint"],[99,19,85,21],[99,22,85,24],[99,24,85,26],[100,6,86,8],[100,10,86,12],[100,11,86,13,"httpEndpoint"],[100,23,86,25],[100,26,86,28],[100,28,86,30],[101,6,87,8],[102,6,88,8],[102,10,88,12],[102,11,88,13,"headers"],[102,18,88,20],[102,21,88,23],[102,22,88,24],[102,23,88,25],[103,6,89,8],[103,10,89,12],[103,11,89,13,"params"],[103,17,89,19],[103,20,89,22],[103,21,89,23],[103,22,89,24],[104,6,90,8],[104,10,90,12],[104,11,90,13,"timeout"],[104,18,90,20],[104,21,90,23,"constants_1"],[104,32,90,34],[104,33,90,35,"DEFAULT_TIMEOUT"],[104,48,90,50],[105,6,91,8],[105,10,91,12],[105,11,91,13,"transport"],[105,20,91,22],[105,23,91,25],[105,27,91,29],[106,6,92,8],[106,10,92,12],[106,11,92,13,"heartbeatIntervalMs"],[106,30,92,32],[106,33,92,35,"CONNECTION_TIMEOUTS"],[106,52,92,54],[106,53,92,55,"HEARTBEAT_INTERVAL"],[106,71,92,73],[107,6,93,8],[107,10,93,12],[107,11,93,13,"heartbeatTimer"],[107,25,93,27],[107,28,93,30,"undefined"],[107,37,93,39],[108,6,94,8],[108,10,94,12],[108,11,94,13,"pendingHeartbeatRef"],[108,30,94,32],[108,33,94,35],[108,37,94,39],[109,6,95,8],[109,10,95,12],[109,11,95,13,"heartbeatCallback"],[109,28,95,30],[109,31,95,33,"noop"],[109,35,95,37],[110,6,96,8],[110,10,96,12],[110,11,96,13,"ref"],[110,14,96,16],[110,17,96,19],[110,18,96,20],[111,6,97,8],[111,10,97,12],[111,11,97,13,"reconnectTimer"],[111,25,97,27],[111,28,97,30],[111,32,97,34],[112,6,98,8],[112,10,98,12],[112,11,98,13,"logger"],[112,17,98,19],[112,20,98,22,"noop"],[112,24,98,26],[113,6,99,8],[113,10,99,12],[113,11,99,13,"conn"],[113,15,99,17],[113,18,99,20],[113,22,99,24],[114,6,100,8],[114,10,100,12],[114,11,100,13,"sendBuffer"],[114,21,100,23],[114,24,100,26],[114,26,100,28],[115,6,101,8],[115,10,101,12],[115,11,101,13,"serializer"],[115,21,101,23],[115,24,101,26],[115,28,101,30,"serializer_1"],[115,40,101,42],[115,41,101,43,"default"],[115,48,101,50],[115,49,101,51],[115,50,101,52],[116,6,102,8],[116,10,102,12],[116,11,102,13,"stateChangeCallbacks"],[116,31,102,33],[116,34,102,36],[117,8,103,12,"open"],[117,12,103,16],[117,14,103,18],[117,16,103,20],[118,8,104,12,"close"],[118,13,104,17],[118,15,104,19],[118,17,104,21],[119,8,105,12,"error"],[119,13,105,17],[119,15,105,19],[119,17,105,21],[120,8,106,12,"message"],[120,15,106,19],[120,17,106,21],[121,6,107,8],[121,7,107,9],[122,6,108,8],[122,10,108,12],[122,11,108,13,"accessToken"],[122,22,108,24],[122,25,108,27],[122,29,108,31],[123,6,109,8],[123,10,109,12],[123,11,109,13,"_connectionState"],[123,27,109,29],[123,30,109,32],[123,44,109,46],[124,6,110,8],[124,10,110,12],[124,11,110,13,"_wasManualDisconnect"],[124,31,110,33],[124,34,110,36],[124,39,110,41],[125,6,111,8],[125,10,111,12],[125,11,111,13,"_authPromise"],[125,23,111,25],[125,26,111,28],[125,30,111,32],[126,6,112,8],[127,0,113,0],[128,0,114,0],[129,0,115,0],[130,0,116,0],[131,6,117,8],[131,10,117,12],[131,11,117,13,"_resolveFetch"],[131,24,117,26],[131,27,117,30,"customFetch"],[131,38,117,41],[131,42,117,46],[132,8,118,12],[132,12,118,16,"_fetch"],[132,18,118,22],[133,8,119,12],[133,12,119,16,"customFetch"],[133,23,119,27],[133,25,119,29],[134,10,120,16,"_fetch"],[134,16,120,22],[134,19,120,25,"customFetch"],[134,30,120,36],[135,8,121,12],[135,9,121,13],[135,15,122,17],[135,19,122,21],[135,26,122,28,"fetch"],[135,31,122,33],[135,36,122,38],[135,47,122,49],[135,49,122,51],[136,10,123,16],[137,10,124,16,"_fetch"],[137,16,124,22],[137,19,124,25,"_fetch"],[137,20,124,26],[137,23,124,29,"args"],[137,27,124,33],[137,32,124,38,"Promise"],[137,39,124,45],[137,40,124,46,"resolve"],[137,47,124,53],[137,48,124,54],[137,51,124,57],[137,73,124,79],[137,75,124,81],[137,76,124,82],[137,77,124,83,"then"],[137,81,124,87],[137,82,124,88,"s"],[137,83,124,89],[137,87,124,93,"__importStar"],[137,99,124,105],[137,100,124,106,"require"],[137,107,124,113],[137,108,124,114,"s"],[137,109,124,115],[137,110,124,116],[137,111,124,117],[137,112,124,118],[137,113,124,119,"then"],[137,117,124,123],[137,118,124,124],[137,119,124,125],[138,12,124,127,"default"],[138,19,124,134],[138,21,124,136,"fetch"],[139,10,124,142],[139,11,124,143],[139,16,124,148,"fetch"],[139,21,124,153],[139,22,124,154],[139,25,124,157,"args"],[139,29,124,161],[139,30,124,162],[139,31,124,163],[139,32,125,21,"catch"],[139,37,125,26],[139,38,125,28,"error"],[139,43,125,33],[139,47,125,38],[140,12,126,20],[140,18,126,26],[140,22,126,30,"Error"],[140,27,126,35],[140,28,126,36],[140,68,126,76,"error"],[140,73,126,81],[140,74,126,82,"message"],[140,81,126,89],[140,85,126,93],[140,88,127,24],[140,170,127,106],[140,171,127,107],[141,10,128,16],[141,11,128,17],[141,12,128,18],[142,8,129,12],[142,9,129,13],[142,15,130,17],[143,10,131,16,"_fetch"],[143,16,131,22],[143,19,131,25,"fetch"],[143,24,131,30],[144,8,132,12],[145,8,133,12],[145,15,133,19],[145,16,133,20],[145,19,133,23,"args"],[145,23,133,27],[145,28,133,32,"_fetch"],[145,34,133,38],[145,35,133,39],[145,38,133,42,"args"],[145,42,133,46],[145,43,133,47],[146,6,134,8],[146,7,134,9],[147,6,135,8],[148,6,136,8],[148,10,136,12],[148,12,136,14],[148,13,136,15,"_a"],[148,15,136,17],[148,18,136,20,"options"],[148,25,136,27],[148,30,136,32],[148,34,136,36],[148,38,136,40,"options"],[148,45,136,47],[148,50,136,52],[148,55,136,57],[148,56,136,58],[148,59,136,61],[148,64,136,66],[148,65,136,67],[148,68,136,70,"options"],[148,75,136,77],[148,76,136,78,"params"],[148,82,136,84],[148,88,136,90],[148,92,136,94],[148,96,136,98,"_a"],[148,98,136,100],[148,103,136,105],[148,108,136,110],[148,109,136,111],[148,112,136,114],[148,117,136,119],[148,118,136,120],[148,121,136,123,"_a"],[148,123,136,125],[148,124,136,126,"apikey"],[148,130,136,132],[148,131,136,133],[148,133,136,135],[149,8,137,12],[149,14,137,18],[149,18,137,22,"Error"],[149,23,137,27],[149,24,137,28],[149,68,137,72],[149,69,137,73],[150,6,138,8],[151,6,139,8],[151,10,139,12],[151,11,139,13,"apiKey"],[151,17,139,19],[151,20,139,22,"options"],[151,27,139,29],[151,28,139,30,"params"],[151,34,139,36],[151,35,139,37,"apikey"],[151,41,139,43],[152,6,140,8],[153,6,141,8],[153,10,141,12],[153,11,141,13,"endPoint"],[153,19,141,21],[153,22,141,24],[153,25,141,27,"endPoint"],[153,33,141,35],[153,37,141,39,"constants_1"],[153,48,141,50],[153,49,141,51,"TRANSPORTS"],[153,59,141,61],[153,60,141,62,"websocket"],[153,69,141,71],[153,71,141,73],[154,6,142,8],[154,10,142,12],[154,11,142,13,"httpEndpoint"],[154,23,142,25],[154,26,142,28],[154,27,142,29],[154,28,142,30],[154,30,142,32,"transformers_1"],[154,44,142,46],[154,45,142,47,"httpEndpointURL"],[154,60,142,62],[154,62,142,64,"endPoint"],[154,70,142,72],[154,71,142,73],[155,6,143,8],[155,10,143,12],[155,11,143,13,"_initializeOptions"],[155,29,143,31],[155,30,143,32,"options"],[155,37,143,39],[155,38,143,40],[156,6,144,8],[156,10,144,12],[156,11,144,13,"_setupReconnectionTimer"],[156,34,144,36],[156,35,144,37],[156,36,144,38],[157,6,145,8],[157,10,145,12],[157,11,145,13,"fetch"],[157,16,145,18],[157,19,145,21],[157,23,145,25],[157,24,145,26,"_resolveFetch"],[157,37,145,39],[157,38,145,40,"options"],[157,45,145,47],[157,50,145,52],[157,54,145,56],[157,58,145,60,"options"],[157,65,145,67],[157,70,145,72],[157,75,145,77],[157,76,145,78],[157,79,145,81],[157,84,145,86],[157,85,145,87],[157,88,145,90,"options"],[157,95,145,97],[157,96,145,98,"fetch"],[157,101,145,103],[157,102,145,104],[158,4,146,4],[159,4,147,4],[160,0,148,0],[161,0,149,0],[162,4,150,4,"connect"],[162,11,150,11,"connect"],[162,12,150,11],[162,14,150,14],[163,6,151,8],[164,6,152,8],[164,10,152,12],[164,14,152,16],[164,15,152,17,"isConnecting"],[164,27,152,29],[164,28,152,30],[164,29,152,31],[164,33,153,12],[164,37,153,16],[164,38,153,17,"isDisconnecting"],[164,53,153,32],[164,54,153,33],[164,55,153,34],[164,59,154,13],[164,63,154,17],[164,64,154,18,"conn"],[164,68,154,22],[164,73,154,27],[164,77,154,31],[164,81,154,35],[164,85,154,39],[164,86,154,40,"isConnected"],[164,97,154,51],[164,98,154,52],[164,99,154,54],[164,101,154,56],[165,8,155,12],[166,6,156,8],[167,6,157,8],[167,10,157,12],[167,11,157,13,"_setConnectionState"],[167,30,157,32],[167,31,157,33],[167,43,157,45],[167,44,157,46],[168,6,158,8],[168,10,158,12],[168,11,158,13,"_setAuthSafely"],[168,25,158,27],[168,26,158,28],[168,35,158,37],[168,36,158,38],[169,6,159,8],[170,6,160,8],[170,10,160,12],[170,14,160,16],[170,15,160,17,"transport"],[170,24,160,26],[170,26,160,28],[171,8,161,12],[172,8,162,12],[172,12,162,16],[172,13,162,17,"conn"],[172,17,162,21],[172,20,162,24],[172,24,162,28],[172,28,162,32],[172,29,162,33,"transport"],[172,38,162,42],[172,39,162,43],[172,43,162,47],[172,44,162,48,"endpointURL"],[172,55,162,59],[172,56,162,60],[172,57,162,61],[172,58,162,62],[173,6,163,8],[173,7,163,9],[173,13,164,13],[174,8,165,12],[175,8,166,12],[175,12,166,16],[176,10,167,16],[176,14,167,20],[176,15,167,21,"conn"],[176,19,167,25],[176,22,167,28,"websocket_factory_1"],[176,41,167,47],[176,42,167,48,"default"],[176,49,167,55],[176,50,167,56,"createWebSocket"],[176,65,167,71],[176,66,167,72],[176,70,167,76],[176,71,167,77,"endpointURL"],[176,82,167,88],[176,83,167,89],[176,84,167,90],[176,85,167,91],[177,8,168,12],[177,9,168,13],[177,10,169,12],[177,17,169,19,"error"],[177,22,169,24],[177,24,169,26],[178,10,170,16],[178,14,170,20],[178,15,170,21,"_setConnectionState"],[178,34,170,40],[178,35,170,41],[178,49,170,55],[178,50,170,56],[179,10,171,16],[179,16,171,22,"errorMessage"],[179,28,171,34],[179,31,171,37,"error"],[179,36,171,42],[179,37,171,43,"message"],[179,44,171,50],[180,10,172,16],[181,10,173,16],[181,14,173,20,"errorMessage"],[181,26,173,32],[181,27,173,33,"includes"],[181,35,173,41],[181,36,173,42],[181,45,173,51],[181,46,173,52],[181,48,173,54],[182,12,174,20],[182,18,174,26],[182,22,174,30,"Error"],[182,27,174,35],[182,28,174,36],[182,31,174,39,"errorMessage"],[182,43,174,51],[182,49,174,57],[182,52,175,24],[182,133,175,105],[182,136,176,24],[182,200,176,88],[182,203,177,24],[182,256,177,77],[182,259,178,24],[182,281,178,46],[182,284,179,24],[182,309,179,49],[182,312,180,24],[182,358,180,70],[182,361,181,24],[182,380,181,43],[182,383,182,24],[182,404,182,45],[182,407,183,24],[182,413,183,30],[182,414,183,31],[183,10,184,16],[184,10,185,16],[184,16,185,22],[184,20,185,26,"Error"],[184,25,185,31],[184,26,185,32],[184,54,185,60,"errorMessage"],[184,66,185,72],[184,68,185,74],[184,69,185,75],[185,8,186,12],[186,6,187,8],[187,6,188,8],[187,10,188,12],[187,11,188,13,"_setupConnectionHandlers"],[187,35,188,37],[187,36,188,38],[187,37,188,39],[188,4,189,4],[189,4,190,4],[190,0,191,0],[191,0,192,0],[192,0,193,0],[193,4,194,4,"endpointURL"],[193,15,194,15,"endpointURL"],[193,16,194,15],[193,18,194,18],[194,6,195,8],[194,13,195,15],[194,17,195,19],[194,18,195,20,"_appendParams"],[194,31,195,33],[194,32,195,34],[194,36,195,38],[194,37,195,39,"endPoint"],[194,45,195,47],[194,47,195,49,"Object"],[194,53,195,55],[194,54,195,56,"assign"],[194,60,195,62],[194,61,195,63],[194,62,195,64],[194,63,195,65],[194,65,195,67],[194,69,195,71],[194,70,195,72,"params"],[194,76,195,78],[194,78,195,80],[195,8,195,82,"vsn"],[195,11,195,85],[195,13,195,87,"constants_1"],[195,24,195,98],[195,25,195,99,"VSN"],[196,6,195,103],[196,7,195,104],[196,8,195,105],[196,9,195,106],[197,4,196,4],[198,4,197,4],[199,0,198,0],[200,0,199,0],[201,0,200,0],[202,0,201,0],[203,0,202,0],[204,4,203,4,"disconnect"],[204,14,203,14,"disconnect"],[204,15,203,15,"code"],[204,19,203,19],[204,21,203,21,"reason"],[204,27,203,27],[204,29,203,29],[205,6,204,8],[205,10,204,12],[205,14,204,16],[205,15,204,17,"isDisconnecting"],[205,30,204,32],[205,31,204,33],[205,32,204,34],[205,34,204,36],[206,8,205,12],[207,6,206,8],[208,6,207,8],[208,10,207,12],[208,11,207,13,"_setConnectionState"],[208,30,207,32],[208,31,207,33],[208,46,207,48],[208,48,207,50],[208,52,207,54],[208,53,207,55],[209,6,208,8],[209,10,208,12],[209,14,208,16],[209,15,208,17,"conn"],[209,19,208,21],[209,21,208,23],[210,8,209,12],[211,8,210,12],[211,14,210,18,"fallbackTimer"],[211,27,210,31],[211,30,210,34,"setTimeout"],[211,40,210,44],[211,41,210,45],[211,47,210,51],[212,10,211,16],[212,14,211,20],[212,15,211,21,"_setConnectionState"],[212,34,211,40],[212,35,211,41],[212,49,211,55],[212,50,211,56],[213,8,212,12],[213,9,212,13],[213,11,212,15],[213,14,212,18],[213,15,212,19],[214,8,213,12],[214,12,213,16],[214,13,213,17,"conn"],[214,17,213,21],[214,18,213,22,"onclose"],[214,25,213,29],[214,28,213,32],[214,34,213,38],[215,10,214,16,"clearTimeout"],[215,22,214,28],[215,23,214,29,"fallbackTimer"],[215,36,214,42],[215,37,214,43],[216,10,215,16],[216,14,215,20],[216,15,215,21,"_setConnectionState"],[216,34,215,40],[216,35,215,41],[216,49,215,55],[216,50,215,56],[217,8,216,12],[217,9,216,13],[218,8,217,12],[219,8,218,12],[219,12,218,16,"code"],[219,16,218,20],[219,18,218,22],[220,10,219,16],[220,14,219,20],[220,15,219,21,"conn"],[220,19,219,25],[220,20,219,26,"close"],[220,25,219,31],[220,26,219,32,"code"],[220,30,219,36],[220,32,219,38,"reason"],[220,38,219,44],[220,43,219,49],[220,47,219,53],[220,51,219,57,"reason"],[220,57,219,63],[220,62,219,68],[220,67,219,73],[220,68,219,74],[220,71,219,77,"reason"],[220,77,219,83],[220,80,219,86],[220,82,219,88],[220,83,219,89],[221,8,220,12],[221,9,220,13],[221,15,221,17],[222,10,222,16],[222,14,222,20],[222,15,222,21,"conn"],[222,19,222,25],[222,20,222,26,"close"],[222,25,222,31],[222,26,222,32],[222,27,222,33],[223,8,223,12],[224,8,224,12],[224,12,224,16],[224,13,224,17,"_teardownConnection"],[224,32,224,36],[224,33,224,37],[224,34,224,38],[225,6,225,8],[225,7,225,9],[225,13,226,13],[226,8,227,12],[226,12,227,16],[226,13,227,17,"_setConnectionState"],[226,32,227,36],[226,33,227,37],[226,47,227,51],[226,48,227,52],[227,6,228,8],[228,4,229,4],[229,4,230,4],[230,0,231,0],[231,0,232,0],[232,4,233,4,"getChannels"],[232,15,233,15,"getChannels"],[232,16,233,15],[232,18,233,18],[233,6,234,8],[233,13,234,15],[233,17,234,19],[233,18,234,20,"channels"],[233,26,234,28],[234,4,235,4],[235,4,236,4],[236,0,237,0],[237,0,238,0],[238,0,239,0],[239,4,240,4],[239,10,240,10,"removeChannel"],[239,23,240,23,"removeChannel"],[239,24,240,24,"channel"],[239,31,240,31],[239,33,240,33],[240,6,241,8],[240,12,241,14,"status"],[240,18,241,20],[240,21,241,23],[240,27,241,29,"channel"],[240,34,241,36],[240,35,241,37,"unsubscribe"],[240,46,241,48],[240,47,241,49],[240,48,241,50],[241,6,242,8],[241,10,242,12],[241,14,242,16],[241,15,242,17,"channels"],[241,23,242,25],[241,24,242,26,"length"],[241,30,242,32],[241,35,242,37],[241,36,242,38],[241,38,242,40],[242,8,243,12],[242,12,243,16],[242,13,243,17,"disconnect"],[242,23,243,27],[242,24,243,28],[242,25,243,29],[243,6,244,8],[244,6,245,8],[244,13,245,15,"status"],[244,19,245,21],[245,4,246,4],[246,4,247,4],[247,0,248,0],[248,0,249,0],[249,4,250,4],[249,10,250,10,"removeAllChannels"],[249,27,250,27,"removeAllChannels"],[249,28,250,27],[249,30,250,30],[250,6,251,8],[250,12,251,14,"values_1"],[250,20,251,22],[250,23,251,25],[250,29,251,31,"Promise"],[250,36,251,38],[250,37,251,39,"all"],[250,40,251,42],[250,41,251,43],[250,45,251,47],[250,46,251,48,"channels"],[250,54,251,56],[250,55,251,57,"map"],[250,58,251,60],[250,59,251,62,"channel"],[250,66,251,69],[250,70,251,74,"channel"],[250,77,251,81],[250,78,251,82,"unsubscribe"],[250,89,251,93],[250,90,251,94],[250,91,251,95],[250,92,251,96],[250,93,251,97],[251,6,252,8],[251,10,252,12],[251,11,252,13,"channels"],[251,19,252,21],[251,22,252,24],[251,24,252,26],[252,6,253,8],[252,10,253,12],[252,11,253,13,"disconnect"],[252,21,253,23],[252,22,253,24],[252,23,253,25],[253,6,254,8],[253,13,254,15,"values_1"],[253,21,254,23],[254,4,255,4],[255,4,256,4],[256,0,257,0],[257,0,258,0],[258,0,259,0],[259,0,260,0],[260,4,261,4,"log"],[260,7,261,7,"log"],[260,8,261,8,"kind"],[260,12,261,12],[260,14,261,14,"msg"],[260,17,261,17],[260,19,261,19,"data"],[260,23,261,23],[260,25,261,25],[261,6,262,8],[261,10,262,12],[261,11,262,13,"logger"],[261,17,262,19],[261,18,262,20,"kind"],[261,22,262,24],[261,24,262,26,"msg"],[261,27,262,29],[261,29,262,31,"data"],[261,33,262,35],[261,34,262,36],[262,4,263,4],[263,4,264,4],[264,0,265,0],[265,0,266,0],[266,4,267,4,"connectionState"],[266,19,267,19,"connectionState"],[266,20,267,19],[266,22,267,22],[267,6,268,8],[267,14,268,16],[267,18,268,20],[267,19,268,21,"conn"],[267,23,268,25],[267,27,268,29],[267,31,268,33],[267,32,268,34,"conn"],[267,36,268,38],[267,37,268,39,"readyState"],[267,47,268,49],[268,8,269,12],[268,13,269,17,"constants_1"],[268,24,269,28],[268,25,269,29,"SOCKET_STATES"],[268,38,269,42],[268,39,269,43,"connecting"],[268,49,269,53],[269,10,270,16],[269,17,270,23,"constants_1"],[269,28,270,34],[269,29,270,35,"CONNECTION_STATE"],[269,45,270,51],[269,46,270,52,"Connecting"],[269,56,270,62],[270,8,271,12],[270,13,271,17,"constants_1"],[270,24,271,28],[270,25,271,29,"SOCKET_STATES"],[270,38,271,42],[270,39,271,43,"open"],[270,43,271,47],[271,10,272,16],[271,17,272,23,"constants_1"],[271,28,272,34],[271,29,272,35,"CONNECTION_STATE"],[271,45,272,51],[271,46,272,52,"Open"],[271,50,272,56],[272,8,273,12],[272,13,273,17,"constants_1"],[272,24,273,28],[272,25,273,29,"SOCKET_STATES"],[272,38,273,42],[272,39,273,43,"closing"],[272,46,273,50],[273,10,274,16],[273,17,274,23,"constants_1"],[273,28,274,34],[273,29,274,35,"CONNECTION_STATE"],[273,45,274,51],[273,46,274,52,"Closing"],[273,53,274,59],[274,8,275,12],[275,10,276,16],[275,17,276,23,"constants_1"],[275,28,276,34],[275,29,276,35,"CONNECTION_STATE"],[275,45,276,51],[275,46,276,52,"Closed"],[275,52,276,58],[276,6,277,8],[277,4,278,4],[278,4,279,4],[279,0,280,0],[280,0,281,0],[281,4,282,4,"isConnected"],[281,15,282,15,"isConnected"],[281,16,282,15],[281,18,282,18],[282,6,283,8],[282,13,283,15],[282,17,283,19],[282,18,283,20,"connectionState"],[282,33,283,35],[282,34,283,36],[282,35,283,37],[282,40,283,42,"constants_1"],[282,51,283,53],[282,52,283,54,"CONNECTION_STATE"],[282,68,283,70],[282,69,283,71,"Open"],[282,73,283,75],[283,4,284,4],[284,4,285,4],[285,0,286,0],[286,0,287,0],[287,4,288,4,"isConnecting"],[287,16,288,16,"isConnecting"],[287,17,288,16],[287,19,288,19],[288,6,289,8],[288,13,289,15],[288,17,289,19],[288,18,289,20,"_connectionState"],[288,34,289,36],[288,39,289,41],[288,51,289,53],[289,4,290,4],[290,4,291,4],[291,0,292,0],[292,0,293,0],[293,4,294,4,"isDisconnecting"],[293,19,294,19,"isDisconnecting"],[293,20,294,19],[293,22,294,22],[294,6,295,8],[294,13,295,15],[294,17,295,19],[294,18,295,20,"_connectionState"],[294,34,295,36],[294,39,295,41],[294,54,295,56],[295,4,296,4],[296,4,297,4,"channel"],[296,11,297,11,"channel"],[296,12,297,12,"topic"],[296,17,297,17],[296,19,297,19,"params"],[296,25,297,25],[296,28,297,28],[297,6,297,30,"config"],[297,12,297,36],[297,14,297,38],[297,15,297,39],[298,4,297,41],[298,5,297,42],[298,7,297,44],[299,6,298,8],[299,12,298,14,"realtimeTopic"],[299,25,298,27],[299,28,298,30],[299,40,298,42,"topic"],[299,45,298,47],[299,47,298,49],[300,6,299,8],[300,12,299,14,"exists"],[300,18,299,20],[300,21,299,23],[300,25,299,27],[300,26,299,28,"getChannels"],[300,37,299,39],[300,38,299,40],[300,39,299,41],[300,40,299,42,"find"],[300,44,299,46],[300,45,299,48,"c"],[300,46,299,49],[300,50,299,54,"c"],[300,51,299,55],[300,52,299,56,"topic"],[300,57,299,61],[300,62,299,66,"realtimeTopic"],[300,75,299,79],[300,76,299,80],[301,6,300,8],[301,10,300,12],[301,11,300,13,"exists"],[301,17,300,19],[301,19,300,21],[302,8,301,12],[302,14,301,18,"chan"],[302,18,301,22],[302,21,301,25],[302,25,301,29,"RealtimeChannel_1"],[302,42,301,46],[302,43,301,47,"default"],[302,50,301,54],[302,51,301,55],[302,63,301,67,"topic"],[302,68,301,72],[302,70,301,74],[302,72,301,76,"params"],[302,78,301,82],[302,80,301,84],[302,84,301,88],[302,85,301,89],[303,8,302,12],[303,12,302,16],[303,13,302,17,"channels"],[303,21,302,25],[303,22,302,26,"push"],[303,26,302,30],[303,27,302,31,"chan"],[303,31,302,35],[303,32,302,36],[304,8,303,12],[304,15,303,19,"chan"],[304,19,303,23],[305,6,304,8],[305,7,304,9],[305,13,305,13],[306,8,306,12],[306,15,306,19,"exists"],[306,21,306,25],[307,6,307,8],[308,4,308,4],[309,4,309,4],[310,0,310,0],[311,0,311,0],[312,0,312,0],[313,0,313,0],[314,4,314,4,"push"],[314,8,314,8,"push"],[314,9,314,9,"data"],[314,13,314,13],[314,15,314,15],[315,6,315,8],[315,12,315,14],[316,8,315,16,"topic"],[316,13,315,21],[317,8,315,23,"event"],[317,13,315,28],[318,8,315,30,"payload"],[318,15,315,37],[319,8,315,39,"ref"],[320,6,315,43],[320,7,315,44],[320,10,315,47,"data"],[320,14,315,51],[321,6,316,8],[321,12,316,14,"callback"],[321,20,316,22],[321,23,316,25,"callback"],[321,24,316,25],[321,29,316,31],[322,8,317,12],[322,12,317,16],[322,13,317,17,"encode"],[322,19,317,23],[322,20,317,24,"data"],[322,24,317,28],[322,26,317,31,"result"],[322,32,317,37],[322,36,317,42],[323,10,318,16],[323,14,318,20,"_a"],[323,16,318,22],[324,10,319,16],[324,11,319,17,"_a"],[324,13,319,19],[324,16,319,22],[324,20,319,26],[324,21,319,27,"conn"],[324,25,319,31],[324,31,319,37],[324,35,319,41],[324,39,319,45,"_a"],[324,41,319,47],[324,46,319,52],[324,51,319,57],[324,52,319,58],[324,55,319,61],[324,60,319,66],[324,61,319,67],[324,64,319,70,"_a"],[324,66,319,72],[324,67,319,73,"send"],[324,71,319,77],[324,72,319,78,"result"],[324,78,319,84],[324,79,319,85],[325,8,320,12],[325,9,320,13],[325,10,320,14],[326,6,321,8],[326,7,321,9],[327,6,322,8],[327,10,322,12],[327,11,322,13,"log"],[327,14,322,16],[327,15,322,17],[327,21,322,23],[327,23,322,25],[327,26,322,28,"topic"],[327,31,322,33],[327,35,322,37,"event"],[327,40,322,42],[327,45,322,47,"ref"],[327,48,322,50],[327,51,322,53],[327,53,322,55,"payload"],[327,60,322,62],[327,61,322,63],[328,6,323,8],[328,10,323,12],[328,14,323,16],[328,15,323,17,"isConnected"],[328,26,323,28],[328,27,323,29],[328,28,323,30],[328,30,323,32],[329,8,324,12,"callback"],[329,16,324,20],[329,17,324,21],[329,18,324,22],[330,6,325,8],[330,7,325,9],[330,13,326,13],[331,8,327,12],[331,12,327,16],[331,13,327,17,"sendBuffer"],[331,23,327,27],[331,24,327,28,"push"],[331,28,327,32],[331,29,327,33,"callback"],[331,37,327,41],[331,38,327,42],[332,6,328,8],[333,4,329,4],[334,4,330,4],[335,0,331,0],[336,0,332,0],[337,0,333,0],[338,0,334,0],[339,0,335,0],[340,0,336,0],[341,0,337,0],[342,0,338,0],[343,4,339,4],[343,10,339,10,"setAuth"],[343,17,339,17,"setAuth"],[343,18,339,18,"token"],[343,23,339,23],[343,26,339,26],[343,30,339,30],[343,32,339,32],[344,6,340,8],[344,10,340,12],[344,11,340,13,"_authPromise"],[344,23,340,25],[344,26,340,28],[344,30,340,32],[344,31,340,33,"_performAuth"],[344,43,340,45],[344,44,340,46,"token"],[344,49,340,51],[344,50,340,52],[345,6,341,8],[345,10,341,12],[346,8,342,12],[346,14,342,18],[346,18,342,22],[346,19,342,23,"_authPromise"],[346,31,342,35],[347,6,343,8],[347,7,343,9],[347,16,344,16],[348,8,345,12],[348,12,345,16],[348,13,345,17,"_authPromise"],[348,25,345,29],[348,28,345,32],[348,32,345,36],[349,6,346,8],[350,4,347,4],[351,4,348,4],[352,0,349,0],[353,0,350,0],[354,4,351,4],[354,10,351,10,"sendHeartbeat"],[354,23,351,23,"sendHeartbeat"],[354,24,351,23],[354,26,351,26],[355,6,352,8],[355,10,352,12,"_a"],[355,12,352,14],[356,6,353,8],[356,10,353,12],[356,11,353,13],[356,15,353,17],[356,16,353,18,"isConnected"],[356,27,353,29],[356,28,353,30],[356,29,353,31],[356,31,353,33],[357,8,354,12],[357,12,354,16],[358,10,355,16],[358,14,355,20],[358,15,355,21,"heartbeatCallback"],[358,32,355,38],[358,33,355,39],[358,47,355,53],[358,48,355,54],[359,8,356,12],[359,9,356,13],[359,10,357,12],[359,17,357,19,"e"],[359,18,357,20],[359,20,357,22],[360,10,358,16],[360,14,358,20],[360,15,358,21,"log"],[360,18,358,24],[360,19,358,25],[360,26,358,32],[360,28,358,34],[360,57,358,63],[360,59,358,65,"e"],[360,60,358,66],[360,61,358,67],[361,8,359,12],[362,8,360,12],[363,6,361,8],[364,6,362,8],[365,6,363,8],[365,10,363,12],[365,14,363,16],[365,15,363,17,"pendingHeartbeatRef"],[365,34,363,36],[365,36,363,38],[366,8,364,12],[366,12,364,16],[366,13,364,17,"pendingHeartbeatRef"],[366,32,364,36],[366,35,364,39],[366,39,364,43],[367,8,365,12],[367,12,365,16],[367,13,365,17,"log"],[367,16,365,20],[367,17,365,21],[367,28,365,32],[367,30,365,34],[367,88,365,92],[367,89,365,93],[368,8,366,12],[368,12,366,16],[369,10,367,16],[369,14,367,20],[369,15,367,21,"heartbeatCallback"],[369,32,367,38],[369,33,367,39],[369,42,367,48],[369,43,367,49],[370,8,368,12],[370,9,368,13],[370,10,369,12],[370,17,369,19,"e"],[370,18,369,20],[370,20,369,22],[371,10,370,16],[371,14,370,20],[371,15,370,21,"log"],[371,18,370,24],[371,19,370,25],[371,26,370,32],[371,28,370,34],[371,57,370,63],[371,59,370,65,"e"],[371,60,370,66],[371,61,370,67],[372,8,371,12],[373,8,372,12],[374,8,373,12],[374,12,373,16],[374,13,373,17,"_wasManualDisconnect"],[374,33,373,37],[374,36,373,40],[374,41,373,45],[375,8,374,12],[375,9,374,13,"_a"],[375,11,374,15],[375,14,374,18],[375,18,374,22],[375,19,374,23,"conn"],[375,23,374,27],[375,29,374,33],[375,33,374,37],[375,37,374,41,"_a"],[375,39,374,43],[375,44,374,48],[375,49,374,53],[375,50,374,54],[375,53,374,57],[375,58,374,62],[375,59,374,63],[375,62,374,66,"_a"],[375,64,374,68],[375,65,374,69,"close"],[375,70,374,74],[375,71,374,75,"constants_1"],[375,82,374,86],[375,83,374,87,"WS_CLOSE_NORMAL"],[375,98,374,102],[375,100,374,104],[375,119,374,123],[375,120,374,124],[376,8,375,12,"setTimeout"],[376,18,375,22],[376,19,375,23],[376,25,375,29],[377,10,376,16],[377,14,376,20,"_a"],[377,16,376,22],[378,10,377,16],[378,14,377,20],[378,15,377,21],[378,19,377,25],[378,20,377,26,"isConnected"],[378,31,377,37],[378,32,377,38],[378,33,377,39],[378,35,377,41],[379,12,378,20],[379,13,378,21,"_a"],[379,15,378,23],[379,18,378,26],[379,22,378,30],[379,23,378,31,"reconnectTimer"],[379,37,378,45],[379,43,378,51],[379,47,378,55],[379,51,378,59,"_a"],[379,53,378,61],[379,58,378,66],[379,63,378,71],[379,64,378,72],[379,67,378,75],[379,72,378,80],[379,73,378,81],[379,76,378,84,"_a"],[379,78,378,86],[379,79,378,87,"scheduleTimeout"],[379,94,378,102],[379,95,378,103],[379,96,378,104],[380,10,379,16],[381,8,380,12],[381,9,380,13],[381,11,380,15,"CONNECTION_TIMEOUTS"],[381,30,380,34],[381,31,380,35,"HEARTBEAT_TIMEOUT_FALLBACK"],[381,57,380,61],[381,58,380,62],[382,8,381,12],[383,6,382,8],[384,6,383,8],[385,6,384,8],[385,10,384,12],[385,11,384,13,"pendingHeartbeatRef"],[385,30,384,32],[385,33,384,35],[385,37,384,39],[385,38,384,40,"_makeRef"],[385,46,384,48],[385,47,384,49],[385,48,384,50],[386,6,385,8],[386,10,385,12],[386,11,385,13,"push"],[386,15,385,17],[386,16,385,18],[387,8,386,12,"topic"],[387,13,386,17],[387,15,386,19],[387,24,386,28],[388,8,387,12,"event"],[388,13,387,17],[388,15,387,19],[388,26,387,30],[389,8,388,12,"payload"],[389,15,388,19],[389,17,388,21],[389,18,388,22],[389,19,388,23],[390,8,389,12,"ref"],[390,11,389,15],[390,13,389,17],[390,17,389,21],[390,18,389,22,"pendingHeartbeatRef"],[391,6,390,8],[391,7,390,9],[391,8,390,10],[392,6,391,8],[392,10,391,12],[393,8,392,12],[393,12,392,16],[393,13,392,17,"heartbeatCallback"],[393,30,392,34],[393,31,392,35],[393,37,392,41],[393,38,392,42],[394,6,393,8],[394,7,393,9],[394,8,394,8],[394,15,394,15,"e"],[394,16,394,16],[394,18,394,18],[395,8,395,12],[395,12,395,16],[395,13,395,17,"log"],[395,16,395,20],[395,17,395,21],[395,24,395,28],[395,26,395,30],[395,55,395,59],[395,57,395,61,"e"],[395,58,395,62],[395,59,395,63],[396,6,396,8],[397,6,397,8],[397,10,397,12],[397,11,397,13,"_setAuthSafely"],[397,25,397,27],[397,26,397,28],[397,37,397,39],[397,38,397,40],[398,4,398,4],[399,4,399,4,"onHeartbeat"],[399,15,399,15,"onHeartbeat"],[399,16,399,16,"callback"],[399,24,399,24],[399,26,399,26],[400,6,400,8],[400,10,400,12],[400,11,400,13,"heartbeatCallback"],[400,28,400,30],[400,31,400,33,"callback"],[400,39,400,41],[401,4,401,4],[402,4,402,4],[403,0,403,0],[404,0,404,0],[405,4,405,4,"flushSendBuffer"],[405,19,405,19,"flushSendBuffer"],[405,20,405,19],[405,22,405,22],[406,6,406,8],[406,10,406,12],[406,14,406,16],[406,15,406,17,"isConnected"],[406,26,406,28],[406,27,406,29],[406,28,406,30],[406,32,406,34],[406,36,406,38],[406,37,406,39,"sendBuffer"],[406,47,406,49],[406,48,406,50,"length"],[406,54,406,56],[406,57,406,59],[406,58,406,60],[406,60,406,62],[407,8,407,12],[407,12,407,16],[407,13,407,17,"sendBuffer"],[407,23,407,27],[407,24,407,28,"forEach"],[407,31,407,35],[407,32,407,37,"callback"],[407,40,407,45],[407,44,407,50,"callback"],[407,52,407,58],[407,53,407,59],[407,54,407,60],[407,55,407,61],[408,8,408,12],[408,12,408,16],[408,13,408,17,"sendBuffer"],[408,23,408,27],[408,26,408,30],[408,28,408,32],[409,6,409,8],[410,4,410,4],[411,4,411,4],[412,0,412,0],[413,0,413,0],[414,0,414,0],[415,0,415,0],[416,4,416,4,"_makeRef"],[416,12,416,12,"_makeRef"],[416,13,416,12],[416,15,416,15],[417,6,417,8],[417,10,417,12,"newRef"],[417,16,417,18],[417,19,417,21],[417,23,417,25],[417,24,417,26,"ref"],[417,27,417,29],[417,30,417,32],[417,31,417,33],[418,6,418,8],[418,10,418,12,"newRef"],[418,16,418,18],[418,21,418,23],[418,25,418,27],[418,26,418,28,"ref"],[418,29,418,31],[418,31,418,33],[419,8,419,12],[419,12,419,16],[419,13,419,17,"ref"],[419,16,419,20],[419,19,419,23],[419,20,419,24],[420,6,420,8],[420,7,420,9],[420,13,421,13],[421,8,422,12],[421,12,422,16],[421,13,422,17,"ref"],[421,16,422,20],[421,19,422,23,"newRef"],[421,25,422,29],[422,6,423,8],[423,6,424,8],[423,13,424,15],[423,17,424,19],[423,18,424,20,"ref"],[423,21,424,23],[423,22,424,24,"toString"],[423,30,424,32],[423,31,424,33],[423,32,424,34],[424,4,425,4],[425,4,426,4],[426,0,427,0],[427,0,428,0],[428,0,429,0],[429,0,430,0],[430,4,431,4,"_leaveOpenTopic"],[430,19,431,19,"_leaveOpenTopic"],[430,20,431,20,"topic"],[430,25,431,25],[430,27,431,27],[431,6,432,8],[431,10,432,12,"dupChannel"],[431,20,432,22],[431,23,432,25],[431,27,432,29],[431,28,432,30,"channels"],[431,36,432,38],[431,37,432,39,"find"],[431,41,432,43],[431,42,432,45,"c"],[431,43,432,46],[431,47,432,51,"c"],[431,48,432,52],[431,49,432,53,"topic"],[431,54,432,58],[431,59,432,63,"topic"],[431,64,432,68],[431,69,432,73,"c"],[431,70,432,74],[431,71,432,75,"_isJoined"],[431,80,432,84],[431,81,432,85],[431,82,432,86],[431,86,432,90,"c"],[431,87,432,91],[431,88,432,92,"_isJoining"],[431,98,432,102],[431,99,432,103],[431,100,432,104],[431,101,432,105],[431,102,432,106],[432,6,433,8],[432,10,433,12,"dupChannel"],[432,20,433,22],[432,22,433,24],[433,8,434,12],[433,12,434,16],[433,13,434,17,"log"],[433,16,434,20],[433,17,434,21],[433,28,434,32],[433,30,434,34],[433,58,434,62,"topic"],[433,63,434,67],[433,66,434,70],[433,67,434,71],[434,8,435,12,"dupChannel"],[434,18,435,22],[434,19,435,23,"unsubscribe"],[434,30,435,34],[434,31,435,35],[434,32,435,36],[435,6,436,8],[436,4,437,4],[437,4,438,4],[438,0,439,0],[439,0,440,0],[440,0,441,0],[441,0,442,0],[442,0,443,0],[443,0,444,0],[444,4,445,4,"_remove"],[444,11,445,11,"_remove"],[444,12,445,12,"channel"],[444,19,445,19],[444,21,445,21],[445,6,446,8],[445,10,446,12],[445,11,446,13,"channels"],[445,19,446,21],[445,22,446,24],[445,26,446,28],[445,27,446,29,"channels"],[445,35,446,37],[445,36,446,38,"filter"],[445,42,446,44],[445,43,446,46,"c"],[445,44,446,47],[445,48,446,52,"c"],[445,49,446,53],[445,50,446,54,"topic"],[445,55,446,59],[445,60,446,64,"channel"],[445,67,446,71],[445,68,446,72,"topic"],[445,73,446,77],[445,74,446,78],[446,4,447,4],[447,4,448,4],[448,4,449,4,"_onConnMessage"],[448,18,449,18,"_onConnMessage"],[448,19,449,19,"rawMessage"],[448,29,449,29],[448,31,449,31],[449,6,450,8],[449,10,450,12],[449,11,450,13,"decode"],[449,17,450,19],[449,18,450,20,"rawMessage"],[449,28,450,30],[449,29,450,31,"data"],[449,33,450,35],[449,35,450,38,"msg"],[449,38,450,41],[449,42,450,46],[450,8,451,12],[451,8,452,12],[451,12,452,16,"msg"],[451,15,452,19],[451,16,452,20,"topic"],[451,21,452,25],[451,26,452,30],[451,35,452,39],[451,39,452,43,"msg"],[451,42,452,46],[451,43,452,47,"event"],[451,48,452,52],[451,53,452,57],[451,64,452,68],[451,66,452,70],[452,10,453,16],[452,14,453,20],[453,12,454,20],[453,16,454,24],[453,17,454,25,"heartbeatCallback"],[453,34,454,42],[453,35,454,43,"msg"],[453,38,454,46],[453,39,454,47,"payload"],[453,46,454,54],[453,47,454,55,"status"],[453,53,454,61],[453,58,454,66],[453,62,454,70],[453,65,454,73],[453,69,454,77],[453,72,454,80],[453,79,454,87],[453,80,454,88],[454,10,455,16],[454,11,455,17],[454,12,456,16],[454,19,456,23,"e"],[454,20,456,24],[454,22,456,26],[455,12,457,20],[455,16,457,24],[455,17,457,25,"log"],[455,20,457,28],[455,21,457,29],[455,28,457,36],[455,30,457,38],[455,59,457,67],[455,61,457,69,"e"],[455,62,457,70],[455,63,457,71],[456,10,458,16],[457,8,459,12],[458,8,460,12],[459,8,461,12],[459,12,461,16,"msg"],[459,15,461,19],[459,16,461,20,"ref"],[459,19,461,23],[459,23,461,27,"msg"],[459,26,461,30],[459,27,461,31,"ref"],[459,30,461,34],[459,35,461,39],[459,39,461,43],[459,40,461,44,"pendingHeartbeatRef"],[459,59,461,63],[459,61,461,65],[460,10,462,16],[460,14,462,20],[460,15,462,21,"pendingHeartbeatRef"],[460,34,462,40],[460,37,462,43],[460,41,462,47],[461,8,463,12],[462,8,464,12],[463,8,465,12],[463,14,465,18],[464,10,465,20,"topic"],[464,15,465,25],[465,10,465,27,"event"],[465,15,465,32],[466,10,465,34,"payload"],[466,17,465,41],[467,10,465,43,"ref"],[468,8,465,47],[468,9,465,48],[468,12,465,51,"msg"],[468,15,465,54],[469,8,466,12],[469,14,466,18,"refString"],[469,23,466,27],[469,26,466,30,"ref"],[469,29,466,33],[469,32,466,36],[469,36,466,40,"ref"],[469,39,466,43],[469,42,466,46],[469,45,466,49],[469,47,466,51],[470,8,467,12],[470,14,467,18,"status"],[470,20,467,24],[470,23,467,27,"payload"],[470,30,467,34],[470,31,467,35,"status"],[470,37,467,41],[470,41,467,45],[470,43,467,47],[471,8,468,12],[471,12,468,16],[471,13,468,17,"log"],[471,16,468,20],[471,17,468,21],[471,26,468,30],[471,28,468,32],[471,31,468,35,"status"],[471,37,468,41],[471,41,468,45,"topic"],[471,46,468,50],[471,50,468,54,"event"],[471,55,468,59],[471,59,468,63,"refString"],[471,68,468,72],[471,70,468,74],[471,71,468,75,"trim"],[471,75,468,79],[471,76,468,80],[471,77,468,81],[471,79,468,83,"payload"],[471,86,468,90],[471,87,468,91],[472,8,469,12],[473,8,470,12],[473,12,470,16],[473,13,470,17,"channels"],[473,21,470,25],[473,22,471,17,"filter"],[473,28,471,23],[473,29,471,25,"channel"],[473,36,471,32],[473,40,471,37,"channel"],[473,47,471,44],[473,48,471,45,"_isMember"],[473,57,471,54],[473,58,471,55,"topic"],[473,63,471,60],[473,64,471,61],[473,65,471,62],[473,66,472,17,"forEach"],[473,73,472,24],[473,74,472,26,"channel"],[473,81,472,33],[473,85,472,38,"channel"],[473,92,472,45],[473,93,472,46,"_trigger"],[473,101,472,54],[473,102,472,55,"event"],[473,107,472,60],[473,109,472,62,"payload"],[473,116,472,69],[473,118,472,71,"ref"],[473,121,472,74],[473,122,472,75],[473,123,472,76],[474,8,473,12],[474,12,473,16],[474,13,473,17,"_triggerStateCallbacks"],[474,35,473,39],[474,36,473,40],[474,45,473,49],[474,47,473,51,"msg"],[474,50,473,54],[474,51,473,55],[475,6,474,8],[475,7,474,9],[475,8,474,10],[476,4,475,4],[477,4,476,4],[478,0,477,0],[479,0,478,0],[480,0,479,0],[481,4,480,4,"_clearTimer"],[481,15,480,15,"_clearTimer"],[481,16,480,16,"timer"],[481,21,480,21],[481,23,480,23],[482,6,481,8],[482,10,481,12,"_a"],[482,12,481,14],[483,6,482,8],[483,10,482,12,"timer"],[483,15,482,17],[483,20,482,22],[483,31,482,33],[483,35,482,37],[483,39,482,41],[483,40,482,42,"heartbeatTimer"],[483,54,482,56],[483,56,482,58],[484,8,483,12,"clearInterval"],[484,21,483,25],[484,22,483,26],[484,26,483,30],[484,27,483,31,"heartbeatTimer"],[484,41,483,45],[484,42,483,46],[485,8,484,12],[485,12,484,16],[485,13,484,17,"heartbeatTimer"],[485,27,484,31],[485,30,484,34,"undefined"],[485,39,484,43],[486,6,485,8],[486,7,485,9],[486,13,486,13],[486,17,486,17,"timer"],[486,22,486,22],[486,27,486,27],[486,38,486,38],[486,40,486,40],[487,8,487,12],[487,9,487,13,"_a"],[487,11,487,15],[487,14,487,18],[487,18,487,22],[487,19,487,23,"reconnectTimer"],[487,33,487,37],[487,39,487,43],[487,43,487,47],[487,47,487,51,"_a"],[487,49,487,53],[487,54,487,58],[487,59,487,63],[487,60,487,64],[487,63,487,67],[487,68,487,72],[487,69,487,73],[487,72,487,76,"_a"],[487,74,487,78],[487,75,487,79,"reset"],[487,80,487,84],[487,81,487,85],[487,82,487,86],[488,6,488,8],[489,4,489,4],[490,4,490,4],[491,0,491,0],[492,0,492,0],[493,0,493,0],[494,4,494,4,"_clearAllTimers"],[494,19,494,19,"_clearAllTimers"],[494,20,494,19],[494,22,494,22],[495,6,495,8],[495,10,495,12],[495,11,495,13,"_clearTimer"],[495,22,495,24],[495,23,495,25],[495,34,495,36],[495,35,495,37],[496,6,496,8],[496,10,496,12],[496,11,496,13,"_clearTimer"],[496,22,496,24],[496,23,496,25],[496,34,496,36],[496,35,496,37],[497,4,497,4],[498,4,498,4],[499,0,499,0],[500,0,500,0],[501,0,501,0],[502,4,502,4,"_setupConnectionHandlers"],[502,28,502,28,"_setupConnectionHandlers"],[502,29,502,28],[502,31,502,31],[503,6,503,8],[503,10,503,12],[503,11,503,13],[503,15,503,17],[503,16,503,18,"conn"],[503,20,503,22],[503,22,504,12],[504,6,505,8],[505,6,506,8],[505,10,506,12],[505,22,506,24],[505,26,506,28],[505,30,506,32],[505,31,506,33,"conn"],[505,35,506,37],[505,37,506,39],[506,8,507,12],[507,8,508,12],[507,12,508,16],[507,13,508,17,"conn"],[507,17,508,21],[507,18,508,22,"binaryType"],[507,28,508,32],[507,31,508,35],[507,44,508,48],[508,6,509,8],[509,6,510,8],[509,10,510,12],[509,11,510,13,"conn"],[509,15,510,17],[509,16,510,18,"onopen"],[509,22,510,24],[509,25,510,27],[509,31,510,33],[509,35,510,37],[509,36,510,38,"_onConnOpen"],[509,47,510,49],[509,48,510,50],[509,49,510,51],[510,6,511,8],[510,10,511,12],[510,11,511,13,"conn"],[510,15,511,17],[510,16,511,18,"onerror"],[510,23,511,25],[510,26,511,29,"error"],[510,31,511,34],[510,35,511,39],[510,39,511,43],[510,40,511,44,"_onConnError"],[510,52,511,56],[510,53,511,57,"error"],[510,58,511,62],[510,59,511,63],[511,6,512,8],[511,10,512,12],[511,11,512,13,"conn"],[511,15,512,17],[511,16,512,18,"onmessage"],[511,25,512,27],[511,28,512,31,"event"],[511,33,512,36],[511,37,512,41],[511,41,512,45],[511,42,512,46,"_onConnMessage"],[511,56,512,60],[511,57,512,61,"event"],[511,62,512,66],[511,63,512,67],[512,6,513,8],[512,10,513,12],[512,11,513,13,"conn"],[512,15,513,17],[512,16,513,18,"onclose"],[512,23,513,25],[512,26,513,29,"event"],[512,31,513,34],[512,35,513,39],[512,39,513,43],[512,40,513,44,"_onConnClose"],[512,52,513,56],[512,53,513,57,"event"],[512,58,513,62],[512,59,513,63],[513,4,514,4],[514,4,515,4],[515,0,516,0],[516,0,517,0],[517,0,518,0],[518,4,519,4,"_teardownConnection"],[518,23,519,23,"_teardownConnection"],[518,24,519,23],[518,26,519,26],[519,6,520,8],[519,10,520,12],[519,14,520,16],[519,15,520,17,"conn"],[519,19,520,21],[519,21,520,23],[520,8,521,12],[520,12,521,16],[520,13,521,17,"conn"],[520,17,521,21],[520,18,521,22,"onopen"],[520,24,521,28],[520,27,521,31],[520,31,521,35],[521,8,522,12],[521,12,522,16],[521,13,522,17,"conn"],[521,17,522,21],[521,18,522,22,"onerror"],[521,25,522,29],[521,28,522,32],[521,32,522,36],[522,8,523,12],[522,12,523,16],[522,13,523,17,"conn"],[522,17,523,21],[522,18,523,22,"onmessage"],[522,27,523,31],[522,30,523,34],[522,34,523,38],[523,8,524,12],[523,12,524,16],[523,13,524,17,"conn"],[523,17,524,21],[523,18,524,22,"onclose"],[523,25,524,29],[523,28,524,32],[523,32,524,36],[524,8,525,12],[524,12,525,16],[524,13,525,17,"conn"],[524,17,525,21],[524,20,525,24],[524,24,525,28],[525,6,526,8],[526,6,527,8],[526,10,527,12],[526,11,527,13,"_clearAllTimers"],[526,26,527,28],[526,27,527,29],[526,28,527,30],[527,6,528,8],[527,10,528,12],[527,11,528,13,"channels"],[527,19,528,21],[527,20,528,22,"forEach"],[527,27,528,29],[527,28,528,31,"channel"],[527,35,528,38],[527,39,528,43,"channel"],[527,46,528,50],[527,47,528,51,"teardown"],[527,55,528,59],[527,56,528,60],[527,57,528,61],[527,58,528,62],[528,4,529,4],[529,4,530,4],[530,4,531,4,"_onConnOpen"],[530,15,531,15,"_onConnOpen"],[530,16,531,15],[530,18,531,18],[531,6,532,8],[531,10,532,12],[531,11,532,13,"_setConnectionState"],[531,30,532,32],[531,31,532,33],[531,42,532,44],[531,43,532,45],[532,6,533,8],[532,10,533,12],[532,11,533,13,"log"],[532,14,533,16],[532,15,533,17],[532,26,533,28],[532,28,533,30],[532,44,533,46],[532,48,533,50],[532,49,533,51,"endpointURL"],[532,60,533,62],[532,61,533,63],[532,62,533,64],[532,64,533,66],[532,65,533,67],[533,6,534,8],[533,10,534,12],[533,11,534,13,"flushSendBuffer"],[533,26,534,28],[533,27,534,29],[533,28,534,30],[534,6,535,8],[534,10,535,12],[534,11,535,13,"_clearTimer"],[534,22,535,24],[534,23,535,25],[534,34,535,36],[534,35,535,37],[535,6,536,8],[535,10,536,12],[535,11,536,13],[535,15,536,17],[535,16,536,18,"worker"],[535,22,536,24],[535,24,536,26],[536,8,537,12],[536,12,537,16],[536,13,537,17,"_startHeartbeat"],[536,28,537,32],[536,29,537,33],[536,30,537,34],[537,6,538,8],[537,7,538,9],[537,13,539,13],[538,8,540,12],[538,12,540,16],[538,13,540,17],[538,17,540,21],[538,18,540,22,"workerRef"],[538,27,540,31],[538,29,540,33],[539,10,541,16],[539,14,541,20],[539,15,541,21,"_startWorkerHeartbeat"],[539,36,541,42],[539,37,541,43],[539,38,541,44],[540,8,542,12],[541,6,543,8],[542,6,544,8],[542,10,544,12],[542,11,544,13,"_triggerStateCallbacks"],[542,33,544,35],[542,34,544,36],[542,40,544,42],[542,41,544,43],[543,4,545,4],[544,4,546,4],[545,4,547,4,"_startHeartbeat"],[545,19,547,19,"_startHeartbeat"],[545,20,547,19],[545,22,547,22],[546,6,548,8],[546,10,548,12],[546,11,548,13,"heartbeatTimer"],[546,25,548,27],[546,29,548,31,"clearInterval"],[546,42,548,44],[546,43,548,45],[546,47,548,49],[546,48,548,50,"heartbeatTimer"],[546,62,548,64],[546,63,548,65],[547,6,549,8],[547,10,549,12],[547,11,549,13,"heartbeatTimer"],[547,25,549,27],[547,28,549,30,"setInterval"],[547,39,549,41],[547,40,549,42],[547,46,549,48],[547,50,549,52],[547,51,549,53,"sendHeartbeat"],[547,64,549,66],[547,65,549,67],[547,66,549,68],[547,68,549,70],[547,72,549,74],[547,73,549,75,"heartbeatIntervalMs"],[547,92,549,94],[547,93,549,95],[548,4,550,4],[549,4,551,4],[550,4,552,4,"_startWorkerHeartbeat"],[550,25,552,25,"_startWorkerHeartbeat"],[550,26,552,25],[550,28,552,28],[551,6,553,8],[551,10,553,12],[551,14,553,16],[551,15,553,17,"workerUrl"],[551,24,553,26],[551,26,553,28],[552,8,554,12],[552,12,554,16],[552,13,554,17,"log"],[552,16,554,20],[552,17,554,21],[552,25,554,29],[552,27,554,31],[552,55,554,59],[552,59,554,63],[552,60,554,64,"workerUrl"],[552,69,554,73],[552,71,554,75],[552,72,554,76],[553,6,555,8],[553,7,555,9],[553,13,556,13],[554,8,557,12],[554,12,557,16],[554,13,557,17,"log"],[554,16,557,20],[554,17,557,21],[554,25,557,29],[554,27,557,31],[554,52,557,56],[554,53,557,57],[555,6,558,8],[556,6,559,8],[556,12,559,14,"objectUrl"],[556,21,559,23],[556,24,559,26],[556,28,559,30],[556,29,559,31,"_workerObjectUrl"],[556,45,559,47],[556,46,559,48],[556,50,559,52],[556,51,559,53,"workerUrl"],[556,60,559,62],[556,61,559,63],[557,6,560,8],[557,10,560,12],[557,11,560,13,"workerRef"],[557,20,560,22],[557,23,560,25],[557,27,560,29,"Worker"],[557,33,560,35],[557,34,560,36,"objectUrl"],[557,43,560,45],[557,44,560,46],[558,6,561,8],[558,10,561,12],[558,11,561,13,"workerRef"],[558,20,561,22],[558,21,561,23,"onerror"],[558,28,561,30],[558,31,561,34,"error"],[558,36,561,39],[558,40,561,44],[559,8,562,12],[559,12,562,16],[559,13,562,17,"log"],[559,16,562,20],[559,17,562,21],[559,25,562,29],[559,27,562,31],[559,41,562,45],[559,43,562,47,"error"],[559,48,562,52],[559,49,562,53,"message"],[559,56,562,60],[559,57,562,61],[560,8,563,12],[560,12,563,16],[560,13,563,17,"workerRef"],[560,22,563,26],[560,23,563,27,"terminate"],[560,32,563,36],[560,33,563,37],[560,34,563,38],[561,6,564,8],[561,7,564,9],[562,6,565,8],[562,10,565,12],[562,11,565,13,"workerRef"],[562,20,565,22],[562,21,565,23,"onmessage"],[562,30,565,32],[562,33,565,36,"event"],[562,38,565,41],[562,42,565,46],[563,8,566,12],[563,12,566,16,"event"],[563,17,566,21],[563,18,566,22,"data"],[563,22,566,26],[563,23,566,27,"event"],[563,28,566,32],[563,33,566,37],[563,44,566,48],[563,46,566,50],[564,10,567,16],[564,14,567,20],[564,15,567,21,"sendHeartbeat"],[564,28,567,34],[564,29,567,35],[564,30,567,36],[565,8,568,12],[566,6,569,8],[566,7,569,9],[567,6,570,8],[567,10,570,12],[567,11,570,13,"workerRef"],[567,20,570,22],[567,21,570,23,"postMessage"],[567,32,570,34],[567,33,570,35],[568,8,571,12,"event"],[568,13,571,17],[568,15,571,19],[568,22,571,26],[569,8,572,12,"interval"],[569,16,572,20],[569,18,572,22],[569,22,572,26],[569,23,572,27,"heartbeatIntervalMs"],[570,6,573,8],[570,7,573,9],[570,8,573,10],[571,4,574,4],[572,4,575,4],[573,4,576,4,"_onConnClose"],[573,16,576,16,"_onConnClose"],[573,17,576,17,"event"],[573,22,576,22],[573,24,576,24],[574,6,577,8],[574,10,577,12,"_a"],[574,12,577,14],[575,6,578,8],[575,10,578,12],[575,11,578,13,"_setConnectionState"],[575,30,578,32],[575,31,578,33],[575,45,578,47],[575,46,578,48],[576,6,579,8],[576,10,579,12],[576,11,579,13,"log"],[576,14,579,16],[576,15,579,17],[576,26,579,28],[576,28,579,30],[576,35,579,37],[576,37,579,39,"event"],[576,42,579,44],[576,43,579,45],[577,6,580,8],[577,10,580,12],[577,11,580,13,"_triggerChanError"],[577,28,580,30],[577,29,580,31],[577,30,580,32],[578,6,581,8],[578,10,581,12],[578,11,581,13,"_clearTimer"],[578,22,581,24],[578,23,581,25],[578,34,581,36],[578,35,581,37],[579,6,582,8],[580,6,583,8],[580,10,583,12],[580,11,583,13],[580,15,583,17],[580,16,583,18,"_wasManualDisconnect"],[580,36,583,38],[580,38,583,40],[581,8,584,12],[581,9,584,13,"_a"],[581,11,584,15],[581,14,584,18],[581,18,584,22],[581,19,584,23,"reconnectTimer"],[581,33,584,37],[581,39,584,43],[581,43,584,47],[581,47,584,51,"_a"],[581,49,584,53],[581,54,584,58],[581,59,584,63],[581,60,584,64],[581,63,584,67],[581,68,584,72],[581,69,584,73],[581,72,584,76,"_a"],[581,74,584,78],[581,75,584,79,"scheduleTimeout"],[581,90,584,94],[581,91,584,95],[581,92,584,96],[582,6,585,8],[583,6,586,8],[583,10,586,12],[583,11,586,13,"_triggerStateCallbacks"],[583,33,586,35],[583,34,586,36],[583,41,586,43],[583,43,586,45,"event"],[583,48,586,50],[583,49,586,51],[584,4,587,4],[585,4,588,4],[586,4,589,4,"_onConnError"],[586,16,589,16,"_onConnError"],[586,17,589,17,"error"],[586,22,589,22],[586,24,589,24],[587,6,590,8],[587,10,590,12],[587,11,590,13,"_setConnectionState"],[587,30,590,32],[587,31,590,33],[587,45,590,47],[587,46,590,48],[588,6,591,8],[588,10,591,12],[588,11,591,13,"log"],[588,14,591,16],[588,15,591,17],[588,26,591,28],[588,28,591,30],[588,31,591,33,"error"],[588,36,591,38],[588,38,591,40],[588,39,591,41],[589,6,592,8],[589,10,592,12],[589,11,592,13,"_triggerChanError"],[589,28,592,30],[589,29,592,31],[589,30,592,32],[590,6,593,8],[590,10,593,12],[590,11,593,13,"_triggerStateCallbacks"],[590,33,593,35],[590,34,593,36],[590,41,593,43],[590,43,593,45,"error"],[590,48,593,50],[590,49,593,51],[591,4,594,4],[592,4,595,4],[593,4,596,4,"_triggerChanError"],[593,21,596,21,"_triggerChanError"],[593,22,596,21],[593,24,596,24],[594,6,597,8],[594,10,597,12],[594,11,597,13,"channels"],[594,19,597,21],[594,20,597,22,"forEach"],[594,27,597,29],[594,28,597,31,"channel"],[594,35,597,38],[594,39,597,43,"channel"],[594,46,597,50],[594,47,597,51,"_trigger"],[594,55,597,59],[594,56,597,60,"constants_1"],[594,67,597,71],[594,68,597,72,"CHANNEL_EVENTS"],[594,82,597,86],[594,83,597,87,"error"],[594,88,597,92],[594,89,597,93],[594,90,597,94],[595,4,598,4],[596,4,599,4],[597,4,600,4,"_appendParams"],[597,17,600,17,"_appendParams"],[597,18,600,18,"url"],[597,21,600,21],[597,23,600,23,"params"],[597,29,600,29],[597,31,600,31],[598,6,601,8],[598,10,601,12,"Object"],[598,16,601,18],[598,17,601,19,"keys"],[598,21,601,23],[598,22,601,24,"params"],[598,28,601,30],[598,29,601,31],[598,30,601,32,"length"],[598,36,601,38],[598,41,601,43],[598,42,601,44],[598,44,601,46],[599,8,602,12],[599,15,602,19,"url"],[599,18,602,22],[600,6,603,8],[601,6,604,8],[601,12,604,14,"prefix"],[601,18,604,20],[601,21,604,23,"url"],[601,24,604,26],[601,25,604,27,"match"],[601,30,604,32],[601,31,604,33],[601,35,604,37],[601,36,604,38],[601,39,604,41],[601,42,604,44],[601,45,604,47],[601,48,604,50],[602,6,605,8],[602,12,605,14,"query"],[602,17,605,19],[602,20,605,22],[602,24,605,26,"URLSearchParams"],[602,39,605,41],[602,40,605,42,"params"],[602,46,605,48],[602,47,605,49],[603,6,606,8],[603,13,606,15],[603,16,606,18,"url"],[603,19,606,21],[603,22,606,24,"prefix"],[603,28,606,30],[603,31,606,33,"query"],[603,36,606,38],[603,38,606,40],[604,4,607,4],[605,4,608,4,"_workerObjectUrl"],[605,20,608,20,"_workerObjectUrl"],[605,21,608,21,"url"],[605,24,608,24],[605,26,608,26],[606,6,609,8],[606,10,609,12,"result_url"],[606,20,609,22],[607,6,610,8],[607,10,610,12,"url"],[607,13,610,15],[607,15,610,17],[608,8,611,12,"result_url"],[608,18,611,22],[608,21,611,25,"url"],[608,24,611,28],[609,6,612,8],[609,7,612,9],[609,13,613,13],[610,8,614,12],[610,14,614,18,"blob"],[610,18,614,22],[610,21,614,25],[610,25,614,29,"Blob"],[610,29,614,33],[610,30,614,34],[610,31,614,35,"WORKER_SCRIPT"],[610,44,614,48],[610,45,614,49],[610,47,614,51],[611,10,614,53,"type"],[611,14,614,57],[611,16,614,59],[612,8,614,84],[612,9,614,85],[612,10,614,86],[613,8,615,12,"result_url"],[613,18,615,22],[613,21,615,25,"URL"],[613,24,615,28],[613,25,615,29,"createObjectURL"],[613,40,615,44],[613,41,615,45,"blob"],[613,45,615,49],[613,46,615,50],[614,6,616,8],[615,6,617,8],[615,13,617,15,"result_url"],[615,23,617,25],[616,4,618,4],[617,4,619,4],[618,0,620,0],[619,0,621,0],[620,0,622,0],[621,4,623,4,"_setConnectionState"],[621,23,623,23,"_setConnectionState"],[621,24,623,24,"state"],[621,29,623,29],[621,31,623,31,"manual"],[621,37,623,37],[621,40,623,40],[621,45,623,45],[621,47,623,47],[622,6,624,8],[622,10,624,12],[622,11,624,13,"_connectionState"],[622,27,624,29],[622,30,624,32,"state"],[622,35,624,37],[623,6,625,8],[623,10,625,12,"state"],[623,15,625,17],[623,20,625,22],[623,32,625,34],[623,34,625,36],[624,8,626,12],[624,12,626,16],[624,13,626,17,"_wasManualDisconnect"],[624,33,626,37],[624,36,626,40],[624,41,626,45],[625,6,627,8],[625,7,627,9],[625,13,628,13],[625,17,628,17,"state"],[625,22,628,22],[625,27,628,27],[625,42,628,42],[625,44,628,44],[626,8,629,12],[626,12,629,16],[626,13,629,17,"_wasManualDisconnect"],[626,33,629,37],[626,36,629,40,"manual"],[626,42,629,46],[627,6,630,8],[628,4,631,4],[629,4,632,4],[630,0,633,0],[631,0,634,0],[632,0,635,0],[633,4,636,4],[633,10,636,10,"_performAuth"],[633,22,636,22,"_performAuth"],[633,23,636,23,"token"],[633,28,636,28],[633,31,636,31],[633,35,636,35],[633,37,636,37],[634,6,637,8],[634,10,637,12,"tokenToSend"],[634,21,637,23],[635,6,638,8],[635,10,638,12,"token"],[635,15,638,17],[635,17,638,19],[636,8,639,12,"tokenToSend"],[636,19,639,23],[636,22,639,26,"token"],[636,27,639,31],[637,6,640,8],[637,7,640,9],[637,13,641,13],[637,17,641,17],[637,21,641,21],[637,22,641,22,"accessToken"],[637,33,641,33],[637,35,641,35],[638,8,642,12],[639,8,643,12,"tokenToSend"],[639,19,643,23],[639,22,643,26],[639,28,643,32],[639,32,643,36],[639,33,643,37,"accessToken"],[639,44,643,48],[639,45,643,49],[639,46,643,50],[640,6,644,8],[640,7,644,9],[640,13,645,13],[641,8,646,12,"tokenToSend"],[641,19,646,23],[641,22,646,26],[641,26,646,30],[641,27,646,31,"accessTokenValue"],[641,43,646,47],[642,6,647,8],[643,6,648,8],[643,10,648,12],[643,14,648,16],[643,15,648,17,"accessTokenValue"],[643,31,648,33],[643,35,648,37,"tokenToSend"],[643,46,648,48],[643,48,648,50],[644,8,649,12],[644,12,649,16],[644,13,649,17,"accessTokenValue"],[644,29,649,33],[644,32,649,36,"tokenToSend"],[644,43,649,47],[645,8,650,12],[645,12,650,16],[645,13,650,17,"channels"],[645,21,650,25],[645,22,650,26,"forEach"],[645,29,650,33],[645,30,650,35,"channel"],[645,37,650,42],[645,41,650,47],[646,10,651,16],[646,16,651,22,"payload"],[646,23,651,29],[646,26,651,32],[647,12,652,20,"access_token"],[647,24,652,32],[647,26,652,34,"tokenToSend"],[647,37,652,45],[648,12,653,20,"version"],[648,19,653,27],[648,21,653,29,"constants_1"],[648,32,653,40],[648,33,653,41,"DEFAULT_VERSION"],[649,10,654,16],[649,11,654,17],[650,10,655,16,"tokenToSend"],[650,21,655,27],[650,25,655,31,"channel"],[650,32,655,38],[650,33,655,39,"updateJoinPayload"],[650,50,655,56],[650,51,655,57,"payload"],[650,58,655,64],[650,59,655,65],[651,10,656,16],[651,14,656,20,"channel"],[651,21,656,27],[651,22,656,28,"joinedOnce"],[651,32,656,38],[651,36,656,42,"channel"],[651,43,656,49],[651,44,656,50,"_isJoined"],[651,53,656,59],[651,54,656,60],[651,55,656,61],[651,57,656,63],[652,12,657,20,"channel"],[652,19,657,27],[652,20,657,28,"_push"],[652,25,657,33],[652,26,657,34,"constants_1"],[652,37,657,45],[652,38,657,46,"CHANNEL_EVENTS"],[652,52,657,60],[652,53,657,61,"access_token"],[652,65,657,73],[652,67,657,75],[653,14,658,24,"access_token"],[653,26,658,36],[653,28,658,38,"tokenToSend"],[654,12,659,20],[654,13,659,21],[654,14,659,22],[655,10,660,16],[656,8,661,12],[656,9,661,13],[656,10,661,14],[657,6,662,8],[658,4,663,4],[659,4,664,4],[660,0,665,0],[661,0,666,0],[662,0,667,0],[663,4,668,4],[663,10,668,10,"_waitForAuthIfNeeded"],[663,30,668,30,"_waitForAuthIfNeeded"],[663,31,668,30],[663,33,668,33],[664,6,669,8],[664,10,669,12],[664,14,669,16],[664,15,669,17,"_authPromise"],[664,27,669,29],[664,29,669,31],[665,8,670,12],[665,14,670,18],[665,18,670,22],[665,19,670,23,"_authPromise"],[665,31,670,35],[666,6,671,8],[667,4,672,4],[668,4,673,4],[669,0,674,0],[670,0,675,0],[671,0,676,0],[672,4,677,4,"_setAuthSafely"],[672,18,677,18,"_setAuthSafely"],[672,19,677,19,"context"],[672,26,677,26],[672,29,677,29],[672,38,677,38],[672,40,677,40],[673,6,678,8],[673,10,678,12],[673,11,678,13,"setAuth"],[673,18,678,20],[673,19,678,21],[673,20,678,22],[673,21,678,23,"catch"],[673,26,678,28],[673,27,678,30,"e"],[673,28,678,31],[673,32,678,36],[674,8,679,12],[674,12,679,16],[674,13,679,17,"log"],[674,16,679,20],[674,17,679,21],[674,24,679,28],[674,26,679,30],[674,51,679,55,"context"],[674,58,679,62],[674,60,679,64],[674,62,679,66,"e"],[674,63,679,67],[674,64,679,68],[675,6,680,8],[675,7,680,9],[675,8,680,10],[676,4,681,4],[677,4,682,4],[678,0,683,0],[679,0,684,0],[680,0,685,0],[681,4,686,4,"_triggerStateCallbacks"],[681,26,686,26,"_triggerStateCallbacks"],[681,27,686,27,"event"],[681,32,686,32],[681,34,686,34,"data"],[681,38,686,38],[681,40,686,40],[682,6,687,8],[682,10,687,12],[683,8,688,12],[683,12,688,16],[683,13,688,17,"stateChangeCallbacks"],[683,33,688,37],[683,34,688,38,"event"],[683,39,688,43],[683,40,688,44],[683,41,688,45,"forEach"],[683,48,688,52],[683,49,688,54,"callback"],[683,57,688,62],[683,61,688,67],[684,10,689,16],[684,14,689,20],[685,12,690,20,"callback"],[685,20,690,28],[685,21,690,29,"data"],[685,25,690,33],[685,26,690,34],[686,10,691,16],[686,11,691,17],[686,12,692,16],[686,19,692,23,"e"],[686,20,692,24],[686,22,692,26],[687,12,693,20],[687,16,693,24],[687,17,693,25,"log"],[687,20,693,28],[687,21,693,29],[687,28,693,36],[687,30,693,38],[687,42,693,50,"event"],[687,47,693,55],[687,58,693,66],[687,60,693,68,"e"],[687,61,693,69],[687,62,693,70],[688,10,694,16],[689,8,695,12],[689,9,695,13],[689,10,695,14],[690,6,696,8],[690,7,696,9],[690,8,697,8],[690,15,697,15,"e"],[690,16,697,16],[690,18,697,18],[691,8,698,12],[691,12,698,16],[691,13,698,17,"log"],[691,16,698,20],[691,17,698,21],[691,24,698,28],[691,26,698,30],[691,46,698,50,"event"],[691,51,698,55],[691,63,698,67],[691,65,698,69,"e"],[691,66,698,70],[691,67,698,71],[692,6,699,8],[693,4,700,4],[694,4,701,4],[695,0,702,0],[696,0,703,0],[697,0,704,0],[698,4,705,4,"_setupReconnectionTimer"],[698,27,705,27,"_setupReconnectionTimer"],[698,28,705,27],[698,30,705,30],[699,6,706,8],[699,10,706,12],[699,11,706,13,"reconnectTimer"],[699,25,706,27],[699,28,706,30],[699,32,706,34,"timer_1"],[699,39,706,41],[699,40,706,42,"default"],[699,47,706,49],[699,48,706,50],[699,60,706,62],[700,8,707,12,"setTimeout"],[700,18,707,22],[700,19,707,23],[700,31,707,35],[701,10,708,16],[701,16,708,22],[701,20,708,26],[701,21,708,27,"_waitForAuthIfNeeded"],[701,41,708,47],[701,42,708,48],[701,43,708,49],[702,10,709,16],[702,14,709,20],[702,15,709,21],[702,19,709,25],[702,20,709,26,"isConnected"],[702,31,709,37],[702,32,709,38],[702,33,709,39],[702,35,709,41],[703,12,710,20],[703,16,710,24],[703,17,710,25,"connect"],[703,24,710,32],[703,25,710,33],[703,26,710,34],[704,10,711,16],[705,8,712,12],[705,9,712,13],[705,11,712,15,"CONNECTION_TIMEOUTS"],[705,30,712,34],[705,31,712,35,"RECONNECT_DELAY"],[705,46,712,50],[705,47,712,51],[706,6,713,8],[706,7,713,9],[706,9,713,11],[706,13,713,15],[706,14,713,16,"reconnectAfterMs"],[706,30,713,32],[706,31,713,33],[707,4,714,4],[708,4,715,4],[709,0,716,0],[710,0,717,0],[711,0,718,0],[712,4,719,4,"_initializeOptions"],[712,22,719,22,"_initializeOptions"],[712,23,719,23,"options"],[712,30,719,30],[712,32,719,32],[713,6,720,8],[713,10,720,12,"_a"],[713,12,720,14],[713,14,720,16,"_b"],[713,16,720,18],[713,18,720,20,"_c"],[713,20,720,22],[713,22,720,24,"_d"],[713,24,720,26],[713,26,720,28,"_e"],[713,28,720,30],[713,30,720,32,"_f"],[713,32,720,34],[713,34,720,36,"_g"],[713,36,720,38],[713,38,720,40,"_h"],[713,40,720,42],[713,42,720,44,"_j"],[713,44,720,46],[714,6,721,8],[715,6,722,8],[715,10,722,12],[715,11,722,13,"transport"],[715,20,722,22],[715,23,722,25],[715,24,722,26,"_a"],[715,26,722,28],[715,29,722,31,"options"],[715,36,722,38],[715,41,722,43],[715,45,722,47],[715,49,722,51,"options"],[715,56,722,58],[715,61,722,63],[715,66,722,68],[715,67,722,69],[715,70,722,72],[715,75,722,77],[715,76,722,78],[715,79,722,81,"options"],[715,86,722,88],[715,87,722,89,"transport"],[715,96,722,98],[715,102,722,104],[715,106,722,108],[715,110,722,112,"_a"],[715,112,722,114],[715,117,722,119],[715,122,722,124],[715,123,722,125],[715,126,722,128,"_a"],[715,128,722,130],[715,131,722,133],[715,135,722,137],[716,6,723,8],[716,10,723,12],[716,11,723,13,"timeout"],[716,18,723,20],[716,21,723,23],[716,22,723,24,"_b"],[716,24,723,26],[716,27,723,29,"options"],[716,34,723,36],[716,39,723,41],[716,43,723,45],[716,47,723,49,"options"],[716,54,723,56],[716,59,723,61],[716,64,723,66],[716,65,723,67],[716,68,723,70],[716,73,723,75],[716,74,723,76],[716,77,723,79,"options"],[716,84,723,86],[716,85,723,87,"timeout"],[716,92,723,94],[716,98,723,100],[716,102,723,104],[716,106,723,108,"_b"],[716,108,723,110],[716,113,723,115],[716,118,723,120],[716,119,723,121],[716,122,723,124,"_b"],[716,124,723,126],[716,127,723,129,"constants_1"],[716,138,723,140],[716,139,723,141,"DEFAULT_TIMEOUT"],[716,154,723,156],[717,6,724,8],[717,10,724,12],[717,11,724,13,"heartbeatIntervalMs"],[717,30,724,32],[717,33,725,12],[717,34,725,13,"_c"],[717,36,725,15],[717,39,725,18,"options"],[717,46,725,25],[717,51,725,30],[717,55,725,34],[717,59,725,38,"options"],[717,66,725,45],[717,71,725,50],[717,76,725,55],[717,77,725,56],[717,80,725,59],[717,85,725,64],[717,86,725,65],[717,89,725,68,"options"],[717,96,725,75],[717,97,725,76,"heartbeatIntervalMs"],[717,116,725,95],[717,122,725,101],[717,126,725,105],[717,130,725,109,"_c"],[717,132,725,111],[717,137,725,116],[717,142,725,121],[717,143,725,122],[717,146,725,125,"_c"],[717,148,725,127],[717,151,725,130,"CONNECTION_TIMEOUTS"],[717,170,725,149],[717,171,725,150,"HEARTBEAT_INTERVAL"],[717,189,725,168],[718,6,726,8],[718,10,726,12],[718,11,726,13,"worker"],[718,17,726,19],[718,20,726,22],[718,21,726,23,"_d"],[718,23,726,25],[718,26,726,28,"options"],[718,33,726,35],[718,38,726,40],[718,42,726,44],[718,46,726,48,"options"],[718,53,726,55],[718,58,726,60],[718,63,726,65],[718,64,726,66],[718,67,726,69],[718,72,726,74],[718,73,726,75],[718,76,726,78,"options"],[718,83,726,85],[718,84,726,86,"worker"],[718,90,726,92],[718,96,726,98],[718,100,726,102],[718,104,726,106,"_d"],[718,106,726,108],[718,111,726,113],[718,116,726,118],[718,117,726,119],[718,120,726,122,"_d"],[718,122,726,124],[718,125,726,127],[718,130,726,132],[719,6,727,8],[719,10,727,12],[719,11,727,13,"accessToken"],[719,22,727,24],[719,25,727,27],[719,26,727,28,"_e"],[719,28,727,30],[719,31,727,33,"options"],[719,38,727,40],[719,43,727,45],[719,47,727,49],[719,51,727,53,"options"],[719,58,727,60],[719,63,727,65],[719,68,727,70],[719,69,727,71],[719,72,727,74],[719,77,727,79],[719,78,727,80],[719,81,727,83,"options"],[719,88,727,90],[719,89,727,91,"accessToken"],[719,100,727,102],[719,106,727,108],[719,110,727,112],[719,114,727,116,"_e"],[719,116,727,118],[719,121,727,123],[719,126,727,128],[719,127,727,129],[719,130,727,132,"_e"],[719,132,727,134],[719,135,727,137],[719,139,727,141],[720,6,728,8],[720,10,728,12],[720,11,728,13,"heartbeatCallback"],[720,28,728,30],[720,31,728,33],[720,32,728,34,"_f"],[720,34,728,36],[720,37,728,39,"options"],[720,44,728,46],[720,49,728,51],[720,53,728,55],[720,57,728,59,"options"],[720,64,728,66],[720,69,728,71],[720,74,728,76],[720,75,728,77],[720,78,728,80],[720,83,728,85],[720,84,728,86],[720,87,728,89,"options"],[720,94,728,96],[720,95,728,97,"heartbeatCallback"],[720,112,728,114],[720,118,728,120],[720,122,728,124],[720,126,728,128,"_f"],[720,128,728,130],[720,133,728,135],[720,138,728,140],[720,139,728,141],[720,142,728,144,"_f"],[720,144,728,146],[720,147,728,149,"noop"],[720,151,728,153],[721,6,729,8],[722,6,730,8],[722,10,730,12,"options"],[722,17,730,19],[722,22,730,24],[722,26,730,28],[722,30,730,32,"options"],[722,37,730,39],[722,42,730,44],[722,47,730,49],[722,48,730,50],[722,51,730,53],[722,56,730,58],[722,57,730,59],[722,60,730,62,"options"],[722,67,730,69],[722,68,730,70,"params"],[722,74,730,76],[722,76,731,12],[722,80,731,16],[722,81,731,17,"params"],[722,87,731,23],[722,90,731,26,"options"],[722,97,731,33],[722,98,731,34,"params"],[722,104,731,40],[723,6,732,8],[723,10,732,12,"options"],[723,17,732,19],[723,22,732,24],[723,26,732,28],[723,30,732,32,"options"],[723,37,732,39],[723,42,732,44],[723,47,732,49],[723,48,732,50],[723,51,732,53],[723,56,732,58],[723,57,732,59],[723,60,732,62,"options"],[723,67,732,69],[723,68,732,70,"logger"],[723,74,732,76],[723,76,733,12],[723,80,733,16],[723,81,733,17,"logger"],[723,87,733,23],[723,90,733,26,"options"],[723,97,733,33],[723,98,733,34,"logger"],[723,104,733,40],[724,6,734,8],[724,10,734,12],[724,11,734,13,"options"],[724,18,734,20],[724,23,734,25],[724,27,734,29],[724,31,734,33,"options"],[724,38,734,40],[724,43,734,45],[724,48,734,50],[724,49,734,51],[724,52,734,54],[724,57,734,59],[724,58,734,60],[724,61,734,63,"options"],[724,68,734,70],[724,69,734,71,"logLevel"],[724,77,734,79],[724,83,734,85,"options"],[724,90,734,92],[724,95,734,97],[724,99,734,101],[724,103,734,105,"options"],[724,110,734,112],[724,115,734,117],[724,120,734,122],[724,121,734,123],[724,124,734,126],[724,129,734,131],[724,130,734,132],[724,133,734,135,"options"],[724,140,734,142],[724,141,734,143,"log_level"],[724,150,734,152],[724,151,734,153],[724,153,734,155],[725,8,735,12],[725,12,735,16],[725,13,735,17,"logLevel"],[725,21,735,25],[725,24,735,28,"options"],[725,31,735,35],[725,32,735,36,"logLevel"],[725,40,735,44],[725,44,735,48,"options"],[725,51,735,55],[725,52,735,56,"log_level"],[725,61,735,65],[726,8,736,12],[726,12,736,16],[726,13,736,17,"params"],[726,19,736,23],[726,22,736,26,"Object"],[726,28,736,32],[726,29,736,33,"assign"],[726,35,736,39],[726,36,736,40,"Object"],[726,42,736,46],[726,43,736,47,"assign"],[726,49,736,53],[726,50,736,54],[726,51,736,55],[726,52,736,56],[726,54,736,58],[726,58,736,62],[726,59,736,63,"params"],[726,65,736,69],[726,66,736,70],[726,68,736,72],[727,10,736,74,"log_level"],[727,19,736,83],[727,21,736,85],[727,25,736,89],[727,26,736,90,"logLevel"],[728,8,736,99],[728,9,736,100],[728,10,736,101],[729,6,737,8],[730,6,738,8],[731,6,739,8],[731,10,739,12],[731,11,739,13,"reconnectAfterMs"],[731,27,739,29],[731,30,740,12],[731,31,740,13,"_g"],[731,33,740,15],[731,36,740,18,"options"],[731,43,740,25],[731,48,740,30],[731,52,740,34],[731,56,740,38,"options"],[731,63,740,45],[731,68,740,50],[731,73,740,55],[731,74,740,56],[731,77,740,59],[731,82,740,64],[731,83,740,65],[731,86,740,68,"options"],[731,93,740,75],[731,94,740,76,"reconnectAfterMs"],[731,110,740,92],[731,116,740,98],[731,120,740,102],[731,124,740,106,"_g"],[731,126,740,108],[731,131,740,113],[731,136,740,118],[731,137,740,119],[731,140,740,122,"_g"],[731,142,740,124],[731,145,740,129,"tries"],[731,150,740,134],[731,154,740,139],[732,8,741,16],[732,15,741,23,"RECONNECT_INTERVALS"],[732,34,741,42],[732,35,741,43,"tries"],[732,40,741,48],[732,43,741,51],[732,44,741,52],[732,45,741,53],[732,49,741,57,"DEFAULT_RECONNECT_FALLBACK"],[732,75,741,83],[733,6,742,12],[733,7,742,14],[734,6,743,8],[734,10,743,12],[734,11,743,13,"encode"],[734,17,743,19],[734,20,744,12],[734,21,744,13,"_h"],[734,23,744,15],[734,26,744,18,"options"],[734,33,744,25],[734,38,744,30],[734,42,744,34],[734,46,744,38,"options"],[734,53,744,45],[734,58,744,50],[734,63,744,55],[734,64,744,56],[734,67,744,59],[734,72,744,64],[734,73,744,65],[734,76,744,68,"options"],[734,83,744,75],[734,84,744,76,"encode"],[734,90,744,82],[734,96,744,88],[734,100,744,92],[734,104,744,96,"_h"],[734,106,744,98],[734,111,744,103],[734,116,744,108],[734,117,744,109],[734,120,744,112,"_h"],[734,122,744,114],[734,125,744,118],[734,126,744,119,"payload"],[734,133,744,126],[734,135,744,128,"callback"],[734,143,744,136],[734,148,744,141],[735,8,745,16],[735,15,745,23,"callback"],[735,23,745,31],[735,24,745,32,"JSON"],[735,28,745,36],[735,29,745,37,"stringify"],[735,38,745,46],[735,39,745,47,"payload"],[735,46,745,54],[735,47,745,55],[735,48,745,56],[736,6,746,12],[736,7,746,14],[737,6,747,8],[737,10,747,12],[737,11,747,13,"decode"],[737,17,747,19],[737,20,748,12],[737,21,748,13,"_j"],[737,23,748,15],[737,26,748,18,"options"],[737,33,748,25],[737,38,748,30],[737,42,748,34],[737,46,748,38,"options"],[737,53,748,45],[737,58,748,50],[737,63,748,55],[737,64,748,56],[737,67,748,59],[737,72,748,64],[737,73,748,65],[737,76,748,68,"options"],[737,83,748,75],[737,84,748,76,"decode"],[737,90,748,82],[737,96,748,88],[737,100,748,92],[737,104,748,96,"_j"],[737,106,748,98],[737,111,748,103],[737,116,748,108],[737,117,748,109],[737,120,748,112,"_j"],[737,122,748,114],[737,125,748,117],[737,129,748,121],[737,130,748,122,"serializer"],[737,140,748,132],[737,141,748,133,"decode"],[737,147,748,139],[737,148,748,140,"bind"],[737,152,748,144],[737,153,748,145],[737,157,748,149],[737,158,748,150,"serializer"],[737,168,748,160],[737,169,748,161],[738,6,749,8],[739,6,750,8],[739,10,750,12],[739,14,750,16],[739,15,750,17,"worker"],[739,21,750,23],[739,23,750,25],[740,8,751,12],[740,12,751,16],[740,21,751,49],[740,22,751,50,"window"],[740,28,751,56],[740,29,751,57,"Worker"],[740,35,751,63],[740,37,751,65],[741,10,752,16],[741,16,752,22],[741,20,752,26,"Error"],[741,25,752,31],[741,26,752,32],[741,55,752,61],[741,56,752,62],[742,8,753,12],[743,8,754,12],[743,12,754,16],[743,13,754,17,"workerUrl"],[743,22,754,26],[743,25,754,29,"options"],[743,32,754,36],[743,37,754,41],[743,41,754,45],[743,45,754,49,"options"],[743,52,754,56],[743,57,754,61],[743,62,754,66],[743,63,754,67],[743,66,754,70],[743,71,754,75],[743,72,754,76],[743,75,754,79,"options"],[743,82,754,86],[743,83,754,87,"workerUrl"],[743,92,754,96],[744,6,755,8],[745,4,756,4],[746,2,757,0],[747,2,758,0,"exports"],[747,9,758,7],[747,10,758,8,"default"],[747,17,758,15],[747,20,758,18,"RealtimeClient"],[747,34,758,32],[748,0,758,33],[748,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","noop","RealtimeClient","constructor","_resolveFetch","_fetch","Promise.resolve.then$argument_0","Promise.resolve.then.then$argument_0","Promise.resolve.then.then._catch$argument_0","connect","endpointURL","disconnect","setTimeout$argument_0","conn.onclose","getChannels","removeChannel","removeAllChannels","channels.map$argument_0","log","connectionState","isConnected","isConnecting","isDisconnecting","channel","getChannels.find$argument_0","push","callback","encode$argument_1","setAuth","sendHeartbeat","onHeartbeat","flushSendBuffer","sendBuffer.forEach$argument_0","_makeRef","_leaveOpenTopic","channels.find$argument_0","_remove","channels.filter$argument_0","_onConnMessage","decode$argument_1","channels.filter.forEach$argument_0","_clearTimer","_clearAllTimers","_setupConnectionHandlers","conn.onopen","conn.onerror","conn.onmessage","_teardownConnection","channels.forEach$argument_0","_onConnOpen","_startHeartbeat","setInterval$argument_0","_startWorkerHeartbeat","workerRef.onerror","workerRef.onmessage","_onConnClose","_onConnError","_triggerChanError","_appendParams","_workerObjectUrl","_setConnectionState","_performAuth","_waitForAuthIfNeeded","_setAuthSafely","setAuth._catch$argument_0","_triggerStateCallbacks","stateChangeCallbacks.event.forEach$argument_0","_setupReconnectionTimer","timer_1._default$argument_0","_initializeOptions"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;wDCC;CDE;aIQ,SJ;AKe;ICoB;6BCqC;yBCO,+DC,6BD,OE,sCF;2BGC;iBHG,CD;mBNK,4BM;SDC;KDY;IOI;KPuC;IQK;KRE;ISO;6CCO;aDE;gCEC;aFG;KTa;IYI;KZE;IaK;KbM;IcI;6DCC,kCD;KdI;IgBM;KhBE;IiBI;KjBW;IkBI;KlBE;ImBI;KnBE;IoBI;KpBE;IqBC;+CCE,gCD;KrBS;IuBM;yBCE;8BCC;aDG;SDC;KvBQ;I0BU;K1BQ;I2BI;uBjBwB;aiBK;K3BkB;I4BC;K5BE;I6BI;oCCE,wBD;K7BG;I+BM;K/BS;IgCM;4CCC,6DD;KhCK;IkCQ;6CCC,gCD;KlCC;IoCE;qCCC;wBFqB,qCE;yBCC,kDD;SDE;KpCC;IuCK;KvCS;IwCK;KxCG;IyCK;2BCQ,wBD;4BEC,mCF;8BGC,qCH;4B9BC,mC8B;KzCC;I6CK;8BCS,+BD;K7CC;I+CE;K/Cc;IgDE;0CCE,0BD;KhDC;IkDE;iCCS;SDG;mCEC;SFI;KlDK;IqDE;KrDW;IsDE;KtDK;IuDE;8BTC,+DS;KvDC;IwDE;KxDO;IyDC;KzDU;I0DK;K1DQ;I2DK;kCbc;aaW;K3DE;I4DK;K5DI;I6DK;6BCC;SDE;K7DC;I+DK;qDCE;aDO;K/DK;IiEK;kDCC;uBxDC;awDK;SDC;KjEC;ImEK;gIvEqB;auEE;sHvEE;auEE;KnEU;CLC"},"hasCjsExports":true},"type":"js/module"}]}