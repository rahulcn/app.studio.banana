{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoHaptics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":68},"end":{"line":3,"column":40,"index":108}}],"key":"3WqQQRS5WG7zFWoPm3OZ82Alno4=","exportNames":["*"],"imports":1}},{"name":"./Haptics.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":109},"end":{"line":4,"column":96,"index":205}}],"key":"4K2GreqvhWei0+qUJVORf63x8ww=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.notificationAsync = notificationAsync;\n  exports.impactAsync = impactAsync;\n  exports.selectionAsync = selectionAsync;\n  exports.performAndroidHapticsAsync = performAndroidHapticsAsync;\n  Object.defineProperty(exports, \"NotificationFeedbackType\", {\n    enumerable: true,\n    get: function () {\n      return _HapticsTypes.NotificationFeedbackType;\n    }\n  });\n  Object.defineProperty(exports, \"ImpactFeedbackStyle\", {\n    enumerable: true,\n    get: function () {\n      return _HapticsTypes.ImpactFeedbackStyle;\n    }\n  });\n  Object.defineProperty(exports, \"AndroidHaptics\", {\n    enumerable: true,\n    get: function () {\n      return _HapticsTypes.AndroidHaptics;\n    }\n  });\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _ExpoHaptics = require(_dependencyMap[1], \"./ExpoHaptics\");\n  var ExpoHaptics = _interopDefault(_ExpoHaptics);\n  var _HapticsTypes = require(_dependencyMap[2], \"./Haptics.types\");\n  // @needsAudit\n  /**\n   * The kind of notification response used in the feedback.\n   * @param type A notification feedback type that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n   * and iOS is directly mapped to [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype).\n   * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n   * @return A `Promise` which fulfills once native size haptics functionality is triggered.\n   */\n  async function notificationAsync(type = _HapticsTypes.NotificationFeedbackType.Success) {\n    if (!ExpoHaptics.default?.notificationAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptics', 'notificationAsync');\n    }\n    await ExpoHaptics.default.notificationAsync(type);\n  }\n\n  // @needsAudit\n  /**\n   * @param style A collision indicator that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n   * and on iOS, it is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackgenerator/feedbackstyle).\n   * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy, Rigid, Soft}`.\n   * @return A `Promise` which fulfills once native size haptics functionality is triggered.\n   * @see Android's `Vibrator` API is not recommended for implementing haptics feedback. **Instead, you should use\n   * [`performAndroidHapticsAsync`](#hapticsperformandroidhapticsasynctype), which is similar to iOS haptic feedback and does not require\n   * `VIBRATE` permission.**\n   */\n  async function impactAsync(style = _HapticsTypes.ImpactFeedbackStyle.Medium) {\n    if (!ExpoHaptics.default?.impactAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptic', 'impactAsync');\n    }\n    await ExpoHaptics.default.impactAsync(style);\n  }\n\n  // @needsAudit\n  /**\n   * Used to let a user know when a selection change has been registered.\n   * @return A `Promise` which fulfills once native size haptics functionality is triggered.\n   */\n  async function selectionAsync() {\n    if (!ExpoHaptics.default?.selectionAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptic', 'selectionAsync');\n    }\n    await ExpoHaptics.default.selectionAsync();\n  }\n\n  /**\n   * Use the device haptics engine to provide physical feedback to the user.\n   *\n   * @platform android\n   */\n  async function performAndroidHapticsAsync(type) {\n    if (_expoModulesCore.Platform.OS !== 'android') {\n      return;\n    }\n    ExpoHaptics.default.performHapticsAsync(type);\n  }\n});","lineCount":93,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"notificationAsync"],[12,27,14,0],[12,30,14,0,"notificationAsync"],[12,47,14,0],[13,2,33,0,"exports"],[13,9,33,0],[13,10,33,0,"impactAsync"],[13,21,33,0],[13,24,33,0,"impactAsync"],[13,35,33,0],[14,2,47,0,"exports"],[14,9,47,0],[14,10,47,0,"selectionAsync"],[14,24,47,0],[14,27,47,0,"selectionAsync"],[14,41,47,0],[15,2,59,0,"exports"],[15,9,59,0],[15,10,59,0,"performAndroidHapticsAsync"],[15,36,59,0],[15,39,59,0,"performAndroidHapticsAsync"],[15,65,59,0],[16,2,66,0,"Object"],[16,8,66,0],[16,9,66,0,"defineProperty"],[16,23,66,0],[16,24,66,0,"exports"],[16,31,66,0],[17,4,66,0,"enumerable"],[17,14,66,0],[18,4,66,0,"get"],[18,7,66,0],[18,18,66,0,"get"],[18,19,66,0],[19,6,66,0],[19,13,66,9,"NotificationFeedbackType"],[19,26,66,33],[19,27,66,33,"NotificationFeedbackType"],[19,51,66,33],[20,4,66,33],[21,2,66,33],[22,2,66,0,"Object"],[22,8,66,0],[22,9,66,0,"defineProperty"],[22,23,66,0],[22,24,66,0,"exports"],[22,31,66,0],[23,4,66,0,"enumerable"],[23,14,66,0],[24,4,66,0,"get"],[24,7,66,0],[24,18,66,0,"get"],[24,19,66,0],[25,6,66,0],[25,13,66,35,"ImpactFeedbackStyle"],[25,26,66,54],[25,27,66,54,"ImpactFeedbackStyle"],[25,46,66,54],[26,4,66,54],[27,2,66,54],[28,2,66,0,"Object"],[28,8,66,0],[28,9,66,0,"defineProperty"],[28,23,66,0],[28,24,66,0,"exports"],[28,31,66,0],[29,4,66,0,"enumerable"],[29,14,66,0],[30,4,66,0,"get"],[30,7,66,0],[30,18,66,0,"get"],[30,19,66,0],[31,6,66,0],[31,13,66,56,"AndroidHaptics"],[31,26,66,70],[31,27,66,70,"AndroidHaptics"],[31,41,66,70],[32,4,66,70],[33,2,66,70],[34,2,1,0],[34,6,1,0,"_expoModulesCore"],[34,22,1,0],[34,25,1,0,"require"],[34,32,1,0],[34,33,1,0,"_dependencyMap"],[34,47,1,0],[35,2,3,0],[35,6,3,0,"_ExpoHaptics"],[35,18,3,0],[35,21,3,0,"require"],[35,28,3,0],[35,29,3,0,"_dependencyMap"],[35,43,3,0],[36,2,3,0],[36,6,3,0,"ExpoHaptics"],[36,17,3,0],[36,20,3,0,"_interopDefault"],[36,35,3,0],[36,36,3,0,"_ExpoHaptics"],[36,48,3,0],[37,2,4,0],[37,6,4,0,"_HapticsTypes"],[37,19,4,0],[37,22,4,0,"require"],[37,29,4,0],[37,30,4,0,"_dependencyMap"],[37,44,4,0],[38,2,6,0],[39,2,7,0],[40,0,8,0],[41,0,9,0],[42,0,10,0],[43,0,11,0],[44,0,12,0],[45,0,13,0],[46,2,14,7],[46,17,14,22,"notificationAsync"],[46,34,14,39,"notificationAsync"],[46,35,15,2,"type"],[46,39,15,32],[46,42,15,35,"NotificationFeedbackType"],[46,55,15,59],[46,56,15,59,"NotificationFeedbackType"],[46,80,15,59],[46,81,15,60,"Success"],[46,88,15,67],[46,90,16,17],[47,4,17,2],[47,8,17,6],[47,9,17,7,"ExpoHaptics"],[47,20,17,18],[47,21,17,18,"default"],[47,28,17,18],[47,30,17,20,"notificationAsync"],[47,47,17,37],[47,49,17,39],[48,6,18,4],[48,12,18,10],[48,16,18,14,"UnavailabilityError"],[48,32,18,33],[48,33,18,33,"UnavailabilityError"],[48,52,18,33],[48,53,18,34],[48,62,18,43],[48,64,18,45],[48,83,18,64],[48,84,18,65],[49,4,19,2],[50,4,20,2],[50,10,20,8,"ExpoHaptics"],[50,21,20,19],[50,22,20,19,"default"],[50,29,20,19],[50,30,20,20,"notificationAsync"],[50,47,20,37],[50,48,20,38,"type"],[50,52,20,42],[50,53,20,43],[51,2,21,0],[53,2,23,0],[54,2,24,0],[55,0,25,0],[56,0,26,0],[57,0,27,0],[58,0,28,0],[59,0,29,0],[60,0,30,0],[61,0,31,0],[62,0,32,0],[63,2,33,7],[63,17,33,22,"impactAsync"],[63,28,33,33,"impactAsync"],[63,29,34,2,"style"],[63,34,34,28],[63,37,34,31,"ImpactFeedbackStyle"],[63,50,34,50],[63,51,34,50,"ImpactFeedbackStyle"],[63,70,34,50],[63,71,34,51,"Medium"],[63,77,34,57],[63,79,35,17],[64,4,36,2],[64,8,36,6],[64,9,36,7,"ExpoHaptics"],[64,20,36,18],[64,21,36,18,"default"],[64,28,36,18],[64,30,36,20,"impactAsync"],[64,41,36,31],[64,43,36,33],[65,6,37,4],[65,12,37,10],[65,16,37,14,"UnavailabilityError"],[65,32,37,33],[65,33,37,33,"UnavailabilityError"],[65,52,37,33],[65,53,37,34],[65,61,37,42],[65,63,37,44],[65,76,37,57],[65,77,37,58],[66,4,38,2],[67,4,39,2],[67,10,39,8,"ExpoHaptics"],[67,21,39,19],[67,22,39,19,"default"],[67,29,39,19],[67,30,39,20,"impactAsync"],[67,41,39,31],[67,42,39,32,"style"],[67,47,39,37],[67,48,39,38],[68,2,40,0],[70,2,42,0],[71,2,43,0],[72,0,44,0],[73,0,45,0],[74,0,46,0],[75,2,47,7],[75,17,47,22,"selectionAsync"],[75,31,47,36,"selectionAsync"],[75,32,47,36],[75,34,47,54],[76,4,48,2],[76,8,48,6],[76,9,48,7,"ExpoHaptics"],[76,20,48,18],[76,21,48,18,"default"],[76,28,48,18],[76,30,48,20,"selectionAsync"],[76,44,48,34],[76,46,48,36],[77,6,49,4],[77,12,49,10],[77,16,49,14,"UnavailabilityError"],[77,32,49,33],[77,33,49,33,"UnavailabilityError"],[77,52,49,33],[77,53,49,34],[77,61,49,42],[77,63,49,44],[77,79,49,60],[77,80,49,61],[78,4,50,2],[79,4,51,2],[79,10,51,8,"ExpoHaptics"],[79,21,51,19],[79,22,51,19,"default"],[79,29,51,19],[79,30,51,20,"selectionAsync"],[79,44,51,34],[79,45,51,35],[79,46,51,36],[80,2,52,0],[82,2,54,0],[83,0,55,0],[84,0,56,0],[85,0,57,0],[86,0,58,0],[87,2,59,7],[87,17,59,22,"performAndroidHapticsAsync"],[87,43,59,48,"performAndroidHapticsAsync"],[87,44,59,49,"type"],[87,48,59,69],[87,50,59,71],[88,4,60,2],[88,8,60,6,"Platform"],[88,24,60,14],[88,25,60,14,"Platform"],[88,33,60,14],[88,34,60,15,"OS"],[88,36,60,17],[88,41,60,22],[88,50,60,31],[88,52,60,33],[89,6,61,4],[90,4,62,2],[91,4,63,2,"ExpoHaptics"],[91,15,63,13],[91,16,63,13,"default"],[91,23,63,13],[91,24,63,14,"performHapticsAsync"],[91,43,63,33],[91,44,63,34,"type"],[91,48,63,38],[91,49,63,39],[92,2,64,0],[93,0,64,1],[93,3]],"functionMap":{"names":["<global>","notificationAsync","impactAsync","selectionAsync","performAndroidHapticsAsync"],"mappings":"AAA;OCa;CDO;OEY;CFO;OGO;CHK;OIO;CJK"},"hasCjsExports":false},"type":"js/module"}]}