{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Avoid modifying this file. It's part of\n   * https://github.com/supabase-community/base64url-js.  Submit all fixes on\n   * that repo!\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.bytesToBase64URL = exports.stringToUint8Array = exports.base64UrlToUint8Array = exports.stringFromUTF8 = exports.stringToUTF8 = exports.codepointToUTF8 = exports.stringFromBase64URL = exports.stringToBase64URL = exports.byteFromBase64URL = exports.byteToBase64URL = void 0;\n  /**\n   * An array of characters that encode 6 bits into a Base64-URL alphabet\n   * character.\n   */\n  const TO_BASE64URL = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split('');\n  /**\n   * An array of characters that can appear in a Base64-URL encoded string but\n   * should be ignored.\n   */\n  const IGNORE_BASE64URL = ' \\t\\n\\r='.split('');\n  /**\n   * An array of 128 numbers that map a Base64-URL character to 6 bits, or if -2\n   * used to skip the character, or if -1 used to error out.\n   */\n  const FROM_BASE64URL = (() => {\n    const charMap = new Array(128);\n    for (let i = 0; i < charMap.length; i += 1) {\n      charMap[i] = -1;\n    }\n    for (let i = 0; i < IGNORE_BASE64URL.length; i += 1) {\n      charMap[IGNORE_BASE64URL[i].charCodeAt(0)] = -2;\n    }\n    for (let i = 0; i < TO_BASE64URL.length; i += 1) {\n      charMap[TO_BASE64URL[i].charCodeAt(0)] = i;\n    }\n    return charMap;\n  })();\n  /**\n   * Converts a byte to a Base64-URL string.\n   *\n   * @param byte The byte to convert, or null to flush at the end of the byte sequence.\n   * @param state The Base64 conversion state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n   * @param emit A function called with the next Base64 character when ready.\n   */\n  function byteToBase64URL(byte, state, emit) {\n    if (byte !== null) {\n      state.queue = state.queue << 8 | byte;\n      state.queuedBits += 8;\n      while (state.queuedBits >= 6) {\n        const pos = state.queue >> state.queuedBits - 6 & 63;\n        emit(TO_BASE64URL[pos]);\n        state.queuedBits -= 6;\n      }\n    } else if (state.queuedBits > 0) {\n      state.queue = state.queue << 6 - state.queuedBits;\n      state.queuedBits = 6;\n      while (state.queuedBits >= 6) {\n        const pos = state.queue >> state.queuedBits - 6 & 63;\n        emit(TO_BASE64URL[pos]);\n        state.queuedBits -= 6;\n      }\n    }\n  }\n  exports.byteToBase64URL = byteToBase64URL;\n  /**\n   * Converts a String char code (extracted using `string.charCodeAt(position)`) to a sequence of Base64-URL characters.\n   *\n   * @param charCode The char code of the JavaScript string.\n   * @param state The Base64 state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\n   * @param emit A function called with the next byte.\n   */\n  function byteFromBase64URL(charCode, state, emit) {\n    const bits = FROM_BASE64URL[charCode];\n    if (bits > -1) {\n      // valid Base64-URL character\n      state.queue = state.queue << 6 | bits;\n      state.queuedBits += 6;\n      while (state.queuedBits >= 8) {\n        emit(state.queue >> state.queuedBits - 8 & 0xff);\n        state.queuedBits -= 8;\n      }\n    } else if (bits === -2) {\n      // ignore spaces, tabs, newlines, =\n      return;\n    } else {\n      throw new Error(`Invalid Base64-URL character \"${String.fromCharCode(charCode)}\"`);\n    }\n  }\n  exports.byteFromBase64URL = byteFromBase64URL;\n  /**\n   * Converts a JavaScript string (which may include any valid character) into a\n   * Base64-URL encoded string. The string is first encoded in UTF-8 which is\n   * then encoded as Base64-URL.\n   *\n   * @param str The string to convert.\n   */\n  function stringToBase64URL(str) {\n    const base64 = [];\n    const emitter = char => {\n      base64.push(char);\n    };\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    stringToUTF8(str, byte => {\n      byteToBase64URL(byte, state, emitter);\n    });\n    byteToBase64URL(null, state, emitter);\n    return base64.join('');\n  }\n  exports.stringToBase64URL = stringToBase64URL;\n  /**\n   * Converts a Base64-URL encoded string into a JavaScript string. It is assumed\n   * that the underlying string has been encoded as UTF-8.\n   *\n   * @param str The Base64-URL encoded string.\n   */\n  function stringFromBase64URL(str) {\n    const conv = [];\n    const utf8Emit = codepoint => {\n      conv.push(String.fromCodePoint(codepoint));\n    };\n    const utf8State = {\n      utf8seq: 0,\n      codepoint: 0\n    };\n    const b64State = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const byteEmit = byte => {\n      stringFromUTF8(byte, utf8State, utf8Emit);\n    };\n    for (let i = 0; i < str.length; i += 1) {\n      byteFromBase64URL(str.charCodeAt(i), b64State, byteEmit);\n    }\n    return conv.join('');\n  }\n  exports.stringFromBase64URL = stringFromBase64URL;\n  /**\n   * Converts a Unicode codepoint to a multi-byte UTF-8 sequence.\n   *\n   * @param codepoint The Unicode codepoint.\n   * @param emit      Function which will be called for each UTF-8 byte that represents the codepoint.\n   */\n  function codepointToUTF8(codepoint, emit) {\n    if (codepoint <= 0x7f) {\n      emit(codepoint);\n      return;\n    } else if (codepoint <= 0x7ff) {\n      emit(0xc0 | codepoint >> 6);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    } else if (codepoint <= 0xffff) {\n      emit(0xe0 | codepoint >> 12);\n      emit(0x80 | codepoint >> 6 & 0x3f);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    } else if (codepoint <= 0x10ffff) {\n      emit(0xf0 | codepoint >> 18);\n      emit(0x80 | codepoint >> 12 & 0x3f);\n      emit(0x80 | codepoint >> 6 & 0x3f);\n      emit(0x80 | codepoint & 0x3f);\n      return;\n    }\n    throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);\n  }\n  exports.codepointToUTF8 = codepointToUTF8;\n  /**\n   * Converts a JavaScript string to a sequence of UTF-8 bytes.\n   *\n   * @param str  The string to convert to UTF-8.\n   * @param emit Function which will be called for each UTF-8 byte of the string.\n   */\n  function stringToUTF8(str, emit) {\n    for (let i = 0; i < str.length; i += 1) {\n      let codepoint = str.charCodeAt(i);\n      if (codepoint > 0xd7ff && codepoint <= 0xdbff) {\n        // most UTF-16 codepoints are Unicode codepoints, except values in this\n        // range where the next UTF-16 codepoint needs to be combined with the\n        // current one to get the Unicode codepoint\n        const highSurrogate = (codepoint - 0xd800) * 0x400 & 0xffff;\n        const lowSurrogate = str.charCodeAt(i + 1) - 0xdc00 & 0xffff;\n        codepoint = (lowSurrogate | highSurrogate) + 0x10000;\n        i += 1;\n      }\n      codepointToUTF8(codepoint, emit);\n    }\n  }\n  exports.stringToUTF8 = stringToUTF8;\n  /**\n   * Converts a UTF-8 byte to a Unicode codepoint.\n   *\n   * @param byte  The UTF-8 byte next in the sequence.\n   * @param state The shared state between consecutive UTF-8 bytes in the\n   *              sequence, an object with the shape `{ utf8seq: 0, codepoint: 0 }`.\n   * @param emit  Function which will be called for each codepoint.\n   */\n  function stringFromUTF8(byte, state, emit) {\n    if (state.utf8seq === 0) {\n      if (byte <= 0x7f) {\n        emit(byte);\n        return;\n      }\n      // count the number of 1 leading bits until you reach 0\n      for (let leadingBit = 1; leadingBit < 6; leadingBit += 1) {\n        if ((byte >> 7 - leadingBit & 1) === 0) {\n          state.utf8seq = leadingBit;\n          break;\n        }\n      }\n      if (state.utf8seq === 2) {\n        state.codepoint = byte & 31;\n      } else if (state.utf8seq === 3) {\n        state.codepoint = byte & 15;\n      } else if (state.utf8seq === 4) {\n        state.codepoint = byte & 7;\n      } else {\n        throw new Error('Invalid UTF-8 sequence');\n      }\n      state.utf8seq -= 1;\n    } else if (state.utf8seq > 0) {\n      if (byte <= 0x7f) {\n        throw new Error('Invalid UTF-8 sequence');\n      }\n      state.codepoint = state.codepoint << 6 | byte & 63;\n      state.utf8seq -= 1;\n      if (state.utf8seq === 0) {\n        emit(state.codepoint);\n      }\n    }\n  }\n  exports.stringFromUTF8 = stringFromUTF8;\n  /**\n   * Helper functions to convert different types of strings to Uint8Array\n   */\n  function base64UrlToUint8Array(str) {\n    const result = [];\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const onByte = byte => {\n      result.push(byte);\n    };\n    for (let i = 0; i < str.length; i += 1) {\n      byteFromBase64URL(str.charCodeAt(i), state, onByte);\n    }\n    return new Uint8Array(result);\n  }\n  exports.base64UrlToUint8Array = base64UrlToUint8Array;\n  function stringToUint8Array(str) {\n    const result = [];\n    stringToUTF8(str, byte => result.push(byte));\n    return new Uint8Array(result);\n  }\n  exports.stringToUint8Array = stringToUint8Array;\n  function bytesToBase64URL(bytes) {\n    const result = [];\n    const state = {\n      queue: 0,\n      queuedBits: 0\n    };\n    const onChar = char => {\n      result.push(char);\n    };\n    bytes.forEach(byte => byteToBase64URL(byte, state, onChar));\n    // always call with `null` after processing all bytes\n    byteToBase64URL(null, state, onChar);\n    return result.join('');\n  }\n  exports.bytesToBase64URL = bytesToBase64URL;\n});","lineCount":276,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,2,7,0,"Object"],[9,8,7,6],[9,9,7,7,"defineProperty"],[9,23,7,21],[9,24,7,22,"exports"],[9,31,7,29],[9,33,7,31],[9,45,7,43],[9,47,7,45],[10,4,7,47,"value"],[10,9,7,52],[10,11,7,54],[11,2,7,59],[11,3,7,60],[11,4,7,61],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"bytesToBase64URL"],[12,26,8,24],[12,29,8,27,"exports"],[12,36,8,34],[12,37,8,35,"stringToUint8Array"],[12,55,8,53],[12,58,8,56,"exports"],[12,65,8,63],[12,66,8,64,"base64UrlToUint8Array"],[12,87,8,85],[12,90,8,88,"exports"],[12,97,8,95],[12,98,8,96,"stringFromUTF8"],[12,112,8,110],[12,115,8,113,"exports"],[12,122,8,120],[12,123,8,121,"stringToUTF8"],[12,135,8,133],[12,138,8,136,"exports"],[12,145,8,143],[12,146,8,144,"codepointToUTF8"],[12,161,8,159],[12,164,8,162,"exports"],[12,171,8,169],[12,172,8,170,"stringFromBase64URL"],[12,191,8,189],[12,194,8,192,"exports"],[12,201,8,199],[12,202,8,200,"stringToBase64URL"],[12,219,8,217],[12,222,8,220,"exports"],[12,229,8,227],[12,230,8,228,"byteFromBase64URL"],[12,247,8,245],[12,250,8,248,"exports"],[12,257,8,255],[12,258,8,256,"byteToBase64URL"],[12,273,8,271],[12,276,8,274],[12,281,8,279],[12,282,8,280],[13,2,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,2,13,0],[17,8,13,6,"TO_BASE64URL"],[17,20,13,18],[17,23,13,21],[17,89,13,87],[17,90,13,88,"split"],[17,95,13,93],[17,96,13,94],[17,98,13,96],[17,99,13,97],[18,2,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,2,18,0],[22,8,18,6,"IGNORE_BASE64URL"],[22,24,18,22],[22,27,18,25],[22,37,18,35],[22,38,18,36,"split"],[22,43,18,41],[22,44,18,42],[22,46,18,44],[22,47,18,45],[23,2,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,2,23,0],[27,8,23,6,"FROM_BASE64URL"],[27,22,23,20],[27,25,23,23],[27,26,23,24],[27,32,23,30],[28,4,24,4],[28,10,24,10,"charMap"],[28,17,24,17],[28,20,24,20],[28,24,24,24,"Array"],[28,29,24,29],[28,30,24,30],[28,33,24,33],[28,34,24,34],[29,4,25,4],[29,9,25,9],[29,13,25,13,"i"],[29,14,25,14],[29,17,25,17],[29,18,25,18],[29,20,25,20,"i"],[29,21,25,21],[29,24,25,24,"charMap"],[29,31,25,31],[29,32,25,32,"length"],[29,38,25,38],[29,40,25,40,"i"],[29,41,25,41],[29,45,25,45],[29,46,25,46],[29,48,25,48],[30,6,26,8,"charMap"],[30,13,26,15],[30,14,26,16,"i"],[30,15,26,17],[30,16,26,18],[30,19,26,21],[30,20,26,22],[30,21,26,23],[31,4,27,4],[32,4,28,4],[32,9,28,9],[32,13,28,13,"i"],[32,14,28,14],[32,17,28,17],[32,18,28,18],[32,20,28,20,"i"],[32,21,28,21],[32,24,28,24,"IGNORE_BASE64URL"],[32,40,28,40],[32,41,28,41,"length"],[32,47,28,47],[32,49,28,49,"i"],[32,50,28,50],[32,54,28,54],[32,55,28,55],[32,57,28,57],[33,6,29,8,"charMap"],[33,13,29,15],[33,14,29,16,"IGNORE_BASE64URL"],[33,30,29,32],[33,31,29,33,"i"],[33,32,29,34],[33,33,29,35],[33,34,29,36,"charCodeAt"],[33,44,29,46],[33,45,29,47],[33,46,29,48],[33,47,29,49],[33,48,29,50],[33,51,29,53],[33,52,29,54],[33,53,29,55],[34,4,30,4],[35,4,31,4],[35,9,31,9],[35,13,31,13,"i"],[35,14,31,14],[35,17,31,17],[35,18,31,18],[35,20,31,20,"i"],[35,21,31,21],[35,24,31,24,"TO_BASE64URL"],[35,36,31,36],[35,37,31,37,"length"],[35,43,31,43],[35,45,31,45,"i"],[35,46,31,46],[35,50,31,50],[35,51,31,51],[35,53,31,53],[36,6,32,8,"charMap"],[36,13,32,15],[36,14,32,16,"TO_BASE64URL"],[36,26,32,28],[36,27,32,29,"i"],[36,28,32,30],[36,29,32,31],[36,30,32,32,"charCodeAt"],[36,40,32,42],[36,41,32,43],[36,42,32,44],[36,43,32,45],[36,44,32,46],[36,47,32,49,"i"],[36,48,32,50],[37,4,33,4],[38,4,34,4],[38,11,34,11,"charMap"],[38,18,34,18],[39,2,35,0],[39,3,35,1],[39,5,35,3],[39,6,35,4],[40,2,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,2,43,0],[47,11,43,9,"byteToBase64URL"],[47,26,43,24,"byteToBase64URL"],[47,27,43,25,"byte"],[47,31,43,29],[47,33,43,31,"state"],[47,38,43,36],[47,40,43,38,"emit"],[47,44,43,42],[47,46,43,44],[48,4,44,4],[48,8,44,8,"byte"],[48,12,44,12],[48,17,44,17],[48,21,44,21],[48,23,44,23],[49,6,45,8,"state"],[49,11,45,13],[49,12,45,14,"queue"],[49,17,45,19],[49,20,45,23,"state"],[49,25,45,28],[49,26,45,29,"queue"],[49,31,45,34],[49,35,45,38],[49,36,45,39],[49,39,45,43,"byte"],[49,43,45,47],[50,6,46,8,"state"],[50,11,46,13],[50,12,46,14,"queuedBits"],[50,22,46,24],[50,26,46,28],[50,27,46,29],[51,6,47,8],[51,13,47,15,"state"],[51,18,47,20],[51,19,47,21,"queuedBits"],[51,29,47,31],[51,33,47,35],[51,34,47,36],[51,36,47,38],[52,8,48,12],[52,14,48,18,"pos"],[52,17,48,21],[52,20,48,25,"state"],[52,25,48,30],[52,26,48,31,"queue"],[52,31,48,36],[52,35,48,41,"state"],[52,40,48,46],[52,41,48,47,"queuedBits"],[52,51,48,57],[52,54,48,60],[52,55,48,62],[52,58,48,66],[52,60,48,68],[53,8,49,12,"emit"],[53,12,49,16],[53,13,49,17,"TO_BASE64URL"],[53,25,49,29],[53,26,49,30,"pos"],[53,29,49,33],[53,30,49,34],[53,31,49,35],[54,8,50,12,"state"],[54,13,50,17],[54,14,50,18,"queuedBits"],[54,24,50,28],[54,28,50,32],[54,29,50,33],[55,6,51,8],[56,4,52,4],[56,5,52,5],[56,11,53,9],[56,15,53,13,"state"],[56,20,53,18],[56,21,53,19,"queuedBits"],[56,31,53,29],[56,34,53,32],[56,35,53,33],[56,37,53,35],[57,6,54,8,"state"],[57,11,54,13],[57,12,54,14,"queue"],[57,17,54,19],[57,20,54,22,"state"],[57,25,54,27],[57,26,54,28,"queue"],[57,31,54,33],[57,35,54,38],[57,36,54,39],[57,39,54,42,"state"],[57,44,54,47],[57,45,54,48,"queuedBits"],[57,55,54,59],[58,6,55,8,"state"],[58,11,55,13],[58,12,55,14,"queuedBits"],[58,22,55,24],[58,25,55,27],[58,26,55,28],[59,6,56,8],[59,13,56,15,"state"],[59,18,56,20],[59,19,56,21,"queuedBits"],[59,29,56,31],[59,33,56,35],[59,34,56,36],[59,36,56,38],[60,8,57,12],[60,14,57,18,"pos"],[60,17,57,21],[60,20,57,25,"state"],[60,25,57,30],[60,26,57,31,"queue"],[60,31,57,36],[60,35,57,41,"state"],[60,40,57,46],[60,41,57,47,"queuedBits"],[60,51,57,57],[60,54,57,60],[60,55,57,62],[60,58,57,66],[60,60,57,68],[61,8,58,12,"emit"],[61,12,58,16],[61,13,58,17,"TO_BASE64URL"],[61,25,58,29],[61,26,58,30,"pos"],[61,29,58,33],[61,30,58,34],[61,31,58,35],[62,8,59,12,"state"],[62,13,59,17],[62,14,59,18,"queuedBits"],[62,24,59,28],[62,28,59,32],[62,29,59,33],[63,6,60,8],[64,4,61,4],[65,2,62,0],[66,2,63,0,"exports"],[66,9,63,7],[66,10,63,8,"byteToBase64URL"],[66,25,63,23],[66,28,63,26,"byteToBase64URL"],[66,43,63,41],[67,2,64,0],[68,0,65,0],[69,0,66,0],[70,0,67,0],[71,0,68,0],[72,0,69,0],[73,0,70,0],[74,2,71,0],[74,11,71,9,"byteFromBase64URL"],[74,28,71,26,"byteFromBase64URL"],[74,29,71,27,"charCode"],[74,37,71,35],[74,39,71,37,"state"],[74,44,71,42],[74,46,71,44,"emit"],[74,50,71,48],[74,52,71,50],[75,4,72,4],[75,10,72,10,"bits"],[75,14,72,14],[75,17,72,17,"FROM_BASE64URL"],[75,31,72,31],[75,32,72,32,"charCode"],[75,40,72,40],[75,41,72,41],[76,4,73,4],[76,8,73,8,"bits"],[76,12,73,12],[76,15,73,15],[76,16,73,16],[76,17,73,17],[76,19,73,19],[77,6,74,8],[78,6,75,8,"state"],[78,11,75,13],[78,12,75,14,"queue"],[78,17,75,19],[78,20,75,23,"state"],[78,25,75,28],[78,26,75,29,"queue"],[78,31,75,34],[78,35,75,38],[78,36,75,39],[78,39,75,43,"bits"],[78,43,75,47],[79,6,76,8,"state"],[79,11,76,13],[79,12,76,14,"queuedBits"],[79,22,76,24],[79,26,76,28],[79,27,76,29],[80,6,77,8],[80,13,77,15,"state"],[80,18,77,20],[80,19,77,21,"queuedBits"],[80,29,77,31],[80,33,77,35],[80,34,77,36],[80,36,77,38],[81,8,78,12,"emit"],[81,12,78,16],[81,13,78,18,"state"],[81,18,78,23],[81,19,78,24,"queue"],[81,24,78,29],[81,28,78,34,"state"],[81,33,78,39],[81,34,78,40,"queuedBits"],[81,44,78,50],[81,47,78,53],[81,48,78,55],[81,51,78,59],[81,55,78,63],[81,56,78,64],[82,8,79,12,"state"],[82,13,79,17],[82,14,79,18,"queuedBits"],[82,24,79,28],[82,28,79,32],[82,29,79,33],[83,6,80,8],[84,4,81,4],[84,5,81,5],[84,11,82,9],[84,15,82,13,"bits"],[84,19,82,17],[84,24,82,22],[84,25,82,23],[84,26,82,24],[84,28,82,26],[85,6,83,8],[86,6,84,8],[87,4,85,4],[87,5,85,5],[87,11,86,9],[88,6,87,8],[88,12,87,14],[88,16,87,18,"Error"],[88,21,87,23],[88,22,87,24],[88,55,87,57,"String"],[88,61,87,63],[88,62,87,64,"fromCharCode"],[88,74,87,76],[88,75,87,77,"charCode"],[88,83,87,85],[88,84,87,86],[88,87,87,89],[88,88,87,90],[89,4,88,4],[90,2,89,0],[91,2,90,0,"exports"],[91,9,90,7],[91,10,90,8,"byteFromBase64URL"],[91,27,90,25],[91,30,90,28,"byteFromBase64URL"],[91,47,90,45],[92,2,91,0],[93,0,92,0],[94,0,93,0],[95,0,94,0],[96,0,95,0],[97,0,96,0],[98,0,97,0],[99,2,98,0],[99,11,98,9,"stringToBase64URL"],[99,28,98,26,"stringToBase64URL"],[99,29,98,27,"str"],[99,32,98,30],[99,34,98,32],[100,4,99,4],[100,10,99,10,"base64"],[100,16,99,16],[100,19,99,19],[100,21,99,21],[101,4,100,4],[101,10,100,10,"emitter"],[101,17,100,17],[101,20,100,21,"char"],[101,24,100,25],[101,28,100,30],[102,6,101,8,"base64"],[102,12,101,14],[102,13,101,15,"push"],[102,17,101,19],[102,18,101,20,"char"],[102,22,101,24],[102,23,101,25],[103,4,102,4],[103,5,102,5],[104,4,103,4],[104,10,103,10,"state"],[104,15,103,15],[104,18,103,18],[105,6,103,20,"queue"],[105,11,103,25],[105,13,103,27],[105,14,103,28],[106,6,103,30,"queuedBits"],[106,16,103,40],[106,18,103,42],[107,4,103,44],[107,5,103,45],[108,4,104,4,"stringToUTF8"],[108,16,104,16],[108,17,104,17,"str"],[108,20,104,20],[108,22,104,23,"byte"],[108,26,104,27],[108,30,104,32],[109,6,105,8,"byteToBase64URL"],[109,21,105,23],[109,22,105,24,"byte"],[109,26,105,28],[109,28,105,30,"state"],[109,33,105,35],[109,35,105,37,"emitter"],[109,42,105,44],[109,43,105,45],[110,4,106,4],[110,5,106,5],[110,6,106,6],[111,4,107,4,"byteToBase64URL"],[111,19,107,19],[111,20,107,20],[111,24,107,24],[111,26,107,26,"state"],[111,31,107,31],[111,33,107,33,"emitter"],[111,40,107,40],[111,41,107,41],[112,4,108,4],[112,11,108,11,"base64"],[112,17,108,17],[112,18,108,18,"join"],[112,22,108,22],[112,23,108,23],[112,25,108,25],[112,26,108,26],[113,2,109,0],[114,2,110,0,"exports"],[114,9,110,7],[114,10,110,8,"stringToBase64URL"],[114,27,110,25],[114,30,110,28,"stringToBase64URL"],[114,47,110,45],[115,2,111,0],[116,0,112,0],[117,0,113,0],[118,0,114,0],[119,0,115,0],[120,0,116,0],[121,2,117,0],[121,11,117,9,"stringFromBase64URL"],[121,30,117,28,"stringFromBase64URL"],[121,31,117,29,"str"],[121,34,117,32],[121,36,117,34],[122,4,118,4],[122,10,118,10,"conv"],[122,14,118,14],[122,17,118,17],[122,19,118,19],[123,4,119,4],[123,10,119,10,"utf8Emit"],[123,18,119,18],[123,21,119,22,"codepoint"],[123,30,119,31],[123,34,119,36],[124,6,120,8,"conv"],[124,10,120,12],[124,11,120,13,"push"],[124,15,120,17],[124,16,120,18,"String"],[124,22,120,24],[124,23,120,25,"fromCodePoint"],[124,36,120,38],[124,37,120,39,"codepoint"],[124,46,120,48],[124,47,120,49],[124,48,120,50],[125,4,121,4],[125,5,121,5],[126,4,122,4],[126,10,122,10,"utf8State"],[126,19,122,19],[126,22,122,22],[127,6,123,8,"utf8seq"],[127,13,123,15],[127,15,123,17],[127,16,123,18],[128,6,124,8,"codepoint"],[128,15,124,17],[128,17,124,19],[129,4,125,4],[129,5,125,5],[130,4,126,4],[130,10,126,10,"b64State"],[130,18,126,18],[130,21,126,21],[131,6,126,23,"queue"],[131,11,126,28],[131,13,126,30],[131,14,126,31],[132,6,126,33,"queuedBits"],[132,16,126,43],[132,18,126,45],[133,4,126,47],[133,5,126,48],[134,4,127,4],[134,10,127,10,"byteEmit"],[134,18,127,18],[134,21,127,22,"byte"],[134,25,127,26],[134,29,127,31],[135,6,128,8,"stringFromUTF8"],[135,20,128,22],[135,21,128,23,"byte"],[135,25,128,27],[135,27,128,29,"utf8State"],[135,36,128,38],[135,38,128,40,"utf8Emit"],[135,46,128,48],[135,47,128,49],[136,4,129,4],[136,5,129,5],[137,4,130,4],[137,9,130,9],[137,13,130,13,"i"],[137,14,130,14],[137,17,130,17],[137,18,130,18],[137,20,130,20,"i"],[137,21,130,21],[137,24,130,24,"str"],[137,27,130,27],[137,28,130,28,"length"],[137,34,130,34],[137,36,130,36,"i"],[137,37,130,37],[137,41,130,41],[137,42,130,42],[137,44,130,44],[138,6,131,8,"byteFromBase64URL"],[138,23,131,25],[138,24,131,26,"str"],[138,27,131,29],[138,28,131,30,"charCodeAt"],[138,38,131,40],[138,39,131,41,"i"],[138,40,131,42],[138,41,131,43],[138,43,131,45,"b64State"],[138,51,131,53],[138,53,131,55,"byteEmit"],[138,61,131,63],[138,62,131,64],[139,4,132,4],[140,4,133,4],[140,11,133,11,"conv"],[140,15,133,15],[140,16,133,16,"join"],[140,20,133,20],[140,21,133,21],[140,23,133,23],[140,24,133,24],[141,2,134,0],[142,2,135,0,"exports"],[142,9,135,7],[142,10,135,8,"stringFromBase64URL"],[142,29,135,27],[142,32,135,30,"stringFromBase64URL"],[142,51,135,49],[143,2,136,0],[144,0,137,0],[145,0,138,0],[146,0,139,0],[147,0,140,0],[148,0,141,0],[149,2,142,0],[149,11,142,9,"codepointToUTF8"],[149,26,142,24,"codepointToUTF8"],[149,27,142,25,"codepoint"],[149,36,142,34],[149,38,142,36,"emit"],[149,42,142,40],[149,44,142,42],[150,4,143,4],[150,8,143,8,"codepoint"],[150,17,143,17],[150,21,143,21],[150,25,143,25],[150,27,143,27],[151,6,144,8,"emit"],[151,10,144,12],[151,11,144,13,"codepoint"],[151,20,144,22],[151,21,144,23],[152,6,145,8],[153,4,146,4],[153,5,146,5],[153,11,147,9],[153,15,147,13,"codepoint"],[153,24,147,22],[153,28,147,26],[153,33,147,31],[153,35,147,33],[154,6,148,8,"emit"],[154,10,148,12],[154,11,148,13],[154,15,148,17],[154,18,148,21,"codepoint"],[154,27,148,30],[154,31,148,34],[154,32,148,36],[154,33,148,37],[155,6,149,8,"emit"],[155,10,149,12],[155,11,149,13],[155,15,149,17],[155,18,149,21,"codepoint"],[155,27,149,30],[155,30,149,33],[155,34,149,38],[155,35,149,39],[156,6,150,8],[157,4,151,4],[157,5,151,5],[157,11,152,9],[157,15,152,13,"codepoint"],[157,24,152,22],[157,28,152,26],[157,34,152,32],[157,36,152,34],[158,6,153,8,"emit"],[158,10,153,12],[158,11,153,13],[158,15,153,17],[158,18,153,21,"codepoint"],[158,27,153,30],[158,31,153,34],[158,33,153,37],[158,34,153,38],[159,6,154,8,"emit"],[159,10,154,12],[159,11,154,13],[159,15,154,17],[159,18,154,22,"codepoint"],[159,27,154,31],[159,31,154,35],[159,32,154,36],[159,35,154,40],[159,39,154,45],[159,40,154,46],[160,6,155,8,"emit"],[160,10,155,12],[160,11,155,13],[160,15,155,17],[160,18,155,21,"codepoint"],[160,27,155,30],[160,30,155,33],[160,34,155,38],[160,35,155,39],[161,6,156,8],[162,4,157,4],[162,5,157,5],[162,11,158,9],[162,15,158,13,"codepoint"],[162,24,158,22],[162,28,158,26],[162,36,158,34],[162,38,158,36],[163,6,159,8,"emit"],[163,10,159,12],[163,11,159,13],[163,15,159,17],[163,18,159,21,"codepoint"],[163,27,159,30],[163,31,159,34],[163,33,159,37],[163,34,159,38],[164,6,160,8,"emit"],[164,10,160,12],[164,11,160,13],[164,15,160,17],[164,18,160,22,"codepoint"],[164,27,160,31],[164,31,160,35],[164,33,160,37],[164,36,160,41],[164,40,160,46],[164,41,160,47],[165,6,161,8,"emit"],[165,10,161,12],[165,11,161,13],[165,15,161,17],[165,18,161,22,"codepoint"],[165,27,161,31],[165,31,161,35],[165,32,161,36],[165,35,161,40],[165,39,161,45],[165,40,161,46],[166,6,162,8,"emit"],[166,10,162,12],[166,11,162,13],[166,15,162,17],[166,18,162,21,"codepoint"],[166,27,162,30],[166,30,162,33],[166,34,162,38],[166,35,162,39],[167,6,163,8],[168,4,164,4],[169,4,165,4],[169,10,165,10],[169,14,165,14,"Error"],[169,19,165,19],[169,20,165,20],[169,55,165,55,"codepoint"],[169,64,165,64],[169,65,165,65,"toString"],[169,73,165,73],[169,74,165,74],[169,76,165,76],[169,77,165,77],[169,79,165,79],[169,80,165,80],[170,2,166,0],[171,2,167,0,"exports"],[171,9,167,7],[171,10,167,8,"codepointToUTF8"],[171,25,167,23],[171,28,167,26,"codepointToUTF8"],[171,43,167,41],[172,2,168,0],[173,0,169,0],[174,0,170,0],[175,0,171,0],[176,0,172,0],[177,0,173,0],[178,2,174,0],[178,11,174,9,"stringToUTF8"],[178,23,174,21,"stringToUTF8"],[178,24,174,22,"str"],[178,27,174,25],[178,29,174,27,"emit"],[178,33,174,31],[178,35,174,33],[179,4,175,4],[179,9,175,9],[179,13,175,13,"i"],[179,14,175,14],[179,17,175,17],[179,18,175,18],[179,20,175,20,"i"],[179,21,175,21],[179,24,175,24,"str"],[179,27,175,27],[179,28,175,28,"length"],[179,34,175,34],[179,36,175,36,"i"],[179,37,175,37],[179,41,175,41],[179,42,175,42],[179,44,175,44],[180,6,176,8],[180,10,176,12,"codepoint"],[180,19,176,21],[180,22,176,24,"str"],[180,25,176,27],[180,26,176,28,"charCodeAt"],[180,36,176,38],[180,37,176,39,"i"],[180,38,176,40],[180,39,176,41],[181,6,177,8],[181,10,177,12,"codepoint"],[181,19,177,21],[181,22,177,24],[181,28,177,30],[181,32,177,34,"codepoint"],[181,41,177,43],[181,45,177,47],[181,51,177,53],[181,53,177,55],[182,8,178,12],[183,8,179,12],[184,8,180,12],[185,8,181,12],[185,14,181,18,"highSurrogate"],[185,27,181,31],[185,30,181,35],[185,31,181,36,"codepoint"],[185,40,181,45],[185,43,181,48],[185,49,181,54],[185,53,181,58],[185,58,181,63],[185,61,181,67],[185,67,181,73],[186,8,182,12],[186,14,182,18,"lowSurrogate"],[186,26,182,30],[186,29,182,34,"str"],[186,32,182,37],[186,33,182,38,"charCodeAt"],[186,43,182,48],[186,44,182,49,"i"],[186,45,182,50],[186,48,182,53],[186,49,182,54],[186,50,182,55],[186,53,182,58],[186,59,182,64],[186,62,182,68],[186,68,182,74],[187,8,183,12,"codepoint"],[187,17,183,21],[187,20,183,24],[187,21,183,25,"lowSurrogate"],[187,33,183,37],[187,36,183,40,"highSurrogate"],[187,49,183,53],[187,53,183,57],[187,60,183,64],[188,8,184,12,"i"],[188,9,184,13],[188,13,184,17],[188,14,184,18],[189,6,185,8],[190,6,186,8,"codepointToUTF8"],[190,21,186,23],[190,22,186,24,"codepoint"],[190,31,186,33],[190,33,186,35,"emit"],[190,37,186,39],[190,38,186,40],[191,4,187,4],[192,2,188,0],[193,2,189,0,"exports"],[193,9,189,7],[193,10,189,8,"stringToUTF8"],[193,22,189,20],[193,25,189,23,"stringToUTF8"],[193,37,189,35],[194,2,190,0],[195,0,191,0],[196,0,192,0],[197,0,193,0],[198,0,194,0],[199,0,195,0],[200,0,196,0],[201,0,197,0],[202,2,198,0],[202,11,198,9,"stringFromUTF8"],[202,25,198,23,"stringFromUTF8"],[202,26,198,24,"byte"],[202,30,198,28],[202,32,198,30,"state"],[202,37,198,35],[202,39,198,37,"emit"],[202,43,198,41],[202,45,198,43],[203,4,199,4],[203,8,199,8,"state"],[203,13,199,13],[203,14,199,14,"utf8seq"],[203,21,199,21],[203,26,199,26],[203,27,199,27],[203,29,199,29],[204,6,200,8],[204,10,200,12,"byte"],[204,14,200,16],[204,18,200,20],[204,22,200,24],[204,24,200,26],[205,8,201,12,"emit"],[205,12,201,16],[205,13,201,17,"byte"],[205,17,201,21],[205,18,201,22],[206,8,202,12],[207,6,203,8],[208,6,204,8],[209,6,205,8],[209,11,205,13],[209,15,205,17,"leadingBit"],[209,25,205,27],[209,28,205,30],[209,29,205,31],[209,31,205,33,"leadingBit"],[209,41,205,43],[209,44,205,46],[209,45,205,47],[209,47,205,49,"leadingBit"],[209,57,205,59],[209,61,205,63],[209,62,205,64],[209,64,205,66],[210,8,206,12],[210,12,206,16],[210,13,206,18,"byte"],[210,17,206,22],[210,21,206,27],[210,22,206,28],[210,25,206,31,"leadingBit"],[210,35,206,42],[210,38,206,46],[210,39,206,47],[210,45,206,53],[210,46,206,54],[210,48,206,56],[211,10,207,16,"state"],[211,15,207,21],[211,16,207,22,"utf8seq"],[211,23,207,29],[211,26,207,32,"leadingBit"],[211,36,207,42],[212,10,208,16],[213,8,209,12],[214,6,210,8],[215,6,211,8],[215,10,211,12,"state"],[215,15,211,17],[215,16,211,18,"utf8seq"],[215,23,211,25],[215,28,211,30],[215,29,211,31],[215,31,211,33],[216,8,212,12,"state"],[216,13,212,17],[216,14,212,18,"codepoint"],[216,23,212,27],[216,26,212,30,"byte"],[216,30,212,34],[216,33,212,37],[216,35,212,39],[217,6,213,8],[217,7,213,9],[217,13,214,13],[217,17,214,17,"state"],[217,22,214,22],[217,23,214,23,"utf8seq"],[217,30,214,30],[217,35,214,35],[217,36,214,36],[217,38,214,38],[218,8,215,12,"state"],[218,13,215,17],[218,14,215,18,"codepoint"],[218,23,215,27],[218,26,215,30,"byte"],[218,30,215,34],[218,33,215,37],[218,35,215,39],[219,6,216,8],[219,7,216,9],[219,13,217,13],[219,17,217,17,"state"],[219,22,217,22],[219,23,217,23,"utf8seq"],[219,30,217,30],[219,35,217,35],[219,36,217,36],[219,38,217,38],[220,8,218,12,"state"],[220,13,218,17],[220,14,218,18,"codepoint"],[220,23,218,27],[220,26,218,30,"byte"],[220,30,218,34],[220,33,218,37],[220,34,218,38],[221,6,219,8],[221,7,219,9],[221,13,220,13],[222,8,221,12],[222,14,221,18],[222,18,221,22,"Error"],[222,23,221,27],[222,24,221,28],[222,48,221,52],[222,49,221,53],[223,6,222,8],[224,6,223,8,"state"],[224,11,223,13],[224,12,223,14,"utf8seq"],[224,19,223,21],[224,23,223,25],[224,24,223,26],[225,4,224,4],[225,5,224,5],[225,11,225,9],[225,15,225,13,"state"],[225,20,225,18],[225,21,225,19,"utf8seq"],[225,28,225,26],[225,31,225,29],[225,32,225,30],[225,34,225,32],[226,6,226,8],[226,10,226,12,"byte"],[226,14,226,16],[226,18,226,20],[226,22,226,24],[226,24,226,26],[227,8,227,12],[227,14,227,18],[227,18,227,22,"Error"],[227,23,227,27],[227,24,227,28],[227,48,227,52],[227,49,227,53],[228,6,228,8],[229,6,229,8,"state"],[229,11,229,13],[229,12,229,14,"codepoint"],[229,21,229,23],[229,24,229,27,"state"],[229,29,229,32],[229,30,229,33,"codepoint"],[229,39,229,42],[229,43,229,46],[229,44,229,47],[229,47,229,52,"byte"],[229,51,229,56],[229,54,229,59],[229,56,229,62],[230,6,230,8,"state"],[230,11,230,13],[230,12,230,14,"utf8seq"],[230,19,230,21],[230,23,230,25],[230,24,230,26],[231,6,231,8],[231,10,231,12,"state"],[231,15,231,17],[231,16,231,18,"utf8seq"],[231,23,231,25],[231,28,231,30],[231,29,231,31],[231,31,231,33],[232,8,232,12,"emit"],[232,12,232,16],[232,13,232,17,"state"],[232,18,232,22],[232,19,232,23,"codepoint"],[232,28,232,32],[232,29,232,33],[233,6,233,8],[234,4,234,4],[235,2,235,0],[236,2,236,0,"exports"],[236,9,236,7],[236,10,236,8,"stringFromUTF8"],[236,24,236,22],[236,27,236,25,"stringFromUTF8"],[236,41,236,39],[237,2,237,0],[238,0,238,0],[239,0,239,0],[240,2,240,0],[240,11,240,9,"base64UrlToUint8Array"],[240,32,240,30,"base64UrlToUint8Array"],[240,33,240,31,"str"],[240,36,240,34],[240,38,240,36],[241,4,241,4],[241,10,241,10,"result"],[241,16,241,16],[241,19,241,19],[241,21,241,21],[242,4,242,4],[242,10,242,10,"state"],[242,15,242,15],[242,18,242,18],[243,6,242,20,"queue"],[243,11,242,25],[243,13,242,27],[243,14,242,28],[244,6,242,30,"queuedBits"],[244,16,242,40],[244,18,242,42],[245,4,242,44],[245,5,242,45],[246,4,243,4],[246,10,243,10,"onByte"],[246,16,243,16],[246,19,243,20,"byte"],[246,23,243,24],[246,27,243,29],[247,6,244,8,"result"],[247,12,244,14],[247,13,244,15,"push"],[247,17,244,19],[247,18,244,20,"byte"],[247,22,244,24],[247,23,244,25],[248,4,245,4],[248,5,245,5],[249,4,246,4],[249,9,246,9],[249,13,246,13,"i"],[249,14,246,14],[249,17,246,17],[249,18,246,18],[249,20,246,20,"i"],[249,21,246,21],[249,24,246,24,"str"],[249,27,246,27],[249,28,246,28,"length"],[249,34,246,34],[249,36,246,36,"i"],[249,37,246,37],[249,41,246,41],[249,42,246,42],[249,44,246,44],[250,6,247,8,"byteFromBase64URL"],[250,23,247,25],[250,24,247,26,"str"],[250,27,247,29],[250,28,247,30,"charCodeAt"],[250,38,247,40],[250,39,247,41,"i"],[250,40,247,42],[250,41,247,43],[250,43,247,45,"state"],[250,48,247,50],[250,50,247,52,"onByte"],[250,56,247,58],[250,57,247,59],[251,4,248,4],[252,4,249,4],[252,11,249,11],[252,15,249,15,"Uint8Array"],[252,25,249,25],[252,26,249,26,"result"],[252,32,249,32],[252,33,249,33],[253,2,250,0],[254,2,251,0,"exports"],[254,9,251,7],[254,10,251,8,"base64UrlToUint8Array"],[254,31,251,29],[254,34,251,32,"base64UrlToUint8Array"],[254,55,251,53],[255,2,252,0],[255,11,252,9,"stringToUint8Array"],[255,29,252,27,"stringToUint8Array"],[255,30,252,28,"str"],[255,33,252,31],[255,35,252,33],[256,4,253,4],[256,10,253,10,"result"],[256,16,253,16],[256,19,253,19],[256,21,253,21],[257,4,254,4,"stringToUTF8"],[257,16,254,16],[257,17,254,17,"str"],[257,20,254,20],[257,22,254,23,"byte"],[257,26,254,27],[257,30,254,32,"result"],[257,36,254,38],[257,37,254,39,"push"],[257,41,254,43],[257,42,254,44,"byte"],[257,46,254,48],[257,47,254,49],[257,48,254,50],[258,4,255,4],[258,11,255,11],[258,15,255,15,"Uint8Array"],[258,25,255,25],[258,26,255,26,"result"],[258,32,255,32],[258,33,255,33],[259,2,256,0],[260,2,257,0,"exports"],[260,9,257,7],[260,10,257,8,"stringToUint8Array"],[260,28,257,26],[260,31,257,29,"stringToUint8Array"],[260,49,257,47],[261,2,258,0],[261,11,258,9,"bytesToBase64URL"],[261,27,258,25,"bytesToBase64URL"],[261,28,258,26,"bytes"],[261,33,258,31],[261,35,258,33],[262,4,259,4],[262,10,259,10,"result"],[262,16,259,16],[262,19,259,19],[262,21,259,21],[263,4,260,4],[263,10,260,10,"state"],[263,15,260,15],[263,18,260,18],[264,6,260,20,"queue"],[264,11,260,25],[264,13,260,27],[264,14,260,28],[265,6,260,30,"queuedBits"],[265,16,260,40],[265,18,260,42],[266,4,260,44],[266,5,260,45],[267,4,261,4],[267,10,261,10,"onChar"],[267,16,261,16],[267,19,261,20,"char"],[267,23,261,24],[267,27,261,29],[268,6,262,8,"result"],[268,12,262,14],[268,13,262,15,"push"],[268,17,262,19],[268,18,262,20,"char"],[268,22,262,24],[268,23,262,25],[269,4,263,4],[269,5,263,5],[270,4,264,4,"bytes"],[270,9,264,9],[270,10,264,10,"forEach"],[270,17,264,17],[270,18,264,19,"byte"],[270,22,264,23],[270,26,264,28,"byteToBase64URL"],[270,41,264,43],[270,42,264,44,"byte"],[270,46,264,48],[270,48,264,50,"state"],[270,53,264,55],[270,55,264,57,"onChar"],[270,61,264,63],[270,62,264,64],[270,63,264,65],[271,4,265,4],[272,4,266,4,"byteToBase64URL"],[272,19,266,19],[272,20,266,20],[272,24,266,24],[272,26,266,26,"state"],[272,31,266,31],[272,33,266,33,"onChar"],[272,39,266,39],[272,40,266,40],[273,4,267,4],[273,11,267,11,"result"],[273,17,267,17],[273,18,267,18,"join"],[273,22,267,22],[273,23,267,23],[273,25,267,25],[273,26,267,26],[274,2,268,0],[275,2,269,0,"exports"],[275,9,269,7],[275,10,269,8,"bytesToBase64URL"],[275,26,269,24],[275,29,269,27,"bytesToBase64URL"],[275,45,269,43],[276,0,269,44],[276,3]],"functionMap":{"names":["<global>","<anonymous>","byteToBase64URL","byteFromBase64URL","stringToBase64URL","emitter","stringToUTF8$argument_1","stringFromBase64URL","utf8Emit","byteEmit","codepointToUTF8","stringToUTF8","stringFromUTF8","base64UrlToUint8Array","onByte","stringToUint8Array","bytesToBase64URL","onChar","bytes.forEach$argument_0"],"mappings":"AAA;wBCsB;CDY;AEQ;CFmB;AGS;CHkB;AIS;oBCE;KDE;sBEE;KFE;CJG;AOQ;qBCE;KDE;qBEM;KFE;CPK;AUQ;CVwB;AWQ;CXc;AYU;CZqC;AaK;mBCG;KDE;CbK;AeE;sBTE,2BS;CfE;AgBE;mBCG;KDE;kBEC,8CF;ChBI"},"hasCjsExports":true},"type":"js/module"}]}