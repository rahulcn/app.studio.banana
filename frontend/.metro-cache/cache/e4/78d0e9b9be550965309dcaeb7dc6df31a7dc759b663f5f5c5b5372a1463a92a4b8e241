{"dependencies":[{"name":"@supabase/node-fetch","data":{"asyncType":"async","isESMImport":true,"locs":[{"start":{"line":16,"column":30,"index":878},"end":{"line":16,"column":60,"index":908}},{"start":{"line":26,"column":22,"index":1219},"end":{"line":26,"column":52,"index":1249}}],"key":"7Fx+cnrTZuhuI1XE65tJyFLDBO8=","exportNames":["*"],"imports":2}},{"name":"/app/frontend/node_modules/@expo/metro-config/build/async-require.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":30,"index":878},"end":{"line":16,"column":65,"index":913}},{"start":{"line":26,"column":16,"index":1213},"end":{"line":26,"column":52,"index":1249}}],"key":"daau5xiLR32xskYL0mG55FO6bjk=","exportNames":["*"],"imports":2}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"resolveFetch\", {\n    enumerable: true,\n    get: function () {\n      return resolveFetch;\n    }\n  });\n  Object.defineProperty(exports, \"resolveResponse\", {\n    enumerable: true,\n    get: function () {\n      return resolveResponse;\n    }\n  });\n  Object.defineProperty(exports, \"recursiveToCamel\", {\n    enumerable: true,\n    get: function () {\n      return recursiveToCamel;\n    }\n  });\n  Object.defineProperty(exports, \"isPlainObject\", {\n    enumerable: true,\n    get: function () {\n      return isPlainObject;\n    }\n  });\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  const resolveFetch = customFetch => {\n    let _fetch;\n    if (customFetch) {\n      _fetch = customFetch;\n    } else if (typeof fetch === 'undefined') {\n      _fetch = (...args) => require(_dependencyMap[1], \"/app/frontend/node_modules/@expo/metro-config/build/async-require.js\")(_dependencyMap[0], _dependencyMap.paths, \"@supabase/node-fetch\").then(({\n        default: fetch\n      }) => fetch(...args));\n    } else {\n      _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n  };\n  const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (typeof Response === 'undefined') {\n      // @ts-ignore\n      return (yield require(_dependencyMap[1], \"/app/frontend/node_modules/@expo/metro-config/build/async-require.js\")(_dependencyMap[0], _dependencyMap.paths, \"@supabase/node-fetch\")).Response;\n    }\n    return Response;\n  });\n  const recursiveToCamel = item => {\n    if (Array.isArray(item)) {\n      return item.map(el => recursiveToCamel(el));\n    } else if (typeof item === 'function' || item !== Object(item)) {\n      return item;\n    }\n    const result = {};\n    Object.entries(item).forEach(([key, value]) => {\n      const newKey = key.replace(/([-_][a-z])/gi, c => c.toUpperCase().replace(/[-_]/g, ''));\n      result[newKey] = recursiveToCamel(value);\n    });\n    return result;\n  };\n  /**\n   * Determine if input is a plain object\n   * An object is plain if it's created by either {}, new Object(), or Object.create(null)\n   * source: https://github.com/sindresorhus/is-plain-obj\n   */\n  const isPlainObject = value => {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n  };\n});","lineCount":103,"map":[[7,2,10,0,"Object"],[7,8,10,0],[7,9,10,0,"defineProperty"],[7,23,10,0],[7,24,10,0,"exports"],[7,31,10,0],[8,4,10,0,"enumerable"],[8,14,10,0],[9,4,10,0,"get"],[9,7,10,0],[9,18,10,0,"get"],[9,19,10,0],[10,6,10,0],[10,13,10,0,"resolveFetch"],[10,25,10,0],[11,4,10,0],[12,2,10,0],[13,2,23,0,"Object"],[13,8,23,0],[13,9,23,0,"defineProperty"],[13,23,23,0],[13,24,23,0,"exports"],[13,31,23,0],[14,4,23,0,"enumerable"],[14,14,23,0],[15,4,23,0,"get"],[15,7,23,0],[15,18,23,0,"get"],[15,19,23,0],[16,6,23,0],[16,13,23,0,"resolveResponse"],[16,28,23,0],[17,4,23,0],[18,2,23,0],[19,2,30,0,"Object"],[19,8,30,0],[19,9,30,0,"defineProperty"],[19,23,30,0],[19,24,30,0,"exports"],[19,31,30,0],[20,4,30,0,"enumerable"],[20,14,30,0],[21,4,30,0,"get"],[21,7,30,0],[21,18,30,0,"get"],[21,19,30,0],[22,6,30,0],[22,13,30,0,"recursiveToCamel"],[22,29,30,0],[23,4,30,0],[24,2,30,0],[25,2,49,0,"Object"],[25,8,49,0],[25,9,49,0,"defineProperty"],[25,23,49,0],[25,24,49,0,"exports"],[25,31,49,0],[26,4,49,0,"enumerable"],[26,14,49,0],[27,4,49,0,"get"],[27,7,49,0],[27,18,49,0,"get"],[27,19,49,0],[28,6,49,0],[28,13,49,0,"isPlainObject"],[28,26,49,0],[29,4,49,0],[30,2,49,0],[31,2,1,0],[31,6,1,4,"__awaiter"],[31,15,1,13],[31,18,1,17],[31,22,1,21],[31,26,1,25],[31,30,1,29],[31,31,1,30,"__awaiter"],[31,40,1,39],[31,44,1,44],[31,54,1,54,"thisArg"],[31,61,1,61],[31,63,1,63,"_arguments"],[31,73,1,73],[31,75,1,75,"P"],[31,76,1,76],[31,78,1,78,"generator"],[31,87,1,87],[31,89,1,89],[32,4,2,4],[32,13,2,13,"adopt"],[32,18,2,18,"adopt"],[32,19,2,19,"value"],[32,24,2,24],[32,26,2,26],[33,6,2,28],[33,13,2,35,"value"],[33,18,2,40],[33,30,2,52,"P"],[33,31,2,53],[33,34,2,56,"value"],[33,39,2,61],[33,42,2,64],[33,46,2,68,"P"],[33,47,2,69],[33,48,2,70],[33,58,2,80,"resolve"],[33,65,2,87],[33,67,2,89],[34,8,2,91,"resolve"],[34,15,2,98],[34,16,2,99,"value"],[34,21,2,104],[34,22,2,105],[35,6,2,107],[35,7,2,108],[35,8,2,109],[36,4,2,111],[37,4,3,4],[37,11,3,11],[37,16,3,16,"P"],[37,17,3,17],[37,22,3,22,"P"],[37,23,3,23],[37,26,3,26,"Promise"],[37,33,3,33],[37,34,3,34],[37,36,3,36],[37,46,3,46,"resolve"],[37,53,3,53],[37,55,3,55,"reject"],[37,61,3,61],[37,63,3,63],[38,6,4,8],[38,15,4,17,"fulfilled"],[38,24,4,26,"fulfilled"],[38,25,4,27,"value"],[38,30,4,32],[38,32,4,34],[39,8,4,36],[39,12,4,40],[40,10,4,42,"step"],[40,14,4,46],[40,15,4,47,"generator"],[40,24,4,56],[40,25,4,57,"next"],[40,29,4,61],[40,30,4,62,"value"],[40,35,4,67],[40,36,4,68],[40,37,4,69],[41,8,4,71],[41,9,4,72],[41,10,4,73],[41,17,4,80,"e"],[41,18,4,81],[41,20,4,83],[42,10,4,85,"reject"],[42,16,4,91],[42,17,4,92,"e"],[42,18,4,93],[42,19,4,94],[43,8,4,96],[44,6,4,98],[45,6,5,8],[45,15,5,17,"rejected"],[45,23,5,25,"rejected"],[45,24,5,26,"value"],[45,29,5,31],[45,31,5,33],[46,8,5,35],[46,12,5,39],[47,10,5,41,"step"],[47,14,5,45],[47,15,5,46,"generator"],[47,24,5,55],[47,25,5,56],[47,32,5,63],[47,33,5,64],[47,34,5,65,"value"],[47,39,5,70],[47,40,5,71],[47,41,5,72],[48,8,5,74],[48,9,5,75],[48,10,5,76],[48,17,5,83,"e"],[48,18,5,84],[48,20,5,86],[49,10,5,88,"reject"],[49,16,5,94],[49,17,5,95,"e"],[49,18,5,96],[49,19,5,97],[50,8,5,99],[51,6,5,101],[52,6,6,8],[52,15,6,17,"step"],[52,19,6,21,"step"],[52,20,6,22,"result"],[52,26,6,28],[52,28,6,30],[53,8,6,32,"result"],[53,14,6,38],[53,15,6,39,"done"],[53,19,6,43],[53,22,6,46,"resolve"],[53,29,6,53],[53,30,6,54,"result"],[53,36,6,60],[53,37,6,61,"value"],[53,42,6,66],[53,43,6,67],[53,46,6,70,"adopt"],[53,51,6,75],[53,52,6,76,"result"],[53,58,6,82],[53,59,6,83,"value"],[53,64,6,88],[53,65,6,89],[53,66,6,90,"then"],[53,70,6,94],[53,71,6,95,"fulfilled"],[53,80,6,104],[53,82,6,106,"rejected"],[53,90,6,114],[53,91,6,115],[54,6,6,117],[55,6,7,8,"step"],[55,10,7,12],[55,11,7,13],[55,12,7,14,"generator"],[55,21,7,23],[55,24,7,26,"generator"],[55,33,7,35],[55,34,7,36,"apply"],[55,39,7,41],[55,40,7,42,"thisArg"],[55,47,7,49],[55,49,7,51,"_arguments"],[55,59,7,61],[55,63,7,65],[55,65,7,67],[55,66,7,68],[55,68,7,70,"next"],[55,72,7,74],[55,73,7,75],[55,74,7,76],[55,75,7,77],[56,4,8,4],[56,5,8,5],[56,6,8,6],[57,2,9,0],[57,3,9,1],[58,2,10,7],[58,8,10,13,"resolveFetch"],[58,20,10,25],[58,23,10,29,"customFetch"],[58,34,10,40],[58,38,10,45],[59,4,11,4],[59,8,11,8,"_fetch"],[59,14,11,14],[60,4,12,4],[60,8,12,8,"customFetch"],[60,19,12,19],[60,21,12,21],[61,6,13,8,"_fetch"],[61,12,13,14],[61,15,13,17,"customFetch"],[61,26,13,28],[62,4,14,4],[62,5,14,5],[62,11,15,9],[62,15,15,13],[62,22,15,20,"fetch"],[62,27,15,25],[62,32,15,30],[62,43,15,41],[62,45,15,43],[63,6,16,8,"_fetch"],[63,12,16,14],[63,15,16,17,"_fetch"],[63,16,16,18],[63,19,16,21,"args"],[63,23,16,25],[63,28,16,30,"require"],[63,35,16,30],[63,36,16,30,"_dependencyMap"],[63,50,16,30],[63,127,16,30,"_dependencyMap"],[63,141,16,30],[63,146,16,30,"_dependencyMap"],[63,160,16,30],[63,161,16,30,"paths"],[63,166,16,30],[63,192,16,61,"then"],[63,196,16,65],[63,197,16,66],[63,198,16,67],[64,8,16,69,"default"],[64,15,16,76],[64,17,16,78,"fetch"],[65,6,16,84],[65,7,16,85],[65,12,16,90,"fetch"],[65,17,16,95],[65,18,16,96],[65,21,16,99,"args"],[65,25,16,103],[65,26,16,104],[65,27,16,105],[66,4,17,4],[66,5,17,5],[66,11,18,9],[67,6,19,8,"_fetch"],[67,12,19,14],[67,15,19,17,"fetch"],[67,20,19,22],[68,4,20,4],[69,4,21,4],[69,11,21,11],[69,12,21,12],[69,15,21,15,"args"],[69,19,21,19],[69,24,21,24,"_fetch"],[69,30,21,30],[69,31,21,31],[69,34,21,34,"args"],[69,38,21,38],[69,39,21,39],[70,2,22,0],[70,3,22,1],[71,2,23,7],[71,8,23,13,"resolveResponse"],[71,23,23,28],[71,26,23,31,"resolveResponse"],[71,27,23,31],[71,32,23,37,"__awaiter"],[71,41,23,46],[71,42,23,47],[71,47,23,52],[71,48,23,53],[71,50,23,55],[71,55,23,60],[71,56,23,61],[71,58,23,63],[71,63,23,68],[71,64,23,69],[71,66,23,71],[71,79,23,84],[72,4,24,4],[72,8,24,8],[72,15,24,15,"Response"],[72,23,24,23],[72,28,24,28],[72,39,24,39],[72,41,24,41],[73,6,25,8],[74,6,26,8],[74,13,26,15],[74,14,26,16],[74,20,26,16,"require"],[74,27,26,16],[74,28,26,16,"_dependencyMap"],[74,42,26,16],[74,119,26,16,"_dependencyMap"],[74,133,26,16],[74,138,26,16,"_dependencyMap"],[74,152,26,16],[74,153,26,16,"paths"],[74,158,26,16],[74,183,26,52],[74,185,26,54,"Response"],[74,193,26,62],[75,4,27,4],[76,4,28,4],[76,11,28,11,"Response"],[76,19,28,19],[77,2,29,0],[77,3,29,1],[77,4,29,2],[78,2,30,7],[78,8,30,13,"recursiveToCamel"],[78,24,30,29],[78,27,30,33,"item"],[78,31,30,37],[78,35,30,42],[79,4,31,4],[79,8,31,8,"Array"],[79,13,31,13],[79,14,31,14,"isArray"],[79,21,31,21],[79,22,31,22,"item"],[79,26,31,26],[79,27,31,27],[79,29,31,29],[80,6,32,8],[80,13,32,15,"item"],[80,17,32,19],[80,18,32,20,"map"],[80,21,32,23],[80,22,32,25,"el"],[80,24,32,27],[80,28,32,32,"recursiveToCamel"],[80,44,32,48],[80,45,32,49,"el"],[80,47,32,51],[80,48,32,52],[80,49,32,53],[81,4,33,4],[81,5,33,5],[81,11,34,9],[81,15,34,13],[81,22,34,20,"item"],[81,26,34,24],[81,31,34,29],[81,41,34,39],[81,45,34,43,"item"],[81,49,34,47],[81,54,34,52,"Object"],[81,60,34,58],[81,61,34,59,"item"],[81,65,34,63],[81,66,34,64],[81,68,34,66],[82,6,35,8],[82,13,35,15,"item"],[82,17,35,19],[83,4,36,4],[84,4,37,4],[84,10,37,10,"result"],[84,16,37,16],[84,19,37,19],[84,20,37,20],[84,21,37,21],[85,4,38,4,"Object"],[85,10,38,10],[85,11,38,11,"entries"],[85,18,38,18],[85,19,38,19,"item"],[85,23,38,23],[85,24,38,24],[85,25,38,25,"forEach"],[85,32,38,32],[85,33,38,33],[85,34,38,34],[85,35,38,35,"key"],[85,38,38,38],[85,40,38,40,"value"],[85,45,38,45],[85,46,38,46],[85,51,38,51],[86,6,39,8],[86,12,39,14,"newKey"],[86,18,39,20],[86,21,39,23,"key"],[86,24,39,26],[86,25,39,27,"replace"],[86,32,39,34],[86,33,39,35],[86,48,39,50],[86,50,39,53,"c"],[86,51,39,54],[86,55,39,59,"c"],[86,56,39,60],[86,57,39,61,"toUpperCase"],[86,68,39,72],[86,69,39,73],[86,70,39,74],[86,71,39,75,"replace"],[86,78,39,82],[86,79,39,83],[86,86,39,90],[86,88,39,92],[86,90,39,94],[86,91,39,95],[86,92,39,96],[87,6,40,8,"result"],[87,12,40,14],[87,13,40,15,"newKey"],[87,19,40,21],[87,20,40,22],[87,23,40,25,"recursiveToCamel"],[87,39,40,41],[87,40,40,42,"value"],[87,45,40,47],[87,46,40,48],[88,4,41,4],[88,5,41,5],[88,6,41,6],[89,4,42,4],[89,11,42,11,"result"],[89,17,42,17],[90,2,43,0],[90,3,43,1],[91,2,44,0],[92,0,45,0],[93,0,46,0],[94,0,47,0],[95,0,48,0],[96,2,49,7],[96,8,49,13,"isPlainObject"],[96,21,49,26],[96,24,49,30,"value"],[96,29,49,35],[96,33,49,40],[97,4,50,4],[97,8,50,8],[97,15,50,15,"value"],[97,20,50,20],[97,25,50,25],[97,33,50,33],[97,37,50,37,"value"],[97,42,50,42],[97,47,50,47],[97,51,50,51],[97,53,50,53],[98,6,51,8],[98,13,51,15],[98,18,51,20],[99,4,52,4],[100,4,53,4],[100,10,53,10,"prototype"],[100,19,53,19],[100,22,53,22,"Object"],[100,28,53,28],[100,29,53,29,"getPrototypeOf"],[100,43,53,43],[100,44,53,44,"value"],[100,49,53,49],[100,50,53,50],[101,4,54,4],[101,11,54,12],[101,12,54,13,"prototype"],[101,21,54,22],[101,26,54,27],[101,30,54,31],[101,34,55,8,"prototype"],[101,43,55,17],[101,48,55,22,"Object"],[101,54,55,28],[101,55,55,29,"prototype"],[101,64,55,38],[101,68,56,8,"Object"],[101,74,56,14],[101,75,56,15,"getPrototypeOf"],[101,89,56,29],[101,90,56,30,"prototype"],[101,99,56,39],[101,100,56,40],[101,105,56,45],[101,109,56,49],[101,114,57,8],[101,116,57,10,"Symbol"],[101,122,57,16],[101,123,57,17,"toStringTag"],[101,134,57,28],[101,138,57,32,"value"],[101,143,57,37],[101,144,57,38],[101,148,58,8],[101,150,58,10,"Symbol"],[101,156,58,16],[101,157,58,17,"iterator"],[101,165,58,25],[101,169,58,29,"value"],[101,174,58,34],[101,175,58,35],[102,2,59,0],[102,3,59,1],[103,0,59,2],[103,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","resolveFetch","_fetch","import.then$argument_0","resolveResponse","__awaiter$argument_3","recursiveToCamel","item.map$argument_0","Object.entries.forEach$argument_0","key.replace$argument_1","isPlainObject"],"mappings":"AAA,4CC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;4BOC;iBCM,iDC,sCD,CD;WNK,4BM;CPC;+BUC,wCC;CDM,CV;gCYC;wBCE,4BD;iCEM;oDCC,2CD;KFE;CZE;6BgBM;ChBU"},"hasCjsExports":false},"type":"js/module"}]}