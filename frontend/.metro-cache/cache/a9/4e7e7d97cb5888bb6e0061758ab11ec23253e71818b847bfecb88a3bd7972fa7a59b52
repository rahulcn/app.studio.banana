{"dependencies":[{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":17,"index":914},"end":{"line":15,"column":41,"index":938}}],"key":"+GSAvg/CWfG2ifOQrWLkai/D9hY=","exportNames":["*"],"imports":1}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":16,"index":956},"end":{"line":16,"column":39,"index":979}}],"key":"m5IduDkD0DmXIm44QxetlLAeo0E=","exportNames":["*"],"imports":1}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":18,"index":999},"end":{"line":17,"column":43,"index":1024}}],"key":"g7hF4pHwnWO84hRO36vjqsLwW80=","exportNames":["*"],"imports":1}},{"name":"./BlobDownloadBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":46,"index":1072},"end":{"line":18,"column":78,"index":1104}}],"key":"ZOxbRXUyfDEL0iRFTQ4ys3MNGAs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const errors_1 = require(_dependencyMap[0], \"../lib/errors\");\n  const fetch_1 = require(_dependencyMap[1], \"../lib/fetch\");\n  const helpers_1 = require(_dependencyMap[2], \"../lib/helpers\");\n  const BlobDownloadBuilder_1 = __importDefault(require(_dependencyMap[3], \"./BlobDownloadBuilder\"));\n  const DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n      column: 'name',\n      order: 'asc'\n    }\n  };\n  const DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false\n  };\n  class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n      this.shouldThrowOnError = false;\n      this.url = url;\n      this.headers = headers;\n      this.bucketId = bucketId;\n      this.fetch = (0, helpers_1.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let body;\n          const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n          let headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n            'x-upsert': String(options.upsert)\n          });\n          const metadata = options.metadata;\n          if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n            body = new FormData();\n            body.append('cacheControl', options.cacheControl);\n            if (metadata) {\n              body.append('metadata', this.encodeMetadata(metadata));\n            }\n            body.append('', fileBody);\n          } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n            body = fileBody;\n            body.append('cacheControl', options.cacheControl);\n            if (metadata) {\n              body.append('metadata', this.encodeMetadata(metadata));\n            }\n          } else {\n            body = fileBody;\n            headers['cache-control'] = `max-age=${options.cacheControl}`;\n            headers['content-type'] = options.contentType;\n            if (metadata) {\n              headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n            }\n          }\n          if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n            headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n          }\n          const cleanPath = this._removeEmptyFolders(path);\n          const _path = this._getFinalPath(cleanPath);\n          const data = yield (method == 'PUT' ? fetch_1.put : fetch_1.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n            headers\n          }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n            duplex: options.duplex\n          } : {}));\n          return {\n            data: {\n              path: cleanPath,\n              id: data.Id,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n      });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const url = new URL(this.url + `/object/upload/sign/${_path}`);\n        url.searchParams.set('token', token);\n        try {\n          let body;\n          const options = Object.assign({\n            upsert: DEFAULT_FILE_OPTIONS.upsert\n          }, fileOptions);\n          const headers = Object.assign(Object.assign({}, this.headers), {\n            'x-upsert': String(options.upsert)\n          });\n          if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n            body = new FormData();\n            body.append('cacheControl', options.cacheControl);\n            body.append('', fileBody);\n          } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n            body = fileBody;\n            body.append('cacheControl', options.cacheControl);\n          } else {\n            body = fileBody;\n            headers['cache-control'] = `max-age=${options.cacheControl}`;\n            headers['content-type'] = options.contentType;\n          }\n          const data = yield (0, fetch_1.put)(this.fetch, url.toString(), body, {\n            headers\n          });\n          return {\n            data: {\n              path: cleanPath,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let _path = this._getFinalPath(path);\n          const headers = Object.assign({}, this.headers);\n          if (options === null || options === void 0 ? void 0 : options.upsert) {\n            headers['x-upsert'] = 'true';\n          }\n          const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n            headers\n          });\n          const url = new URL(this.url + data.url);\n          const token = url.searchParams.get('token');\n          if (!token) {\n            throw new errors_1.StorageError('No token returned by API');\n          }\n          return {\n            data: {\n              signedUrl: url.toString(),\n              path,\n              token\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n      });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/move`, {\n            bucketId: this.bucketId,\n            sourceKey: fromPath,\n            destinationKey: toPath,\n            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/copy`, {\n            bucketId: this.bucketId,\n            sourceKey: fromPath,\n            destinationKey: toPath,\n            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n          }, {\n            headers: this.headers\n          });\n          return {\n            data: {\n              path: data.Key\n            },\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          let _path = this._getFinalPath(path);\n          let data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n            expiresIn\n          }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n            transform: options.transform\n          } : {}), {\n            headers: this.headers\n          });\n          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n          const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n          data = {\n            signedUrl\n          };\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n            expiresIn,\n            paths\n          }, {\n            headers: this.headers\n          });\n          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n          return {\n            data: data.map(datum => Object.assign(Object.assign({}, datum), {\n              signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n            })),\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n      const _path = this._getFinalPath(path);\n      const downloadFn = () => (0, fetch_1.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true\n      });\n      return new BlobDownloadBuilder_1.default(downloadFn, this.shouldThrowOnError);\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const _path = this._getFinalPath(path);\n        try {\n          const data = yield (0, fetch_1.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n            headers: this.headers\n          });\n          return {\n            data: (0, helpers_1.recursiveToCamel)(data),\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const _path = this._getFinalPath(path);\n        try {\n          yield (0, fetch_1.head)(this.fetch, `${this.url}/object/${_path}`, {\n            headers: this.headers\n          });\n          return {\n            data: true,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error) && error instanceof errors_1.StorageUnknownError) {\n            const originalError = error.originalError;\n            if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n              return {\n                data: false,\n                error\n              };\n            }\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n      const _path = this._getFinalPath(path);\n      const _queryString = [];\n      const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n      if (downloadQueryParam !== '') {\n        _queryString.push(downloadQueryParam);\n      }\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      if (transformationQuery !== '') {\n        _queryString.push(transformationQuery);\n      }\n      let queryString = _queryString.join('&');\n      if (queryString !== '') {\n        queryString = `?${queryString}`;\n      }\n      return {\n        data: {\n          publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n        }\n      };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const data = yield (0, fetch_1.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, {\n            prefixes: paths\n          }, {\n            headers: this.headers\n          });\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files and folders within a path of the bucket.\n     * @param path The folder path.\n     * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n     */\n    list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n            prefix: path || ''\n          });\n          const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n            headers: this.headers\n          }, parameters);\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    /**\n     * @experimental this method signature might change in the future\n     * @param options search options\n     * @param parameters\n     */\n    listV2(options, parameters) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const body = Object.assign({}, options);\n          const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n            headers: this.headers\n          }, parameters);\n          return {\n            data,\n            error: null\n          };\n        } catch (error) {\n          if (this.shouldThrowOnError) {\n            throw error;\n          }\n          if ((0, errors_1.isStorageError)(error)) {\n            return {\n              data: null,\n              error\n            };\n          }\n          throw error;\n        }\n      });\n    }\n    encodeMetadata(metadata) {\n      return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.from(data).toString('base64');\n      }\n      return btoa(data);\n    }\n    _getFinalPath(path) {\n      return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n    }\n    _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n      const params = [];\n      if (transform.width) {\n        params.push(`width=${transform.width}`);\n      }\n      if (transform.height) {\n        params.push(`height=${transform.height}`);\n      }\n      if (transform.resize) {\n        params.push(`resize=${transform.resize}`);\n      }\n      if (transform.format) {\n        params.push(`format=${transform.format}`);\n      }\n      if (transform.quality) {\n        params.push(`quality=${transform.quality}`);\n      }\n      return params.join('&');\n    }\n  }\n  exports.default = StorageFileApi;\n});","lineCount":714,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__awaiter"],[4,15,2,13],[4,18,2,17],[4,22,2,21],[4,26,2,25],[4,30,2,29],[4,31,2,30,"__awaiter"],[4,40,2,39],[4,44,2,44],[4,54,2,54,"thisArg"],[4,61,2,61],[4,63,2,63,"_arguments"],[4,73,2,73],[4,75,2,75,"P"],[4,76,2,76],[4,78,2,78,"generator"],[4,87,2,87],[4,89,2,89],[5,4,3,4],[5,13,3,13,"adopt"],[5,18,3,18,"adopt"],[5,19,3,19,"value"],[5,24,3,24],[5,26,3,26],[6,6,3,28],[6,13,3,35,"value"],[6,18,3,40],[6,30,3,52,"P"],[6,31,3,53],[6,34,3,56,"value"],[6,39,3,61],[6,42,3,64],[6,46,3,68,"P"],[6,47,3,69],[6,48,3,70],[6,58,3,80,"resolve"],[6,65,3,87],[6,67,3,89],[7,8,3,91,"resolve"],[7,15,3,98],[7,16,3,99,"value"],[7,21,3,104],[7,22,3,105],[8,6,3,107],[8,7,3,108],[8,8,3,109],[9,4,3,111],[10,4,4,4],[10,11,4,11],[10,16,4,16,"P"],[10,17,4,17],[10,22,4,22,"P"],[10,23,4,23],[10,26,4,26,"Promise"],[10,33,4,33],[10,34,4,34],[10,36,4,36],[10,46,4,46,"resolve"],[10,53,4,53],[10,55,4,55,"reject"],[10,61,4,61],[10,63,4,63],[11,6,5,8],[11,15,5,17,"fulfilled"],[11,24,5,26,"fulfilled"],[11,25,5,27,"value"],[11,30,5,32],[11,32,5,34],[12,8,5,36],[12,12,5,40],[13,10,5,42,"step"],[13,14,5,46],[13,15,5,47,"generator"],[13,24,5,56],[13,25,5,57,"next"],[13,29,5,61],[13,30,5,62,"value"],[13,35,5,67],[13,36,5,68],[13,37,5,69],[14,8,5,71],[14,9,5,72],[14,10,5,73],[14,17,5,80,"e"],[14,18,5,81],[14,20,5,83],[15,10,5,85,"reject"],[15,16,5,91],[15,17,5,92,"e"],[15,18,5,93],[15,19,5,94],[16,8,5,96],[17,6,5,98],[18,6,6,8],[18,15,6,17,"rejected"],[18,23,6,25,"rejected"],[18,24,6,26,"value"],[18,29,6,31],[18,31,6,33],[19,8,6,35],[19,12,6,39],[20,10,6,41,"step"],[20,14,6,45],[20,15,6,46,"generator"],[20,24,6,55],[20,25,6,56],[20,32,6,63],[20,33,6,64],[20,34,6,65,"value"],[20,39,6,70],[20,40,6,71],[20,41,6,72],[21,8,6,74],[21,9,6,75],[21,10,6,76],[21,17,6,83,"e"],[21,18,6,84],[21,20,6,86],[22,10,6,88,"reject"],[22,16,6,94],[22,17,6,95,"e"],[22,18,6,96],[22,19,6,97],[23,8,6,99],[24,6,6,101],[25,6,7,8],[25,15,7,17,"step"],[25,19,7,21,"step"],[25,20,7,22,"result"],[25,26,7,28],[25,28,7,30],[26,8,7,32,"result"],[26,14,7,38],[26,15,7,39,"done"],[26,19,7,43],[26,22,7,46,"resolve"],[26,29,7,53],[26,30,7,54,"result"],[26,36,7,60],[26,37,7,61,"value"],[26,42,7,66],[26,43,7,67],[26,46,7,70,"adopt"],[26,51,7,75],[26,52,7,76,"result"],[26,58,7,82],[26,59,7,83,"value"],[26,64,7,88],[26,65,7,89],[26,66,7,90,"then"],[26,70,7,94],[26,71,7,95,"fulfilled"],[26,80,7,104],[26,82,7,106,"rejected"],[26,90,7,114],[26,91,7,115],[27,6,7,117],[28,6,8,8,"step"],[28,10,8,12],[28,11,8,13],[28,12,8,14,"generator"],[28,21,8,23],[28,24,8,26,"generator"],[28,33,8,35],[28,34,8,36,"apply"],[28,39,8,41],[28,40,8,42,"thisArg"],[28,47,8,49],[28,49,8,51,"_arguments"],[28,59,8,61],[28,63,8,65],[28,65,8,67],[28,66,8,68],[28,68,8,70,"next"],[28,72,8,74],[28,73,8,75],[28,74,8,76],[28,75,8,77],[29,4,9,4],[29,5,9,5],[29,6,9,6],[30,2,10,0],[30,3,10,1],[31,2,11,0],[31,6,11,4,"__importDefault"],[31,21,11,19],[31,24,11,23],[31,28,11,27],[31,32,11,31],[31,36,11,35],[31,37,11,36,"__importDefault"],[31,52,11,51],[31,56,11,56],[31,66,11,66,"mod"],[31,69,11,69],[31,71,11,71],[32,4,12,4],[32,11,12,12,"mod"],[32,14,12,15],[32,18,12,19,"mod"],[32,21,12,22],[32,22,12,23,"__esModule"],[32,32,12,33],[32,35,12,37,"mod"],[32,38,12,40],[32,41,12,43],[33,6,12,45],[33,15,12,54],[33,17,12,56,"mod"],[34,4,12,60],[34,5,12,61],[35,2,13,0],[35,3,13,1],[36,2,14,0,"Object"],[36,8,14,6],[36,9,14,7,"defineProperty"],[36,23,14,21],[36,24,14,22,"exports"],[36,31,14,29],[36,33,14,31],[36,45,14,43],[36,47,14,45],[37,4,14,47,"value"],[37,9,14,52],[37,11,14,54],[38,2,14,59],[38,3,14,60],[38,4,14,61],[39,2,15,0],[39,8,15,6,"errors_1"],[39,16,15,14],[39,19,15,17,"require"],[39,26,15,24],[39,27,15,24,"_dependencyMap"],[39,41,15,24],[39,61,15,40],[39,62,15,41],[40,2,16,0],[40,8,16,6,"fetch_1"],[40,15,16,13],[40,18,16,16,"require"],[40,25,16,23],[40,26,16,23,"_dependencyMap"],[40,40,16,23],[40,59,16,38],[40,60,16,39],[41,2,17,0],[41,8,17,6,"helpers_1"],[41,17,17,15],[41,20,17,18,"require"],[41,27,17,25],[41,28,17,25,"_dependencyMap"],[41,42,17,25],[41,63,17,42],[41,64,17,43],[42,2,18,0],[42,8,18,6,"BlobDownloadBuilder_1"],[42,29,18,27],[42,32,18,30,"__importDefault"],[42,47,18,45],[42,48,18,46,"require"],[42,55,18,53],[42,56,18,53,"_dependencyMap"],[42,70,18,53],[42,98,18,77],[42,99,18,78],[42,100,18,79],[43,2,19,0],[43,8,19,6,"DEFAULT_SEARCH_OPTIONS"],[43,30,19,28],[43,33,19,31],[44,4,20,4,"limit"],[44,9,20,9],[44,11,20,11],[44,14,20,14],[45,4,21,4,"offset"],[45,10,21,10],[45,12,21,12],[45,13,21,13],[46,4,22,4,"sortBy"],[46,10,22,10],[46,12,22,12],[47,6,23,8,"column"],[47,12,23,14],[47,14,23,16],[47,20,23,22],[48,6,24,8,"order"],[48,11,24,13],[48,13,24,15],[49,4,25,4],[50,2,26,0],[50,3,26,1],[51,2,27,0],[51,8,27,6,"DEFAULT_FILE_OPTIONS"],[51,28,27,26],[51,31,27,29],[52,4,28,4,"cacheControl"],[52,16,28,16],[52,18,28,18],[52,24,28,24],[53,4,29,4,"contentType"],[53,15,29,15],[53,17,29,17],[53,43,29,43],[54,4,30,4,"upsert"],[54,10,30,10],[54,12,30,12],[55,2,31,0],[55,3,31,1],[56,2,32,0],[56,8,32,6,"StorageFileApi"],[56,22,32,20],[56,23,32,21],[57,4,33,4,"constructor"],[57,15,33,15,"constructor"],[57,16,33,16,"url"],[57,19,33,19],[57,21,33,21,"headers"],[57,28,33,28],[57,31,33,31],[57,32,33,32],[57,33,33,33],[57,35,33,35,"bucketId"],[57,43,33,43],[57,45,33,45,"fetch"],[57,50,33,50],[57,52,33,52],[58,6,34,8],[58,10,34,12],[58,11,34,13,"shouldThrowOnError"],[58,29,34,31],[58,32,34,34],[58,37,34,39],[59,6,35,8],[59,10,35,12],[59,11,35,13,"url"],[59,14,35,16],[59,17,35,19,"url"],[59,20,35,22],[60,6,36,8],[60,10,36,12],[60,11,36,13,"headers"],[60,18,36,20],[60,21,36,23,"headers"],[60,28,36,30],[61,6,37,8],[61,10,37,12],[61,11,37,13,"bucketId"],[61,19,37,21],[61,22,37,24,"bucketId"],[61,30,37,32],[62,6,38,8],[62,10,38,12],[62,11,38,13,"fetch"],[62,16,38,18],[62,19,38,21],[62,20,38,22],[62,21,38,23],[62,23,38,25,"helpers_1"],[62,32,38,34],[62,33,38,35,"resolveFetch"],[62,45,38,47],[62,47,38,49,"fetch"],[62,52,38,54],[62,53,38,55],[63,4,39,4],[64,4,40,4],[65,0,41,0],[66,0,42,0],[67,4,43,4,"throwOnError"],[67,16,43,16,"throwOnError"],[67,17,43,16],[67,19,43,19],[68,6,44,8],[68,10,44,12],[68,11,44,13,"shouldThrowOnError"],[68,29,44,31],[68,32,44,34],[68,36,44,38],[69,6,45,8],[69,13,45,15],[69,17,45,19],[70,4,46,4],[71,4,47,4],[72,0,48,0],[73,0,49,0],[74,0,50,0],[75,0,51,0],[76,0,52,0],[77,0,53,0],[78,4,54,4,"uploadOrUpdate"],[78,18,54,18,"uploadOrUpdate"],[78,19,54,19,"method"],[78,25,54,25],[78,27,54,27,"path"],[78,31,54,31],[78,33,54,33,"fileBody"],[78,41,54,41],[78,43,54,43,"fileOptions"],[78,54,54,54],[78,56,54,56],[79,6,55,8],[79,13,55,15,"__awaiter"],[79,22,55,24],[79,23,55,25],[79,27,55,29],[79,29,55,31],[79,34,55,36],[79,35,55,37],[79,37,55,39],[79,42,55,44],[79,43,55,45],[79,45,55,47],[79,58,55,60],[80,8,56,12],[80,12,56,16],[81,10,57,16],[81,14,57,20,"body"],[81,18,57,24],[82,10,58,16],[82,16,58,22,"options"],[82,23,58,29],[82,26,58,32,"Object"],[82,32,58,38],[82,33,58,39,"assign"],[82,39,58,45],[82,40,58,46,"Object"],[82,46,58,52],[82,47,58,53,"assign"],[82,53,58,59],[82,54,58,60],[82,55,58,61],[82,56,58,62],[82,58,58,64,"DEFAULT_FILE_OPTIONS"],[82,78,58,84],[82,79,58,85],[82,81,58,87,"fileOptions"],[82,92,58,98],[82,93,58,99],[83,10,59,16],[83,14,59,20,"headers"],[83,21,59,27],[83,24,59,30,"Object"],[83,30,59,36],[83,31,59,37,"assign"],[83,37,59,43],[83,38,59,44,"Object"],[83,44,59,50],[83,45,59,51,"assign"],[83,51,59,57],[83,52,59,58],[83,53,59,59],[83,54,59,60],[83,56,59,62],[83,60,59,66],[83,61,59,67,"headers"],[83,68,59,74],[83,69,59,75],[83,71,59,78,"method"],[83,77,59,84],[83,82,59,89],[83,88,59,95],[83,92,59,99],[84,12,59,101],[84,22,59,111],[84,24,59,113,"String"],[84,30,59,119],[84,31,59,120,"options"],[84,38,59,127],[84,39,59,128,"upsert"],[84,45,59,134],[85,10,59,136],[85,11,59,138],[85,12,59,139],[86,10,60,16],[86,16,60,22,"metadata"],[86,24,60,30],[86,27,60,33,"options"],[86,34,60,40],[86,35,60,41,"metadata"],[86,43,60,49],[87,10,61,16],[87,14,61,20],[87,21,61,27,"Blob"],[87,25,61,31],[87,30,61,36],[87,41,61,47],[87,45,61,51,"fileBody"],[87,53,61,59],[87,65,61,71,"Blob"],[87,69,61,75],[87,71,61,77],[88,12,62,20,"body"],[88,16,62,24],[88,19,62,27],[88,23,62,31,"FormData"],[88,31,62,39],[88,32,62,40],[88,33,62,41],[89,12,63,20,"body"],[89,16,63,24],[89,17,63,25,"append"],[89,23,63,31],[89,24,63,32],[89,38,63,46],[89,40,63,48,"options"],[89,47,63,55],[89,48,63,56,"cacheControl"],[89,60,63,68],[89,61,63,69],[90,12,64,20],[90,16,64,24,"metadata"],[90,24,64,32],[90,26,64,34],[91,14,65,24,"body"],[91,18,65,28],[91,19,65,29,"append"],[91,25,65,35],[91,26,65,36],[91,36,65,46],[91,38,65,48],[91,42,65,52],[91,43,65,53,"encodeMetadata"],[91,57,65,67],[91,58,65,68,"metadata"],[91,66,65,76],[91,67,65,77],[91,68,65,78],[92,12,66,20],[93,12,67,20,"body"],[93,16,67,24],[93,17,67,25,"append"],[93,23,67,31],[93,24,67,32],[93,26,67,34],[93,28,67,36,"fileBody"],[93,36,67,44],[93,37,67,45],[94,10,68,16],[94,11,68,17],[94,17,69,21],[94,21,69,25],[94,28,69,32,"FormData"],[94,36,69,40],[94,41,69,45],[94,52,69,56],[94,56,69,60,"fileBody"],[94,64,69,68],[94,76,69,80,"FormData"],[94,84,69,88],[94,86,69,90],[95,12,70,20,"body"],[95,16,70,24],[95,19,70,27,"fileBody"],[95,27,70,35],[96,12,71,20,"body"],[96,16,71,24],[96,17,71,25,"append"],[96,23,71,31],[96,24,71,32],[96,38,71,46],[96,40,71,48,"options"],[96,47,71,55],[96,48,71,56,"cacheControl"],[96,60,71,68],[96,61,71,69],[97,12,72,20],[97,16,72,24,"metadata"],[97,24,72,32],[97,26,72,34],[98,14,73,24,"body"],[98,18,73,28],[98,19,73,29,"append"],[98,25,73,35],[98,26,73,36],[98,36,73,46],[98,38,73,48],[98,42,73,52],[98,43,73,53,"encodeMetadata"],[98,57,73,67],[98,58,73,68,"metadata"],[98,66,73,76],[98,67,73,77],[98,68,73,78],[99,12,74,20],[100,10,75,16],[100,11,75,17],[100,17,76,21],[101,12,77,20,"body"],[101,16,77,24],[101,19,77,27,"fileBody"],[101,27,77,35],[102,12,78,20,"headers"],[102,19,78,27],[102,20,78,28],[102,35,78,43],[102,36,78,44],[102,39,78,47],[102,50,78,58,"options"],[102,57,78,65],[102,58,78,66,"cacheControl"],[102,70,78,78],[102,72,78,80],[103,12,79,20,"headers"],[103,19,79,27],[103,20,79,28],[103,34,79,42],[103,35,79,43],[103,38,79,46,"options"],[103,45,79,53],[103,46,79,54,"contentType"],[103,57,79,65],[104,12,80,20],[104,16,80,24,"metadata"],[104,24,80,32],[104,26,80,34],[105,14,81,24,"headers"],[105,21,81,31],[105,22,81,32],[105,34,81,44],[105,35,81,45],[105,38,81,48],[105,42,81,52],[105,43,81,53,"toBase64"],[105,51,81,61],[105,52,81,62],[105,56,81,66],[105,57,81,67,"encodeMetadata"],[105,71,81,81],[105,72,81,82,"metadata"],[105,80,81,90],[105,81,81,91],[105,82,81,92],[106,12,82,20],[107,10,83,16],[108,10,84,16],[108,14,84,20,"fileOptions"],[108,25,84,31],[108,30,84,36],[108,34,84,40],[108,38,84,44,"fileOptions"],[108,49,84,55],[108,54,84,60],[108,59,84,65],[108,60,84,66],[108,63,84,69],[108,68,84,74],[108,69,84,75],[108,72,84,78,"fileOptions"],[108,83,84,89],[108,84,84,90,"headers"],[108,91,84,97],[108,93,84,99],[109,12,85,20,"headers"],[109,19,85,27],[109,22,85,30,"Object"],[109,28,85,36],[109,29,85,37,"assign"],[109,35,85,43],[109,36,85,44,"Object"],[109,42,85,50],[109,43,85,51,"assign"],[109,49,85,57],[109,50,85,58],[109,51,85,59],[109,52,85,60],[109,54,85,62,"headers"],[109,61,85,69],[109,62,85,70],[109,64,85,72,"fileOptions"],[109,75,85,83],[109,76,85,84,"headers"],[109,83,85,91],[109,84,85,92],[110,10,86,16],[111,10,87,16],[111,16,87,22,"cleanPath"],[111,25,87,31],[111,28,87,34],[111,32,87,38],[111,33,87,39,"_removeEmptyFolders"],[111,52,87,58],[111,53,87,59,"path"],[111,57,87,63],[111,58,87,64],[112,10,88,16],[112,16,88,22,"_path"],[112,21,88,27],[112,24,88,30],[112,28,88,34],[112,29,88,35,"_getFinalPath"],[112,42,88,48],[112,43,88,49,"cleanPath"],[112,52,88,58],[112,53,88,59],[113,10,89,16],[113,16,89,22,"data"],[113,20,89,26],[113,23,89,29],[113,29,89,35],[113,30,89,36,"method"],[113,36,89,42],[113,40,89,46],[113,45,89,51],[113,48,89,54,"fetch_1"],[113,55,89,61],[113,56,89,62,"put"],[113,59,89,65],[113,62,89,68,"fetch_1"],[113,69,89,75],[113,70,89,76,"post"],[113,74,89,80],[113,76,89,82],[113,80,89,86],[113,81,89,87,"fetch"],[113,86,89,92],[113,88,89,94],[113,91,89,97],[113,95,89,101],[113,96,89,102,"url"],[113,99,89,105],[113,110,89,116,"_path"],[113,115,89,121],[113,117,89,123],[113,119,89,125,"body"],[113,123,89,129],[113,125,89,131,"Object"],[113,131,89,137],[113,132,89,138,"assign"],[113,138,89,144],[113,139,89,145],[114,12,89,147,"headers"],[115,10,89,155],[115,11,89,156],[115,13,89,159],[115,14,89,160,"options"],[115,21,89,167],[115,26,89,172],[115,30,89,176],[115,34,89,180,"options"],[115,41,89,187],[115,46,89,192],[115,51,89,197],[115,52,89,198],[115,55,89,201],[115,60,89,206],[115,61,89,207],[115,64,89,210,"options"],[115,71,89,217],[115,72,89,218,"duplex"],[115,78,89,224],[115,82,89,228],[116,12,89,230,"duplex"],[116,18,89,236],[116,20,89,238,"options"],[116,27,89,245],[116,28,89,246,"duplex"],[117,10,89,253],[117,11,89,254],[117,14,89,257],[117,15,89,258],[117,16,89,260],[117,17,89,261],[117,18,89,262],[118,10,90,16],[118,17,90,23],[119,12,91,20,"data"],[119,16,91,24],[119,18,91,26],[120,14,91,28,"path"],[120,18,91,32],[120,20,91,34,"cleanPath"],[120,29,91,43],[121,14,91,45,"id"],[121,16,91,47],[121,18,91,49,"data"],[121,22,91,53],[121,23,91,54,"Id"],[121,25,91,56],[122,14,91,58,"fullPath"],[122,22,91,66],[122,24,91,68,"data"],[122,28,91,72],[122,29,91,73,"Key"],[123,12,91,77],[123,13,91,78],[124,12,92,20,"error"],[124,17,92,25],[124,19,92,27],[125,10,93,16],[125,11,93,17],[126,8,94,12],[126,9,94,13],[126,10,95,12],[126,17,95,19,"error"],[126,22,95,24],[126,24,95,26],[127,10,96,16],[127,14,96,20],[127,18,96,24],[127,19,96,25,"shouldThrowOnError"],[127,37,96,43],[127,39,96,45],[128,12,97,20],[128,18,97,26,"error"],[128,23,97,31],[129,10,98,16],[130,10,99,16],[130,14,99,20],[130,15,99,21],[130,16,99,22],[130,18,99,24,"errors_1"],[130,26,99,32],[130,27,99,33,"isStorageError"],[130,41,99,47],[130,43,99,49,"error"],[130,48,99,54],[130,49,99,55],[130,51,99,57],[131,12,100,20],[131,19,100,27],[132,14,100,29,"data"],[132,18,100,33],[132,20,100,35],[132,24,100,39],[133,14,100,41,"error"],[134,12,100,47],[134,13,100,48],[135,10,101,16],[136,10,102,16],[136,16,102,22,"error"],[136,21,102,27],[137,8,103,12],[138,6,104,8],[138,7,104,9],[138,8,104,10],[139,4,105,4],[140,4,106,4],[141,0,107,0],[142,0,108,0],[143,0,109,0],[144,0,110,0],[145,0,111,0],[146,4,112,4,"upload"],[146,10,112,10,"upload"],[146,11,112,11,"path"],[146,15,112,15],[146,17,112,17,"fileBody"],[146,25,112,25],[146,27,112,27,"fileOptions"],[146,38,112,38],[146,40,112,40],[147,6,113,8],[147,13,113,15,"__awaiter"],[147,22,113,24],[147,23,113,25],[147,27,113,29],[147,29,113,31],[147,34,113,36],[147,35,113,37],[147,37,113,39],[147,42,113,44],[147,43,113,45],[147,45,113,47],[147,58,113,60],[148,8,114,12],[148,15,114,19],[148,19,114,23],[148,20,114,24,"uploadOrUpdate"],[148,34,114,38],[148,35,114,39],[148,41,114,45],[148,43,114,47,"path"],[148,47,114,51],[148,49,114,53,"fileBody"],[148,57,114,61],[148,59,114,63,"fileOptions"],[148,70,114,74],[148,71,114,75],[149,6,115,8],[149,7,115,9],[149,8,115,10],[150,4,116,4],[151,4,117,4],[152,0,118,0],[153,0,119,0],[154,0,120,0],[155,0,121,0],[156,0,122,0],[157,4,123,4,"uploadToSignedUrl"],[157,21,123,21,"uploadToSignedUrl"],[157,22,123,22,"path"],[157,26,123,26],[157,28,123,28,"token"],[157,33,123,33],[157,35,123,35,"fileBody"],[157,43,123,43],[157,45,123,45,"fileOptions"],[157,56,123,56],[157,58,123,58],[158,6,124,8],[158,13,124,15,"__awaiter"],[158,22,124,24],[158,23,124,25],[158,27,124,29],[158,29,124,31],[158,34,124,36],[158,35,124,37],[158,37,124,39],[158,42,124,44],[158,43,124,45],[158,45,124,47],[158,58,124,60],[159,8,125,12],[159,14,125,18,"cleanPath"],[159,23,125,27],[159,26,125,30],[159,30,125,34],[159,31,125,35,"_removeEmptyFolders"],[159,50,125,54],[159,51,125,55,"path"],[159,55,125,59],[159,56,125,60],[160,8,126,12],[160,14,126,18,"_path"],[160,19,126,23],[160,22,126,26],[160,26,126,30],[160,27,126,31,"_getFinalPath"],[160,40,126,44],[160,41,126,45,"cleanPath"],[160,50,126,54],[160,51,126,55],[161,8,127,12],[161,14,127,18,"url"],[161,17,127,21],[161,20,127,24],[161,24,127,28,"URL"],[161,27,127,31],[161,28,127,32],[161,32,127,36],[161,33,127,37,"url"],[161,36,127,40],[161,39,127,43],[161,62,127,66,"_path"],[161,67,127,71],[161,69,127,73],[161,70,127,74],[162,8,128,12,"url"],[162,11,128,15],[162,12,128,16,"searchParams"],[162,24,128,28],[162,25,128,29,"set"],[162,28,128,32],[162,29,128,33],[162,36,128,40],[162,38,128,42,"token"],[162,43,128,47],[162,44,128,48],[163,8,129,12],[163,12,129,16],[164,10,130,16],[164,14,130,20,"body"],[164,18,130,24],[165,10,131,16],[165,16,131,22,"options"],[165,23,131,29],[165,26,131,32,"Object"],[165,32,131,38],[165,33,131,39,"assign"],[165,39,131,45],[165,40,131,46],[166,12,131,48,"upsert"],[166,18,131,54],[166,20,131,56,"DEFAULT_FILE_OPTIONS"],[166,40,131,76],[166,41,131,77,"upsert"],[167,10,131,84],[167,11,131,85],[167,13,131,87,"fileOptions"],[167,24,131,98],[167,25,131,99],[168,10,132,16],[168,16,132,22,"headers"],[168,23,132,29],[168,26,132,32,"Object"],[168,32,132,38],[168,33,132,39,"assign"],[168,39,132,45],[168,40,132,46,"Object"],[168,46,132,52],[168,47,132,53,"assign"],[168,53,132,59],[168,54,132,60],[168,55,132,61],[168,56,132,62],[168,58,132,64],[168,62,132,68],[168,63,132,69,"headers"],[168,70,132,76],[168,71,132,77],[168,73,132,79],[169,12,132,81],[169,22,132,91],[169,24,132,93,"String"],[169,30,132,99],[169,31,132,100,"options"],[169,38,132,107],[169,39,132,108,"upsert"],[169,45,132,114],[170,10,132,116],[170,11,132,117],[170,12,132,118],[171,10,133,16],[171,14,133,20],[171,21,133,27,"Blob"],[171,25,133,31],[171,30,133,36],[171,41,133,47],[171,45,133,51,"fileBody"],[171,53,133,59],[171,65,133,71,"Blob"],[171,69,133,75],[171,71,133,77],[172,12,134,20,"body"],[172,16,134,24],[172,19,134,27],[172,23,134,31,"FormData"],[172,31,134,39],[172,32,134,40],[172,33,134,41],[173,12,135,20,"body"],[173,16,135,24],[173,17,135,25,"append"],[173,23,135,31],[173,24,135,32],[173,38,135,46],[173,40,135,48,"options"],[173,47,135,55],[173,48,135,56,"cacheControl"],[173,60,135,68],[173,61,135,69],[174,12,136,20,"body"],[174,16,136,24],[174,17,136,25,"append"],[174,23,136,31],[174,24,136,32],[174,26,136,34],[174,28,136,36,"fileBody"],[174,36,136,44],[174,37,136,45],[175,10,137,16],[175,11,137,17],[175,17,138,21],[175,21,138,25],[175,28,138,32,"FormData"],[175,36,138,40],[175,41,138,45],[175,52,138,56],[175,56,138,60,"fileBody"],[175,64,138,68],[175,76,138,80,"FormData"],[175,84,138,88],[175,86,138,90],[176,12,139,20,"body"],[176,16,139,24],[176,19,139,27,"fileBody"],[176,27,139,35],[177,12,140,20,"body"],[177,16,140,24],[177,17,140,25,"append"],[177,23,140,31],[177,24,140,32],[177,38,140,46],[177,40,140,48,"options"],[177,47,140,55],[177,48,140,56,"cacheControl"],[177,60,140,68],[177,61,140,69],[178,10,141,16],[178,11,141,17],[178,17,142,21],[179,12,143,20,"body"],[179,16,143,24],[179,19,143,27,"fileBody"],[179,27,143,35],[180,12,144,20,"headers"],[180,19,144,27],[180,20,144,28],[180,35,144,43],[180,36,144,44],[180,39,144,47],[180,50,144,58,"options"],[180,57,144,65],[180,58,144,66,"cacheControl"],[180,70,144,78],[180,72,144,80],[181,12,145,20,"headers"],[181,19,145,27],[181,20,145,28],[181,34,145,42],[181,35,145,43],[181,38,145,46,"options"],[181,45,145,53],[181,46,145,54,"contentType"],[181,57,145,65],[182,10,146,16],[183,10,147,16],[183,16,147,22,"data"],[183,20,147,26],[183,23,147,29],[183,29,147,35],[183,30,147,36],[183,31,147,37],[183,33,147,39,"fetch_1"],[183,40,147,46],[183,41,147,47,"put"],[183,44,147,50],[183,46,147,52],[183,50,147,56],[183,51,147,57,"fetch"],[183,56,147,62],[183,58,147,64,"url"],[183,61,147,67],[183,62,147,68,"toString"],[183,70,147,76],[183,71,147,77],[183,72,147,78],[183,74,147,80,"body"],[183,78,147,84],[183,80,147,86],[184,12,147,88,"headers"],[185,10,147,96],[185,11,147,97],[185,12,147,98],[186,10,148,16],[186,17,148,23],[187,12,149,20,"data"],[187,16,149,24],[187,18,149,26],[188,14,149,28,"path"],[188,18,149,32],[188,20,149,34,"cleanPath"],[188,29,149,43],[189,14,149,45,"fullPath"],[189,22,149,53],[189,24,149,55,"data"],[189,28,149,59],[189,29,149,60,"Key"],[190,12,149,64],[190,13,149,65],[191,12,150,20,"error"],[191,17,150,25],[191,19,150,27],[192,10,151,16],[192,11,151,17],[193,8,152,12],[193,9,152,13],[193,10,153,12],[193,17,153,19,"error"],[193,22,153,24],[193,24,153,26],[194,10,154,16],[194,14,154,20],[194,18,154,24],[194,19,154,25,"shouldThrowOnError"],[194,37,154,43],[194,39,154,45],[195,12,155,20],[195,18,155,26,"error"],[195,23,155,31],[196,10,156,16],[197,10,157,16],[197,14,157,20],[197,15,157,21],[197,16,157,22],[197,18,157,24,"errors_1"],[197,26,157,32],[197,27,157,33,"isStorageError"],[197,41,157,47],[197,43,157,49,"error"],[197,48,157,54],[197,49,157,55],[197,51,157,57],[198,12,158,20],[198,19,158,27],[199,14,158,29,"data"],[199,18,158,33],[199,20,158,35],[199,24,158,39],[200,14,158,41,"error"],[201,12,158,47],[201,13,158,48],[202,10,159,16],[203,10,160,16],[203,16,160,22,"error"],[203,21,160,27],[204,8,161,12],[205,6,162,8],[205,7,162,9],[205,8,162,10],[206,4,163,4],[207,4,164,4],[208,0,165,0],[209,0,166,0],[210,0,167,0],[211,0,168,0],[212,0,169,0],[213,0,170,0],[214,4,171,4,"createSignedUploadUrl"],[214,25,171,25,"createSignedUploadUrl"],[214,26,171,26,"path"],[214,30,171,30],[214,32,171,32,"options"],[214,39,171,39],[214,41,171,41],[215,6,172,8],[215,13,172,15,"__awaiter"],[215,22,172,24],[215,23,172,25],[215,27,172,29],[215,29,172,31],[215,34,172,36],[215,35,172,37],[215,37,172,39],[215,42,172,44],[215,43,172,45],[215,45,172,47],[215,58,172,60],[216,8,173,12],[216,12,173,16],[217,10,174,16],[217,14,174,20,"_path"],[217,19,174,25],[217,22,174,28],[217,26,174,32],[217,27,174,33,"_getFinalPath"],[217,40,174,46],[217,41,174,47,"path"],[217,45,174,51],[217,46,174,52],[218,10,175,16],[218,16,175,22,"headers"],[218,23,175,29],[218,26,175,32,"Object"],[218,32,175,38],[218,33,175,39,"assign"],[218,39,175,45],[218,40,175,46],[218,41,175,47],[218,42,175,48],[218,44,175,50],[218,48,175,54],[218,49,175,55,"headers"],[218,56,175,62],[218,57,175,63],[219,10,176,16],[219,14,176,20,"options"],[219,21,176,27],[219,26,176,32],[219,30,176,36],[219,34,176,40,"options"],[219,41,176,47],[219,46,176,52],[219,51,176,57],[219,52,176,58],[219,55,176,61],[219,60,176,66],[219,61,176,67],[219,64,176,70,"options"],[219,71,176,77],[219,72,176,78,"upsert"],[219,78,176,84],[219,80,176,86],[220,12,177,20,"headers"],[220,19,177,27],[220,20,177,28],[220,30,177,38],[220,31,177,39],[220,34,177,42],[220,40,177,48],[221,10,178,16],[222,10,179,16],[222,16,179,22,"data"],[222,20,179,26],[222,23,179,29],[222,29,179,35],[222,30,179,36],[222,31,179,37],[222,33,179,39,"fetch_1"],[222,40,179,46],[222,41,179,47,"post"],[222,45,179,51],[222,47,179,53],[222,51,179,57],[222,52,179,58,"fetch"],[222,57,179,63],[222,59,179,65],[222,62,179,68],[222,66,179,72],[222,67,179,73,"url"],[222,70,179,76],[222,93,179,99,"_path"],[222,98,179,104],[222,100,179,106],[222,102,179,108],[222,103,179,109],[222,104,179,110],[222,106,179,112],[223,12,179,114,"headers"],[224,10,179,122],[224,11,179,123],[224,12,179,124],[225,10,180,16],[225,16,180,22,"url"],[225,19,180,25],[225,22,180,28],[225,26,180,32,"URL"],[225,29,180,35],[225,30,180,36],[225,34,180,40],[225,35,180,41,"url"],[225,38,180,44],[225,41,180,47,"data"],[225,45,180,51],[225,46,180,52,"url"],[225,49,180,55],[225,50,180,56],[226,10,181,16],[226,16,181,22,"token"],[226,21,181,27],[226,24,181,30,"url"],[226,27,181,33],[226,28,181,34,"searchParams"],[226,40,181,46],[226,41,181,47,"get"],[226,44,181,50],[226,45,181,51],[226,52,181,58],[226,53,181,59],[227,10,182,16],[227,14,182,20],[227,15,182,21,"token"],[227,20,182,26],[227,22,182,28],[228,12,183,20],[228,18,183,26],[228,22,183,30,"errors_1"],[228,30,183,38],[228,31,183,39,"StorageError"],[228,43,183,51],[228,44,183,52],[228,70,183,78],[228,71,183,79],[229,10,184,16],[230,10,185,16],[230,17,185,23],[231,12,185,25,"data"],[231,16,185,29],[231,18,185,31],[232,14,185,33,"signedUrl"],[232,23,185,42],[232,25,185,44,"url"],[232,28,185,47],[232,29,185,48,"toString"],[232,37,185,56],[232,38,185,57],[232,39,185,58],[233,14,185,60,"path"],[233,18,185,64],[234,14,185,66,"token"],[235,12,185,72],[235,13,185,73],[236,12,185,75,"error"],[236,17,185,80],[236,19,185,82],[237,10,185,87],[237,11,185,88],[238,8,186,12],[238,9,186,13],[238,10,187,12],[238,17,187,19,"error"],[238,22,187,24],[238,24,187,26],[239,10,188,16],[239,14,188,20],[239,18,188,24],[239,19,188,25,"shouldThrowOnError"],[239,37,188,43],[239,39,188,45],[240,12,189,20],[240,18,189,26,"error"],[240,23,189,31],[241,10,190,16],[242,10,191,16],[242,14,191,20],[242,15,191,21],[242,16,191,22],[242,18,191,24,"errors_1"],[242,26,191,32],[242,27,191,33,"isStorageError"],[242,41,191,47],[242,43,191,49,"error"],[242,48,191,54],[242,49,191,55],[242,51,191,57],[243,12,192,20],[243,19,192,27],[244,14,192,29,"data"],[244,18,192,33],[244,20,192,35],[244,24,192,39],[245,14,192,41,"error"],[246,12,192,47],[246,13,192,48],[247,10,193,16],[248,10,194,16],[248,16,194,22,"error"],[248,21,194,27],[249,8,195,12],[250,6,196,8],[250,7,196,9],[250,8,196,10],[251,4,197,4],[252,4,198,4],[253,0,199,0],[254,0,200,0],[255,0,201,0],[256,0,202,0],[257,0,203,0],[258,4,204,4,"update"],[258,10,204,10,"update"],[258,11,204,11,"path"],[258,15,204,15],[258,17,204,17,"fileBody"],[258,25,204,25],[258,27,204,27,"fileOptions"],[258,38,204,38],[258,40,204,40],[259,6,205,8],[259,13,205,15,"__awaiter"],[259,22,205,24],[259,23,205,25],[259,27,205,29],[259,29,205,31],[259,34,205,36],[259,35,205,37],[259,37,205,39],[259,42,205,44],[259,43,205,45],[259,45,205,47],[259,58,205,60],[260,8,206,12],[260,15,206,19],[260,19,206,23],[260,20,206,24,"uploadOrUpdate"],[260,34,206,38],[260,35,206,39],[260,40,206,44],[260,42,206,46,"path"],[260,46,206,50],[260,48,206,52,"fileBody"],[260,56,206,60],[260,58,206,62,"fileOptions"],[260,69,206,73],[260,70,206,74],[261,6,207,8],[261,7,207,9],[261,8,207,10],[262,4,208,4],[263,4,209,4],[264,0,210,0],[265,0,211,0],[266,0,212,0],[267,0,213,0],[268,0,214,0],[269,0,215,0],[270,4,216,4,"move"],[270,8,216,8,"move"],[270,9,216,9,"fromPath"],[270,17,216,17],[270,19,216,19,"toPath"],[270,25,216,25],[270,27,216,27,"options"],[270,34,216,34],[270,36,216,36],[271,6,217,8],[271,13,217,15,"__awaiter"],[271,22,217,24],[271,23,217,25],[271,27,217,29],[271,29,217,31],[271,34,217,36],[271,35,217,37],[271,37,217,39],[271,42,217,44],[271,43,217,45],[271,45,217,47],[271,58,217,60],[272,8,218,12],[272,12,218,16],[273,10,219,16],[273,16,219,22,"data"],[273,20,219,26],[273,23,219,29],[273,29,219,35],[273,30,219,36],[273,31,219,37],[273,33,219,39,"fetch_1"],[273,40,219,46],[273,41,219,47,"post"],[273,45,219,51],[273,47,219,53],[273,51,219,57],[273,52,219,58,"fetch"],[273,57,219,63],[273,59,219,65],[273,62,219,68],[273,66,219,72],[273,67,219,73,"url"],[273,70,219,76],[273,84,219,90],[273,86,219,92],[274,12,220,20,"bucketId"],[274,20,220,28],[274,22,220,30],[274,26,220,34],[274,27,220,35,"bucketId"],[274,35,220,43],[275,12,221,20,"sourceKey"],[275,21,221,29],[275,23,221,31,"fromPath"],[275,31,221,39],[276,12,222,20,"destinationKey"],[276,26,222,34],[276,28,222,36,"toPath"],[276,34,222,42],[277,12,223,20,"destinationBucket"],[277,29,223,37],[277,31,223,39,"options"],[277,38,223,46],[277,43,223,51],[277,47,223,55],[277,51,223,59,"options"],[277,58,223,66],[277,63,223,71],[277,68,223,76],[277,69,223,77],[277,72,223,80],[277,77,223,85],[277,78,223,86],[277,81,223,89,"options"],[277,88,223,96],[277,89,223,97,"destinationBucket"],[278,10,224,16],[278,11,224,17],[278,13,224,19],[279,12,224,21,"headers"],[279,19,224,28],[279,21,224,30],[279,25,224,34],[279,26,224,35,"headers"],[280,10,224,43],[280,11,224,44],[280,12,224,45],[281,10,225,16],[281,17,225,23],[282,12,225,25,"data"],[282,16,225,29],[283,12,225,31,"error"],[283,17,225,36],[283,19,225,38],[284,10,225,43],[284,11,225,44],[285,8,226,12],[285,9,226,13],[285,10,227,12],[285,17,227,19,"error"],[285,22,227,24],[285,24,227,26],[286,10,228,16],[286,14,228,20],[286,18,228,24],[286,19,228,25,"shouldThrowOnError"],[286,37,228,43],[286,39,228,45],[287,12,229,20],[287,18,229,26,"error"],[287,23,229,31],[288,10,230,16],[289,10,231,16],[289,14,231,20],[289,15,231,21],[289,16,231,22],[289,18,231,24,"errors_1"],[289,26,231,32],[289,27,231,33,"isStorageError"],[289,41,231,47],[289,43,231,49,"error"],[289,48,231,54],[289,49,231,55],[289,51,231,57],[290,12,232,20],[290,19,232,27],[291,14,232,29,"data"],[291,18,232,33],[291,20,232,35],[291,24,232,39],[292,14,232,41,"error"],[293,12,232,47],[293,13,232,48],[294,10,233,16],[295,10,234,16],[295,16,234,22,"error"],[295,21,234,27],[296,8,235,12],[297,6,236,8],[297,7,236,9],[297,8,236,10],[298,4,237,4],[299,4,238,4],[300,0,239,0],[301,0,240,0],[302,0,241,0],[303,0,242,0],[304,0,243,0],[305,0,244,0],[306,4,245,4,"copy"],[306,8,245,8,"copy"],[306,9,245,9,"fromPath"],[306,17,245,17],[306,19,245,19,"toPath"],[306,25,245,25],[306,27,245,27,"options"],[306,34,245,34],[306,36,245,36],[307,6,246,8],[307,13,246,15,"__awaiter"],[307,22,246,24],[307,23,246,25],[307,27,246,29],[307,29,246,31],[307,34,246,36],[307,35,246,37],[307,37,246,39],[307,42,246,44],[307,43,246,45],[307,45,246,47],[307,58,246,60],[308,8,247,12],[308,12,247,16],[309,10,248,16],[309,16,248,22,"data"],[309,20,248,26],[309,23,248,29],[309,29,248,35],[309,30,248,36],[309,31,248,37],[309,33,248,39,"fetch_1"],[309,40,248,46],[309,41,248,47,"post"],[309,45,248,51],[309,47,248,53],[309,51,248,57],[309,52,248,58,"fetch"],[309,57,248,63],[309,59,248,65],[309,62,248,68],[309,66,248,72],[309,67,248,73,"url"],[309,70,248,76],[309,84,248,90],[309,86,248,92],[310,12,249,20,"bucketId"],[310,20,249,28],[310,22,249,30],[310,26,249,34],[310,27,249,35,"bucketId"],[310,35,249,43],[311,12,250,20,"sourceKey"],[311,21,250,29],[311,23,250,31,"fromPath"],[311,31,250,39],[312,12,251,20,"destinationKey"],[312,26,251,34],[312,28,251,36,"toPath"],[312,34,251,42],[313,12,252,20,"destinationBucket"],[313,29,252,37],[313,31,252,39,"options"],[313,38,252,46],[313,43,252,51],[313,47,252,55],[313,51,252,59,"options"],[313,58,252,66],[313,63,252,71],[313,68,252,76],[313,69,252,77],[313,72,252,80],[313,77,252,85],[313,78,252,86],[313,81,252,89,"options"],[313,88,252,96],[313,89,252,97,"destinationBucket"],[314,10,253,16],[314,11,253,17],[314,13,253,19],[315,12,253,21,"headers"],[315,19,253,28],[315,21,253,30],[315,25,253,34],[315,26,253,35,"headers"],[316,10,253,43],[316,11,253,44],[316,12,253,45],[317,10,254,16],[317,17,254,23],[318,12,254,25,"data"],[318,16,254,29],[318,18,254,31],[319,14,254,33,"path"],[319,18,254,37],[319,20,254,39,"data"],[319,24,254,43],[319,25,254,44,"Key"],[320,12,254,48],[320,13,254,49],[321,12,254,51,"error"],[321,17,254,56],[321,19,254,58],[322,10,254,63],[322,11,254,64],[323,8,255,12],[323,9,255,13],[323,10,256,12],[323,17,256,19,"error"],[323,22,256,24],[323,24,256,26],[324,10,257,16],[324,14,257,20],[324,18,257,24],[324,19,257,25,"shouldThrowOnError"],[324,37,257,43],[324,39,257,45],[325,12,258,20],[325,18,258,26,"error"],[325,23,258,31],[326,10,259,16],[327,10,260,16],[327,14,260,20],[327,15,260,21],[327,16,260,22],[327,18,260,24,"errors_1"],[327,26,260,32],[327,27,260,33,"isStorageError"],[327,41,260,47],[327,43,260,49,"error"],[327,48,260,54],[327,49,260,55],[327,51,260,57],[328,12,261,20],[328,19,261,27],[329,14,261,29,"data"],[329,18,261,33],[329,20,261,35],[329,24,261,39],[330,14,261,41,"error"],[331,12,261,47],[331,13,261,48],[332,10,262,16],[333,10,263,16],[333,16,263,22,"error"],[333,21,263,27],[334,8,264,12],[335,6,265,8],[335,7,265,9],[335,8,265,10],[336,4,266,4],[337,4,267,4],[338,0,268,0],[339,0,269,0],[340,0,270,0],[341,0,271,0],[342,0,272,0],[343,0,273,0],[344,0,274,0],[345,4,275,4,"createSignedUrl"],[345,19,275,19,"createSignedUrl"],[345,20,275,20,"path"],[345,24,275,24],[345,26,275,26,"expiresIn"],[345,35,275,35],[345,37,275,37,"options"],[345,44,275,44],[345,46,275,46],[346,6,276,8],[346,13,276,15,"__awaiter"],[346,22,276,24],[346,23,276,25],[346,27,276,29],[346,29,276,31],[346,34,276,36],[346,35,276,37],[346,37,276,39],[346,42,276,44],[346,43,276,45],[346,45,276,47],[346,58,276,60],[347,8,277,12],[347,12,277,16],[348,10,278,16],[348,14,278,20,"_path"],[348,19,278,25],[348,22,278,28],[348,26,278,32],[348,27,278,33,"_getFinalPath"],[348,40,278,46],[348,41,278,47,"path"],[348,45,278,51],[348,46,278,52],[349,10,279,16],[349,14,279,20,"data"],[349,18,279,24],[349,21,279,27],[349,27,279,33],[349,28,279,34],[349,29,279,35],[349,31,279,37,"fetch_1"],[349,38,279,44],[349,39,279,45,"post"],[349,43,279,49],[349,45,279,51],[349,49,279,55],[349,50,279,56,"fetch"],[349,55,279,61],[349,57,279,63],[349,60,279,66],[349,64,279,70],[349,65,279,71,"url"],[349,68,279,74],[349,84,279,90,"_path"],[349,89,279,95],[349,91,279,97],[349,93,279,99,"Object"],[349,99,279,105],[349,100,279,106,"assign"],[349,106,279,112],[349,107,279,113],[350,12,279,115,"expiresIn"],[351,10,279,125],[351,11,279,126],[351,13,279,129],[351,14,279,130,"options"],[351,21,279,137],[351,26,279,142],[351,30,279,146],[351,34,279,150,"options"],[351,41,279,157],[351,46,279,162],[351,51,279,167],[351,52,279,168],[351,55,279,171],[351,60,279,176],[351,61,279,177],[351,64,279,180,"options"],[351,71,279,187],[351,72,279,188,"transform"],[351,81,279,197],[351,85,279,201],[352,12,279,203,"transform"],[352,21,279,212],[352,23,279,214,"options"],[352,30,279,221],[352,31,279,222,"transform"],[353,10,279,232],[353,11,279,233],[353,14,279,236],[353,15,279,237],[353,16,279,239],[353,17,279,240],[353,19,279,242],[354,12,279,244,"headers"],[354,19,279,251],[354,21,279,253],[354,25,279,257],[354,26,279,258,"headers"],[355,10,279,266],[355,11,279,267],[355,12,279,268],[356,10,280,16],[356,16,280,22,"downloadQueryParam"],[356,34,280,40],[356,37,280,43],[356,38,280,44,"options"],[356,45,280,51],[356,50,280,56],[356,54,280,60],[356,58,280,64,"options"],[356,65,280,71],[356,70,280,76],[356,75,280,81],[356,76,280,82],[356,79,280,85],[356,84,280,90],[356,85,280,91],[356,88,280,94,"options"],[356,95,280,101],[356,96,280,102,"download"],[356,104,280,110],[356,108,281,22],[356,121,281,35,"options"],[356,128,281,42],[356,129,281,43,"download"],[356,137,281,51],[356,142,281,56],[356,146,281,60],[356,149,281,63],[356,151,281,65],[356,154,281,68,"options"],[356,161,281,75],[356,162,281,76,"download"],[356,170,281,84],[356,172,281,86],[356,175,282,22],[356,177,282,24],[357,10,283,16],[357,16,283,22,"signedUrl"],[357,25,283,31],[357,28,283,34,"encodeURI"],[357,37,283,43],[357,38,283,44],[357,41,283,47],[357,45,283,51],[357,46,283,52,"url"],[357,49,283,55],[357,52,283,58,"data"],[357,56,283,62],[357,57,283,63,"signedURL"],[357,66,283,72],[357,69,283,75,"downloadQueryParam"],[357,87,283,93],[357,89,283,95],[357,90,283,96],[358,10,284,16,"data"],[358,14,284,20],[358,17,284,23],[359,12,284,25,"signedUrl"],[360,10,284,35],[360,11,284,36],[361,10,285,16],[361,17,285,23],[362,12,285,25,"data"],[362,16,285,29],[363,12,285,31,"error"],[363,17,285,36],[363,19,285,38],[364,10,285,43],[364,11,285,44],[365,8,286,12],[365,9,286,13],[365,10,287,12],[365,17,287,19,"error"],[365,22,287,24],[365,24,287,26],[366,10,288,16],[366,14,288,20],[366,18,288,24],[366,19,288,25,"shouldThrowOnError"],[366,37,288,43],[366,39,288,45],[367,12,289,20],[367,18,289,26,"error"],[367,23,289,31],[368,10,290,16],[369,10,291,16],[369,14,291,20],[369,15,291,21],[369,16,291,22],[369,18,291,24,"errors_1"],[369,26,291,32],[369,27,291,33,"isStorageError"],[369,41,291,47],[369,43,291,49,"error"],[369,48,291,54],[369,49,291,55],[369,51,291,57],[370,12,292,20],[370,19,292,27],[371,14,292,29,"data"],[371,18,292,33],[371,20,292,35],[371,24,292,39],[372,14,292,41,"error"],[373,12,292,47],[373,13,292,48],[374,10,293,16],[375,10,294,16],[375,16,294,22,"error"],[375,21,294,27],[376,8,295,12],[377,6,296,8],[377,7,296,9],[377,8,296,10],[378,4,297,4],[379,4,298,4],[380,0,299,0],[381,0,300,0],[382,0,301,0],[383,0,302,0],[384,0,303,0],[385,0,304,0],[386,4,305,4,"createSignedUrls"],[386,20,305,20,"createSignedUrls"],[386,21,305,21,"paths"],[386,26,305,26],[386,28,305,28,"expiresIn"],[386,37,305,37],[386,39,305,39,"options"],[386,46,305,46],[386,48,305,48],[387,6,306,8],[387,13,306,15,"__awaiter"],[387,22,306,24],[387,23,306,25],[387,27,306,29],[387,29,306,31],[387,34,306,36],[387,35,306,37],[387,37,306,39],[387,42,306,44],[387,43,306,45],[387,45,306,47],[387,58,306,60],[388,8,307,12],[388,12,307,16],[389,10,308,16],[389,16,308,22,"data"],[389,20,308,26],[389,23,308,29],[389,29,308,35],[389,30,308,36],[389,31,308,37],[389,33,308,39,"fetch_1"],[389,40,308,46],[389,41,308,47,"post"],[389,45,308,51],[389,47,308,53],[389,51,308,57],[389,52,308,58,"fetch"],[389,57,308,63],[389,59,308,65],[389,62,308,68],[389,66,308,72],[389,67,308,73,"url"],[389,70,308,76],[389,86,308,92],[389,90,308,96],[389,91,308,97,"bucketId"],[389,99,308,105],[389,101,308,107],[389,103,308,109],[390,12,308,111,"expiresIn"],[390,21,308,120],[391,12,308,122,"paths"],[392,10,308,128],[392,11,308,129],[392,13,308,131],[393,12,308,133,"headers"],[393,19,308,140],[393,21,308,142],[393,25,308,146],[393,26,308,147,"headers"],[394,10,308,155],[394,11,308,156],[394,12,308,157],[395,10,309,16],[395,16,309,22,"downloadQueryParam"],[395,34,309,40],[395,37,309,43],[395,38,309,44,"options"],[395,45,309,51],[395,50,309,56],[395,54,309,60],[395,58,309,64,"options"],[395,65,309,71],[395,70,309,76],[395,75,309,81],[395,76,309,82],[395,79,309,85],[395,84,309,90],[395,85,309,91],[395,88,309,94,"options"],[395,95,309,101],[395,96,309,102,"download"],[395,104,309,110],[395,108,310,22],[395,121,310,35,"options"],[395,128,310,42],[395,129,310,43,"download"],[395,137,310,51],[395,142,310,56],[395,146,310,60],[395,149,310,63],[395,151,310,65],[395,154,310,68,"options"],[395,161,310,75],[395,162,310,76,"download"],[395,170,310,84],[395,172,310,86],[395,175,311,22],[395,177,311,24],[396,10,312,16],[396,17,312,23],[397,12,313,20,"data"],[397,16,313,24],[397,18,313,26,"data"],[397,22,313,30],[397,23,313,31,"map"],[397,26,313,34],[397,27,313,36,"datum"],[397,32,313,41],[397,36,313,47,"Object"],[397,42,313,53],[397,43,313,54,"assign"],[397,49,313,60],[397,50,313,61,"Object"],[397,56,313,67],[397,57,313,68,"assign"],[397,63,313,74],[397,64,313,75],[397,65,313,76],[397,66,313,77],[397,68,313,79,"datum"],[397,73,313,84],[397,74,313,85],[397,76,313,87],[398,14,313,89,"signedUrl"],[398,23,313,98],[398,25,313,100,"datum"],[398,30,313,105],[398,31,313,106,"signedURL"],[398,40,313,115],[398,43,314,30,"encodeURI"],[398,52,314,39],[398,53,314,40],[398,56,314,43],[398,60,314,47],[398,61,314,48,"url"],[398,64,314,51],[398,67,314,54,"datum"],[398,72,314,59],[398,73,314,60,"signedURL"],[398,82,314,69],[398,85,314,72,"downloadQueryParam"],[398,103,314,90],[398,105,314,92],[398,106,314,93],[398,109,315,30],[399,12,315,35],[399,13,315,36],[399,14,315,38],[399,15,315,39],[400,12,316,20,"error"],[400,17,316,25],[400,19,316,27],[401,10,317,16],[401,11,317,17],[402,8,318,12],[402,9,318,13],[402,10,319,12],[402,17,319,19,"error"],[402,22,319,24],[402,24,319,26],[403,10,320,16],[403,14,320,20],[403,18,320,24],[403,19,320,25,"shouldThrowOnError"],[403,37,320,43],[403,39,320,45],[404,12,321,20],[404,18,321,26,"error"],[404,23,321,31],[405,10,322,16],[406,10,323,16],[406,14,323,20],[406,15,323,21],[406,16,323,22],[406,18,323,24,"errors_1"],[406,26,323,32],[406,27,323,33,"isStorageError"],[406,41,323,47],[406,43,323,49,"error"],[406,48,323,54],[406,49,323,55],[406,51,323,57],[407,12,324,20],[407,19,324,27],[408,14,324,29,"data"],[408,18,324,33],[408,20,324,35],[408,24,324,39],[409,14,324,41,"error"],[410,12,324,47],[410,13,324,48],[411,10,325,16],[412,10,326,16],[412,16,326,22,"error"],[412,21,326,27],[413,8,327,12],[414,6,328,8],[414,7,328,9],[414,8,328,10],[415,4,329,4],[416,4,330,4],[417,0,331,0],[418,0,332,0],[419,0,333,0],[420,0,334,0],[421,0,335,0],[422,4,336,4,"download"],[422,12,336,12,"download"],[422,13,336,13,"path"],[422,17,336,17],[422,19,336,19,"options"],[422,26,336,26],[422,28,336,28],[423,6,337,8],[423,12,337,14,"wantsTransformation"],[423,31,337,33],[423,34,337,36],[423,42,337,44,"options"],[423,49,337,51],[423,54,337,56],[423,58,337,60],[423,62,337,64,"options"],[423,69,337,71],[423,74,337,76],[423,79,337,81],[423,80,337,82],[423,83,337,85],[423,88,337,90],[423,89,337,91],[423,92,337,94,"options"],[423,99,337,101],[423,100,337,102,"transform"],[423,109,337,111],[423,110,337,112],[423,115,337,117],[423,126,337,128],[424,6,338,8],[424,12,338,14,"renderPath"],[424,22,338,24],[424,25,338,27,"wantsTransformation"],[424,44,338,46],[424,47,338,49],[424,75,338,77],[424,78,338,80],[424,86,338,88],[425,6,339,8],[425,12,339,14,"transformationQuery"],[425,31,339,33],[425,34,339,36],[425,38,339,40],[425,39,339,41,"transformOptsToQueryString"],[425,65,339,67],[425,66,339,68],[425,67,339,69,"options"],[425,74,339,76],[425,79,339,81],[425,83,339,85],[425,87,339,89,"options"],[425,94,339,96],[425,99,339,101],[425,104,339,106],[425,105,339,107],[425,108,339,110],[425,113,339,115],[425,114,339,116],[425,117,339,119,"options"],[425,124,339,126],[425,125,339,127,"transform"],[425,134,339,136],[425,139,339,141],[425,140,339,142],[425,141,339,143],[425,142,339,144],[426,6,340,8],[426,12,340,14,"queryString"],[426,23,340,25],[426,26,340,28,"transformationQuery"],[426,45,340,47],[426,48,340,50],[426,52,340,54,"transformationQuery"],[426,71,340,73],[426,73,340,75],[426,76,340,78],[426,78,340,80],[427,6,341,8],[427,12,341,14,"_path"],[427,17,341,19],[427,20,341,22],[427,24,341,26],[427,25,341,27,"_getFinalPath"],[427,38,341,40],[427,39,341,41,"path"],[427,43,341,45],[427,44,341,46],[428,6,342,8],[428,12,342,14,"downloadFn"],[428,22,342,24],[428,25,342,27,"downloadFn"],[428,26,342,27],[428,31,342,33],[428,32,342,34],[428,33,342,35],[428,35,342,37,"fetch_1"],[428,42,342,44],[428,43,342,45,"get"],[428,46,342,48],[428,48,342,50],[428,52,342,54],[428,53,342,55,"fetch"],[428,58,342,60],[428,60,342,62],[428,63,342,65],[428,67,342,69],[428,68,342,70,"url"],[428,71,342,73],[428,75,342,77,"renderPath"],[428,85,342,87],[428,89,342,91,"_path"],[428,94,342,96],[428,97,342,99,"queryString"],[428,108,342,110],[428,110,342,112],[428,112,342,114],[429,8,343,12,"headers"],[429,15,343,19],[429,17,343,21],[429,21,343,25],[429,22,343,26,"headers"],[429,29,343,33],[430,8,344,12,"noResolveJson"],[430,21,344,25],[430,23,344,27],[431,6,345,8],[431,7,345,9],[431,8,345,10],[432,6,346,8],[432,13,346,15],[432,17,346,19,"BlobDownloadBuilder_1"],[432,38,346,40],[432,39,346,41,"default"],[432,46,346,48],[432,47,346,49,"downloadFn"],[432,57,346,59],[432,59,346,61],[432,63,346,65],[432,64,346,66,"shouldThrowOnError"],[432,82,346,84],[432,83,346,85],[433,4,347,4],[434,4,348,4],[435,0,349,0],[436,0,350,0],[437,0,351,0],[438,4,352,4,"info"],[438,8,352,8,"info"],[438,9,352,9,"path"],[438,13,352,13],[438,15,352,15],[439,6,353,8],[439,13,353,15,"__awaiter"],[439,22,353,24],[439,23,353,25],[439,27,353,29],[439,29,353,31],[439,34,353,36],[439,35,353,37],[439,37,353,39],[439,42,353,44],[439,43,353,45],[439,45,353,47],[439,58,353,60],[440,8,354,12],[440,14,354,18,"_path"],[440,19,354,23],[440,22,354,26],[440,26,354,30],[440,27,354,31,"_getFinalPath"],[440,40,354,44],[440,41,354,45,"path"],[440,45,354,49],[440,46,354,50],[441,8,355,12],[441,12,355,16],[442,10,356,16],[442,16,356,22,"data"],[442,20,356,26],[442,23,356,29],[442,29,356,35],[442,30,356,36],[442,31,356,37],[442,33,356,39,"fetch_1"],[442,40,356,46],[442,41,356,47,"get"],[442,44,356,50],[442,46,356,52],[442,50,356,56],[442,51,356,57,"fetch"],[442,56,356,62],[442,58,356,64],[442,61,356,67],[442,65,356,71],[442,66,356,72,"url"],[442,69,356,75],[442,85,356,91,"_path"],[442,90,356,96],[442,92,356,98],[442,94,356,100],[443,12,357,20,"headers"],[443,19,357,27],[443,21,357,29],[443,25,357,33],[443,26,357,34,"headers"],[444,10,358,16],[444,11,358,17],[444,12,358,18],[445,10,359,16],[445,17,359,23],[446,12,359,25,"data"],[446,16,359,29],[446,18,359,31],[446,19,359,32],[446,20,359,33],[446,22,359,35,"helpers_1"],[446,31,359,44],[446,32,359,45,"recursiveToCamel"],[446,48,359,61],[446,50,359,63,"data"],[446,54,359,67],[446,55,359,68],[447,12,359,70,"error"],[447,17,359,75],[447,19,359,77],[448,10,359,82],[448,11,359,83],[449,8,360,12],[449,9,360,13],[449,10,361,12],[449,17,361,19,"error"],[449,22,361,24],[449,24,361,26],[450,10,362,16],[450,14,362,20],[450,18,362,24],[450,19,362,25,"shouldThrowOnError"],[450,37,362,43],[450,39,362,45],[451,12,363,20],[451,18,363,26,"error"],[451,23,363,31],[452,10,364,16],[453,10,365,16],[453,14,365,20],[453,15,365,21],[453,16,365,22],[453,18,365,24,"errors_1"],[453,26,365,32],[453,27,365,33,"isStorageError"],[453,41,365,47],[453,43,365,49,"error"],[453,48,365,54],[453,49,365,55],[453,51,365,57],[454,12,366,20],[454,19,366,27],[455,14,366,29,"data"],[455,18,366,33],[455,20,366,35],[455,24,366,39],[456,14,366,41,"error"],[457,12,366,47],[457,13,366,48],[458,10,367,16],[459,10,368,16],[459,16,368,22,"error"],[459,21,368,27],[460,8,369,12],[461,6,370,8],[461,7,370,9],[461,8,370,10],[462,4,371,4],[463,4,372,4],[464,0,373,0],[465,0,374,0],[466,0,375,0],[467,4,376,4,"exists"],[467,10,376,10,"exists"],[467,11,376,11,"path"],[467,15,376,15],[467,17,376,17],[468,6,377,8],[468,13,377,15,"__awaiter"],[468,22,377,24],[468,23,377,25],[468,27,377,29],[468,29,377,31],[468,34,377,36],[468,35,377,37],[468,37,377,39],[468,42,377,44],[468,43,377,45],[468,45,377,47],[468,58,377,60],[469,8,378,12],[469,14,378,18,"_path"],[469,19,378,23],[469,22,378,26],[469,26,378,30],[469,27,378,31,"_getFinalPath"],[469,40,378,44],[469,41,378,45,"path"],[469,45,378,49],[469,46,378,50],[470,8,379,12],[470,12,379,16],[471,10,380,16],[471,16,380,22],[471,17,380,23],[471,18,380,24],[471,20,380,26,"fetch_1"],[471,27,380,33],[471,28,380,34,"head"],[471,32,380,38],[471,34,380,40],[471,38,380,44],[471,39,380,45,"fetch"],[471,44,380,50],[471,46,380,52],[471,49,380,55],[471,53,380,59],[471,54,380,60,"url"],[471,57,380,63],[471,68,380,74,"_path"],[471,73,380,79],[471,75,380,81],[471,77,380,83],[472,12,381,20,"headers"],[472,19,381,27],[472,21,381,29],[472,25,381,33],[472,26,381,34,"headers"],[473,10,382,16],[473,11,382,17],[473,12,382,18],[474,10,383,16],[474,17,383,23],[475,12,383,25,"data"],[475,16,383,29],[475,18,383,31],[475,22,383,35],[476,12,383,37,"error"],[476,17,383,42],[476,19,383,44],[477,10,383,49],[477,11,383,50],[478,8,384,12],[478,9,384,13],[478,10,385,12],[478,17,385,19,"error"],[478,22,385,24],[478,24,385,26],[479,10,386,16],[479,14,386,20],[479,18,386,24],[479,19,386,25,"shouldThrowOnError"],[479,37,386,43],[479,39,386,45],[480,12,387,20],[480,18,387,26,"error"],[480,23,387,31],[481,10,388,16],[482,10,389,16],[482,14,389,20],[482,15,389,21],[482,16,389,22],[482,18,389,24,"errors_1"],[482,26,389,32],[482,27,389,33,"isStorageError"],[482,41,389,47],[482,43,389,49,"error"],[482,48,389,54],[482,49,389,55],[482,53,389,59,"error"],[482,58,389,64],[482,70,389,76,"errors_1"],[482,78,389,84],[482,79,389,85,"StorageUnknownError"],[482,98,389,104],[482,100,389,106],[483,12,390,20],[483,18,390,26,"originalError"],[483,31,390,39],[483,34,390,42,"error"],[483,39,390,47],[483,40,390,48,"originalError"],[483,53,390,61],[484,12,391,20],[484,16,391,24],[484,17,391,25],[484,20,391,28],[484,22,391,30],[484,25,391,33],[484,26,391,34],[484,27,391,35,"includes"],[484,35,391,43],[484,36,391,44,"originalError"],[484,49,391,57],[484,54,391,62],[484,58,391,66],[484,62,391,70,"originalError"],[484,75,391,83],[484,80,391,88],[484,85,391,93],[484,86,391,94],[484,89,391,97],[484,94,391,102],[484,95,391,103],[484,98,391,106,"originalError"],[484,111,391,119],[484,112,391,120,"status"],[484,118,391,126],[484,119,391,127],[484,121,391,129],[485,14,392,24],[485,21,392,31],[486,16,392,33,"data"],[486,20,392,37],[486,22,392,39],[486,27,392,44],[487,16,392,46,"error"],[488,14,392,52],[488,15,392,53],[489,12,393,20],[490,10,394,16],[491,10,395,16],[491,16,395,22,"error"],[491,21,395,27],[492,8,396,12],[493,6,397,8],[493,7,397,9],[493,8,397,10],[494,4,398,4],[495,4,399,4],[496,0,400,0],[497,0,401,0],[498,0,402,0],[499,0,403,0],[500,0,404,0],[501,0,405,0],[502,0,406,0],[503,4,407,4,"getPublicUrl"],[503,16,407,16,"getPublicUrl"],[503,17,407,17,"path"],[503,21,407,21],[503,23,407,23,"options"],[503,30,407,30],[503,32,407,32],[504,6,408,8],[504,12,408,14,"_path"],[504,17,408,19],[504,20,408,22],[504,24,408,26],[504,25,408,27,"_getFinalPath"],[504,38,408,40],[504,39,408,41,"path"],[504,43,408,45],[504,44,408,46],[505,6,409,8],[505,12,409,14,"_queryString"],[505,24,409,26],[505,27,409,29],[505,29,409,31],[506,6,410,8],[506,12,410,14,"downloadQueryParam"],[506,30,410,32],[506,33,410,35],[506,34,410,36,"options"],[506,41,410,43],[506,46,410,48],[506,50,410,52],[506,54,410,56,"options"],[506,61,410,63],[506,66,410,68],[506,71,410,73],[506,72,410,74],[506,75,410,77],[506,80,410,82],[506,81,410,83],[506,84,410,86,"options"],[506,91,410,93],[506,92,410,94,"download"],[506,100,410,102],[506,104,411,14],[506,116,411,26,"options"],[506,123,411,33],[506,124,411,34,"download"],[506,132,411,42],[506,137,411,47],[506,141,411,51],[506,144,411,54],[506,146,411,56],[506,149,411,59,"options"],[506,156,411,66],[506,157,411,67,"download"],[506,165,411,75],[506,167,411,77],[506,170,412,14],[506,172,412,16],[507,6,413,8],[507,10,413,12,"downloadQueryParam"],[507,28,413,30],[507,33,413,35],[507,35,413,37],[507,37,413,39],[508,8,414,12,"_queryString"],[508,20,414,24],[508,21,414,25,"push"],[508,25,414,29],[508,26,414,30,"downloadQueryParam"],[508,44,414,48],[508,45,414,49],[509,6,415,8],[510,6,416,8],[510,12,416,14,"wantsTransformation"],[510,31,416,33],[510,34,416,36],[510,42,416,44,"options"],[510,49,416,51],[510,54,416,56],[510,58,416,60],[510,62,416,64,"options"],[510,69,416,71],[510,74,416,76],[510,79,416,81],[510,80,416,82],[510,83,416,85],[510,88,416,90],[510,89,416,91],[510,92,416,94,"options"],[510,99,416,101],[510,100,416,102,"transform"],[510,109,416,111],[510,110,416,112],[510,115,416,117],[510,126,416,128],[511,6,417,8],[511,12,417,14,"renderPath"],[511,22,417,24],[511,25,417,27,"wantsTransformation"],[511,44,417,46],[511,47,417,49],[511,61,417,63],[511,64,417,66],[511,72,417,74],[512,6,418,8],[512,12,418,14,"transformationQuery"],[512,31,418,33],[512,34,418,36],[512,38,418,40],[512,39,418,41,"transformOptsToQueryString"],[512,65,418,67],[512,66,418,68],[512,67,418,69,"options"],[512,74,418,76],[512,79,418,81],[512,83,418,85],[512,87,418,89,"options"],[512,94,418,96],[512,99,418,101],[512,104,418,106],[512,105,418,107],[512,108,418,110],[512,113,418,115],[512,114,418,116],[512,117,418,119,"options"],[512,124,418,126],[512,125,418,127,"transform"],[512,134,418,136],[512,139,418,141],[512,140,418,142],[512,141,418,143],[512,142,418,144],[513,6,419,8],[513,10,419,12,"transformationQuery"],[513,29,419,31],[513,34,419,36],[513,36,419,38],[513,38,419,40],[514,8,420,12,"_queryString"],[514,20,420,24],[514,21,420,25,"push"],[514,25,420,29],[514,26,420,30,"transformationQuery"],[514,45,420,49],[514,46,420,50],[515,6,421,8],[516,6,422,8],[516,10,422,12,"queryString"],[516,21,422,23],[516,24,422,26,"_queryString"],[516,36,422,38],[516,37,422,39,"join"],[516,41,422,43],[516,42,422,44],[516,45,422,47],[516,46,422,48],[517,6,423,8],[517,10,423,12,"queryString"],[517,21,423,23],[517,26,423,28],[517,28,423,30],[517,30,423,32],[518,8,424,12,"queryString"],[518,19,424,23],[518,22,424,26],[518,26,424,30,"queryString"],[518,37,424,41],[518,39,424,43],[519,6,425,8],[520,6,426,8],[520,13,426,15],[521,8,427,12,"data"],[521,12,427,16],[521,14,427,18],[522,10,427,20,"publicUrl"],[522,19,427,29],[522,21,427,31,"encodeURI"],[522,30,427,40],[522,31,427,41],[522,34,427,44],[522,38,427,48],[522,39,427,49,"url"],[522,42,427,52],[522,46,427,56,"renderPath"],[522,56,427,66],[522,67,427,77,"_path"],[522,72,427,82],[522,75,427,85,"queryString"],[522,86,427,96],[522,88,427,98],[523,8,427,100],[524,6,428,8],[524,7,428,9],[525,4,429,4],[526,4,430,4],[527,0,431,0],[528,0,432,0],[529,0,433,0],[530,0,434,0],[531,4,435,4,"remove"],[531,10,435,10,"remove"],[531,11,435,11,"paths"],[531,16,435,16],[531,18,435,18],[532,6,436,8],[532,13,436,15,"__awaiter"],[532,22,436,24],[532,23,436,25],[532,27,436,29],[532,29,436,31],[532,34,436,36],[532,35,436,37],[532,37,436,39],[532,42,436,44],[532,43,436,45],[532,45,436,47],[532,58,436,60],[533,8,437,12],[533,12,437,16],[534,10,438,16],[534,16,438,22,"data"],[534,20,438,26],[534,23,438,29],[534,29,438,35],[534,30,438,36],[534,31,438,37],[534,33,438,39,"fetch_1"],[534,40,438,46],[534,41,438,47,"remove"],[534,47,438,53],[534,49,438,55],[534,53,438,59],[534,54,438,60,"fetch"],[534,59,438,65],[534,61,438,67],[534,64,438,70],[534,68,438,74],[534,69,438,75,"url"],[534,72,438,78],[534,83,438,89],[534,87,438,93],[534,88,438,94,"bucketId"],[534,96,438,102],[534,98,438,104],[534,100,438,106],[535,12,438,108,"prefixes"],[535,20,438,116],[535,22,438,118,"paths"],[536,10,438,124],[536,11,438,125],[536,13,438,127],[537,12,438,129,"headers"],[537,19,438,136],[537,21,438,138],[537,25,438,142],[537,26,438,143,"headers"],[538,10,438,151],[538,11,438,152],[538,12,438,153],[539,10,439,16],[539,17,439,23],[540,12,439,25,"data"],[540,16,439,29],[541,12,439,31,"error"],[541,17,439,36],[541,19,439,38],[542,10,439,43],[542,11,439,44],[543,8,440,12],[543,9,440,13],[543,10,441,12],[543,17,441,19,"error"],[543,22,441,24],[543,24,441,26],[544,10,442,16],[544,14,442,20],[544,18,442,24],[544,19,442,25,"shouldThrowOnError"],[544,37,442,43],[544,39,442,45],[545,12,443,20],[545,18,443,26,"error"],[545,23,443,31],[546,10,444,16],[547,10,445,16],[547,14,445,20],[547,15,445,21],[547,16,445,22],[547,18,445,24,"errors_1"],[547,26,445,32],[547,27,445,33,"isStorageError"],[547,41,445,47],[547,43,445,49,"error"],[547,48,445,54],[547,49,445,55],[547,51,445,57],[548,12,446,20],[548,19,446,27],[549,14,446,29,"data"],[549,18,446,33],[549,20,446,35],[549,24,446,39],[550,14,446,41,"error"],[551,12,446,47],[551,13,446,48],[552,10,447,16],[553,10,448,16],[553,16,448,22,"error"],[553,21,448,27],[554,8,449,12],[555,6,450,8],[555,7,450,9],[555,8,450,10],[556,4,451,4],[557,4,452,4],[558,0,453,0],[559,0,454,0],[560,0,455,0],[561,4,456,4],[562,4,457,4],[563,4,458,4],[564,4,459,4],[565,4,460,4],[566,4,461,4],[567,4,462,4],[568,4,463,4],[569,4,464,4],[570,4,465,4],[571,4,466,4],[572,4,467,4],[573,4,468,4],[574,4,469,4],[575,4,470,4],[576,4,471,4],[577,4,472,4],[578,4,473,4],[579,4,474,4],[580,4,475,4],[581,4,476,4],[582,4,477,4],[583,4,478,4],[584,0,479,0],[585,0,480,0],[586,0,481,0],[587,0,482,0],[588,4,483,4],[589,4,484,4],[590,4,485,4],[591,4,486,4],[592,4,487,4],[593,4,488,4],[594,4,489,4],[595,4,490,4],[596,4,491,4],[597,4,492,4],[598,4,493,4],[599,4,494,4],[600,4,495,4],[601,4,496,4],[602,4,497,4],[603,4,498,4],[604,4,499,4],[605,4,500,4],[606,4,501,4],[607,4,502,4],[608,4,503,4],[609,4,504,4],[610,4,505,4],[611,4,506,4],[612,4,507,4],[613,4,508,4],[614,4,509,4],[615,4,510,4],[616,4,511,4],[617,0,512,0],[618,0,513,0],[619,0,514,0],[620,0,515,0],[621,4,516,4,"list"],[621,8,516,8,"list"],[621,9,516,9,"path"],[621,13,516,13],[621,15,516,15,"options"],[621,22,516,22],[621,24,516,24,"parameters"],[621,34,516,34],[621,36,516,36],[622,6,517,8],[622,13,517,15,"__awaiter"],[622,22,517,24],[622,23,517,25],[622,27,517,29],[622,29,517,31],[622,34,517,36],[622,35,517,37],[622,37,517,39],[622,42,517,44],[622,43,517,45],[622,45,517,47],[622,58,517,60],[623,8,518,12],[623,12,518,16],[624,10,519,16],[624,16,519,22,"body"],[624,20,519,26],[624,23,519,29,"Object"],[624,29,519,35],[624,30,519,36,"assign"],[624,36,519,42],[624,37,519,43,"Object"],[624,43,519,49],[624,44,519,50,"assign"],[624,50,519,56],[624,51,519,57,"Object"],[624,57,519,63],[624,58,519,64,"assign"],[624,64,519,70],[624,65,519,71],[624,66,519,72],[624,67,519,73],[624,69,519,75,"DEFAULT_SEARCH_OPTIONS"],[624,91,519,97],[624,92,519,98],[624,94,519,100,"options"],[624,101,519,107],[624,102,519,108],[624,104,519,110],[625,12,519,112,"prefix"],[625,18,519,118],[625,20,519,120,"path"],[625,24,519,124],[625,28,519,128],[626,10,519,131],[626,11,519,132],[626,12,519,133],[627,10,520,16],[627,16,520,22,"data"],[627,20,520,26],[627,23,520,29],[627,29,520,35],[627,30,520,36],[627,31,520,37],[627,33,520,39,"fetch_1"],[627,40,520,46],[627,41,520,47,"post"],[627,45,520,51],[627,47,520,53],[627,51,520,57],[627,52,520,58,"fetch"],[627,57,520,63],[627,59,520,65],[627,62,520,68],[627,66,520,72],[627,67,520,73,"url"],[627,70,520,76],[627,86,520,92],[627,90,520,96],[627,91,520,97,"bucketId"],[627,99,520,105],[627,101,520,107],[627,103,520,109,"body"],[627,107,520,113],[627,109,520,115],[628,12,520,117,"headers"],[628,19,520,124],[628,21,520,126],[628,25,520,130],[628,26,520,131,"headers"],[629,10,520,139],[629,11,520,140],[629,13,520,142,"parameters"],[629,23,520,152],[629,24,520,153],[630,10,521,16],[630,17,521,23],[631,12,521,25,"data"],[631,16,521,29],[632,12,521,31,"error"],[632,17,521,36],[632,19,521,38],[633,10,521,43],[633,11,521,44],[634,8,522,12],[634,9,522,13],[634,10,523,12],[634,17,523,19,"error"],[634,22,523,24],[634,24,523,26],[635,10,524,16],[635,14,524,20],[635,18,524,24],[635,19,524,25,"shouldThrowOnError"],[635,37,524,43],[635,39,524,45],[636,12,525,20],[636,18,525,26,"error"],[636,23,525,31],[637,10,526,16],[638,10,527,16],[638,14,527,20],[638,15,527,21],[638,16,527,22],[638,18,527,24,"errors_1"],[638,26,527,32],[638,27,527,33,"isStorageError"],[638,41,527,47],[638,43,527,49,"error"],[638,48,527,54],[638,49,527,55],[638,51,527,57],[639,12,528,20],[639,19,528,27],[640,14,528,29,"data"],[640,18,528,33],[640,20,528,35],[640,24,528,39],[641,14,528,41,"error"],[642,12,528,47],[642,13,528,48],[643,10,529,16],[644,10,530,16],[644,16,530,22,"error"],[644,21,530,27],[645,8,531,12],[646,6,532,8],[646,7,532,9],[646,8,532,10],[647,4,533,4],[648,4,534,4],[649,0,535,0],[650,0,536,0],[651,0,537,0],[652,0,538,0],[653,4,539,4,"listV2"],[653,10,539,10,"listV2"],[653,11,539,11,"options"],[653,18,539,18],[653,20,539,20,"parameters"],[653,30,539,30],[653,32,539,32],[654,6,540,8],[654,13,540,15,"__awaiter"],[654,22,540,24],[654,23,540,25],[654,27,540,29],[654,29,540,31],[654,34,540,36],[654,35,540,37],[654,37,540,39],[654,42,540,44],[654,43,540,45],[654,45,540,47],[654,58,540,60],[655,8,541,12],[655,12,541,16],[656,10,542,16],[656,16,542,22,"body"],[656,20,542,26],[656,23,542,29,"Object"],[656,29,542,35],[656,30,542,36,"assign"],[656,36,542,42],[656,37,542,43],[656,38,542,44],[656,39,542,45],[656,41,542,47,"options"],[656,48,542,54],[656,49,542,55],[657,10,543,16],[657,16,543,22,"data"],[657,20,543,26],[657,23,543,29],[657,29,543,35],[657,30,543,36],[657,31,543,37],[657,33,543,39,"fetch_1"],[657,40,543,46],[657,41,543,47,"post"],[657,45,543,51],[657,47,543,53],[657,51,543,57],[657,52,543,58,"fetch"],[657,57,543,63],[657,59,543,65],[657,62,543,68],[657,66,543,72],[657,67,543,73,"url"],[657,70,543,76],[657,89,543,95],[657,93,543,99],[657,94,543,100,"bucketId"],[657,102,543,108],[657,104,543,110],[657,106,543,112,"body"],[657,110,543,116],[657,112,543,118],[658,12,543,120,"headers"],[658,19,543,127],[658,21,543,129],[658,25,543,133],[658,26,543,134,"headers"],[659,10,543,142],[659,11,543,143],[659,13,543,145,"parameters"],[659,23,543,155],[659,24,543,156],[660,10,544,16],[660,17,544,23],[661,12,544,25,"data"],[661,16,544,29],[662,12,544,31,"error"],[662,17,544,36],[662,19,544,38],[663,10,544,43],[663,11,544,44],[664,8,545,12],[664,9,545,13],[664,10,546,12],[664,17,546,19,"error"],[664,22,546,24],[664,24,546,26],[665,10,547,16],[665,14,547,20],[665,18,547,24],[665,19,547,25,"shouldThrowOnError"],[665,37,547,43],[665,39,547,45],[666,12,548,20],[666,18,548,26,"error"],[666,23,548,31],[667,10,549,16],[668,10,550,16],[668,14,550,20],[668,15,550,21],[668,16,550,22],[668,18,550,24,"errors_1"],[668,26,550,32],[668,27,550,33,"isStorageError"],[668,41,550,47],[668,43,550,49,"error"],[668,48,550,54],[668,49,550,55],[668,51,550,57],[669,12,551,20],[669,19,551,27],[670,14,551,29,"data"],[670,18,551,33],[670,20,551,35],[670,24,551,39],[671,14,551,41,"error"],[672,12,551,47],[672,13,551,48],[673,10,552,16],[674,10,553,16],[674,16,553,22,"error"],[674,21,553,27],[675,8,554,12],[676,6,555,8],[676,7,555,9],[676,8,555,10],[677,4,556,4],[678,4,557,4,"encodeMetadata"],[678,18,557,18,"encodeMetadata"],[678,19,557,19,"metadata"],[678,27,557,27],[678,29,557,29],[679,6,558,8],[679,13,558,15,"JSON"],[679,17,558,19],[679,18,558,20,"stringify"],[679,27,558,29],[679,28,558,30,"metadata"],[679,36,558,38],[679,37,558,39],[680,4,559,4],[681,4,560,4,"toBase64"],[681,12,560,12,"toBase64"],[681,13,560,13,"data"],[681,17,560,17],[681,19,560,19],[682,6,561,8],[682,10,561,12],[682,17,561,19,"Buffer"],[682,23,561,25],[682,28,561,30],[682,39,561,41],[682,41,561,43],[683,8,562,12],[683,15,562,19,"Buffer"],[683,21,562,25],[683,22,562,26,"from"],[683,26,562,30],[683,27,562,31,"data"],[683,31,562,35],[683,32,562,36],[683,33,562,37,"toString"],[683,41,562,45],[683,42,562,46],[683,50,562,54],[683,51,562,55],[684,6,563,8],[685,6,564,8],[685,13,564,15,"btoa"],[685,17,564,19],[685,18,564,20,"data"],[685,22,564,24],[685,23,564,25],[686,4,565,4],[687,4,566,4,"_getFinalPath"],[687,17,566,17,"_getFinalPath"],[687,18,566,18,"path"],[687,22,566,22],[687,24,566,24],[688,6,567,8],[688,13,567,15],[688,16,567,18],[688,20,567,22],[688,21,567,23,"bucketId"],[688,29,567,31],[688,33,567,35,"path"],[688,37,567,39],[688,38,567,40,"replace"],[688,45,567,47],[688,46,567,48],[688,52,567,54],[688,54,567,56],[688,56,567,58],[688,57,567,59],[688,59,567,61],[689,4,568,4],[690,4,569,4,"_removeEmptyFolders"],[690,23,569,23,"_removeEmptyFolders"],[690,24,569,24,"path"],[690,28,569,28],[690,30,569,30],[691,6,570,8],[691,13,570,15,"path"],[691,17,570,19],[691,18,570,20,"replace"],[691,25,570,27],[691,26,570,28],[691,36,570,38],[691,38,570,40],[691,40,570,42],[691,41,570,43],[691,42,570,44,"replace"],[691,49,570,51],[691,50,570,52],[691,56,570,58],[691,58,570,60],[691,61,570,63],[691,62,570,64],[692,4,571,4],[693,4,572,4,"transformOptsToQueryString"],[693,30,572,30,"transformOptsToQueryString"],[693,31,572,31,"transform"],[693,40,572,40],[693,42,572,42],[694,6,573,8],[694,12,573,14,"params"],[694,18,573,20],[694,21,573,23],[694,23,573,25],[695,6,574,8],[695,10,574,12,"transform"],[695,19,574,21],[695,20,574,22,"width"],[695,25,574,27],[695,27,574,29],[696,8,575,12,"params"],[696,14,575,18],[696,15,575,19,"push"],[696,19,575,23],[696,20,575,24],[696,29,575,33,"transform"],[696,38,575,42],[696,39,575,43,"width"],[696,44,575,48],[696,46,575,50],[696,47,575,51],[697,6,576,8],[698,6,577,8],[698,10,577,12,"transform"],[698,19,577,21],[698,20,577,22,"height"],[698,26,577,28],[698,28,577,30],[699,8,578,12,"params"],[699,14,578,18],[699,15,578,19,"push"],[699,19,578,23],[699,20,578,24],[699,30,578,34,"transform"],[699,39,578,43],[699,40,578,44,"height"],[699,46,578,50],[699,48,578,52],[699,49,578,53],[700,6,579,8],[701,6,580,8],[701,10,580,12,"transform"],[701,19,580,21],[701,20,580,22,"resize"],[701,26,580,28],[701,28,580,30],[702,8,581,12,"params"],[702,14,581,18],[702,15,581,19,"push"],[702,19,581,23],[702,20,581,24],[702,30,581,34,"transform"],[702,39,581,43],[702,40,581,44,"resize"],[702,46,581,50],[702,48,581,52],[702,49,581,53],[703,6,582,8],[704,6,583,8],[704,10,583,12,"transform"],[704,19,583,21],[704,20,583,22,"format"],[704,26,583,28],[704,28,583,30],[705,8,584,12,"params"],[705,14,584,18],[705,15,584,19,"push"],[705,19,584,23],[705,20,584,24],[705,30,584,34,"transform"],[705,39,584,43],[705,40,584,44,"format"],[705,46,584,50],[705,48,584,52],[705,49,584,53],[706,6,585,8],[707,6,586,8],[707,10,586,12,"transform"],[707,19,586,21],[707,20,586,22,"quality"],[707,27,586,29],[707,29,586,31],[708,8,587,12,"params"],[708,14,587,18],[708,15,587,19,"push"],[708,19,587,23],[708,20,587,24],[708,31,587,35,"transform"],[708,40,587,44],[708,41,587,45,"quality"],[708,48,587,52],[708,50,587,54],[708,51,587,55],[709,6,588,8],[710,6,589,8],[710,13,589,15,"params"],[710,19,589,21],[710,20,589,22,"join"],[710,24,589,26],[710,25,589,27],[710,28,589,30],[710,29,589,31],[711,4,590,4],[712,2,591,0],[713,2,592,0,"exports"],[713,9,592,7],[713,10,592,8,"default"],[713,17,592,15],[713,20,592,18,"StorageFileApi"],[713,34,592,32],[714,0,592,33],[714,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","StorageFileApi","constructor","throwOnError","uploadOrUpdate","__awaiter$argument_3","upload","uploadToSignedUrl","createSignedUploadUrl","update","move","copy","createSignedUrl","createSignedUrls","data.map$argument_0","download","downloadFn","info","exists","getPublicUrl","remove","list","listV2","encodeMetadata","toBase64","_getFinalPath","_removeEmptyFolders","transformOptsToQueryString"],"mappings":"AAA;4CCC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;wDCC;CDE;AOmB;ICC;KDM;IEI;KFG;IGQ;+CCC;SDiD;KHC;IKO;+CDC;SCE;KLC;IMO;+CFC;SEsC;KNC;IOQ;+CHC;SGwB;KPC;IQO;+CJC;SIE;KRC;ISQ;+CLC;SKmB;KTC;IUQ;+CNC;SMmB;KVC;IWS;+CPC;SOoB;KXC;IYQ;+CRC;mCSO;sCTE;SQa;KZC;IcO;2BCM;UDG;KdE;IgBK;+CZC;SYiB;KhBC;IiBK;+CbC;SaoB;KjBC;IkBS;KlBsB;ImBM;+CfC;Sec;KnBC;IoBiE;+ChBC;SgBe;KpBC;IqBM;+CjBC;SiBe;KrBC;IsBC;KtBE;IuBC;KvBK;IwBC;KxBE;IyBC;KzBE;I0BC;K1BkB;CPC"},"hasCjsExports":true},"type":"js/module"}]}