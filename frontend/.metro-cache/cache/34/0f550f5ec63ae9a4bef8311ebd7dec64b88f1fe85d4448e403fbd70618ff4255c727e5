{"dependencies":[{"name":"./urlencoded","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":19,"index":33},"end":{"line":2,"column":42,"index":56}}],"key":"HHcIjie7T4J/YJWTxFIkaMOpYzU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  const urlencoded = require(_dependencyMap[0], \"./urlencoded\");\n  function stableSortBy(arr, compare) {\n    return arr.map((item, index) => ({\n      item,\n      index\n    })).sort((a, b) => compare(a.item, b.item) || a.index - b.index).map(({\n      item\n    }) => item);\n  }\n  exports.implementation = class URLSearchParamsImpl {\n    constructor(globalObject, constructorArgs, {\n      doNotStripQMark = false\n    }) {\n      let init = constructorArgs[0];\n      this._list = [];\n      this._url = null;\n      if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n        init = init.slice(1);\n      }\n      if (Array.isArray(init)) {\n        for (const pair of init) {\n          if (pair.length !== 2) {\n            throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" + \"contain exactly two elements.\");\n          }\n          this._list.push([pair[0], pair[1]]);\n        }\n      } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n        for (const name of Object.keys(init)) {\n          const value = init[name];\n          this._list.push([name, value]);\n        }\n      } else {\n        this._list = urlencoded.parseUrlencoded(init);\n      }\n    }\n    _updateSteps() {\n      if (this._url !== null) {\n        let query = urlencoded.serializeUrlencoded(this._list);\n        if (query === \"\") {\n          query = null;\n        }\n        this._url._url.query = query;\n      }\n    }\n    append(name, value) {\n      this._list.push([name, value]);\n      this._updateSteps();\n    }\n    delete(name) {\n      let i = 0;\n      while (i < this._list.length) {\n        if (this._list[i][0] === name) {\n          this._list.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n      this._updateSteps();\n    }\n    get(name) {\n      for (const tuple of this._list) {\n        if (tuple[0] === name) {\n          return tuple[1];\n        }\n      }\n      return null;\n    }\n    getAll(name) {\n      const output = [];\n      for (const tuple of this._list) {\n        if (tuple[0] === name) {\n          output.push(tuple[1]);\n        }\n      }\n      return output;\n    }\n    has(name) {\n      for (const tuple of this._list) {\n        if (tuple[0] === name) {\n          return true;\n        }\n      }\n      return false;\n    }\n    set(name, value) {\n      let found = false;\n      let i = 0;\n      while (i < this._list.length) {\n        if (this._list[i][0] === name) {\n          if (found) {\n            this._list.splice(i, 1);\n          } else {\n            found = true;\n            this._list[i][1] = value;\n            i++;\n          }\n        } else {\n          i++;\n        }\n      }\n      if (!found) {\n        this._list.push([name, value]);\n      }\n      this._updateSteps();\n    }\n    sort() {\n      this._list = stableSortBy(this._list, (a, b) => a[0] > b[0]);\n      this._updateSteps();\n    }\n    [Symbol.iterator]() {\n      return this._list[Symbol.iterator]();\n    }\n    toString() {\n      return urlencoded.serializeUrlencoded(this._list);\n    }\n  };\n});","lineCount":120,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,8,2,6,"urlencoded"],[4,18,2,16],[4,21,2,19,"require"],[4,28,2,26],[4,29,2,26,"_dependencyMap"],[4,43,2,26],[4,62,2,41],[4,63,2,42],[5,2,4,0],[5,11,4,9,"stableSortBy"],[5,23,4,21,"stableSortBy"],[5,24,4,22,"arr"],[5,27,4,25],[5,29,4,27,"compare"],[5,36,4,34],[5,38,4,36],[6,4,5,2],[6,11,5,9,"arr"],[6,14,5,12],[6,15,6,5,"map"],[6,18,6,8],[6,19,6,9],[6,20,6,10,"item"],[6,24,6,14],[6,26,6,16,"index"],[6,31,6,21],[6,37,6,27],[7,6,6,29,"item"],[7,10,6,33],[8,6,6,35,"index"],[9,4,6,41],[9,5,6,42],[9,6,6,43],[9,7,6,44],[9,8,7,5,"sort"],[9,12,7,9],[9,13,7,10],[9,14,7,11,"a"],[9,15,7,12],[9,17,7,14,"b"],[9,18,7,15],[9,23,7,20,"compare"],[9,30,7,27],[9,31,7,28,"a"],[9,32,7,29],[9,33,7,30,"item"],[9,37,7,34],[9,39,7,36,"b"],[9,40,7,37],[9,41,7,38,"item"],[9,45,7,42],[9,46,7,43],[9,50,7,47,"a"],[9,51,7,48],[9,52,7,49,"index"],[9,57,7,54],[9,60,7,57,"b"],[9,61,7,58],[9,62,7,59,"index"],[9,67,7,64],[9,68,7,65],[9,69,8,5,"map"],[9,72,8,8],[9,73,8,9],[9,74,8,10],[10,6,8,12,"item"],[11,4,8,17],[11,5,8,18],[11,10,8,23,"item"],[11,14,8,27],[11,15,8,28],[12,2,9,0],[13,2,11,0,"exports"],[13,9,11,7],[13,10,11,8,"implementation"],[13,24,11,22],[13,27,11,25],[13,33,11,31,"URLSearchParamsImpl"],[13,52,11,50],[13,53,11,51],[14,4,12,2,"constructor"],[14,15,12,13,"constructor"],[14,16,12,14,"globalObject"],[14,28,12,26],[14,30,12,28,"constructorArgs"],[14,45,12,43],[14,47,12,45],[15,6,12,47,"doNotStripQMark"],[15,21,12,62],[15,24,12,65],[16,4,12,71],[16,5,12,72],[16,7,12,74],[17,6,13,4],[17,10,13,8,"init"],[17,14,13,12],[17,17,13,15,"constructorArgs"],[17,32,13,30],[17,33,13,31],[17,34,13,32],[17,35,13,33],[18,6,14,4],[18,10,14,8],[18,11,14,9,"_list"],[18,16,14,14],[18,19,14,17],[18,21,14,19],[19,6,15,4],[19,10,15,8],[19,11,15,9,"_url"],[19,15,15,13],[19,18,15,16],[19,22,15,20],[20,6,17,4],[20,10,17,8],[20,11,17,9,"doNotStripQMark"],[20,26,17,24],[20,30,17,28],[20,37,17,35,"init"],[20,41,17,39],[20,46,17,44],[20,54,17,52],[20,58,17,56,"init"],[20,62,17,60],[20,63,17,61],[20,64,17,62],[20,65,17,63],[20,70,17,68],[20,73,17,71],[20,75,17,73],[21,8,18,6,"init"],[21,12,18,10],[21,15,18,13,"init"],[21,19,18,17],[21,20,18,18,"slice"],[21,25,18,23],[21,26,18,24],[21,27,18,25],[21,28,18,26],[22,6,19,4],[23,6,21,4],[23,10,21,8,"Array"],[23,15,21,13],[23,16,21,14,"isArray"],[23,23,21,21],[23,24,21,22,"init"],[23,28,21,26],[23,29,21,27],[23,31,21,29],[24,8,22,6],[24,13,22,11],[24,19,22,17,"pair"],[24,23,22,21],[24,27,22,25,"init"],[24,31,22,29],[24,33,22,31],[25,10,23,8],[25,14,23,12,"pair"],[25,18,23,16],[25,19,23,17,"length"],[25,25,23,23],[25,30,23,28],[25,31,23,29],[25,33,23,31],[26,12,24,10],[26,18,24,16],[26,22,24,20,"TypeError"],[26,31,24,29],[26,32,24,30],[26,113,24,111],[26,116,25,30],[26,147,25,61],[26,148,25,62],[27,10,26,8],[28,10,27,8],[28,14,27,12],[28,15,27,13,"_list"],[28,20,27,18],[28,21,27,19,"push"],[28,25,27,23],[28,26,27,24],[28,27,27,25,"pair"],[28,31,27,29],[28,32,27,30],[28,33,27,31],[28,34,27,32],[28,36,27,34,"pair"],[28,40,27,38],[28,41,27,39],[28,42,27,40],[28,43,27,41],[28,44,27,42],[28,45,27,43],[29,8,28,6],[30,6,29,4],[30,7,29,5],[30,13,29,11],[30,17,29,15],[30,24,29,22,"init"],[30,28,29,26],[30,33,29,31],[30,41,29,39],[30,45,29,43,"Object"],[30,51,29,49],[30,52,29,50,"getPrototypeOf"],[30,66,29,64],[30,67,29,65,"init"],[30,71,29,69],[30,72,29,70],[30,77,29,75],[30,81,29,79],[30,83,29,81],[31,8,30,6],[31,13,30,11],[31,19,30,17,"name"],[31,23,30,21],[31,27,30,25,"Object"],[31,33,30,31],[31,34,30,32,"keys"],[31,38,30,36],[31,39,30,37,"init"],[31,43,30,41],[31,44,30,42],[31,46,30,44],[32,10,31,8],[32,16,31,14,"value"],[32,21,31,19],[32,24,31,22,"init"],[32,28,31,26],[32,29,31,27,"name"],[32,33,31,31],[32,34,31,32],[33,10,32,8],[33,14,32,12],[33,15,32,13,"_list"],[33,20,32,18],[33,21,32,19,"push"],[33,25,32,23],[33,26,32,24],[33,27,32,25,"name"],[33,31,32,29],[33,33,32,31,"value"],[33,38,32,36],[33,39,32,37],[33,40,32,38],[34,8,33,6],[35,6,34,4],[35,7,34,5],[35,13,34,11],[36,8,35,6],[36,12,35,10],[36,13,35,11,"_list"],[36,18,35,16],[36,21,35,19,"urlencoded"],[36,31,35,29],[36,32,35,30,"parseUrlencoded"],[36,47,35,45],[36,48,35,46,"init"],[36,52,35,50],[36,53,35,51],[37,6,36,4],[38,4,37,2],[39,4,39,2,"_updateSteps"],[39,16,39,14,"_updateSteps"],[39,17,39,14],[39,19,39,17],[40,6,40,4],[40,10,40,8],[40,14,40,12],[40,15,40,13,"_url"],[40,19,40,17],[40,24,40,22],[40,28,40,26],[40,30,40,28],[41,8,41,6],[41,12,41,10,"query"],[41,17,41,15],[41,20,41,18,"urlencoded"],[41,30,41,28],[41,31,41,29,"serializeUrlencoded"],[41,50,41,48],[41,51,41,49],[41,55,41,53],[41,56,41,54,"_list"],[41,61,41,59],[41,62,41,60],[42,8,42,6],[42,12,42,10,"query"],[42,17,42,15],[42,22,42,20],[42,24,42,22],[42,26,42,24],[43,10,43,8,"query"],[43,15,43,13],[43,18,43,16],[43,22,43,20],[44,8,44,6],[45,8,45,6],[45,12,45,10],[45,13,45,11,"_url"],[45,17,45,15],[45,18,45,16,"_url"],[45,22,45,20],[45,23,45,21,"query"],[45,28,45,26],[45,31,45,29,"query"],[45,36,45,34],[46,6,46,4],[47,4,47,2],[48,4,49,2,"append"],[48,10,49,8,"append"],[48,11,49,9,"name"],[48,15,49,13],[48,17,49,15,"value"],[48,22,49,20],[48,24,49,22],[49,6,50,4],[49,10,50,8],[49,11,50,9,"_list"],[49,16,50,14],[49,17,50,15,"push"],[49,21,50,19],[49,22,50,20],[49,23,50,21,"name"],[49,27,50,25],[49,29,50,27,"value"],[49,34,50,32],[49,35,50,33],[49,36,50,34],[50,6,51,4],[50,10,51,8],[50,11,51,9,"_updateSteps"],[50,23,51,21],[50,24,51,22],[50,25,51,23],[51,4,52,2],[52,4,54,2,"delete"],[52,10,54,8,"delete"],[52,11,54,9,"name"],[52,15,54,13],[52,17,54,15],[53,6,55,4],[53,10,55,8,"i"],[53,11,55,9],[53,14,55,12],[53,15,55,13],[54,6,56,4],[54,13,56,11,"i"],[54,14,56,12],[54,17,56,15],[54,21,56,19],[54,22,56,20,"_list"],[54,27,56,25],[54,28,56,26,"length"],[54,34,56,32],[54,36,56,34],[55,8,57,6],[55,12,57,10],[55,16,57,14],[55,17,57,15,"_list"],[55,22,57,20],[55,23,57,21,"i"],[55,24,57,22],[55,25,57,23],[55,26,57,24],[55,27,57,25],[55,28,57,26],[55,33,57,31,"name"],[55,37,57,35],[55,39,57,37],[56,10,58,8],[56,14,58,12],[56,15,58,13,"_list"],[56,20,58,18],[56,21,58,19,"splice"],[56,27,58,25],[56,28,58,26,"i"],[56,29,58,27],[56,31,58,29],[56,32,58,30],[56,33,58,31],[57,8,59,6],[57,9,59,7],[57,15,59,13],[58,10,60,8,"i"],[58,11,60,9],[58,13,60,11],[59,8,61,6],[60,6,62,4],[61,6,63,4],[61,10,63,8],[61,11,63,9,"_updateSteps"],[61,23,63,21],[61,24,63,22],[61,25,63,23],[62,4,64,2],[63,4,66,2,"get"],[63,7,66,5,"get"],[63,8,66,6,"name"],[63,12,66,10],[63,14,66,12],[64,6,67,4],[64,11,67,9],[64,17,67,15,"tuple"],[64,22,67,20],[64,26,67,24],[64,30,67,28],[64,31,67,29,"_list"],[64,36,67,34],[64,38,67,36],[65,8,68,6],[65,12,68,10,"tuple"],[65,17,68,15],[65,18,68,16],[65,19,68,17],[65,20,68,18],[65,25,68,23,"name"],[65,29,68,27],[65,31,68,29],[66,10,69,8],[66,17,69,15,"tuple"],[66,22,69,20],[66,23,69,21],[66,24,69,22],[66,25,69,23],[67,8,70,6],[68,6,71,4],[69,6,72,4],[69,13,72,11],[69,17,72,15],[70,4,73,2],[71,4,75,2,"getAll"],[71,10,75,8,"getAll"],[71,11,75,9,"name"],[71,15,75,13],[71,17,75,15],[72,6,76,4],[72,12,76,10,"output"],[72,18,76,16],[72,21,76,19],[72,23,76,21],[73,6,77,4],[73,11,77,9],[73,17,77,15,"tuple"],[73,22,77,20],[73,26,77,24],[73,30,77,28],[73,31,77,29,"_list"],[73,36,77,34],[73,38,77,36],[74,8,78,6],[74,12,78,10,"tuple"],[74,17,78,15],[74,18,78,16],[74,19,78,17],[74,20,78,18],[74,25,78,23,"name"],[74,29,78,27],[74,31,78,29],[75,10,79,8,"output"],[75,16,79,14],[75,17,79,15,"push"],[75,21,79,19],[75,22,79,20,"tuple"],[75,27,79,25],[75,28,79,26],[75,29,79,27],[75,30,79,28],[75,31,79,29],[76,8,80,6],[77,6,81,4],[78,6,82,4],[78,13,82,11,"output"],[78,19,82,17],[79,4,83,2],[80,4,85,2,"has"],[80,7,85,5,"has"],[80,8,85,6,"name"],[80,12,85,10],[80,14,85,12],[81,6,86,4],[81,11,86,9],[81,17,86,15,"tuple"],[81,22,86,20],[81,26,86,24],[81,30,86,28],[81,31,86,29,"_list"],[81,36,86,34],[81,38,86,36],[82,8,87,6],[82,12,87,10,"tuple"],[82,17,87,15],[82,18,87,16],[82,19,87,17],[82,20,87,18],[82,25,87,23,"name"],[82,29,87,27],[82,31,87,29],[83,10,88,8],[83,17,88,15],[83,21,88,19],[84,8,89,6],[85,6,90,4],[86,6,91,4],[86,13,91,11],[86,18,91,16],[87,4,92,2],[88,4,94,2,"set"],[88,7,94,5,"set"],[88,8,94,6,"name"],[88,12,94,10],[88,14,94,12,"value"],[88,19,94,17],[88,21,94,19],[89,6,95,4],[89,10,95,8,"found"],[89,15,95,13],[89,18,95,16],[89,23,95,21],[90,6,96,4],[90,10,96,8,"i"],[90,11,96,9],[90,14,96,12],[90,15,96,13],[91,6,97,4],[91,13,97,11,"i"],[91,14,97,12],[91,17,97,15],[91,21,97,19],[91,22,97,20,"_list"],[91,27,97,25],[91,28,97,26,"length"],[91,34,97,32],[91,36,97,34],[92,8,98,6],[92,12,98,10],[92,16,98,14],[92,17,98,15,"_list"],[92,22,98,20],[92,23,98,21,"i"],[92,24,98,22],[92,25,98,23],[92,26,98,24],[92,27,98,25],[92,28,98,26],[92,33,98,31,"name"],[92,37,98,35],[92,39,98,37],[93,10,99,8],[93,14,99,12,"found"],[93,19,99,17],[93,21,99,19],[94,12,100,10],[94,16,100,14],[94,17,100,15,"_list"],[94,22,100,20],[94,23,100,21,"splice"],[94,29,100,27],[94,30,100,28,"i"],[94,31,100,29],[94,33,100,31],[94,34,100,32],[94,35,100,33],[95,10,101,8],[95,11,101,9],[95,17,101,15],[96,12,102,10,"found"],[96,17,102,15],[96,20,102,18],[96,24,102,22],[97,12,103,10],[97,16,103,14],[97,17,103,15,"_list"],[97,22,103,20],[97,23,103,21,"i"],[97,24,103,22],[97,25,103,23],[97,26,103,24],[97,27,103,25],[97,28,103,26],[97,31,103,29,"value"],[97,36,103,34],[98,12,104,10,"i"],[98,13,104,11],[98,15,104,13],[99,10,105,8],[100,8,106,6],[100,9,106,7],[100,15,106,13],[101,10,107,8,"i"],[101,11,107,9],[101,13,107,11],[102,8,108,6],[103,6,109,4],[104,6,110,4],[104,10,110,8],[104,11,110,9,"found"],[104,16,110,14],[104,18,110,16],[105,8,111,6],[105,12,111,10],[105,13,111,11,"_list"],[105,18,111,16],[105,19,111,17,"push"],[105,23,111,21],[105,24,111,22],[105,25,111,23,"name"],[105,29,111,27],[105,31,111,29,"value"],[105,36,111,34],[105,37,111,35],[105,38,111,36],[106,6,112,4],[107,6,113,4],[107,10,113,8],[107,11,113,9,"_updateSteps"],[107,23,113,21],[107,24,113,22],[107,25,113,23],[108,4,114,2],[109,4,116,2,"sort"],[109,8,116,6,"sort"],[109,9,116,6],[109,11,116,9],[110,6,117,4],[110,10,117,8],[110,11,117,9,"_list"],[110,16,117,14],[110,19,117,17,"stableSortBy"],[110,31,117,29],[110,32,117,30],[110,36,117,34],[110,37,117,35,"_list"],[110,42,117,40],[110,44,117,42],[110,45,117,43,"a"],[110,46,117,44],[110,48,117,46,"b"],[110,49,117,47],[110,54,117,52,"a"],[110,55,117,53],[110,56,117,54],[110,57,117,55],[110,58,117,56],[110,61,117,59,"b"],[110,62,117,60],[110,63,117,61],[110,64,117,62],[110,65,117,63],[110,66,117,64],[111,6,118,4],[111,10,118,8],[111,11,118,9,"_updateSteps"],[111,23,118,21],[111,24,118,22],[111,25,118,23],[112,4,119,2],[113,4,121,2],[113,5,121,3,"Symbol"],[113,11,121,9],[113,12,121,10,"iterator"],[113,20,121,18],[113,24,121,22],[114,6,122,4],[114,13,122,11],[114,17,122,15],[114,18,122,16,"_list"],[114,23,122,21],[114,24,122,22,"Symbol"],[114,30,122,28],[114,31,122,29,"iterator"],[114,39,122,37],[114,40,122,38],[114,41,122,39],[114,42,122,40],[115,4,123,2],[116,4,125,2,"toString"],[116,12,125,10,"toString"],[116,13,125,10],[116,15,125,13],[117,6,126,4],[117,13,126,11,"urlencoded"],[117,23,126,21],[117,24,126,22,"serializeUrlencoded"],[117,43,126,41],[117,44,126,42],[117,48,126,46],[117,49,126,47,"_list"],[117,54,126,52],[117,55,126,53],[118,4,127,2],[119,2,128,0],[119,3,128,1],[120,0,128,2],[120,3]],"functionMap":{"names":["<global>","stableSortBy","arr.map$argument_0","arr.map.sort$argument_0","arr.map.sort.map$argument_0","URLSearchParamsImpl","URLSearchParamsImpl#constructor","URLSearchParamsImpl#_updateSteps","URLSearchParamsImpl#append","URLSearchParamsImpl#_delete","URLSearchParamsImpl#get","URLSearchParamsImpl#getAll","URLSearchParamsImpl#has","URLSearchParamsImpl#set","URLSearchParamsImpl#sort","stableSortBy$argument_1","URLSearchParamsImpl#@@iterator","URLSearchParamsImpl#toString"],"mappings":"AAA;ACG;SCE,kCD;UEC,sDF;SGC,kBH;CDC;yBKE;ECC;GDyB;EEE;GFQ;EGE;GHG;EIE;GJU;EKE;GLO;EME;GNQ;EOE;GPO;EQE;GRoB;ESE;0CCC,qBD;GTE;EWE;GXE;EYE;GZE;CLC"},"hasCjsExports":true},"type":"js/module"}]}