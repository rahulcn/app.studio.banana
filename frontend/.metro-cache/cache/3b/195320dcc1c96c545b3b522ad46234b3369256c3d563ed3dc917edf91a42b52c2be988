{"dependencies":[{"name":"./PostgrestBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":43,"index":259},"end":{"line":6,"column":72,"index":288}}],"key":"v25p5H95xQ2bcPoR7FGoD/7jboE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const PostgrestBuilder_1 = __importDefault(require(_dependencyMap[0], \"./PostgrestBuilder\"));\n  class PostgrestTransformBuilder extends PostgrestBuilder_1.default {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n      // Remove whitespaces except when quoted\n      let quoted = false;\n      const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      this.headers.append('Prefer', 'return=representation');\n      return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order referenced tables, but it only affects the ordering of the\n     * parent table if you use `!inner` in the query.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.referencedTable - Set this to order a referenced table by\n     * its columns\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    order(column, {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n      referencedTable = foreignTable\n    } = {}) {\n      const key = referencedTable ? `${referencedTable}.order` : 'order';\n      const existingOrder = this.url.searchParams.get(key);\n      this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n      return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    limit(count, {\n      foreignTable,\n      referencedTable = foreignTable\n    } = {}) {\n      const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n      this.url.searchParams.set(key, `${count}`);\n      return this;\n    }\n    /**\n     * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n     * Only records within this range are returned.\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n     * and fourth rows of the query.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    range(from, to, {\n      foreignTable,\n      referencedTable = foreignTable\n    } = {}) {\n      const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n      const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n      this.url.searchParams.set(keyOffset, `${from}`);\n      // Range is inclusive, so add 1\n      this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n      return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n      this.signal = signal;\n      return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n      this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n      return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n      // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n      // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n      if (this.method === 'GET') {\n        this.headers.set('Accept', 'application/json');\n      } else {\n        this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n      }\n      this.isMaybeSingle = true;\n      return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n      this.headers.set('Accept', 'text/csv');\n      return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n      this.headers.set('Accept', 'application/geo+json');\n      return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * You need to enable the\n     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n     * setting before using this method.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({\n      analyze = false,\n      verbose = false,\n      settings = false,\n      buffers = false,\n      wal = false,\n      format = 'text'\n    } = {}) {\n      var _a;\n      const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n      // An Accept header can carry multiple media types but postgrest-js always sends one\n      const forMediatype = (_a = this.headers.get('Accept')) !== null && _a !== void 0 ? _a : 'application/json';\n      this.headers.set('Accept', `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`);\n      if (format === 'json') {\n        return this;\n      } else {\n        return this;\n      }\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n      this.headers.append('Prefer', 'tx=rollback');\n      return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n     */\n    returns() {\n      return this;\n    }\n    /**\n     * Set the maximum number of rows that can be affected by the query.\n     * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\n     *\n     * @param value - The maximum number of rows that can be affected\n     */\n    maxAffected(value) {\n      this.headers.append('Prefer', 'handling=strict');\n      this.headers.append('Prefer', `max-affected=${value}`);\n      return this;\n    }\n  }\n  exports.default = PostgrestTransformBuilder;\n});","lineCount":237,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0],[12,8,6,6,"PostgrestBuilder_1"],[12,26,6,24],[12,29,6,27,"__importDefault"],[12,44,6,42],[12,45,6,43,"require"],[12,52,6,50],[12,53,6,50,"_dependencyMap"],[12,67,6,50],[12,92,6,71],[12,93,6,72],[12,94,6,73],[13,2,7,0],[13,8,7,6,"PostgrestTransformBuilder"],[13,33,7,31],[13,42,7,40,"PostgrestBuilder_1"],[13,60,7,58],[13,61,7,59,"default"],[13,68,7,66],[13,69,7,67],[14,4,8,4],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,4,17,4,"select"],[23,10,17,10,"select"],[23,11,17,11,"columns"],[23,18,17,18],[23,20,17,20],[24,6,18,8],[25,6,19,8],[25,10,19,12,"quoted"],[25,16,19,18],[25,19,19,21],[25,24,19,26],[26,6,20,8],[26,12,20,14,"cleanedColumns"],[26,26,20,28],[26,29,20,31],[26,30,20,32,"columns"],[26,37,20,39],[26,42,20,44],[26,46,20,48],[26,50,20,52,"columns"],[26,57,20,59],[26,62,20,64],[26,67,20,69],[26,68,20,70],[26,71,20,73,"columns"],[26,78,20,80],[26,81,20,83],[26,84,20,86],[26,86,21,13,"split"],[26,91,21,18],[26,92,21,19],[26,94,21,21],[26,95,21,22],[26,96,22,13,"map"],[26,99,22,16],[26,100,22,18,"c"],[26,101,22,19],[26,105,22,24],[27,8,23,12],[27,12,23,16],[27,16,23,20],[27,17,23,21,"test"],[27,21,23,25],[27,22,23,26,"c"],[27,23,23,27],[27,24,23,28],[27,28,23,32],[27,29,23,33,"quoted"],[27,35,23,39],[27,37,23,41],[28,10,24,16],[28,17,24,23],[28,19,24,25],[29,8,25,12],[30,8,26,12],[30,12,26,16,"c"],[30,13,26,17],[30,18,26,22],[30,21,26,25],[30,23,26,27],[31,10,27,16,"quoted"],[31,16,27,22],[31,19,27,25],[31,20,27,26,"quoted"],[31,26,27,32],[32,8,28,12],[33,8,29,12],[33,15,29,19,"c"],[33,16,29,20],[34,6,30,8],[34,7,30,9],[34,8,30,10],[34,9,31,13,"join"],[34,13,31,17],[34,14,31,18],[34,16,31,20],[34,17,31,21],[35,6,32,8],[35,10,32,12],[35,11,32,13,"url"],[35,14,32,16],[35,15,32,17,"searchParams"],[35,27,32,29],[35,28,32,30,"set"],[35,31,32,33],[35,32,32,34],[35,40,32,42],[35,42,32,44,"cleanedColumns"],[35,56,32,58],[35,57,32,59],[36,6,33,8],[36,10,33,12],[36,11,33,13,"headers"],[36,18,33,20],[36,19,33,21,"append"],[36,25,33,27],[36,26,33,28],[36,34,33,36],[36,36,33,38],[36,59,33,61],[36,60,33,62],[37,6,34,8],[37,13,34,15],[37,17,34,19],[38,4,35,4],[39,4,36,4],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,0,42,0],[46,0,43,0],[47,0,44,0],[48,0,45,0],[49,0,46,0],[50,0,47,0],[51,0,48,0],[52,0,49,0],[53,0,50,0],[54,0,51,0],[55,0,52,0],[56,0,53,0],[57,4,54,4,"order"],[57,9,54,9,"order"],[57,10,54,10,"column"],[57,16,54,16],[57,18,54,18],[58,6,54,20,"ascending"],[58,15,54,29],[58,18,54,32],[58,22,54,36],[59,6,54,38,"nullsFirst"],[59,16,54,48],[60,6,54,50,"foreignTable"],[60,18,54,62],[61,6,54,64,"referencedTable"],[61,21,54,79],[61,24,54,82,"foreignTable"],[62,4,54,96],[62,5,54,97],[62,8,54,100],[62,9,54,101],[62,10,54,102],[62,12,54,104],[63,6,55,8],[63,12,55,14,"key"],[63,15,55,17],[63,18,55,20,"referencedTable"],[63,33,55,35],[63,36,55,38],[63,39,55,41,"referencedTable"],[63,54,55,56],[63,62,55,64],[63,65,55,67],[63,72,55,74],[64,6,56,8],[64,12,56,14,"existingOrder"],[64,25,56,27],[64,28,56,30],[64,32,56,34],[64,33,56,35,"url"],[64,36,56,38],[64,37,56,39,"searchParams"],[64,49,56,51],[64,50,56,52,"get"],[64,53,56,55],[64,54,56,56,"key"],[64,57,56,59],[64,58,56,60],[65,6,57,8],[65,10,57,12],[65,11,57,13,"url"],[65,14,57,16],[65,15,57,17,"searchParams"],[65,27,57,29],[65,28,57,30,"set"],[65,31,57,33],[65,32,57,34,"key"],[65,35,57,37],[65,37,57,39],[65,40,57,42,"existingOrder"],[65,53,57,55],[65,56,57,58],[65,59,57,61,"existingOrder"],[65,72,57,74],[65,75,57,77],[65,78,57,80],[65,80,57,82],[65,83,57,85,"column"],[65,89,57,91],[65,93,57,95,"ascending"],[65,102,57,104],[65,105,57,107],[65,110,57,112],[65,113,57,115],[65,119,57,121],[65,122,57,124,"nullsFirst"],[65,132,57,134],[65,137,57,139,"undefined"],[65,146,57,148],[65,149,57,151],[65,151,57,153],[65,154,57,156,"nullsFirst"],[65,164,57,166],[65,167,57,169],[65,180,57,182],[65,183,57,185],[65,195,57,197],[65,197,57,199],[65,198,57,200],[66,6,58,8],[66,13,58,15],[66,17,58,19],[67,4,59,4],[68,4,60,4],[69,0,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,4,70,4,"limit"],[78,9,70,9,"limit"],[78,10,70,10,"count"],[78,15,70,15],[78,17,70,17],[79,6,70,19,"foreignTable"],[79,18,70,31],[80,6,70,33,"referencedTable"],[80,21,70,48],[80,24,70,51,"foreignTable"],[81,4,70,65],[81,5,70,66],[81,8,70,69],[81,9,70,70],[81,10,70,71],[81,12,70,73],[82,6,71,8],[82,12,71,14,"key"],[82,15,71,17],[82,18,71,20],[82,25,71,27,"referencedTable"],[82,40,71,42],[82,45,71,47],[82,56,71,58],[82,59,71,61],[82,66,71,68],[82,69,71,71],[82,72,71,74,"referencedTable"],[82,87,71,89],[82,95,71,97],[83,6,72,8],[83,10,72,12],[83,11,72,13,"url"],[83,14,72,16],[83,15,72,17,"searchParams"],[83,27,72,29],[83,28,72,30,"set"],[83,31,72,33],[83,32,72,34,"key"],[83,35,72,37],[83,37,72,39],[83,40,72,42,"count"],[83,45,72,47],[83,47,72,49],[83,48,72,50],[84,6,73,8],[84,13,73,15],[84,17,73,19],[85,4,74,4],[86,4,75,4],[87,0,76,0],[88,0,77,0],[89,0,78,0],[90,0,79,0],[91,0,80,0],[92,0,81,0],[93,0,82,0],[94,0,83,0],[95,0,84,0],[96,0,85,0],[97,0,86,0],[98,0,87,0],[99,0,88,0],[100,0,89,0],[101,4,90,4,"range"],[101,9,90,9,"range"],[101,10,90,10,"from"],[101,14,90,14],[101,16,90,16,"to"],[101,18,90,18],[101,20,90,20],[102,6,90,22,"foreignTable"],[102,18,90,34],[103,6,90,36,"referencedTable"],[103,21,90,51],[103,24,90,54,"foreignTable"],[104,4,90,68],[104,5,90,69],[104,8,90,72],[104,9,90,73],[104,10,90,74],[104,12,90,76],[105,6,91,8],[105,12,91,14,"keyOffset"],[105,21,91,23],[105,24,91,26],[105,31,91,33,"referencedTable"],[105,46,91,48],[105,51,91,53],[105,62,91,64],[105,65,91,67],[105,73,91,75],[105,76,91,78],[105,79,91,81,"referencedTable"],[105,94,91,96],[105,103,91,105],[106,6,92,8],[106,12,92,14,"keyLimit"],[106,20,92,22],[106,23,92,25],[106,30,92,32,"referencedTable"],[106,45,92,47],[106,50,92,52],[106,61,92,63],[106,64,92,66],[106,71,92,73],[106,74,92,76],[106,77,92,79,"referencedTable"],[106,92,92,94],[106,100,92,102],[107,6,93,8],[107,10,93,12],[107,11,93,13,"url"],[107,14,93,16],[107,15,93,17,"searchParams"],[107,27,93,29],[107,28,93,30,"set"],[107,31,93,33],[107,32,93,34,"keyOffset"],[107,41,93,43],[107,43,93,45],[107,46,93,48,"from"],[107,50,93,52],[107,52,93,54],[107,53,93,55],[108,6,94,8],[109,6,95,8],[109,10,95,12],[109,11,95,13,"url"],[109,14,95,16],[109,15,95,17,"searchParams"],[109,27,95,29],[109,28,95,30,"set"],[109,31,95,33],[109,32,95,34,"keyLimit"],[109,40,95,42],[109,42,95,44],[109,45,95,47,"to"],[109,47,95,49],[109,50,95,52,"from"],[109,54,95,56],[109,57,95,59],[109,58,95,60],[109,60,95,62],[109,61,95,63],[110,6,96,8],[110,13,96,15],[110,17,96,19],[111,4,97,4],[112,4,98,4],[113,0,99,0],[114,0,100,0],[115,0,101,0],[116,0,102,0],[117,4,103,4,"abortSignal"],[117,15,103,15,"abortSignal"],[117,16,103,16,"signal"],[117,22,103,22],[117,24,103,24],[118,6,104,8],[118,10,104,12],[118,11,104,13,"signal"],[118,17,104,19],[118,20,104,22,"signal"],[118,26,104,28],[119,6,105,8],[119,13,105,15],[119,17,105,19],[120,4,106,4],[121,4,107,4],[122,0,108,0],[123,0,109,0],[124,0,110,0],[125,0,111,0],[126,0,112,0],[127,4,113,4,"single"],[127,10,113,10,"single"],[127,11,113,10],[127,13,113,13],[128,6,114,8],[128,10,114,12],[128,11,114,13,"headers"],[128,18,114,20],[128,19,114,21,"set"],[128,22,114,24],[128,23,114,25],[128,31,114,33],[128,33,114,35],[128,68,114,70],[128,69,114,71],[129,6,115,8],[129,13,115,15],[129,17,115,19],[130,4,116,4],[131,4,117,4],[132,0,118,0],[133,0,119,0],[134,0,120,0],[135,0,121,0],[136,0,122,0],[137,4,123,4,"maybeSingle"],[137,15,123,15,"maybeSingle"],[137,16,123,15],[137,18,123,18],[138,6,124,8],[139,6,125,8],[140,6,126,8],[140,10,126,12],[140,14,126,16],[140,15,126,17,"method"],[140,21,126,23],[140,26,126,28],[140,31,126,33],[140,33,126,35],[141,8,127,12],[141,12,127,16],[141,13,127,17,"headers"],[141,20,127,24],[141,21,127,25,"set"],[141,24,127,28],[141,25,127,29],[141,33,127,37],[141,35,127,39],[141,53,127,57],[141,54,127,58],[142,6,128,8],[142,7,128,9],[142,13,129,13],[143,8,130,12],[143,12,130,16],[143,13,130,17,"headers"],[143,20,130,24],[143,21,130,25,"set"],[143,24,130,28],[143,25,130,29],[143,33,130,37],[143,35,130,39],[143,70,130,74],[143,71,130,75],[144,6,131,8],[145,6,132,8],[145,10,132,12],[145,11,132,13,"isMaybeSingle"],[145,24,132,26],[145,27,132,29],[145,31,132,33],[146,6,133,8],[146,13,133,15],[146,17,133,19],[147,4,134,4],[148,4,135,4],[149,0,136,0],[150,0,137,0],[151,4,138,4,"csv"],[151,7,138,7,"csv"],[151,8,138,7],[151,10,138,10],[152,6,139,8],[152,10,139,12],[152,11,139,13,"headers"],[152,18,139,20],[152,19,139,21,"set"],[152,22,139,24],[152,23,139,25],[152,31,139,33],[152,33,139,35],[152,43,139,45],[152,44,139,46],[153,6,140,8],[153,13,140,15],[153,17,140,19],[154,4,141,4],[155,4,142,4],[156,0,143,0],[157,0,144,0],[158,4,145,4,"geojson"],[158,11,145,11,"geojson"],[158,12,145,11],[158,14,145,14],[159,6,146,8],[159,10,146,12],[159,11,146,13,"headers"],[159,18,146,20],[159,19,146,21,"set"],[159,22,146,24],[159,23,146,25],[159,31,146,33],[159,33,146,35],[159,55,146,57],[159,56,146,58],[160,6,147,8],[160,13,147,15],[160,17,147,19],[161,4,148,4],[162,4,149,4],[163,0,150,0],[164,0,151,0],[165,0,152,0],[166,0,153,0],[167,0,154,0],[168,0,155,0],[169,0,156,0],[170,0,157,0],[171,0,158,0],[172,0,159,0],[173,0,160,0],[174,0,161,0],[175,0,162,0],[176,0,163,0],[177,0,164,0],[178,0,165,0],[179,0,166,0],[180,0,167,0],[181,0,168,0],[182,0,169,0],[183,0,170,0],[184,0,171,0],[185,0,172,0],[186,0,173,0],[187,4,174,4,"explain"],[187,11,174,11,"explain"],[187,12,174,12],[188,6,174,14,"analyze"],[188,13,174,21],[188,16,174,24],[188,21,174,29],[189,6,174,31,"verbose"],[189,13,174,38],[189,16,174,41],[189,21,174,46],[190,6,174,48,"settings"],[190,14,174,56],[190,17,174,59],[190,22,174,64],[191,6,174,66,"buffers"],[191,13,174,73],[191,16,174,76],[191,21,174,81],[192,6,174,83,"wal"],[192,9,174,86],[192,12,174,89],[192,17,174,94],[193,6,174,96,"format"],[193,12,174,102],[193,15,174,105],[194,4,174,113],[194,5,174,114],[194,8,174,117],[194,9,174,118],[194,10,174,119],[194,12,174,121],[195,6,175,8],[195,10,175,12,"_a"],[195,12,175,14],[196,6,176,8],[196,12,176,14,"options"],[196,19,176,21],[196,22,176,24],[196,23,177,12,"analyze"],[196,30,177,19],[196,33,177,22],[196,42,177,31],[196,45,177,34],[196,49,177,38],[196,51,178,12,"verbose"],[196,58,178,19],[196,61,178,22],[196,70,178,31],[196,73,178,34],[196,77,178,38],[196,79,179,12,"settings"],[196,87,179,20],[196,90,179,23],[196,100,179,33],[196,103,179,36],[196,107,179,40],[196,109,180,12,"buffers"],[196,116,180,19],[196,119,180,22],[196,128,180,31],[196,131,180,34],[196,135,180,38],[196,137,181,12,"wal"],[196,140,181,15],[196,143,181,18],[196,148,181,23],[196,151,181,26],[196,155,181,30],[196,156,182,9],[196,157,183,13,"filter"],[196,163,183,19],[196,164,183,20,"Boolean"],[196,171,183,27],[196,172,183,28],[196,173,184,13,"join"],[196,177,184,17],[196,178,184,18],[196,181,184,21],[196,182,184,22],[197,6,185,8],[198,6,186,8],[198,12,186,14,"forMediatype"],[198,24,186,26],[198,27,186,29],[198,28,186,30,"_a"],[198,30,186,32],[198,33,186,35],[198,37,186,39],[198,38,186,40,"headers"],[198,45,186,47],[198,46,186,48,"get"],[198,49,186,51],[198,50,186,52],[198,58,186,60],[198,59,186,61],[198,65,186,67],[198,69,186,71],[198,73,186,75,"_a"],[198,75,186,77],[198,80,186,82],[198,85,186,87],[198,86,186,88],[198,89,186,91,"_a"],[198,91,186,93],[198,94,186,96],[198,112,186,114],[199,6,187,8],[199,10,187,12],[199,11,187,13,"headers"],[199,18,187,20],[199,19,187,21,"set"],[199,22,187,24],[199,23,187,25],[199,31,187,33],[199,33,187,35],[199,63,187,65,"format"],[199,69,187,71],[199,79,187,81,"forMediatype"],[199,91,187,93],[199,105,187,107,"options"],[199,112,187,114],[199,115,187,117],[199,116,187,118],[200,6,188,8],[200,10,188,12,"format"],[200,16,188,18],[200,21,188,23],[200,27,188,29],[200,29,188,31],[201,8,189,12],[201,15,189,19],[201,19,189,23],[202,6,190,8],[202,7,190,9],[202,13,191,13],[203,8,192,12],[203,15,192,19],[203,19,192,23],[204,6,193,8],[205,4,194,4],[206,4,195,4],[207,0,196,0],[208,0,197,0],[209,0,198,0],[210,0,199,0],[211,4,200,4,"rollback"],[211,12,200,12,"rollback"],[211,13,200,12],[211,15,200,15],[212,6,201,8],[212,10,201,12],[212,11,201,13,"headers"],[212,18,201,20],[212,19,201,21,"append"],[212,25,201,27],[212,26,201,28],[212,34,201,36],[212,36,201,38],[212,49,201,51],[212,50,201,52],[213,6,202,8],[213,13,202,15],[213,17,202,19],[214,4,203,4],[215,4,204,4],[216,0,205,0],[217,0,206,0],[218,0,207,0],[219,0,208,0],[220,0,209,0],[221,4,210,4,"returns"],[221,11,210,11,"returns"],[221,12,210,11],[221,14,210,14],[222,6,211,8],[222,13,211,15],[222,17,211,19],[223,4,212,4],[224,4,213,4],[225,0,214,0],[226,0,215,0],[227,0,216,0],[228,0,217,0],[229,0,218,0],[230,4,219,4,"maxAffected"],[230,15,219,15,"maxAffected"],[230,16,219,16,"value"],[230,21,219,21],[230,23,219,23],[231,6,220,8],[231,10,220,12],[231,11,220,13,"headers"],[231,18,220,20],[231,19,220,21,"append"],[231,25,220,27],[231,26,220,28],[231,34,220,36],[231,36,220,38],[231,53,220,55],[231,54,220,56],[232,6,221,8],[232,10,221,12],[232,11,221,13,"headers"],[232,18,221,20],[232,19,221,21,"append"],[232,25,221,27],[232,26,221,28],[232,34,221,36],[232,36,221,38],[232,52,221,54,"value"],[232,57,221,59],[232,59,221,61],[232,60,221,62],[233,6,222,8],[233,13,222,15],[233,17,222,19],[234,4,223,4],[235,2,224,0],[236,2,225,0,"exports"],[236,9,225,7],[236,10,225,8,"default"],[236,17,225,15],[236,20,225,18,"PostgrestTransformBuilder"],[236,45,225,43],[237,0,225,44],[237,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestTransformBuilder","select","split.map$argument_0","order","limit","range","abortSignal","single","maybeSingle","csv","geojson","explain","rollback","returns","maxAffected"],"mappings":"AAA;wDCC;CDE;AEG;ICU;iBCK;SDQ;KDK;IGmB;KHK;IIW;KJI;IKgB;KLO;IMM;KNG;IOO;KPG;IQO;KRW;ISI;KTG;IUI;KVG;IW0B;KXoB;IYM;KZG;IaO;KbE;IcO;KdI;CFC"},"hasCjsExports":true},"type":"js/module"}]}