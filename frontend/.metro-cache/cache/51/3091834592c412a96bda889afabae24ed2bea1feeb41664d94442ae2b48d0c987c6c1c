{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"PostgresTypes\", {\n    enumerable: true,\n    get: function () {\n      return PostgresTypes;\n    }\n  });\n  Object.defineProperty(exports, \"convertChangeData\", {\n    enumerable: true,\n    get: function () {\n      return convertChangeData;\n    }\n  });\n  Object.defineProperty(exports, \"convertColumn\", {\n    enumerable: true,\n    get: function () {\n      return convertColumn;\n    }\n  });\n  Object.defineProperty(exports, \"convertCell\", {\n    enumerable: true,\n    get: function () {\n      return convertCell;\n    }\n  });\n  Object.defineProperty(exports, \"toBoolean\", {\n    enumerable: true,\n    get: function () {\n      return toBoolean;\n    }\n  });\n  Object.defineProperty(exports, \"toNumber\", {\n    enumerable: true,\n    get: function () {\n      return toNumber;\n    }\n  });\n  Object.defineProperty(exports, \"toJson\", {\n    enumerable: true,\n    get: function () {\n      return toJson;\n    }\n  });\n  Object.defineProperty(exports, \"toArray\", {\n    enumerable: true,\n    get: function () {\n      return toArray;\n    }\n  });\n  Object.defineProperty(exports, \"toTimestampString\", {\n    enumerable: true,\n    get: function () {\n      return toTimestampString;\n    }\n  });\n  Object.defineProperty(exports, \"httpEndpointURL\", {\n    enumerable: true,\n    get: function () {\n      return httpEndpointURL;\n    }\n  });\n  /**\n   * Helpers to convert the change Payload into native JS types.\n   */\n  // Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n  // 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n  var PostgresTypes;\n  (function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n  })(PostgresTypes || (PostgresTypes = {}));\n  /**\n   * Takes an array of columns and an object of string values then converts each string value\n   * to its mapped type.\n   *\n   * @param {{name: String, type: String}[]} columns\n   * @param {Object} record\n   * @param {Object} options The map of various options that can be applied to the mapper\n   * @param {Array} options.skipTypes The array of types that should not be converted\n   *\n   * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n   * //=>{ first_name: 'Paul', age: 33 }\n   */\n  const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n      acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n      return acc;\n    }, {});\n  };\n  /**\n   * Converts the value of an individual column.\n   *\n   * @param {String} columnName The column that you want to convert\n   * @param {{name: String, type: String}[]} columns All of the columns\n   * @param {Object} record The map of string values\n   * @param {Array} skipTypes An array of types that should not be converted\n   * @return {object} Useless information\n   *\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n   * //=> 33\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n   * //=> \"33\"\n   */\n  const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find(x => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n      return convertCell(colType, value);\n    }\n    return noop(value);\n  };\n  /**\n   * If the value of the cell is `null`, returns null.\n   * Otherwise converts the string value to the correct type.\n   * @param {String} type A postgres column type\n   * @param {String} value The cell value\n   *\n   * @example convertCell('bool', 't')\n   * //=> true\n   * @example convertCell('int8', '10')\n   * //=> 10\n   * @example convertCell('_int4', '{1,2,3,4}')\n   * //=> [1,2,3,4]\n   */\n  const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n      const dataType = type.slice(1, type.length);\n      return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n      case PostgresTypes.bool:\n        return toBoolean(value);\n      case PostgresTypes.float4:\n      case PostgresTypes.float8:\n      case PostgresTypes.int2:\n      case PostgresTypes.int4:\n      case PostgresTypes.int8:\n      case PostgresTypes.numeric:\n      case PostgresTypes.oid:\n        return toNumber(value);\n      case PostgresTypes.json:\n      case PostgresTypes.jsonb:\n        return toJson(value);\n      case PostgresTypes.timestamp:\n        return toTimestampString(value);\n      // Format to be consistent with PostgREST\n      case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n      case PostgresTypes.date: // To allow users to cast it based on Timezone\n      case PostgresTypes.daterange:\n      case PostgresTypes.int4range:\n      case PostgresTypes.int8range:\n      case PostgresTypes.money:\n      case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n      case PostgresTypes.text:\n      case PostgresTypes.time: // To allow users to cast it based on Timezone\n      case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n      case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n      case PostgresTypes.tsrange:\n      case PostgresTypes.tstzrange:\n        return noop(value);\n      default:\n        // Return the value for remaining types\n        return noop(value);\n    }\n  };\n  const noop = value => {\n    return value;\n  };\n  const toBoolean = value => {\n    switch (value) {\n      case 't':\n        return true;\n      case 'f':\n        return false;\n      default:\n        return value;\n    }\n  };\n  const toNumber = value => {\n    if (typeof value === 'string') {\n      const parsedValue = parseFloat(value);\n      if (!Number.isNaN(parsedValue)) {\n        return parsedValue;\n      }\n    }\n    return value;\n  };\n  const toJson = value => {\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n        return value;\n      }\n    }\n    return value;\n  };\n  /**\n   * Converts a Postgres Array into a native JS array\n   *\n   * @example toArray('{}', 'int4')\n   * //=> []\n   * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n   * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n   * @example toArray([1,2,3,4], 'int4')\n   * //=> [1,2,3,4]\n   */\n  const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n      let arr;\n      const valTrim = value.slice(1, lastIdx);\n      // TODO: find a better solution to separate Postgres array data\n      try {\n        arr = JSON.parse('[' + valTrim + ']');\n      } catch (_) {\n        // WARNING: splitting on comma does not cover all edge cases\n        arr = valTrim ? valTrim.split(',') : [];\n      }\n      return arr.map(val => convertCell(type, val));\n    }\n    return value;\n  };\n  /**\n   * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n   * See https://github.com/supabase/supabase/issues/18\n   *\n   * @example toTimestampString('2019-09-10 00:00:00')\n   * //=> '2019-09-10T00:00:00'\n   */\n  const toTimestampString = value => {\n    if (typeof value === 'string') {\n      return value.replace(' ', 'T');\n    }\n    return value;\n  };\n  const httpEndpointURL = socketUrl => {\n    let url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '') + '/api/broadcast';\n  };\n});","lineCount":282,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"PostgresTypes"],[10,26,6,0],[11,4,6,0],[12,2,6,0],[13,2,45,0,"Object"],[13,8,45,0],[13,9,45,0,"defineProperty"],[13,23,45,0],[13,24,45,0,"exports"],[13,31,45,0],[14,4,45,0,"enumerable"],[14,14,45,0],[15,4,45,0,"get"],[15,7,45,0],[15,18,45,0,"get"],[15,19,45,0],[16,6,45,0],[16,13,45,0,"convertChangeData"],[16,30,45,0],[17,4,45,0],[18,2,45,0],[19,2,67,0,"Object"],[19,8,67,0],[19,9,67,0,"defineProperty"],[19,23,67,0],[19,24,67,0,"exports"],[19,31,67,0],[20,4,67,0,"enumerable"],[20,14,67,0],[21,4,67,0,"get"],[21,7,67,0],[21,18,67,0,"get"],[21,19,67,0],[22,6,67,0],[22,13,67,0,"convertColumn"],[22,26,67,0],[23,4,67,0],[24,2,67,0],[25,2,89,0,"Object"],[25,8,89,0],[25,9,89,0,"defineProperty"],[25,23,89,0],[25,24,89,0,"exports"],[25,31,89,0],[26,4,89,0,"enumerable"],[26,14,89,0],[27,4,89,0,"get"],[27,7,89,0],[27,18,89,0,"get"],[27,19,89,0],[28,6,89,0],[28,13,89,0,"convertCell"],[28,24,89,0],[29,4,89,0],[30,2,89,0],[31,2,134,0,"Object"],[31,8,134,0],[31,9,134,0,"defineProperty"],[31,23,134,0],[31,24,134,0,"exports"],[31,31,134,0],[32,4,134,0,"enumerable"],[32,14,134,0],[33,4,134,0,"get"],[33,7,134,0],[33,18,134,0,"get"],[33,19,134,0],[34,6,134,0],[34,13,134,0,"toBoolean"],[34,22,134,0],[35,4,134,0],[36,2,134,0],[37,2,144,0,"Object"],[37,8,144,0],[37,9,144,0,"defineProperty"],[37,23,144,0],[37,24,144,0,"exports"],[37,31,144,0],[38,4,144,0,"enumerable"],[38,14,144,0],[39,4,144,0,"get"],[39,7,144,0],[39,18,144,0,"get"],[39,19,144,0],[40,6,144,0],[40,13,144,0,"toNumber"],[40,21,144,0],[41,4,144,0],[42,2,144,0],[43,2,153,0,"Object"],[43,8,153,0],[43,9,153,0,"defineProperty"],[43,23,153,0],[43,24,153,0,"exports"],[43,31,153,0],[44,4,153,0,"enumerable"],[44,14,153,0],[45,4,153,0,"get"],[45,7,153,0],[45,18,153,0,"get"],[45,19,153,0],[46,6,153,0],[46,13,153,0,"toJson"],[46,19,153,0],[47,4,153,0],[48,2,153,0],[49,2,175,0,"Object"],[49,8,175,0],[49,9,175,0,"defineProperty"],[49,23,175,0],[49,24,175,0,"exports"],[49,31,175,0],[50,4,175,0,"enumerable"],[50,14,175,0],[51,4,175,0,"get"],[51,7,175,0],[51,18,175,0,"get"],[51,19,175,0],[52,6,175,0],[52,13,175,0,"toArray"],[52,20,175,0],[53,4,175,0],[54,2,175,0],[55,2,205,0,"Object"],[55,8,205,0],[55,9,205,0,"defineProperty"],[55,23,205,0],[55,24,205,0,"exports"],[55,31,205,0],[56,4,205,0,"enumerable"],[56,14,205,0],[57,4,205,0,"get"],[57,7,205,0],[57,18,205,0,"get"],[57,19,205,0],[58,6,205,0],[58,13,205,0,"toTimestampString"],[58,30,205,0],[59,4,205,0],[60,2,205,0],[61,2,211,0,"Object"],[61,8,211,0],[61,9,211,0,"defineProperty"],[61,23,211,0],[61,24,211,0,"exports"],[61,31,211,0],[62,4,211,0,"enumerable"],[62,14,211,0],[63,4,211,0,"get"],[63,7,211,0],[63,18,211,0,"get"],[63,19,211,0],[64,6,211,0],[64,13,211,0,"httpEndpointURL"],[64,28,211,0],[65,4,211,0],[66,2,211,0],[67,2,1,0],[68,0,2,0],[69,0,3,0],[70,2,4,0],[71,2,5,0],[72,2,6,7],[72,6,6,11,"PostgresTypes"],[72,19,6,24],[73,2,7,0],[73,3,7,1],[73,13,7,11,"PostgresTypes"],[73,26,7,24],[73,28,7,26],[74,4,8,4,"PostgresTypes"],[74,17,8,17],[74,18,8,18],[74,27,8,27],[74,28,8,28],[74,31,8,31],[74,40,8,40],[75,4,9,4,"PostgresTypes"],[75,17,9,17],[75,18,9,18],[75,24,9,24],[75,25,9,25],[75,28,9,28],[75,34,9,34],[76,4,10,4,"PostgresTypes"],[76,17,10,17],[76,18,10,18],[76,24,10,24],[76,25,10,25],[76,28,10,28],[76,34,10,34],[77,4,11,4,"PostgresTypes"],[77,17,11,17],[77,18,11,18],[77,29,11,29],[77,30,11,30],[77,33,11,33],[77,44,11,44],[78,4,12,4,"PostgresTypes"],[78,17,12,17],[78,18,12,18],[78,26,12,26],[78,27,12,27],[78,30,12,30],[78,38,12,38],[79,4,13,4,"PostgresTypes"],[79,17,13,17],[79,18,13,18],[79,26,13,26],[79,27,13,27],[79,30,13,30],[79,38,13,38],[80,4,14,4,"PostgresTypes"],[80,17,14,17],[80,18,14,18],[80,24,14,24],[80,25,14,25],[80,28,14,28],[80,34,14,34],[81,4,15,4,"PostgresTypes"],[81,17,15,17],[81,18,15,18],[81,24,15,24],[81,25,15,25],[81,28,15,28],[81,34,15,34],[82,4,16,4,"PostgresTypes"],[82,17,16,17],[82,18,16,18],[82,29,16,29],[82,30,16,30],[82,33,16,33],[82,44,16,44],[83,4,17,4,"PostgresTypes"],[83,17,17,17],[83,18,17,18],[83,24,17,24],[83,25,17,25],[83,28,17,28],[83,34,17,34],[84,4,18,4,"PostgresTypes"],[84,17,18,17],[84,18,18,18],[84,29,18,29],[84,30,18,30],[84,33,18,33],[84,44,18,44],[85,4,19,4,"PostgresTypes"],[85,17,19,17],[85,18,19,18],[85,24,19,24],[85,25,19,25],[85,28,19,28],[85,34,19,34],[86,4,20,4,"PostgresTypes"],[86,17,20,17],[86,18,20,18],[86,25,20,25],[86,26,20,26],[86,29,20,29],[86,36,20,36],[87,4,21,4,"PostgresTypes"],[87,17,21,17],[87,18,21,18],[87,25,21,25],[87,26,21,26],[87,29,21,29],[87,36,21,36],[88,4,22,4,"PostgresTypes"],[88,17,22,17],[88,18,22,18],[88,27,22,27],[88,28,22,28],[88,31,22,31],[88,40,22,40],[89,4,23,4,"PostgresTypes"],[89,17,23,17],[89,18,23,18],[89,23,23,23],[89,24,23,24],[89,27,23,27],[89,32,23,32],[90,4,24,4,"PostgresTypes"],[90,17,24,17],[90,18,24,18],[90,27,24,27],[90,28,24,28],[90,31,24,31],[90,40,24,40],[91,4,25,4,"PostgresTypes"],[91,17,25,17],[91,18,25,18],[91,24,25,24],[91,25,25,25],[91,28,25,28],[91,34,25,34],[92,4,26,4,"PostgresTypes"],[92,17,26,17],[92,18,26,18],[92,24,26,24],[92,25,26,25],[92,28,26,28],[92,34,26,34],[93,4,27,4,"PostgresTypes"],[93,17,27,17],[93,18,27,18],[93,29,27,29],[93,30,27,30],[93,33,27,33],[93,44,27,44],[94,4,28,4,"PostgresTypes"],[94,17,28,17],[94,18,28,18],[94,31,28,31],[94,32,28,32],[94,35,28,35],[94,48,28,48],[95,4,29,4,"PostgresTypes"],[95,17,29,17],[95,18,29,18],[95,26,29,26],[95,27,29,27],[95,30,29,30],[95,38,29,38],[96,4,30,4,"PostgresTypes"],[96,17,30,17],[96,18,30,18],[96,27,30,27],[96,28,30,28],[96,31,30,31],[96,40,30,40],[97,4,31,4,"PostgresTypes"],[97,17,31,17],[97,18,31,18],[97,29,31,29],[97,30,31,30],[97,33,31,33],[97,44,31,44],[98,2,32,0],[98,3,32,1],[98,5,32,3,"PostgresTypes"],[98,18,32,16],[98,23,32,21,"PostgresTypes"],[98,36,32,34],[98,39,32,37],[98,40,32,38],[98,41,32,39],[98,42,32,40],[98,43,32,41],[99,2,33,0],[100,0,34,0],[101,0,35,0],[102,0,36,0],[103,0,37,0],[104,0,38,0],[105,0,39,0],[106,0,40,0],[107,0,41,0],[108,0,42,0],[109,0,43,0],[110,0,44,0],[111,2,45,7],[111,8,45,13,"convertChangeData"],[111,25,45,30],[111,28,45,33,"convertChangeData"],[111,29,45,34,"columns"],[111,36,45,41],[111,38,45,43,"record"],[111,44,45,49],[111,46,45,51,"options"],[111,53,45,58],[111,56,45,61],[111,57,45,62],[111,58,45,63],[111,63,45,68],[112,4,46,4],[112,8,46,8,"_a"],[112,10,46,10],[113,4,47,4],[113,10,47,10,"skipTypes"],[113,19,47,19],[113,22,47,22],[113,23,47,23,"_a"],[113,25,47,25],[113,28,47,28,"options"],[113,35,47,35],[113,36,47,36,"skipTypes"],[113,45,47,45],[113,51,47,51],[113,55,47,55],[113,59,47,59,"_a"],[113,61,47,61],[113,66,47,66],[113,71,47,71],[113,72,47,72],[113,75,47,75,"_a"],[113,77,47,77],[113,80,47,80],[113,82,47,82],[114,4,48,4],[114,11,48,11,"Object"],[114,17,48,17],[114,18,48,18,"keys"],[114,22,48,22],[114,23,48,23,"record"],[114,29,48,29],[114,30,48,30],[114,31,48,31,"reduce"],[114,37,48,37],[114,38,48,38],[114,39,48,39,"acc"],[114,42,48,42],[114,44,48,44,"rec_key"],[114,51,48,51],[114,56,48,56],[115,6,49,8,"acc"],[115,9,49,11],[115,10,49,12,"rec_key"],[115,17,49,19],[115,18,49,20],[115,21,49,23,"convertColumn"],[115,34,49,36],[115,35,49,37,"rec_key"],[115,42,49,44],[115,44,49,46,"columns"],[115,51,49,53],[115,53,49,55,"record"],[115,59,49,61],[115,61,49,63,"skipTypes"],[115,70,49,72],[115,71,49,73],[116,6,50,8],[116,13,50,15,"acc"],[116,16,50,18],[117,4,51,4],[117,5,51,5],[117,7,51,7],[117,8,51,8],[117,9,51,9],[117,10,51,10],[118,2,52,0],[118,3,52,1],[119,2,53,0],[120,0,54,0],[121,0,55,0],[122,0,56,0],[123,0,57,0],[124,0,58,0],[125,0,59,0],[126,0,60,0],[127,0,61,0],[128,0,62,0],[129,0,63,0],[130,0,64,0],[131,0,65,0],[132,0,66,0],[133,2,67,7],[133,8,67,13,"convertColumn"],[133,21,67,26],[133,24,67,29,"convertColumn"],[133,25,67,30,"columnName"],[133,35,67,40],[133,37,67,42,"columns"],[133,44,67,49],[133,46,67,51,"record"],[133,52,67,57],[133,54,67,59,"skipTypes"],[133,63,67,68],[133,68,67,73],[134,4,68,4],[134,10,68,10,"column"],[134,16,68,16],[134,19,68,19,"columns"],[134,26,68,26],[134,27,68,27,"find"],[134,31,68,31],[134,32,68,33,"x"],[134,33,68,34],[134,37,68,39,"x"],[134,38,68,40],[134,39,68,41,"name"],[134,43,68,45],[134,48,68,50,"columnName"],[134,58,68,60],[134,59,68,61],[135,4,69,4],[135,10,69,10,"colType"],[135,17,69,17],[135,20,69,20,"column"],[135,26,69,26],[135,31,69,31],[135,35,69,35],[135,39,69,39,"column"],[135,45,69,45],[135,50,69,50],[135,55,69,55],[135,56,69,56],[135,59,69,59],[135,64,69,64],[135,65,69,65],[135,68,69,68,"column"],[135,74,69,74],[135,75,69,75,"type"],[135,79,69,79],[136,4,70,4],[136,10,70,10,"value"],[136,15,70,15],[136,18,70,18,"record"],[136,24,70,24],[136,25,70,25,"columnName"],[136,35,70,35],[136,36,70,36],[137,4,71,4],[137,8,71,8,"colType"],[137,15,71,15],[137,19,71,19],[137,20,71,20,"skipTypes"],[137,29,71,29],[137,30,71,30,"includes"],[137,38,71,38],[137,39,71,39,"colType"],[137,46,71,46],[137,47,71,47],[137,49,71,49],[138,6,72,8],[138,13,72,15,"convertCell"],[138,24,72,26],[138,25,72,27,"colType"],[138,32,72,34],[138,34,72,36,"value"],[138,39,72,41],[138,40,72,42],[139,4,73,4],[140,4,74,4],[140,11,74,11,"noop"],[140,15,74,15],[140,16,74,16,"value"],[140,21,74,21],[140,22,74,22],[141,2,75,0],[141,3,75,1],[142,2,76,0],[143,0,77,0],[144,0,78,0],[145,0,79,0],[146,0,80,0],[147,0,81,0],[148,0,82,0],[149,0,83,0],[150,0,84,0],[151,0,85,0],[152,0,86,0],[153,0,87,0],[154,0,88,0],[155,2,89,7],[155,8,89,13,"convertCell"],[155,19,89,24],[155,22,89,27,"convertCell"],[155,23,89,28,"type"],[155,27,89,32],[155,29,89,34,"value"],[155,34,89,39],[155,39,89,44],[156,4,90,4],[157,4,91,4],[157,8,91,8,"type"],[157,12,91,12],[157,13,91,13,"charAt"],[157,19,91,19],[157,20,91,20],[157,21,91,21],[157,22,91,22],[157,27,91,27],[157,30,91,30],[157,32,91,32],[158,6,92,8],[158,12,92,14,"dataType"],[158,20,92,22],[158,23,92,25,"type"],[158,27,92,29],[158,28,92,30,"slice"],[158,33,92,35],[158,34,92,36],[158,35,92,37],[158,37,92,39,"type"],[158,41,92,43],[158,42,92,44,"length"],[158,48,92,50],[158,49,92,51],[159,6,93,8],[159,13,93,15,"toArray"],[159,20,93,22],[159,21,93,23,"value"],[159,26,93,28],[159,28,93,30,"dataType"],[159,36,93,38],[159,37,93,39],[160,4,94,4],[161,4,95,4],[162,4,96,4],[162,12,96,12,"type"],[162,16,96,16],[163,6,97,8],[163,11,97,13,"PostgresTypes"],[163,24,97,26],[163,25,97,27,"bool"],[163,29,97,31],[164,8,98,12],[164,15,98,19,"toBoolean"],[164,24,98,28],[164,25,98,29,"value"],[164,30,98,34],[164,31,98,35],[165,6,99,8],[165,11,99,13,"PostgresTypes"],[165,24,99,26],[165,25,99,27,"float4"],[165,31,99,33],[166,6,100,8],[166,11,100,13,"PostgresTypes"],[166,24,100,26],[166,25,100,27,"float8"],[166,31,100,33],[167,6,101,8],[167,11,101,13,"PostgresTypes"],[167,24,101,26],[167,25,101,27,"int2"],[167,29,101,31],[168,6,102,8],[168,11,102,13,"PostgresTypes"],[168,24,102,26],[168,25,102,27,"int4"],[168,29,102,31],[169,6,103,8],[169,11,103,13,"PostgresTypes"],[169,24,103,26],[169,25,103,27,"int8"],[169,29,103,31],[170,6,104,8],[170,11,104,13,"PostgresTypes"],[170,24,104,26],[170,25,104,27,"numeric"],[170,32,104,34],[171,6,105,8],[171,11,105,13,"PostgresTypes"],[171,24,105,26],[171,25,105,27,"oid"],[171,28,105,30],[172,8,106,12],[172,15,106,19,"toNumber"],[172,23,106,27],[172,24,106,28,"value"],[172,29,106,33],[172,30,106,34],[173,6,107,8],[173,11,107,13,"PostgresTypes"],[173,24,107,26],[173,25,107,27,"json"],[173,29,107,31],[174,6,108,8],[174,11,108,13,"PostgresTypes"],[174,24,108,26],[174,25,108,27,"jsonb"],[174,30,108,32],[175,8,109,12],[175,15,109,19,"toJson"],[175,21,109,25],[175,22,109,26,"value"],[175,27,109,31],[175,28,109,32],[176,6,110,8],[176,11,110,13,"PostgresTypes"],[176,24,110,26],[176,25,110,27,"timestamp"],[176,34,110,36],[177,8,111,12],[177,15,111,19,"toTimestampString"],[177,32,111,36],[177,33,111,37,"value"],[177,38,111,42],[177,39,111,43],[178,6,111,45],[179,6,112,8],[179,11,112,13,"PostgresTypes"],[179,24,112,26],[179,25,112,27,"abstime"],[179,32,112,34],[179,33,112,35],[179,34,112,36],[180,6,113,8],[180,11,113,13,"PostgresTypes"],[180,24,113,26],[180,25,113,27,"date"],[180,29,113,31],[180,30,113,32],[180,31,113,33],[181,6,114,8],[181,11,114,13,"PostgresTypes"],[181,24,114,26],[181,25,114,27,"daterange"],[181,34,114,36],[182,6,115,8],[182,11,115,13,"PostgresTypes"],[182,24,115,26],[182,25,115,27,"int4range"],[182,34,115,36],[183,6,116,8],[183,11,116,13,"PostgresTypes"],[183,24,116,26],[183,25,116,27,"int8range"],[183,34,116,36],[184,6,117,8],[184,11,117,13,"PostgresTypes"],[184,24,117,26],[184,25,117,27,"money"],[184,30,117,32],[185,6,118,8],[185,11,118,13,"PostgresTypes"],[185,24,118,26],[185,25,118,27,"reltime"],[185,32,118,34],[185,33,118,35],[185,34,118,36],[186,6,119,8],[186,11,119,13,"PostgresTypes"],[186,24,119,26],[186,25,119,27,"text"],[186,29,119,31],[187,6,120,8],[187,11,120,13,"PostgresTypes"],[187,24,120,26],[187,25,120,27,"time"],[187,29,120,31],[187,30,120,32],[187,31,120,33],[188,6,121,8],[188,11,121,13,"PostgresTypes"],[188,24,121,26],[188,25,121,27,"timestamptz"],[188,36,121,38],[188,37,121,39],[188,38,121,40],[189,6,122,8],[189,11,122,13,"PostgresTypes"],[189,24,122,26],[189,25,122,27,"timetz"],[189,31,122,33],[189,32,122,34],[189,33,122,35],[190,6,123,8],[190,11,123,13,"PostgresTypes"],[190,24,123,26],[190,25,123,27,"tsrange"],[190,32,123,34],[191,6,124,8],[191,11,124,13,"PostgresTypes"],[191,24,124,26],[191,25,124,27,"tstzrange"],[191,34,124,36],[192,8,125,12],[192,15,125,19,"noop"],[192,19,125,23],[192,20,125,24,"value"],[192,25,125,29],[192,26,125,30],[193,6,126,8],[194,8,127,12],[195,8,128,12],[195,15,128,19,"noop"],[195,19,128,23],[195,20,128,24,"value"],[195,25,128,29],[195,26,128,30],[196,4,129,4],[197,2,130,0],[197,3,130,1],[198,2,131,0],[198,8,131,6,"noop"],[198,12,131,10],[198,15,131,14,"value"],[198,20,131,19],[198,24,131,24],[199,4,132,4],[199,11,132,11,"value"],[199,16,132,16],[200,2,133,0],[200,3,133,1],[201,2,134,7],[201,8,134,13,"toBoolean"],[201,17,134,22],[201,20,134,26,"value"],[201,25,134,31],[201,29,134,36],[202,4,135,4],[202,12,135,12,"value"],[202,17,135,17],[203,6,136,8],[203,11,136,13],[203,14,136,16],[204,8,137,12],[204,15,137,19],[204,19,137,23],[205,6,138,8],[205,11,138,13],[205,14,138,16],[206,8,139,12],[206,15,139,19],[206,20,139,24],[207,6,140,8],[208,8,141,12],[208,15,141,19,"value"],[208,20,141,24],[209,4,142,4],[210,2,143,0],[210,3,143,1],[211,2,144,7],[211,8,144,13,"toNumber"],[211,16,144,21],[211,19,144,25,"value"],[211,24,144,30],[211,28,144,35],[212,4,145,4],[212,8,145,8],[212,15,145,15,"value"],[212,20,145,20],[212,25,145,25],[212,33,145,33],[212,35,145,35],[213,6,146,8],[213,12,146,14,"parsedValue"],[213,23,146,25],[213,26,146,28,"parseFloat"],[213,36,146,38],[213,37,146,39,"value"],[213,42,146,44],[213,43,146,45],[214,6,147,8],[214,10,147,12],[214,11,147,13,"Number"],[214,17,147,19],[214,18,147,20,"isNaN"],[214,23,147,25],[214,24,147,26,"parsedValue"],[214,35,147,37],[214,36,147,38],[214,38,147,40],[215,8,148,12],[215,15,148,19,"parsedValue"],[215,26,148,30],[216,6,149,8],[217,4,150,4],[218,4,151,4],[218,11,151,11,"value"],[218,16,151,16],[219,2,152,0],[219,3,152,1],[220,2,153,7],[220,8,153,13,"toJson"],[220,14,153,19],[220,17,153,23,"value"],[220,22,153,28],[220,26,153,33],[221,4,154,4],[221,8,154,8],[221,15,154,15,"value"],[221,20,154,20],[221,25,154,25],[221,33,154,33],[221,35,154,35],[222,6,155,8],[222,10,155,12],[223,8,156,12],[223,15,156,19,"JSON"],[223,19,156,23],[223,20,156,24,"parse"],[223,25,156,29],[223,26,156,30,"value"],[223,31,156,35],[223,32,156,36],[224,6,157,8],[224,7,157,9],[224,8,158,8],[224,15,158,15,"error"],[224,20,158,20],[224,22,158,22],[225,8,159,12,"console"],[225,15,159,19],[225,16,159,20,"log"],[225,19,159,23],[225,20,159,24],[225,41,159,45,"error"],[225,46,159,50],[225,48,159,52],[225,49,159,53],[226,8,160,12],[226,15,160,19,"value"],[226,20,160,24],[227,6,161,8],[228,4,162,4],[229,4,163,4],[229,11,163,11,"value"],[229,16,163,16],[230,2,164,0],[230,3,164,1],[231,2,165,0],[232,0,166,0],[233,0,167,0],[234,0,168,0],[235,0,169,0],[236,0,170,0],[237,0,171,0],[238,0,172,0],[239,0,173,0],[240,0,174,0],[241,2,175,7],[241,8,175,13,"toArray"],[241,15,175,20],[241,18,175,23,"toArray"],[241,19,175,24,"value"],[241,24,175,29],[241,26,175,31,"type"],[241,30,175,35],[241,35,175,40],[242,4,176,4],[242,8,176,8],[242,15,176,15,"value"],[242,20,176,20],[242,25,176,25],[242,33,176,33],[242,35,176,35],[243,6,177,8],[243,13,177,15,"value"],[243,18,177,20],[244,4,178,4],[245,4,179,4],[245,10,179,10,"lastIdx"],[245,17,179,17],[245,20,179,20,"value"],[245,25,179,25],[245,26,179,26,"length"],[245,32,179,32],[245,35,179,35],[245,36,179,36],[246,4,180,4],[246,10,180,10,"closeBrace"],[246,20,180,20],[246,23,180,23,"value"],[246,28,180,28],[246,29,180,29,"lastIdx"],[246,36,180,36],[246,37,180,37],[247,4,181,4],[247,10,181,10,"openBrace"],[247,19,181,19],[247,22,181,22,"value"],[247,27,181,27],[247,28,181,28],[247,29,181,29],[247,30,181,30],[248,4,182,4],[249,4,183,4],[249,8,183,8,"openBrace"],[249,17,183,17],[249,22,183,22],[249,25,183,25],[249,29,183,29,"closeBrace"],[249,39,183,39],[249,44,183,44],[249,47,183,47],[249,49,183,49],[250,6,184,8],[250,10,184,12,"arr"],[250,13,184,15],[251,6,185,8],[251,12,185,14,"valTrim"],[251,19,185,21],[251,22,185,24,"value"],[251,27,185,29],[251,28,185,30,"slice"],[251,33,185,35],[251,34,185,36],[251,35,185,37],[251,37,185,39,"lastIdx"],[251,44,185,46],[251,45,185,47],[252,6,186,8],[253,6,187,8],[253,10,187,12],[254,8,188,12,"arr"],[254,11,188,15],[254,14,188,18,"JSON"],[254,18,188,22],[254,19,188,23,"parse"],[254,24,188,28],[254,25,188,29],[254,28,188,32],[254,31,188,35,"valTrim"],[254,38,188,42],[254,41,188,45],[254,44,188,48],[254,45,188,49],[255,6,189,8],[255,7,189,9],[255,8,190,8],[255,15,190,15,"_"],[255,16,190,16],[255,18,190,18],[256,8,191,12],[257,8,192,12,"arr"],[257,11,192,15],[257,14,192,18,"valTrim"],[257,21,192,25],[257,24,192,28,"valTrim"],[257,31,192,35],[257,32,192,36,"split"],[257,37,192,41],[257,38,192,42],[257,41,192,45],[257,42,192,46],[257,45,192,49],[257,47,192,51],[258,6,193,8],[259,6,194,8],[259,13,194,15,"arr"],[259,16,194,18],[259,17,194,19,"map"],[259,20,194,22],[259,21,194,24,"val"],[259,24,194,27],[259,28,194,32,"convertCell"],[259,39,194,43],[259,40,194,44,"type"],[259,44,194,48],[259,46,194,50,"val"],[259,49,194,53],[259,50,194,54],[259,51,194,55],[260,4,195,4],[261,4,196,4],[261,11,196,11,"value"],[261,16,196,16],[262,2,197,0],[262,3,197,1],[263,2,198,0],[264,0,199,0],[265,0,200,0],[266,0,201,0],[267,0,202,0],[268,0,203,0],[269,0,204,0],[270,2,205,7],[270,8,205,13,"toTimestampString"],[270,25,205,30],[270,28,205,34,"value"],[270,33,205,39],[270,37,205,44],[271,4,206,4],[271,8,206,8],[271,15,206,15,"value"],[271,20,206,20],[271,25,206,25],[271,33,206,33],[271,35,206,35],[272,6,207,8],[272,13,207,15,"value"],[272,18,207,20],[272,19,207,21,"replace"],[272,26,207,28],[272,27,207,29],[272,30,207,32],[272,32,207,34],[272,35,207,37],[272,36,207,38],[273,4,208,4],[274,4,209,4],[274,11,209,11,"value"],[274,16,209,16],[275,2,210,0],[275,3,210,1],[276,2,211,7],[276,8,211,13,"httpEndpointURL"],[276,23,211,28],[276,26,211,32,"socketUrl"],[276,35,211,41],[276,39,211,46],[277,4,212,4],[277,8,212,8,"url"],[277,11,212,11],[277,14,212,14,"socketUrl"],[277,23,212,23],[278,4,213,4,"url"],[278,7,213,7],[278,10,213,10,"url"],[278,13,213,13],[278,14,213,14,"replace"],[278,21,213,21],[278,22,213,22],[278,28,213,28],[278,30,213,30],[278,36,213,36],[278,37,213,37],[279,4,214,4,"url"],[279,7,214,7],[279,10,214,10,"url"],[279,13,214,13],[279,14,214,14,"replace"],[279,21,214,21],[279,22,214,22],[279,71,214,71],[279,73,214,73],[279,75,214,75],[279,76,214,76],[280,4,215,4],[280,11,215,11,"url"],[280,14,215,14],[280,15,215,15,"replace"],[280,22,215,22],[280,23,215,23],[280,29,215,29],[280,31,215,31],[280,33,215,33],[280,34,215,34],[280,37,215,37],[280,53,215,53],[281,2,216,0],[281,3,216,1],[282,0,216,2],[282,3]],"functionMap":{"names":["<global>","<anonymous>","convertChangeData","Object.keys.reduce$argument_0","convertColumn","columns.find$argument_0","convertCell","noop","toBoolean","toNumber","toJson","toArray","arr.map$argument_0","toTimestampString","httpEndpointURL"],"mappings":"AAA;CCM;CDyB;iCEa;sCCG;KDG;CFC;6BIe;gCCC,4BD;CJO;2BMc;CNyC;aOC;CPE;yBQC;CRS;wBSC;CTQ;sBUC;CVW;uBWW;uBCmB,+BD;CXG;iCaQ;CbK;+BcC;CdK"},"hasCjsExports":false},"type":"js/module"}]}